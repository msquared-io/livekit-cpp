// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_models.proto
// Protobuf C++ Version: 6.30.1

#include "livekit_models.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace livekit {

inline constexpr VideoLayer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        quality_{static_cast< ::livekit::VideoQuality >(0)},
        width_{0u},
        height_{0u},
        bitrate_{0u},
        ssrc_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR VideoLayer::VideoLayer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VideoLayer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VideoLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoLayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoLayerDefaultTypeInternal() {}
  union {
    VideoLayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoLayerDefaultTypeInternal _VideoLayer_default_instance_;

inline constexpr VideoConfiguration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        hardware_encoder_{static_cast< ::livekit::ClientConfigSetting >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR VideoConfiguration::VideoConfiguration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VideoConfiguration_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VideoConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoConfigurationDefaultTypeInternal() {}
  union {
    VideoConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoConfigurationDefaultTypeInternal _VideoConfiguration_default_instance_;

inline constexpr VP8MungerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ext_last_picture_id_{0},
        last_tl0_pic_idx_{0u},
        picture_id_used_{false},
        tl0_pic_idx_used_{false},
        tid_used_{false},
        key_idx_used_{false},
        last_key_idx_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR VP8MungerState::VP8MungerState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VP8MungerState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VP8MungerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VP8MungerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VP8MungerStateDefaultTypeInternal() {}
  union {
    VP8MungerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VP8MungerStateDefaultTypeInternal _VP8MungerState_default_instance_;

inline constexpr UserPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        destination_sids_{},
        destination_identities_{},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nonce_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{::uint64_t{0u}},
        end_time_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR UserPacket::UserPacket(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UserPacket_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UserPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPacketDefaultTypeInternal() {}
  union {
    UserPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPacketDefaultTypeInternal _UserPacket_default_instance_;

inline constexpr TranscriptionSegment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        language_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{::uint64_t{0u}},
        end_time_{::uint64_t{0u}},
        final_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TranscriptionSegment::TranscriptionSegment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TranscriptionSegment_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TranscriptionSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionSegmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionSegmentDefaultTypeInternal() {}
  union {
    TranscriptionSegment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionSegmentDefaultTypeInternal _TranscriptionSegment_default_instance_;

inline constexpr TimedVersion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        unix_micro_{::int64_t{0}},
        ticks_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TimedVersion::TimedVersion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TimedVersion_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimedVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedVersionDefaultTypeInternal() {}
  union {
    TimedVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedVersionDefaultTypeInternal _TimedVersion_default_instance_;

inline constexpr SpeakerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level_{0},
        active_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SpeakerInfo::SpeakerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SpeakerInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpeakerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakerInfoDefaultTypeInternal() {}
  union {
    SpeakerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakerInfoDefaultTypeInternal _SpeakerInfo_default_instance_;

inline constexpr SipDTMF::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        digit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SipDTMF::SipDTMF(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SipDTMF_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SipDTMFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SipDTMFDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SipDTMFDefaultTypeInternal() {}
  union {
    SipDTMF _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SipDTMFDefaultTypeInternal _SipDTMF_default_instance_;

inline constexpr ServerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        node_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        debug_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        edition_{static_cast< ::livekit::ServerInfo_Edition >(0)},
        protocol_{0},
        agent_protocol_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ServerInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;

inline constexpr RpcRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        response_timeout_ms_{0u},
        version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RpcRequest::RpcRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RpcRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestDefaultTypeInternal() {}
  union {
    RpcRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;

inline constexpr RpcError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RpcError::RpcError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RpcError_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcErrorDefaultTypeInternal() {}
  union {
    RpcError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcErrorDefaultTypeInternal _RpcError_default_instance_;

inline constexpr RpcAck::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        request_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR RpcAck::RpcAck(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RpcAck_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcAckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcAckDefaultTypeInternal() {}
  union {
    RpcAck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcAckDefaultTypeInternal _RpcAck_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : RTPStats_GapHistogramEntry_DoNotUse::MapEntry(RTPStats_GapHistogramEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : RTPStats_GapHistogramEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RTPStats_GapHistogramEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal _RTPStats_GapHistogramEntry_DoNotUse_default_instance_;

inline constexpr RTPMungerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ext_last_sequence_number_{::uint64_t{0u}},
        ext_second_last_sequence_number_{::uint64_t{0u}},
        ext_last_timestamp_{::uint64_t{0u}},
        ext_second_last_timestamp_{::uint64_t{0u}},
        last_marker_{false},
        second_last_marker_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RTPMungerState::RTPMungerState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RTPMungerState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RTPMungerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPMungerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPMungerStateDefaultTypeInternal() {}
  union {
    RTPMungerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPMungerStateDefaultTypeInternal _RTPMungerState_default_instance_;

inline constexpr RTCPSenderReportState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rtp_timestamp_ext_{::uint64_t{0u}},
        ntp_timestamp_{::uint64_t{0u}},
        rtp_timestamp_{0u},
        packets_{0u},
        at_{::int64_t{0}},
        at_adjusted_{::int64_t{0}},
        octets_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR RTCPSenderReportState::RTCPSenderReportState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RTCPSenderReportState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RTCPSenderReportStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTCPSenderReportStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTCPSenderReportStateDefaultTypeInternal() {}
  union {
    RTCPSenderReportState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTCPSenderReportStateDefaultTypeInternal _RTCPSenderReportState_default_instance_;

inline constexpr PlayoutDelay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enabled_{false},
        min_{0u},
        max_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR PlayoutDelay::PlayoutDelay(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PlayoutDelay_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayoutDelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayoutDelayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayoutDelayDefaultTypeInternal() {}
  union {
    PlayoutDelay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayoutDelayDefaultTypeInternal _PlayoutDelay_default_instance_;

inline constexpr ParticipantTracks::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sids_{},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ParticipantTracks::ParticipantTracks(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ParticipantTracks_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParticipantTracksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantTracksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantTracksDefaultTypeInternal() {}
  union {
    ParticipantTracks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantTracksDefaultTypeInternal _ParticipantTracks_default_instance_;

inline constexpr ParticipantPermission::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        can_publish_sources_{},
        _can_publish_sources_cached_byte_size_{0},
        can_subscribe_{false},
        can_publish_{false},
        can_publish_data_{false},
        hidden_{false},
        recorder_{false},
        can_update_metadata_{false},
        agent_{false},
        can_subscribe_metrics_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ParticipantPermission::ParticipantPermission(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ParticipantPermission_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParticipantPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantPermissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantPermissionDefaultTypeInternal() {}
  union {
    ParticipantPermission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantPermissionDefaultTypeInternal _ParticipantPermission_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ParticipantInfo_AttributesEntry_DoNotUse::MapEntry(ParticipantInfo_AttributesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ParticipantInfo_AttributesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ParticipantInfo_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal _ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;

inline constexpr Pagination::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        after_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        limit_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Pagination::Pagination(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Pagination_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PaginationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationDefaultTypeInternal() {}
  union {
    Pagination _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationDefaultTypeInternal _Pagination_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Encryption::Encryption(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(Encryption_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EncryptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptionDefaultTypeInternal() {}
  union {
    Encryption _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptionDefaultTypeInternal _Encryption_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : DataStream_Trailer_AttributesEntry_DoNotUse::MapEntry(DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : DataStream_Trailer_AttributesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Trailer_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_;

inline constexpr DataStream_TextHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attached_stream_ids_{},
        reply_to_stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operation_type_{static_cast< ::livekit::DataStream_OperationType >(0)},
        version_{0},
        generated_{false} {}

template <typename>
PROTOBUF_CONSTEXPR DataStream_TextHeader::DataStream_TextHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataStream_TextHeader_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataStream_TextHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TextHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TextHeaderDefaultTypeInternal() {}
  union {
    DataStream_TextHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TextHeaderDefaultTypeInternal _DataStream_TextHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : DataStream_Header_AttributesEntry_DoNotUse::MapEntry(DataStream_Header_AttributesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : DataStream_Header_AttributesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataStream_Header_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Header_AttributesEntry_DoNotUse_default_instance_;

inline constexpr DataStream_Chunk::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iv_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chunk_index_{::uint64_t{0u}},
        version_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DataStream_Chunk::DataStream_Chunk(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataStream_Chunk_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataStream_ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ChunkDefaultTypeInternal() {}
  union {
    DataStream_Chunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ChunkDefaultTypeInternal _DataStream_Chunk_default_instance_;

inline constexpr DataStream_ByteHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR DataStream_ByteHeader::DataStream_ByteHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataStream_ByteHeader_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataStream_ByteHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_ByteHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_ByteHeaderDefaultTypeInternal() {}
  union {
    DataStream_ByteHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_ByteHeaderDefaultTypeInternal _DataStream_ByteHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DataStream::DataStream(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(DataStream_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStreamDefaultTypeInternal() {}
  union {
    DataStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStreamDefaultTypeInternal _DataStream_default_instance_;

inline constexpr Codec::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mime_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        fmtp_line_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR Codec::Codec(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Codec_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodecDefaultTypeInternal() {}
  union {
    Codec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodecDefaultTypeInternal _Codec_default_instance_;

inline constexpr ClientInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        os_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        os_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_model_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        browser_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        browser_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        network_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        other_sdks_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sdk_{static_cast< ::livekit::ClientInfo_SDK >(0)},
        protocol_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClientInfo::ClientInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ClientInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;

inline constexpr ChatMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        edit_timestamp_{::int64_t{0}},
        deleted_{false},
        generated_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ChatMessage_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;

inline constexpr Transcription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        segments_{},
        transcribed_participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        track_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR Transcription::Transcription(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Transcription_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TranscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranscriptionDefaultTypeInternal() {}
  union {
    Transcription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranscriptionDefaultTypeInternal _Transcription_default_instance_;

inline constexpr SimulcastCodecInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layers_{},
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SimulcastCodecInfo::SimulcastCodecInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SimulcastCodecInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimulcastCodecInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulcastCodecInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulcastCodecInfoDefaultTypeInternal() {}
  union {
    SimulcastCodecInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulcastCodecInfoDefaultTypeInternal _SimulcastCodecInfo_default_instance_;

inline constexpr RpcResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        request_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RpcResponse::RpcResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RpcResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RpcResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseDefaultTypeInternal() {}
  union {
    RpcResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;

inline constexpr Room::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        enabled_codecs_{},
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        turn_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr},
        empty_timeout_{0u},
        max_participants_{0u},
        creation_time_{::int64_t{0}},
        num_participants_{0u},
        active_recording_{false},
        num_publishers_{0u},
        departure_timeout_{0u},
        creation_time_ms_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Room::Room(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Room_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;

inline constexpr RTPForwarderState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sender_report_state_{},
        rtp_munger_{nullptr},
        started_{false},
        reference_layer_spatial_{0},
        pre_start_time_{::int64_t{0}},
        ext_first_timestamp_{::uint64_t{0u}},
        dummy_start_timestamp_offset_{::uint64_t{0u}},
        codec_munger_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RTPForwarderState::RTPForwarderState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RTPForwarderState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RTPForwarderStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPForwarderStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPForwarderStateDefaultTypeInternal() {}
  union {
    RTPForwarderState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPForwarderStateDefaultTypeInternal _RTPForwarderState_default_instance_;

inline constexpr RTPDrift::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_time_{nullptr},
        end_time_{nullptr},
        duration_{0},
        start_timestamp_{::uint64_t{0u}},
        end_timestamp_{::uint64_t{0u}},
        rtp_clock_ticks_{::uint64_t{0u}},
        drift_samples_{::int64_t{0}},
        drift_ms_{0},
        clock_rate_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RTPDrift::RTPDrift(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RTPDrift_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RTPDriftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPDriftDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPDriftDefaultTypeInternal() {}
  union {
    RTPDrift _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPDriftDefaultTypeInternal _RTPDrift_default_instance_;

inline constexpr DisabledCodecs::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : codecs_{},
        publish_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DisabledCodecs::DisabledCodecs(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DisabledCodecs_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DisabledCodecsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisabledCodecsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisabledCodecsDefaultTypeInternal() {}
  union {
    DisabledCodecs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisabledCodecsDefaultTypeInternal _DisabledCodecs_default_instance_;

inline constexpr DataStream_Trailer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR DataStream_Trailer::DataStream_Trailer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataStream_Trailer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataStream_TrailerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_TrailerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_TrailerDefaultTypeInternal() {}
  union {
    DataStream_Trailer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_TrailerDefaultTypeInternal _DataStream_Trailer_default_instance_;

inline constexpr DataStream_Header::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        stream_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{::int64_t{0}},
        total_length_{::uint64_t{0u}},
        encryption_type_{static_cast< ::livekit::Encryption_Type >(0)},
        content_header_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DataStream_Header::DataStream_Header(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataStream_Header_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataStream_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataStream_HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataStream_HeaderDefaultTypeInternal() {}
  union {
    DataStream_Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataStream_HeaderDefaultTypeInternal _DataStream_Header_default_instance_;

inline constexpr ActiveSpeakerUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : speakers_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActiveSpeakerUpdate::ActiveSpeakerUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ActiveSpeakerUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ActiveSpeakerUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveSpeakerUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveSpeakerUpdateDefaultTypeInternal() {}
  union {
    ActiveSpeakerUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveSpeakerUpdateDefaultTypeInternal _ActiveSpeakerUpdate_default_instance_;

inline constexpr TrackInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layers_{},
        codecs_{},
        audio_features_{},
        _audio_features_cached_byte_size_{0},
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr},
        type_{static_cast< ::livekit::TrackType >(0)},
        width_{0u},
        height_{0u},
        muted_{false},
        simulcast_{false},
        disable_dtx_{false},
        stereo_{false},
        source_{static_cast< ::livekit::TrackSource >(0)},
        disable_red_{false},
        encryption_{static_cast< ::livekit::Encryption_Type >(0)},
        backup_codec_policy_{static_cast< ::livekit::BackupCodecPolicy >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TrackInfo::TrackInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackInfoDefaultTypeInternal() {}
  union {
    TrackInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackInfoDefaultTypeInternal _TrackInfo_default_instance_;

inline constexpr RTPStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gap_histogram_{},
        start_time_{nullptr},
        end_time_{nullptr},
        last_pli_{nullptr},
        last_fir_{nullptr},
        last_key_frame_{nullptr},
        last_layer_lock_pli_{nullptr},
        packet_drift_{nullptr},
        ntp_report_drift_{nullptr},
        rebased_report_drift_{nullptr},
        received_report_drift_{nullptr},
        duration_{0},
        packet_rate_{0},
        bytes_{::uint64_t{0u}},
        packets_{0u},
        packets_lost_{0u},
        bitrate_{0},
        packet_loss_rate_{0},
        packet_loss_percentage_{0},
        packets_duplicate_{0u},
        packet_duplicate_rate_{0},
        bytes_duplicate_{::uint64_t{0u}},
        bitrate_duplicate_{0},
        packet_padding_rate_{0},
        bytes_padding_{::uint64_t{0u}},
        packets_padding_{0u},
        packets_out_of_order_{0u},
        bitrate_padding_{0},
        frame_rate_{0},
        jitter_current_{0},
        frames_{0u},
        nacks_{0u},
        jitter_max_{0},
        nack_misses_{0u},
        plis_{0u},
        firs_{0u},
        rtt_current_{0u},
        rtt_max_{0u},
        key_frames_{0u},
        layer_lock_plis_{0u},
        nack_acks_{0u},
        header_bytes_{::uint64_t{0u}},
        header_bytes_duplicate_{::uint64_t{0u}},
        header_bytes_padding_{::uint64_t{0u}},
        nack_repeated_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR RTPStats::RTPStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RTPStats_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RTPStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTPStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTPStatsDefaultTypeInternal() {}
  union {
    RTPStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTPStatsDefaultTypeInternal _RTPStats_default_instance_;

inline constexpr ClientConfiguration::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        video_{nullptr},
        screen_{nullptr},
        disabled_codecs_{nullptr},
        resume_connection_{static_cast< ::livekit::ClientConfigSetting >(0)},
        force_relay_{static_cast< ::livekit::ClientConfigSetting >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ClientConfiguration::ClientConfiguration(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ClientConfiguration_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClientConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConfigurationDefaultTypeInternal() {}
  union {
    ClientConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;

inline constexpr ParticipantInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tracks_{},
        attributes_{},
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        permission_{nullptr},
        joined_at_{::int64_t{0}},
        state_{static_cast< ::livekit::ParticipantInfo_State >(0)},
        version_{0u},
        is_publisher_{false},
        kind_{static_cast< ::livekit::ParticipantInfo_Kind >(0)},
        joined_at_ms_{::int64_t{0}},
        disconnect_reason_{static_cast< ::livekit::DisconnectReason >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ParticipantInfo::ParticipantInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ParticipantInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParticipantInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantInfoDefaultTypeInternal() {}
  union {
    ParticipantInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;

inline constexpr DataPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        destination_identities_{},
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        kind_{static_cast< ::livekit::DataPacket_Kind >(0)},
        value_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DataPacket::DataPacket(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataPacket_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketDefaultTypeInternal _DataPacket_default_instance_;
}  // namespace livekit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_livekit_5fmodels_2eproto[20];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_livekit_5fmodels_2eproto = nullptr;
const ::uint32_t
    TableStruct_livekit_5fmodels_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _impl_.after_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::Pagination, _impl_.limit_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.empty_timeout_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.departure_timeout_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.max_participants_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.creation_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.creation_time_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.turn_password_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.enabled_codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.num_participants_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.num_publishers_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.active_recording_),
        PROTOBUF_FIELD_OFFSET(::livekit::Room, _impl_.version_),
        0,
        1,
        5,
        11,
        6,
        7,
        12,
        2,
        ~0u,
        3,
        8,
        10,
        9,
        4,
        PROTOBUF_FIELD_OFFSET(::livekit::Codec, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Codec, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Codec, _impl_.mime_),
        PROTOBUF_FIELD_OFFSET(::livekit::Codec, _impl_.fmtp_line_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.enabled_),
        PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.min_),
        PROTOBUF_FIELD_OFFSET(::livekit::PlayoutDelay, _impl_.max_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_subscribe_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_data_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_publish_sources_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.hidden_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.recorder_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_update_metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.agent_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantPermission, _impl_.can_subscribe_metrics_),
        0,
        1,
        2,
        ~0u,
        3,
        4,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo_AttributesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.tracks_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.joined_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.joined_at_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.permission_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.is_publisher_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantInfo, _impl_.disconnect_reason_),
        0,
        1,
        7,
        ~0u,
        2,
        6,
        11,
        3,
        8,
        5,
        4,
        9,
        10,
        ~0u,
        12,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::Encryption, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.mid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.cid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodecInfo, _impl_.layers_),
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.muted_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.simulcast_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.disable_dtx_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.layers_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.mid_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.stereo_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.disable_red_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.encryption_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.stream_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.audio_features_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackInfo, _impl_.backup_codec_policy_),
        0,
        6,
        1,
        9,
        7,
        8,
        10,
        11,
        13,
        ~0u,
        2,
        3,
        ~0u,
        12,
        14,
        15,
        4,
        5,
        ~0u,
        16,
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoLayer, _impl_.ssrc_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.kind_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.destination_identities_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_.value_),
        1,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ActiveSpeakerUpdate, _impl_.speakers_),
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakerInfo, _impl_.active_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.payload_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.destination_sids_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.destination_identities_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.topic_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::UserPacket, _impl_.nonce_),
        0,
        3,
        1,
        ~0u,
        ~0u,
        2,
        4,
        6,
        7,
        5,
        PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _impl_.code_),
        PROTOBUF_FIELD_OFFSET(::livekit::SipDTMF, _impl_.digit_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.transcribed_participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.track_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::Transcription, _impl_.segments_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.text_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.final_),
        PROTOBUF_FIELD_OFFSET(::livekit::TranscriptionSegment, _impl_.language_),
        0,
        1,
        3,
        4,
        5,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.edit_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.deleted_),
        PROTOBUF_FIELD_OFFSET(::livekit::ChatMessage, _impl_.generated_),
        0,
        2,
        3,
        1,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.method_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.payload_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.response_timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcRequest, _impl_.version_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::livekit::RpcAck, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcAck, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RpcAck, _impl_.request_id_),
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_.request_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_.value_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.code_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::livekit::RpcError, _impl_.data_),
        2,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantTracks, _impl_.track_sids_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.edition_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.node_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.debug_info_),
        PROTOBUF_FIELD_OFFSET(::livekit::ServerInfo, _impl_.agent_protocol_),
        4,
        0,
        5,
        1,
        2,
        3,
        6,
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.sdk_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.os_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.os_version_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.device_model_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.browser_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.browser_version_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.address_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.network_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientInfo, _impl_.other_sdks_),
        9,
        0,
        10,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.video_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.screen_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.resume_connection_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.disabled_codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::ClientConfiguration, _impl_.force_relay_),
        0,
        1,
        3,
        2,
        4,
        PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::VideoConfiguration, _impl_.hardware_encoder_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _impl_.codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::DisabledCodecs, _impl_.publish_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.start_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.end_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.rtp_clock_ticks_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.drift_samples_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.drift_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPDrift, _impl_.clock_rate_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats_GapHistogramEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_lost_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_loss_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_loss_percentage_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_duplicate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_duplicate_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_duplicate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_duplicate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_duplicate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_padding_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_padding_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bytes_padding_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.header_bytes_padding_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.bitrate_padding_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packets_out_of_order_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.frames_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.frame_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.jitter_current_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.jitter_max_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.gap_histogram_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nacks_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_acks_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_misses_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.nack_repeated_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.plis_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_pli_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.firs_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_fir_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rtt_current_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rtt_max_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.key_frames_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_key_frame_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.layer_lock_plis_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.last_layer_lock_pli_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.packet_drift_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.ntp_report_drift_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.rebased_report_drift_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPStats, _impl_.received_report_drift_),
        0,
        1,
        10,
        13,
        11,
        12,
        40,
        15,
        14,
        16,
        17,
        18,
        19,
        20,
        41,
        21,
        24,
        22,
        23,
        42,
        26,
        25,
        29,
        27,
        28,
        31,
        ~0u,
        30,
        39,
        32,
        43,
        33,
        2,
        34,
        3,
        35,
        36,
        37,
        4,
        38,
        5,
        6,
        7,
        8,
        9,
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.rtp_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.rtp_timestamp_ext_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.ntp_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.at_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.at_adjusted_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.packets_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTCPSenderReportState, _impl_.octets_),
        2,
        0,
        1,
        4,
        5,
        3,
        6,
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.started_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.reference_layer_spatial_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.pre_start_time_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.ext_first_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.dummy_start_timestamp_offset_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.rtp_munger_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.sender_report_state_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_.codec_munger_),
        1,
        2,
        3,
        4,
        5,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_last_sequence_number_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_second_last_sequence_number_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_last_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.ext_second_last_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.last_marker_),
        PROTOBUF_FIELD_OFFSET(::livekit::RTPMungerState, _impl_.second_last_marker_),
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.ext_last_picture_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.picture_id_used_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.last_tl0_pic_idx_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.tl0_pic_idx_used_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.tid_used_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.last_key_idx_),
        PROTOBUF_FIELD_OFFSET(::livekit::VP8MungerState, _impl_.key_idx_used_),
        0,
        2,
        1,
        3,
        4,
        6,
        5,
        PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _impl_.unix_micro_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimedVersion, _impl_.ticks_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.operation_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.reply_to_stream_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.attached_stream_ids_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_TextHeader, _impl_.generated_),
        1,
        2,
        0,
        ~0u,
        3,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_ByteHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_ByteHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_ByteHeader, _impl_.name_),
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header_AttributesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.topic_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.total_length_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.encryption_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.attributes_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_.content_header_),
        0,
        3,
        1,
        2,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.chunk_index_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.content_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Chunk, _impl_.iv_),
        0,
        3,
        1,
        4,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.stream_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Trailer, _impl_.attributes_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::DataStream, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::livekit::Pagination)},
        {12, 34, -1, sizeof(::livekit::Room)},
        {48, 58, -1, sizeof(::livekit::Codec)},
        {60, 71, -1, sizeof(::livekit::PlayoutDelay)},
        {74, 91, -1, sizeof(::livekit::ParticipantPermission)},
        {100, 110, -1, sizeof(::livekit::ParticipantInfo_AttributesEntry_DoNotUse)},
        {112, 135, -1, sizeof(::livekit::ParticipantInfo)},
        {150, -1, -1, sizeof(::livekit::Encryption)},
        {158, 170, -1, sizeof(::livekit::SimulcastCodecInfo)},
        {174, 202, -1, sizeof(::livekit::TrackInfo)},
        {222, 235, -1, sizeof(::livekit::VideoLayer)},
        {240, 264, -1, sizeof(::livekit::DataPacket)},
        {279, -1, -1, sizeof(::livekit::ActiveSpeakerUpdate)},
        {288, 299, -1, sizeof(::livekit::SpeakerInfo)},
        {302, 320, -1, sizeof(::livekit::UserPacket)},
        {330, 340, -1, sizeof(::livekit::SipDTMF)},
        {342, 353, -1, sizeof(::livekit::Transcription)},
        {356, 370, -1, sizeof(::livekit::TranscriptionSegment)},
        {376, 390, -1, sizeof(::livekit::ChatMessage)},
        {396, 409, -1, sizeof(::livekit::RpcRequest)},
        {414, 423, -1, sizeof(::livekit::RpcAck)},
        {424, 436, -1, sizeof(::livekit::RpcResponse)},
        {439, 450, -1, sizeof(::livekit::RpcError)},
        {453, 463, -1, sizeof(::livekit::ParticipantTracks)},
        {465, 480, -1, sizeof(::livekit::ServerInfo)},
        {487, 506, -1, sizeof(::livekit::ClientInfo)},
        {517, 530, -1, sizeof(::livekit::ClientConfiguration)},
        {535, 544, -1, sizeof(::livekit::VideoConfiguration)},
        {545, -1, -1, sizeof(::livekit::DisabledCodecs)},
        {555, 572, -1, sizeof(::livekit::RTPDrift)},
        {581, 591, -1, sizeof(::livekit::RTPStats_GapHistogramEntry_DoNotUse)},
        {593, 646, -1, sizeof(::livekit::RTPStats)},
        {691, 706, -1, sizeof(::livekit::RTCPSenderReportState)},
        {713, 730, -1, sizeof(::livekit::RTPForwarderState)},
        {738, 752, -1, sizeof(::livekit::RTPMungerState)},
        {758, 773, -1, sizeof(::livekit::VP8MungerState)},
        {780, 790, -1, sizeof(::livekit::TimedVersion)},
        {792, 805, -1, sizeof(::livekit::DataStream_TextHeader)},
        {810, 819, -1, sizeof(::livekit::DataStream_ByteHeader)},
        {820, 830, -1, sizeof(::livekit::DataStream_Header_AttributesEntry_DoNotUse)},
        {832, 850, -1, sizeof(::livekit::DataStream_Header)},
        {859, 872, -1, sizeof(::livekit::DataStream_Chunk)},
        {877, 887, -1, sizeof(::livekit::DataStream_Trailer_AttributesEntry_DoNotUse)},
        {889, 900, -1, sizeof(::livekit::DataStream_Trailer)},
        {903, -1, -1, sizeof(::livekit::DataStream)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::livekit::_Pagination_default_instance_._instance,
    &::livekit::_Room_default_instance_._instance,
    &::livekit::_Codec_default_instance_._instance,
    &::livekit::_PlayoutDelay_default_instance_._instance,
    &::livekit::_ParticipantPermission_default_instance_._instance,
    &::livekit::_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_._instance,
    &::livekit::_ParticipantInfo_default_instance_._instance,
    &::livekit::_Encryption_default_instance_._instance,
    &::livekit::_SimulcastCodecInfo_default_instance_._instance,
    &::livekit::_TrackInfo_default_instance_._instance,
    &::livekit::_VideoLayer_default_instance_._instance,
    &::livekit::_DataPacket_default_instance_._instance,
    &::livekit::_ActiveSpeakerUpdate_default_instance_._instance,
    &::livekit::_SpeakerInfo_default_instance_._instance,
    &::livekit::_UserPacket_default_instance_._instance,
    &::livekit::_SipDTMF_default_instance_._instance,
    &::livekit::_Transcription_default_instance_._instance,
    &::livekit::_TranscriptionSegment_default_instance_._instance,
    &::livekit::_ChatMessage_default_instance_._instance,
    &::livekit::_RpcRequest_default_instance_._instance,
    &::livekit::_RpcAck_default_instance_._instance,
    &::livekit::_RpcResponse_default_instance_._instance,
    &::livekit::_RpcError_default_instance_._instance,
    &::livekit::_ParticipantTracks_default_instance_._instance,
    &::livekit::_ServerInfo_default_instance_._instance,
    &::livekit::_ClientInfo_default_instance_._instance,
    &::livekit::_ClientConfiguration_default_instance_._instance,
    &::livekit::_VideoConfiguration_default_instance_._instance,
    &::livekit::_DisabledCodecs_default_instance_._instance,
    &::livekit::_RTPDrift_default_instance_._instance,
    &::livekit::_RTPStats_GapHistogramEntry_DoNotUse_default_instance_._instance,
    &::livekit::_RTPStats_default_instance_._instance,
    &::livekit::_RTCPSenderReportState_default_instance_._instance,
    &::livekit::_RTPForwarderState_default_instance_._instance,
    &::livekit::_RTPMungerState_default_instance_._instance,
    &::livekit::_VP8MungerState_default_instance_._instance,
    &::livekit::_TimedVersion_default_instance_._instance,
    &::livekit::_DataStream_TextHeader_default_instance_._instance,
    &::livekit::_DataStream_ByteHeader_default_instance_._instance,
    &::livekit::_DataStream_Header_AttributesEntry_DoNotUse_default_instance_._instance,
    &::livekit::_DataStream_Header_default_instance_._instance,
    &::livekit::_DataStream_Chunk_default_instance_._instance,
    &::livekit::_DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_._instance,
    &::livekit::_DataStream_Trailer_default_instance_._instance,
    &::livekit::_DataStream_default_instance_._instance,
};
const char descriptor_table_protodef_livekit_5fmodels_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024livekit_models.proto\022\007livekit\032\037google/"
    "protobuf/timestamp.proto\032\025livekit_metric"
    "s.proto\"-\n\nPagination\022\020\n\010after_id\030\001 \001(\t\022"
    "\r\n\005limit\030\002 \001(\005\"\343\002\n\004Room\022\013\n\003sid\030\001 \001(\t\022\014\n\004"
    "name\030\002 \001(\t\022\025\n\rempty_timeout\030\003 \001(\r\022\031\n\021dep"
    "arture_timeout\030\016 \001(\r\022\030\n\020max_participants"
    "\030\004 \001(\r\022\025\n\rcreation_time\030\005 \001(\003\022\030\n\020creatio"
    "n_time_ms\030\017 \001(\003\022\025\n\rturn_password\030\006 \001(\t\022&"
    "\n\016enabled_codecs\030\007 \003(\0132\016.livekit.Codec\022\020"
    "\n\010metadata\030\010 \001(\t\022\030\n\020num_participants\030\t \001"
    "(\r\022\026\n\016num_publishers\030\013 \001(\r\022\030\n\020active_rec"
    "ording\030\n \001(\010\022&\n\007version\030\r \001(\0132\025.livekit."
    "TimedVersion\"(\n\005Codec\022\014\n\004mime\030\001 \001(\t\022\021\n\tf"
    "mtp_line\030\002 \001(\t\"9\n\014PlayoutDelay\022\017\n\007enable"
    "d\030\001 \001(\010\022\013\n\003min\030\002 \001(\r\022\013\n\003max\030\003 \001(\r\"\205\002\n\025Pa"
    "rticipantPermission\022\025\n\rcan_subscribe\030\001 \001"
    "(\010\022\023\n\013can_publish\030\002 \001(\010\022\030\n\020can_publish_d"
    "ata\030\003 \001(\010\0221\n\023can_publish_sources\030\t \003(\0162\024"
    ".livekit.TrackSource\022\016\n\006hidden\030\007 \001(\010\022\024\n\010"
    "recorder\030\010 \001(\010B\002\030\001\022\033\n\023can_update_metadat"
    "a\030\n \001(\010\022\021\n\005agent\030\013 \001(\010B\002\030\001\022\035\n\025can_subscr"
    "ibe_metrics\030\014 \001(\010\"\235\005\n\017ParticipantInfo\022\013\n"
    "\003sid\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022-\n\005state\030\003 "
    "\001(\0162\036.livekit.ParticipantInfo.State\022\"\n\006t"
    "racks\030\004 \003(\0132\022.livekit.TrackInfo\022\020\n\010metad"
    "ata\030\005 \001(\t\022\021\n\tjoined_at\030\006 \001(\003\022\024\n\014joined_a"
    "t_ms\030\021 \001(\003\022\014\n\004name\030\t \001(\t\022\017\n\007version\030\n \001("
    "\r\0222\n\npermission\030\013 \001(\0132\036.livekit.Particip"
    "antPermission\022\016\n\006region\030\014 \001(\t\022\024\n\014is_publ"
    "isher\030\r \001(\010\022+\n\004kind\030\016 \001(\0162\035.livekit.Part"
    "icipantInfo.Kind\022<\n\nattributes\030\017 \003(\0132(.l"
    "ivekit.ParticipantInfo.AttributesEntry\0224"
    "\n\021disconnect_reason\030\020 \001(\0162\031.livekit.Disc"
    "onnectReason\0321\n\017AttributesEntry\022\013\n\003key\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\">\n\005State\022\013\n\007JOIN"
    "ING\020\000\022\n\n\006JOINED\020\001\022\n\n\006ACTIVE\020\002\022\020\n\014DISCONN"
    "ECTED\020\003\"P\n\004Kind\022\014\n\010STANDARD\020\000\022\013\n\007INGRESS"
    "\020\001\022\n\n\006EGRESS\020\002\022\007\n\003SIP\020\003\022\t\n\005AGENT\020\004\022\r\n\tFO"
    "RWARDED\020\005\"3\n\nEncryption\"%\n\004Type\022\010\n\004NONE\020"
    "\000\022\007\n\003GCM\020\001\022\n\n\006CUSTOM\020\002\"f\n\022SimulcastCodec"
    "Info\022\021\n\tmime_type\030\001 \001(\t\022\013\n\003mid\030\002 \001(\t\022\013\n\003"
    "cid\030\003 \001(\t\022#\n\006layers\030\004 \003(\0132\023.livekit.Vide"
    "oLayer\"\256\004\n\tTrackInfo\022\013\n\003sid\030\001 \001(\t\022 \n\004typ"
    "e\030\002 \001(\0162\022.livekit.TrackType\022\014\n\004name\030\003 \001("
    "\t\022\r\n\005muted\030\004 \001(\010\022\r\n\005width\030\005 \001(\r\022\016\n\006heigh"
    "t\030\006 \001(\r\022\021\n\tsimulcast\030\007 \001(\010\022\023\n\013disable_dt"
    "x\030\010 \001(\010\022$\n\006source\030\t \001(\0162\024.livekit.TrackS"
    "ource\022#\n\006layers\030\n \003(\0132\023.livekit.VideoLay"
    "er\022\021\n\tmime_type\030\013 \001(\t\022\013\n\003mid\030\014 \001(\t\022+\n\006co"
    "decs\030\r \003(\0132\033.livekit.SimulcastCodecInfo\022"
    "\016\n\006stereo\030\016 \001(\010\022\023\n\013disable_red\030\017 \001(\010\022,\n\n"
    "encryption\030\020 \001(\0162\030.livekit.Encryption.Ty"
    "pe\022\016\n\006stream\030\021 \001(\t\022&\n\007version\030\022 \001(\0132\025.li"
    "vekit.TimedVersion\0222\n\016audio_features\030\023 \003"
    "(\0162\032.livekit.AudioTrackFeature\0227\n\023backup"
    "_codec_policy\030\024 \001(\0162\032.livekit.BackupCode"
    "cPolicy\"r\n\nVideoLayer\022&\n\007quality\030\001 \001(\0162\025"
    ".livekit.VideoQuality\022\r\n\005width\030\002 \001(\r\022\016\n\006"
    "height\030\003 \001(\r\022\017\n\007bitrate\030\004 \001(\r\022\014\n\004ssrc\030\005 "
    "\001(\r\"\306\005\n\nDataPacket\022*\n\004kind\030\001 \001(\0162\030.livek"
    "it.DataPacket.KindB\002\030\001\022\034\n\024participant_id"
    "entity\030\004 \001(\t\022\036\n\026destination_identities\030\005"
    " \003(\t\022#\n\004user\030\002 \001(\0132\023.livekit.UserPacketH"
    "\000\0223\n\007speaker\030\003 \001(\0132\034.livekit.ActiveSpeak"
    "erUpdateB\002\030\001H\000\022$\n\010sip_dtmf\030\006 \001(\0132\020.livek"
    "it.SipDTMFH\000\022/\n\rtranscription\030\007 \001(\0132\026.li"
    "vekit.TranscriptionH\000\022(\n\007metrics\030\010 \001(\0132\025"
    ".livekit.MetricsBatchH\000\022,\n\014chat_message\030"
    "\t \001(\0132\024.livekit.ChatMessageH\000\022*\n\013rpc_req"
    "uest\030\n \001(\0132\023.livekit.RpcRequestH\000\022\"\n\007rpc"
    "_ack\030\013 \001(\0132\017.livekit.RpcAckH\000\022,\n\014rpc_res"
    "ponse\030\014 \001(\0132\024.livekit.RpcResponseH\000\0223\n\rs"
    "tream_header\030\r \001(\0132\032.livekit.DataStream."
    "HeaderH\000\0221\n\014stream_chunk\030\016 \001(\0132\031.livekit"
    ".DataStream.ChunkH\000\0225\n\016stream_trailer\030\017 "
    "\001(\0132\033.livekit.DataStream.TrailerH\000\"\037\n\004Ki"
    "nd\022\014\n\010RELIABLE\020\000\022\t\n\005LOSSY\020\001B\007\n\005value\"=\n\023"
    "ActiveSpeakerUpdate\022&\n\010speakers\030\001 \003(\0132\024."
    "livekit.SpeakerInfo\"9\n\013SpeakerInfo\022\013\n\003si"
    "d\030\001 \001(\t\022\r\n\005level\030\002 \001(\002\022\016\n\006active\030\003 \001(\010\"\257"
    "\002\n\nUserPacket\022\033\n\017participant_sid\030\001 \001(\tB\002"
    "\030\001\022 \n\024participant_identity\030\005 \001(\tB\002\030\001\022\017\n\007"
    "payload\030\002 \001(\014\022\034\n\020destination_sids\030\003 \003(\tB"
    "\002\030\001\022\"\n\026destination_identities\030\006 \003(\tB\002\030\001\022"
    "\022\n\005topic\030\004 \001(\tH\000\210\001\001\022\017\n\002id\030\010 \001(\tH\001\210\001\001\022\027\n\n"
    "start_time\030\t \001(\004H\002\210\001\001\022\025\n\010end_time\030\n \001(\004H"
    "\003\210\001\001\022\r\n\005nonce\030\013 \001(\014B\010\n\006_topicB\005\n\003_idB\r\n\013"
    "_start_timeB\013\n\t_end_time\"&\n\007SipDTMF\022\014\n\004c"
    "ode\030\003 \001(\r\022\r\n\005digit\030\004 \001(\t\"|\n\rTranscriptio"
    "n\022(\n transcribed_participant_identity\030\002 "
    "\001(\t\022\020\n\010track_id\030\003 \001(\t\022/\n\010segments\030\004 \003(\0132"
    "\035.livekit.TranscriptionSegment\"w\n\024Transc"
    "riptionSegment\022\n\n\002id\030\001 \001(\t\022\014\n\004text\030\002 \001(\t"
    "\022\022\n\nstart_time\030\003 \001(\004\022\020\n\010end_time\030\004 \001(\004\022\r"
    "\n\005final\030\005 \001(\010\022\020\n\010language\030\006 \001(\t\"\221\001\n\013Chat"
    "Message\022\n\n\002id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\033"
    "\n\016edit_timestamp\030\003 \001(\003H\000\210\001\001\022\017\n\007message\030\004"
    " \001(\t\022\017\n\007deleted\030\005 \001(\010\022\021\n\tgenerated\030\006 \001(\010"
    "B\021\n\017_edit_timestamp\"g\n\nRpcRequest\022\n\n\002id\030"
    "\001 \001(\t\022\016\n\006method\030\002 \001(\t\022\017\n\007payload\030\003 \001(\t\022\033"
    "\n\023response_timeout_ms\030\004 \001(\r\022\017\n\007version\030\005"
    " \001(\r\"\034\n\006RpcAck\022\022\n\nrequest_id\030\001 \001(\t\"a\n\013Rp"
    "cResponse\022\022\n\nrequest_id\030\001 \001(\t\022\021\n\007payload"
    "\030\002 \001(\tH\000\022\"\n\005error\030\003 \001(\0132\021.livekit.RpcErr"
    "orH\000B\007\n\005value\"7\n\010RpcError\022\014\n\004code\030\001 \001(\r\022"
    "\017\n\007message\030\002 \001(\t\022\014\n\004data\030\003 \001(\t\"@\n\021Partic"
    "ipantTracks\022\027\n\017participant_sid\030\001 \001(\t\022\022\n\n"
    "track_sids\030\002 \003(\t\"\316\001\n\nServerInfo\022,\n\007editi"
    "on\030\001 \001(\0162\033.livekit.ServerInfo.Edition\022\017\n"
    "\007version\030\002 \001(\t\022\020\n\010protocol\030\003 \001(\005\022\016\n\006regi"
    "on\030\004 \001(\t\022\017\n\007node_id\030\005 \001(\t\022\022\n\ndebug_info\030"
    "\006 \001(\t\022\026\n\016agent_protocol\030\007 \001(\005\"\"\n\007Edition"
    "\022\014\n\010Standard\020\000\022\t\n\005Cloud\020\001\"\212\003\n\nClientInfo"
    "\022$\n\003sdk\030\001 \001(\0162\027.livekit.ClientInfo.SDK\022\017"
    "\n\007version\030\002 \001(\t\022\020\n\010protocol\030\003 \001(\005\022\n\n\002os\030"
    "\004 \001(\t\022\022\n\nos_version\030\005 \001(\t\022\024\n\014device_mode"
    "l\030\006 \001(\t\022\017\n\007browser\030\007 \001(\t\022\027\n\017browser_vers"
    "ion\030\010 \001(\t\022\017\n\007address\030\t \001(\t\022\017\n\007network\030\n "
    "\001(\t\022\022\n\nother_sdks\030\013 \001(\t\"\234\001\n\003SDK\022\013\n\007UNKNO"
    "WN\020\000\022\006\n\002JS\020\001\022\t\n\005SWIFT\020\002\022\013\n\007ANDROID\020\003\022\013\n\007"
    "FLUTTER\020\004\022\006\n\002GO\020\005\022\t\n\005UNITY\020\006\022\020\n\014REACT_NA"
    "TIVE\020\007\022\010\n\004RUST\020\010\022\n\n\006PYTHON\020\t\022\007\n\003CPP\020\n\022\r\n"
    "\tUNITY_WEB\020\013\022\010\n\004NODE\020\014\"\214\002\n\023ClientConfigu"
    "ration\022*\n\005video\030\001 \001(\0132\033.livekit.VideoCon"
    "figuration\022+\n\006screen\030\002 \001(\0132\033.livekit.Vid"
    "eoConfiguration\0227\n\021resume_connection\030\003 \001"
    "(\0162\034.livekit.ClientConfigSetting\0220\n\017disa"
    "bled_codecs\030\004 \001(\0132\027.livekit.DisabledCode"
    "cs\0221\n\013force_relay\030\005 \001(\0162\034.livekit.Client"
    "ConfigSetting\"L\n\022VideoConfiguration\0226\n\020h"
    "ardware_encoder\030\001 \001(\0162\034.livekit.ClientCo"
    "nfigSetting\"Q\n\016DisabledCodecs\022\036\n\006codecs\030"
    "\001 \003(\0132\016.livekit.Codec\022\037\n\007publish\030\002 \003(\0132\016"
    ".livekit.Codec\"\200\002\n\010RTPDrift\022.\n\nstart_tim"
    "e\030\001 \001(\0132\032.google.protobuf.Timestamp\022,\n\010e"
    "nd_time\030\002 \001(\0132\032.google.protobuf.Timestam"
    "p\022\020\n\010duration\030\003 \001(\001\022\027\n\017start_timestamp\030\004"
    " \001(\004\022\025\n\rend_timestamp\030\005 \001(\004\022\027\n\017rtp_clock"
    "_ticks\030\006 \001(\004\022\025\n\rdrift_samples\030\007 \001(\003\022\020\n\010d"
    "rift_ms\030\010 \001(\001\022\022\n\nclock_rate\030\t \001(\001\"\326\n\n\010RT"
    "PStats\022.\n\nstart_time\030\001 \001(\0132\032.google.prot"
    "obuf.Timestamp\022,\n\010end_time\030\002 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022\020\n\010duration\030\003 \001(\001\022\017"
    "\n\007packets\030\004 \001(\r\022\023\n\013packet_rate\030\005 \001(\001\022\r\n\005"
    "bytes\030\006 \001(\004\022\024\n\014header_bytes\030\' \001(\004\022\017\n\007bit"
    "rate\030\007 \001(\001\022\024\n\014packets_lost\030\010 \001(\r\022\030\n\020pack"
    "et_loss_rate\030\t \001(\001\022\036\n\026packet_loss_percen"
    "tage\030\n \001(\002\022\031\n\021packets_duplicate\030\013 \001(\r\022\035\n"
    "\025packet_duplicate_rate\030\014 \001(\001\022\027\n\017bytes_du"
    "plicate\030\r \001(\004\022\036\n\026header_bytes_duplicate\030"
    "( \001(\004\022\031\n\021bitrate_duplicate\030\016 \001(\001\022\027\n\017pack"
    "ets_padding\030\017 \001(\r\022\033\n\023packet_padding_rate"
    "\030\020 \001(\001\022\025\n\rbytes_padding\030\021 \001(\004\022\034\n\024header_"
    "bytes_padding\030) \001(\004\022\027\n\017bitrate_padding\030\022"
    " \001(\001\022\034\n\024packets_out_of_order\030\023 \001(\r\022\016\n\006fr"
    "ames\030\024 \001(\r\022\022\n\nframe_rate\030\025 \001(\001\022\026\n\016jitter"
    "_current\030\026 \001(\001\022\022\n\njitter_max\030\027 \001(\001\022:\n\rga"
    "p_histogram\030\030 \003(\0132#.livekit.RTPStats.Gap"
    "HistogramEntry\022\r\n\005nacks\030\031 \001(\r\022\021\n\tnack_ac"
    "ks\030% \001(\r\022\023\n\013nack_misses\030\032 \001(\r\022\025\n\rnack_re"
    "peated\030& \001(\r\022\014\n\004plis\030\033 \001(\r\022,\n\010last_pli\030\034"
    " \001(\0132\032.google.protobuf.Timestamp\022\014\n\004firs"
    "\030\035 \001(\r\022,\n\010last_fir\030\036 \001(\0132\032.google.protob"
    "uf.Timestamp\022\023\n\013rtt_current\030\037 \001(\r\022\017\n\007rtt"
    "_max\030  \001(\r\022\022\n\nkey_frames\030! \001(\r\0222\n\016last_k"
    "ey_frame\030\" \001(\0132\032.google.protobuf.Timesta"
    "mp\022\027\n\017layer_lock_plis\030# \001(\r\0227\n\023last_laye"
    "r_lock_pli\030$ \001(\0132\032.google.protobuf.Times"
    "tamp\022\'\n\014packet_drift\030, \001(\0132\021.livekit.RTP"
    "Drift\022+\n\020ntp_report_drift\030- \001(\0132\021.liveki"
    "t.RTPDrift\022/\n\024rebased_report_drift\030. \001(\013"
    "2\021.livekit.RTPDrift\0220\n\025received_report_d"
    "rift\030/ \001(\0132\021.livekit.RTPDrift\0323\n\021GapHist"
    "ogramEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\r:\002"
    "8\001\"\242\001\n\025RTCPSenderReportState\022\025\n\rrtp_time"
    "stamp\030\001 \001(\r\022\031\n\021rtp_timestamp_ext\030\002 \001(\004\022\025"
    "\n\rntp_timestamp\030\003 \001(\004\022\n\n\002at\030\004 \001(\003\022\023\n\013at_"
    "adjusted\030\005 \001(\003\022\017\n\007packets\030\006 \001(\r\022\016\n\006octet"
    "s\030\007 \001(\004\"\311\002\n\021RTPForwarderState\022\017\n\007started"
    "\030\001 \001(\010\022\037\n\027reference_layer_spatial\030\002 \001(\005\022"
    "\026\n\016pre_start_time\030\003 \001(\003\022\033\n\023ext_first_tim"
    "estamp\030\004 \001(\004\022$\n\034dummy_start_timestamp_of"
    "fset\030\005 \001(\004\022+\n\nrtp_munger\030\006 \001(\0132\027.livekit"
    ".RTPMungerState\022-\n\nvp8_munger\030\007 \001(\0132\027.li"
    "vekit.VP8MungerStateH\000\022;\n\023sender_report_"
    "state\030\010 \003(\0132\036.livekit.RTCPSenderReportSt"
    "ateB\016\n\014codec_munger\"\313\001\n\016RTPMungerState\022 "
    "\n\030ext_last_sequence_number\030\001 \001(\004\022\'\n\037ext_"
    "second_last_sequence_number\030\002 \001(\004\022\032\n\022ext"
    "_last_timestamp\030\003 \001(\004\022!\n\031ext_second_last"
    "_timestamp\030\004 \001(\004\022\023\n\013last_marker\030\005 \001(\010\022\032\n"
    "\022second_last_marker\030\006 \001(\010\"\270\001\n\016VP8MungerS"
    "tate\022\033\n\023ext_last_picture_id\030\001 \001(\005\022\027\n\017pic"
    "ture_id_used\030\002 \001(\010\022\030\n\020last_tl0_pic_idx\030\003"
    " \001(\r\022\030\n\020tl0_pic_idx_used\030\004 \001(\010\022\020\n\010tid_us"
    "ed\030\005 \001(\010\022\024\n\014last_key_idx\030\006 \001(\r\022\024\n\014key_id"
    "x_used\030\007 \001(\010\"1\n\014TimedVersion\022\022\n\nunix_mic"
    "ro\030\001 \001(\003\022\r\n\005ticks\030\002 \001(\005\"\305\007\n\nDataStream\032\244"
    "\001\n\nTextHeader\0229\n\016operation_type\030\001 \001(\0162!."
    "livekit.DataStream.OperationType\022\017\n\007vers"
    "ion\030\002 \001(\005\022\032\n\022reply_to_stream_id\030\003 \001(\t\022\033\n"
    "\023attached_stream_ids\030\004 \003(\t\022\021\n\tgenerated\030"
    "\005 \001(\010\032\032\n\nByteHeader\022\014\n\004name\030\001 \001(\t\032\242\003\n\006He"
    "ader\022\021\n\tstream_id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001"
    "(\003\022\r\n\005topic\030\003 \001(\t\022\021\n\tmime_type\030\004 \001(\t\022\031\n\014"
    "total_length\030\005 \001(\004H\001\210\001\001\0221\n\017encryption_ty"
    "pe\030\007 \001(\0162\030.livekit.Encryption.Type\022>\n\nat"
    "tributes\030\010 \003(\0132*.livekit.DataStream.Head"
    "er.AttributesEntry\0225\n\013text_header\030\t \001(\0132"
    "\036.livekit.DataStream.TextHeaderH\000\0225\n\013byt"
    "e_header\030\n \001(\0132\036.livekit.DataStream.Byte"
    "HeaderH\000\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\t:\0028\001B\020\n\016content_headerB\017\n"
    "\r_total_length\032i\n\005Chunk\022\021\n\tstream_id\030\001 \001"
    "(\t\022\023\n\013chunk_index\030\002 \001(\004\022\017\n\007content\030\003 \001(\014"
    "\022\017\n\007version\030\004 \001(\005\022\017\n\002iv\030\005 \001(\014H\000\210\001\001B\005\n\003_i"
    "v\032\240\001\n\007Trailer\022\021\n\tstream_id\030\001 \001(\t\022\016\n\006reas"
    "on\030\002 \001(\t\022\?\n\nattributes\030\003 \003(\0132+.livekit.D"
    "ataStream.Trailer.AttributesEntry\0321\n\017Att"
    "ributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
    ":\0028\001\"A\n\rOperationType\022\n\n\006CREATE\020\000\022\n\n\006UPD"
    "ATE\020\001\022\n\n\006DELETE\020\002\022\014\n\010REACTION\020\003*/\n\nAudio"
    "Codec\022\016\n\nDEFAULT_AC\020\000\022\010\n\004OPUS\020\001\022\007\n\003AAC\020\002"
    "*V\n\nVideoCodec\022\016\n\nDEFAULT_VC\020\000\022\021\n\rH264_B"
    "ASELINE\020\001\022\r\n\tH264_MAIN\020\002\022\r\n\tH264_HIGH\020\003\022"
    "\007\n\003VP8\020\004*)\n\nImageCodec\022\016\n\nIC_DEFAULT\020\000\022\013"
    "\n\007IC_JPEG\020\001*2\n\021BackupCodecPolicy\022\016\n\nREGR"
    "ESSION\020\000\022\r\n\tSIMULCAST\020\001*+\n\tTrackType\022\t\n\005"
    "AUDIO\020\000\022\t\n\005VIDEO\020\001\022\010\n\004DATA\020\002*`\n\013TrackSou"
    "rce\022\013\n\007UNKNOWN\020\000\022\n\n\006CAMERA\020\001\022\016\n\nMICROPHO"
    "NE\020\002\022\020\n\014SCREEN_SHARE\020\003\022\026\n\022SCREEN_SHARE_A"
    "UDIO\020\004*6\n\014VideoQuality\022\007\n\003LOW\020\000\022\n\n\006MEDIU"
    "M\020\001\022\010\n\004HIGH\020\002\022\007\n\003OFF\020\003*@\n\021ConnectionQual"
    "ity\022\010\n\004POOR\020\000\022\010\n\004GOOD\020\001\022\r\n\tEXCELLENT\020\002\022\010"
    "\n\004LOST\020\003*;\n\023ClientConfigSetting\022\t\n\005UNSET"
    "\020\000\022\014\n\010DISABLED\020\001\022\013\n\007ENABLED\020\002*\254\002\n\020Discon"
    "nectReason\022\022\n\016UNKNOWN_REASON\020\000\022\024\n\020CLIENT"
    "_INITIATED\020\001\022\026\n\022DUPLICATE_IDENTITY\020\002\022\023\n\017"
    "SERVER_SHUTDOWN\020\003\022\027\n\023PARTICIPANT_REMOVED"
    "\020\004\022\020\n\014ROOM_DELETED\020\005\022\022\n\016STATE_MISMATCH\020\006"
    "\022\020\n\014JOIN_FAILURE\020\007\022\r\n\tMIGRATION\020\010\022\020\n\014SIG"
    "NAL_CLOSE\020\t\022\017\n\013ROOM_CLOSED\020\n\022\024\n\020USER_UNA"
    "VAILABLE\020\013\022\021\n\rUSER_REJECTED\020\014\022\025\n\021SIP_TRU"
    "NK_FAILURE\020\r*\211\001\n\017ReconnectReason\022\016\n\nRR_U"
    "NKNOWN\020\000\022\032\n\026RR_SIGNAL_DISCONNECTED\020\001\022\027\n\023"
    "RR_PUBLISHER_FAILED\020\002\022\030\n\024RR_SUBSCRIBER_F"
    "AILED\020\003\022\027\n\023RR_SWITCH_CANDIDATE\020\004*T\n\021Subs"
    "criptionError\022\016\n\nSE_UNKNOWN\020\000\022\030\n\024SE_CODE"
    "C_UNSUPPORTED\020\001\022\025\n\021SE_TRACK_NOTFOUND\020\002*\243"
    "\001\n\021AudioTrackFeature\022\r\n\tTF_STEREO\020\000\022\r\n\tT"
    "F_NO_DTX\020\001\022\030\n\024TF_AUTO_GAIN_CONTROL\020\002\022\030\n\024"
    "TF_ECHO_CANCELLATION\020\003\022\030\n\024TF_NOISE_SUPPR"
    "ESSION\020\004\022\"\n\036TF_ENHANCED_NOISE_CANCELLATI"
    "ON\020\005BFZ#github.com/livekit/protocol/live"
    "kit\252\002\rLiveKit.Proto\352\002\016LiveKit::Protob\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_livekit_5fmodels_2eproto_deps[2] = {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_livekit_5fmetrics_2eproto,
};
static ::absl::once_flag descriptor_table_livekit_5fmodels_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_livekit_5fmodels_2eproto = {
    false,
    false,
    10204,
    descriptor_table_protodef_livekit_5fmodels_2eproto,
    "livekit_models.proto",
    &descriptor_table_livekit_5fmodels_2eproto_once,
    descriptor_table_livekit_5fmodels_2eproto_deps,
    2,
    45,
    schemas,
    file_default_instances,
    TableStruct_livekit_5fmodels_2eproto::offsets,
    file_level_enum_descriptors_livekit_5fmodels_2eproto,
    file_level_service_descriptors_livekit_5fmodels_2eproto,
};
namespace livekit {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParticipantInfo_State_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ParticipantInfo_State_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParticipantInfo_Kind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ParticipantInfo_Kind_internal_data_[] = {
    393216u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Encryption_Type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Encryption_Type_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DataPacket_Kind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t DataPacket_Kind_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ServerInfo_Edition_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ServerInfo_Edition_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ClientInfo_SDK_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t ClientInfo_SDK_internal_data_[] = {
    851968u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DataStream_OperationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t DataStream_OperationType_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AudioCodec_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t AudioCodec_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VideoCodec_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t VideoCodec_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ImageCodec_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ImageCodec_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL BackupCodecPolicy_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t BackupCodecPolicy_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrackType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t TrackType_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrackSource_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[12];
}
PROTOBUF_CONSTINIT const uint32_t TrackSource_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VideoQuality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[13];
}
PROTOBUF_CONSTINIT const uint32_t VideoQuality_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ConnectionQuality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[14];
}
PROTOBUF_CONSTINIT const uint32_t ConnectionQuality_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ClientConfigSetting_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[15];
}
PROTOBUF_CONSTINIT const uint32_t ClientConfigSetting_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DisconnectReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[16];
}
PROTOBUF_CONSTINIT const uint32_t DisconnectReason_internal_data_[] = {
    917504u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ReconnectReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[17];
}
PROTOBUF_CONSTINIT const uint32_t ReconnectReason_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SubscriptionError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[18];
}
PROTOBUF_CONSTINIT const uint32_t SubscriptionError_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AudioTrackFeature_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmodels_2eproto);
  return file_level_enum_descriptors_livekit_5fmodels_2eproto[19];
}
PROTOBUF_CONSTINIT const uint32_t AudioTrackFeature_internal_data_[] = {
    393216u, 0u, };
// ===================================================================

class Pagination::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Pagination>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pagination, _impl_._has_bits_);
};

Pagination::Pagination(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pagination_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Pagination)
}
PROTOBUF_NDEBUG_INLINE Pagination::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::Pagination& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        after_id_(arena, from.after_id_) {}

Pagination::Pagination(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Pagination& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pagination_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Pagination* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.limit_ = from._impl_.limit_;

  // @@protoc_insertion_point(copy_constructor:livekit.Pagination)
}
PROTOBUF_NDEBUG_INLINE Pagination::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        after_id_(arena) {}

inline void Pagination::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.limit_ = {};
}
Pagination::~Pagination() {
  // @@protoc_insertion_point(destructor:livekit.Pagination)
  SharedDtor(*this);
}
inline void Pagination::SharedDtor(MessageLite& self) {
  Pagination& this_ = static_cast<Pagination&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.after_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Pagination::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Pagination(arena);
}
constexpr auto Pagination::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Pagination),
                                            alignof(Pagination));
}
constexpr auto Pagination::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Pagination_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Pagination::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Pagination>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Pagination::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Pagination>(), &Pagination::ByteSizeLong,
              &Pagination::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Pagination, _impl_._cached_size_),
          false,
      },
      &Pagination::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Pagination_class_data_ =
            Pagination::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Pagination::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Pagination_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Pagination_class_data_.tc_table);
  return Pagination_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 35, 2>
Pagination::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pagination, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Pagination_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Pagination>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 limit = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Pagination, _impl_.limit_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Pagination, _impl_.limit_)}},
    // string after_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Pagination, _impl_.after_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string after_id = 1;
    {PROTOBUF_FIELD_OFFSET(Pagination, _impl_.after_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 limit = 2;
    {PROTOBUF_FIELD_OFFSET(Pagination, _impl_.limit_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\10\0\0\0\0\0\0"
    "livekit.Pagination"
    "after_id"
  }},
};
PROTOBUF_NOINLINE void Pagination::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Pagination)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.after_id_.ClearNonDefaultToEmpty();
  }
  _impl_.limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Pagination::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Pagination& this_ = static_cast<const Pagination&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Pagination::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Pagination& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Pagination)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string after_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_after_id().empty()) {
      const std::string& _s = this_._internal_after_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Pagination.after_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 limit = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_limit() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_limit(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Pagination)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Pagination::ByteSizeLong(const MessageLite& base) {
  const Pagination& this_ = static_cast<const Pagination&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Pagination::ByteSizeLong() const {
  const Pagination& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Pagination)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string after_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_after_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_after_id());
      }
    }
    // int32 limit = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_limit() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_limit());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Pagination::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pagination*>(&to_msg);
  auto& from = static_cast<const Pagination&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Pagination)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_after_id().empty()) {
        _this->_internal_set_after_id(from._internal_after_id());
      } else {
        if (_this->_impl_.after_id_.IsDefault()) {
          _this->_internal_set_after_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_limit() != 0) {
        _this->_impl_.limit_ = from._impl_.limit_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pagination::CopyFrom(const Pagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Pagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pagination::InternalSwap(Pagination* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.after_id_, &other->_impl_.after_id_, arena);
  swap(_impl_.limit_, other->_impl_.limit_);
}

::google::protobuf::Metadata Pagination::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Room::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Room>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Room, _impl_._has_bits_);
};

Room::Room(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Room_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Room)
}
PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::Room& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        enabled_codecs_{visibility, arena, from.enabled_codecs_},
        sid_(arena, from.sid_),
        name_(arena, from.name_),
        turn_password_(arena, from.turn_password_),
        metadata_(arena, from.metadata_) {}

Room::Room(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Room& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Room_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Room* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.version_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, empty_timeout_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, empty_timeout_),
           offsetof(Impl_, creation_time_ms_) -
               offsetof(Impl_, empty_timeout_) +
               sizeof(Impl_::creation_time_ms_));

  // @@protoc_insertion_point(copy_constructor:livekit.Room)
}
PROTOBUF_NDEBUG_INLINE Room::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        enabled_codecs_{visibility, arena},
        sid_(arena),
        name_(arena),
        turn_password_(arena),
        metadata_(arena) {}

inline void Room::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, creation_time_ms_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::creation_time_ms_));
}
Room::~Room() {
  // @@protoc_insertion_point(destructor:livekit.Room)
  SharedDtor(*this);
}
inline void Room::SharedDtor(MessageLite& self) {
  Room& this_ = static_cast<Room&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.turn_password_.Destroy();
  this_._impl_.metadata_.Destroy();
  delete this_._impl_.version_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Room::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Room(arena);
}
constexpr auto Room::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Room, _impl_.enabled_codecs_) +
          decltype(Room::_impl_.enabled_codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Room), alignof(Room), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Room::PlacementNew_,
                                 sizeof(Room),
                                 alignof(Room));
  }
}
constexpr auto Room::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Room_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Room::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Room>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Room::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Room>(), &Room::ByteSizeLong,
              &Room::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Room, _impl_._cached_size_),
          false,
      },
      &Room::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Room_class_data_ =
            Room::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Room::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Room_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Room_class_data_.tc_table);
  return Room_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 2, 57, 2>
Room::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Room, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294936576,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Room_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Room>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.sid_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.name_)}},
    // uint32 empty_timeout = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.empty_timeout_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.empty_timeout_)}},
    // uint32 max_participants = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.max_participants_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.max_participants_)}},
    // int64 creation_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Room, _impl_.creation_time_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_)}},
    // string turn_password = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.turn_password_)}},
    // repeated .livekit.Codec enabled_codecs = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.enabled_codecs_)}},
    // string metadata = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 3, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.metadata_)}},
    // uint32 num_participants = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.num_participants_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.num_participants_)}},
    // bool active_recording = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Room, _impl_.active_recording_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.active_recording_)}},
    // uint32 num_publishers = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.num_publishers_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.num_publishers_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.TimedVersion version = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 4, 1, PROTOBUF_FIELD_OFFSET(Room, _impl_.version_)}},
    // uint32 departure_timeout = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Room, _impl_.departure_timeout_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.departure_timeout_)}},
    // int64 creation_time_ms = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Room, _impl_.creation_time_ms_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string sid = 1;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 empty_timeout = 3;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.empty_timeout_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 max_participants = 4;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.max_participants_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // int64 creation_time = 5;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string turn_password = 6;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.turn_password_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.Codec enabled_codecs = 7;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.enabled_codecs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string metadata = 8;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.metadata_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 num_participants = 9;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.num_participants_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool active_recording = 10;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.active_recording_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 num_publishers = 11;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.num_publishers_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .livekit.TimedVersion version = 13;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.version_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 departure_timeout = 14;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.departure_timeout_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // int64 creation_time_ms = 15;
    {PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_ms_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::Codec>()},
      {::_pbi::TcParser::GetTable<::livekit::TimedVersion>()},
  }},
  {{
    "\14\3\4\0\0\0\15\0\10\0\0\0\0\0\0\0"
    "livekit.Room"
    "sid"
    "name"
    "turn_password"
    "metadata"
  }},
};
PROTOBUF_NOINLINE void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Room)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enabled_codecs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.turn_password_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.empty_timeout_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.creation_time_) -
        reinterpret_cast<char*>(&_impl_.empty_timeout_)) + sizeof(_impl_.creation_time_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.num_participants_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.creation_time_ms_) -
        reinterpret_cast<char*>(&_impl_.num_participants_)) + sizeof(_impl_.creation_time_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Room::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Room::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Room)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Room.sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Room.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // uint32 empty_timeout = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_empty_timeout() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_empty_timeout(), target);
    }
  }

  // uint32 max_participants = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_max_participants() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_max_participants(), target);
    }
  }

  // int64 creation_time = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_creation_time() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_creation_time(), target);
    }
  }

  // string turn_password = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_turn_password().empty()) {
      const std::string& _s = this_._internal_turn_password();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Room.turn_password");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // repeated .livekit.Codec enabled_codecs = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_enabled_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_enabled_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string metadata = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_metadata().empty()) {
      const std::string& _s = this_._internal_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Room.metadata");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // uint32 num_participants = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_num_participants() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_num_participants(), target);
    }
  }

  // bool active_recording = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_active_recording() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          10, this_._internal_active_recording(), target);
    }
  }

  // uint32 num_publishers = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_num_publishers() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_num_publishers(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.TimedVersion version = 13;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.version_, this_._impl_.version_->GetCachedSize(), target,
        stream);
  }

  // uint32 departure_timeout = 14;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (this_._internal_departure_timeout() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          14, this_._internal_departure_timeout(), target);
    }
  }

  // int64 creation_time_ms = 15;
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_creation_time_ms() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<15>(
              stream, this_._internal_creation_time_ms(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Room)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Room::ByteSizeLong(const MessageLite& base) {
  const Room& this_ = static_cast<const Room&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Room::ByteSizeLong() const {
  const Room& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Room)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.Codec enabled_codecs = 7;
    {
      total_size += 1UL * this_._internal_enabled_codecs_size();
      for (const auto& msg : this_._internal_enabled_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // string name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string turn_password = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_turn_password().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_turn_password());
      }
    }
    // string metadata = 8;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_metadata());
      }
    }
    // .livekit.TimedVersion version = 13;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.version_);
    }
    // uint32 empty_timeout = 3;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_empty_timeout() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_empty_timeout());
      }
    }
    // uint32 max_participants = 4;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_max_participants() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_max_participants());
      }
    }
    // int64 creation_time = 5;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_creation_time() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_creation_time());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // uint32 num_participants = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_num_participants() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_participants());
      }
    }
    // bool active_recording = 10;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_active_recording() != 0) {
        total_size += 2;
      }
    }
    // uint32 num_publishers = 11;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_num_publishers() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_num_publishers());
      }
    }
    // uint32 departure_timeout = 14;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_departure_timeout() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_departure_timeout());
      }
    }
    // int64 creation_time_ms = 15;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_creation_time_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_creation_time_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Room::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Room)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_enabled_codecs()->MergeFrom(
      from._internal_enabled_codecs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_turn_password().empty()) {
        _this->_internal_set_turn_password(from._internal_turn_password());
      } else {
        if (_this->_impl_.turn_password_.IsDefault()) {
          _this->_internal_set_turn_password("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_metadata().empty()) {
        _this->_internal_set_metadata(from._internal_metadata());
      } else {
        if (_this->_impl_.metadata_.IsDefault()) {
          _this->_internal_set_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.version_ != nullptr);
      if (_this->_impl_.version_ == nullptr) {
        _this->_impl_.version_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.version_);
      } else {
        _this->_impl_.version_->MergeFrom(*from._impl_.version_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_empty_timeout() != 0) {
        _this->_impl_.empty_timeout_ = from._impl_.empty_timeout_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_max_participants() != 0) {
        _this->_impl_.max_participants_ = from._impl_.max_participants_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_creation_time() != 0) {
        _this->_impl_.creation_time_ = from._impl_.creation_time_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_num_participants() != 0) {
        _this->_impl_.num_participants_ = from._impl_.num_participants_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_active_recording() != 0) {
        _this->_impl_.active_recording_ = from._impl_.active_recording_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_num_publishers() != 0) {
        _this->_impl_.num_publishers_ = from._impl_.num_publishers_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_departure_timeout() != 0) {
        _this->_impl_.departure_timeout_ = from._impl_.departure_timeout_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_creation_time_ms() != 0) {
        _this->_impl_.creation_time_ms_ = from._impl_.creation_time_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Room::InternalSwap(Room* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.enabled_codecs_.InternalSwap(&other->_impl_.enabled_codecs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.turn_password_, &other->_impl_.turn_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, &other->_impl_.metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.creation_time_ms_)
      + sizeof(Room::_impl_.creation_time_ms_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata Room::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Codec::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Codec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Codec, _impl_._has_bits_);
};

Codec::Codec(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Codec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Codec)
}
PROTOBUF_NDEBUG_INLINE Codec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::Codec& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mime_(arena, from.mime_),
        fmtp_line_(arena, from.fmtp_line_) {}

Codec::Codec(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Codec& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Codec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Codec* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.Codec)
}
PROTOBUF_NDEBUG_INLINE Codec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mime_(arena),
        fmtp_line_(arena) {}

inline void Codec::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Codec::~Codec() {
  // @@protoc_insertion_point(destructor:livekit.Codec)
  SharedDtor(*this);
}
inline void Codec::SharedDtor(MessageLite& self) {
  Codec& this_ = static_cast<Codec&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mime_.Destroy();
  this_._impl_.fmtp_line_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Codec::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Codec(arena);
}
constexpr auto Codec::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Codec),
                                            alignof(Codec));
}
constexpr auto Codec::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Codec_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Codec::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Codec>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Codec::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Codec>(), &Codec::ByteSizeLong,
              &Codec::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Codec, _impl_._cached_size_),
          false,
      },
      &Codec::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Codec_class_data_ =
            Codec::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Codec::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Codec_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Codec_class_data_.tc_table);
  return Codec_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 35, 2>
Codec::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Codec, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Codec_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Codec>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string fmtp_line = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Codec, _impl_.fmtp_line_)}},
    // string mime = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Codec, _impl_.mime_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mime = 1;
    {PROTOBUF_FIELD_OFFSET(Codec, _impl_.mime_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string fmtp_line = 2;
    {PROTOBUF_FIELD_OFFSET(Codec, _impl_.fmtp_line_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\15\4\11\0\0\0\0\0"
    "livekit.Codec"
    "mime"
    "fmtp_line"
  }},
};
PROTOBUF_NOINLINE void Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Codec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.mime_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.fmtp_line_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Codec::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Codec& this_ = static_cast<const Codec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Codec::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Codec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Codec)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mime = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_mime().empty()) {
      const std::string& _s = this_._internal_mime();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Codec.mime");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string fmtp_line = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_fmtp_line().empty()) {
      const std::string& _s = this_._internal_fmtp_line();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Codec.fmtp_line");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Codec)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Codec::ByteSizeLong(const MessageLite& base) {
  const Codec& this_ = static_cast<const Codec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Codec::ByteSizeLong() const {
  const Codec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Codec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string mime = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_mime().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime());
      }
    }
    // string fmtp_line = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_fmtp_line().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_fmtp_line());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Codec::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Codec*>(&to_msg);
  auto& from = static_cast<const Codec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Codec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_mime().empty()) {
        _this->_internal_set_mime(from._internal_mime());
      } else {
        if (_this->_impl_.mime_.IsDefault()) {
          _this->_internal_set_mime("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_fmtp_line().empty()) {
        _this->_internal_set_fmtp_line(from._internal_fmtp_line());
      } else {
        if (_this->_impl_.fmtp_line_.IsDefault()) {
          _this->_internal_set_fmtp_line("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Codec::CopyFrom(const Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Codec::InternalSwap(Codec* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_, &other->_impl_.mime_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fmtp_line_, &other->_impl_.fmtp_line_, arena);
}

::google::protobuf::Metadata Codec::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayoutDelay::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlayoutDelay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_._has_bits_);
};

PlayoutDelay::PlayoutDelay(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PlayoutDelay_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.PlayoutDelay)
}
PlayoutDelay::PlayoutDelay(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PlayoutDelay& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PlayoutDelay_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE PlayoutDelay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void PlayoutDelay::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           0,
           offsetof(Impl_, max_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::max_));
}
PlayoutDelay::~PlayoutDelay() {
  // @@protoc_insertion_point(destructor:livekit.PlayoutDelay)
  SharedDtor(*this);
}
inline void PlayoutDelay::SharedDtor(MessageLite& self) {
  PlayoutDelay& this_ = static_cast<PlayoutDelay&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PlayoutDelay::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PlayoutDelay(arena);
}
constexpr auto PlayoutDelay::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PlayoutDelay),
                                            alignof(PlayoutDelay));
}
constexpr auto PlayoutDelay::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PlayoutDelay_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &PlayoutDelay::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PlayoutDelay>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PlayoutDelay::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PlayoutDelay>(), &PlayoutDelay::ByteSizeLong,
              &PlayoutDelay::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_._cached_size_),
          false,
      },
      &PlayoutDelay::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        PlayoutDelay_class_data_ =
            PlayoutDelay::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL PlayoutDelay::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PlayoutDelay_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PlayoutDelay_class_data_.tc_table);
  return PlayoutDelay_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
PlayoutDelay::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    PlayoutDelay_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::PlayoutDelay>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayoutDelay, _impl_.enabled_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.enabled_)}},
    // uint32 min = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayoutDelay, _impl_.min_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.min_)}},
    // uint32 max = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayoutDelay, _impl_.max_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.max_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool enabled = 1;
    {PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.enabled_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 min = 2;
    {PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.min_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 max = 3;
    {PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.max_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void PlayoutDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.PlayoutDelay)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PlayoutDelay::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PlayoutDelay& this_ = static_cast<const PlayoutDelay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PlayoutDelay::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PlayoutDelay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.PlayoutDelay)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool enabled = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_enabled(), target);
    }
  }

  // uint32 min = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_min() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_min(), target);
    }
  }

  // uint32 max = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_max() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_max(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.PlayoutDelay)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PlayoutDelay::ByteSizeLong(const MessageLite& base) {
  const PlayoutDelay& this_ = static_cast<const PlayoutDelay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t PlayoutDelay::ByteSizeLong() const {
  const PlayoutDelay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.PlayoutDelay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // bool enabled = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_enabled() != 0) {
        total_size += 2;
      }
    }
    // uint32 min = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_min() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_min());
      }
    }
    // uint32 max = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_max() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_max());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void PlayoutDelay::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayoutDelay*>(&to_msg);
  auto& from = static_cast<const PlayoutDelay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.PlayoutDelay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_enabled() != 0) {
        _this->_impl_.enabled_ = from._impl_.enabled_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_min() != 0) {
        _this->_impl_.min_ = from._impl_.min_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_max() != 0) {
        _this->_impl_.max_ = from._impl_.max_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayoutDelay::CopyFrom(const PlayoutDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.PlayoutDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayoutDelay::InternalSwap(PlayoutDelay* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.max_)
      + sizeof(PlayoutDelay::_impl_.max_)
      - PROTOBUF_FIELD_OFFSET(PlayoutDelay, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::google::protobuf::Metadata PlayoutDelay::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ParticipantPermission::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ParticipantPermission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_._has_bits_);
};

ParticipantPermission::ParticipantPermission(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantPermission)
}
PROTOBUF_NDEBUG_INLINE ParticipantPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ParticipantPermission& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        can_publish_sources_{visibility, arena, from.can_publish_sources_},
        _can_publish_sources_cached_byte_size_{0} {}

ParticipantPermission::ParticipantPermission(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ParticipantPermission& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ParticipantPermission* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_subscribe_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, can_subscribe_),
           offsetof(Impl_, can_subscribe_metrics_) -
               offsetof(Impl_, can_subscribe_) +
               sizeof(Impl_::can_subscribe_metrics_));

  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantPermission)
}
PROTOBUF_NDEBUG_INLINE ParticipantPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        can_publish_sources_{visibility, arena},
        _can_publish_sources_cached_byte_size_{0} {}

inline void ParticipantPermission::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_subscribe_),
           0,
           offsetof(Impl_, can_subscribe_metrics_) -
               offsetof(Impl_, can_subscribe_) +
               sizeof(Impl_::can_subscribe_metrics_));
}
ParticipantPermission::~ParticipantPermission() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantPermission)
  SharedDtor(*this);
}
inline void ParticipantPermission::SharedDtor(MessageLite& self) {
  ParticipantPermission& this_ = static_cast<ParticipantPermission&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ParticipantPermission::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantPermission(arena);
}
constexpr auto ParticipantPermission::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_sources_) +
          decltype(ParticipantPermission::_impl_.can_publish_sources_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ParticipantPermission), alignof(ParticipantPermission), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ParticipantPermission::PlacementNew_,
                                 sizeof(ParticipantPermission),
                                 alignof(ParticipantPermission));
  }
}
constexpr auto ParticipantPermission::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantPermission_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantPermission::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantPermission>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantPermission::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ParticipantPermission>(), &ParticipantPermission::ByteSizeLong,
              &ParticipantPermission::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_._cached_size_),
          false,
      },
      &ParticipantPermission::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantPermission_class_data_ =
            ParticipantPermission::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantPermission::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantPermission_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantPermission_class_data_.tc_table);
  return ParticipantPermission_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 0, 2>
ParticipantPermission::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963256,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ParticipantPermission_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantPermission>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool can_subscribe = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.can_subscribe_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_)}},
    // bool can_publish = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.can_publish_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_)}},
    // bool can_publish_data = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.can_publish_data_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool hidden = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.hidden_), 3>(),
     {56, 3, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.hidden_)}},
    // bool recorder = 8 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.recorder_), 4>(),
     {64, 4, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.recorder_)}},
    // repeated .livekit.TrackSource can_publish_sources = 9;
    {::_pbi::TcParser::FastV32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_sources_)}},
    // bool can_update_metadata = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.can_update_metadata_), 5>(),
     {80, 5, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_update_metadata_)}},
    // bool agent = 11 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.agent_), 6>(),
     {88, 6, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.agent_)}},
    // bool can_subscribe_metrics = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantPermission, _impl_.can_subscribe_metrics_), 7>(),
     {96, 7, 0, PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_metrics_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool can_subscribe = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool can_publish = 2;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool can_publish_data = 3;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_data_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool hidden = 7;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.hidden_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool recorder = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.recorder_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .livekit.TrackSource can_publish_sources = 9;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_publish_sources_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // bool can_update_metadata = 10;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_update_metadata_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool agent = 11 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.agent_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool can_subscribe_metrics = 12;
    {PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_metrics_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ParticipantPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantPermission)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.can_publish_sources_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.can_subscribe_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.can_subscribe_metrics_) -
        reinterpret_cast<char*>(&_impl_.can_subscribe_)) + sizeof(_impl_.can_subscribe_metrics_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ParticipantPermission::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ParticipantPermission& this_ = static_cast<const ParticipantPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ParticipantPermission::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ParticipantPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantPermission)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool can_subscribe = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_can_subscribe() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_can_subscribe(), target);
    }
  }

  // bool can_publish = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_can_publish() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_can_publish(), target);
    }
  }

  // bool can_publish_data = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_can_publish_data() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_can_publish_data(), target);
    }
  }

  // bool hidden = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_hidden() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_hidden(), target);
    }
  }

  // bool recorder = 8 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_recorder() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_recorder(), target);
    }
  }

  // repeated .livekit.TrackSource can_publish_sources = 9;
  {
    std::size_t byte_size =
                                      this_._impl_._can_publish_sources_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, this_._internal_can_publish_sources(), byte_size, target);
    }
  }

  // bool can_update_metadata = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_can_update_metadata() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          10, this_._internal_can_update_metadata(), target);
    }
  }

  // bool agent = 11 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_agent() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          11, this_._internal_agent(), target);
    }
  }

  // bool can_subscribe_metrics = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_can_subscribe_metrics() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_can_subscribe_metrics(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantPermission)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ParticipantPermission::ByteSizeLong(const MessageLite& base) {
  const ParticipantPermission& this_ = static_cast<const ParticipantPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ParticipantPermission::ByteSizeLong() const {
  const ParticipantPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantPermission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TrackSource can_publish_sources = 9;
    {
      total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
          this_._internal_can_publish_sources(), 1, this_._impl_._can_publish_sources_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // bool can_subscribe = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_can_subscribe() != 0) {
        total_size += 2;
      }
    }
    // bool can_publish = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_can_publish() != 0) {
        total_size += 2;
      }
    }
    // bool can_publish_data = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_can_publish_data() != 0) {
        total_size += 2;
      }
    }
    // bool hidden = 7;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_hidden() != 0) {
        total_size += 2;
      }
    }
    // bool recorder = 8 [deprecated = true];
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_recorder() != 0) {
        total_size += 2;
      }
    }
    // bool can_update_metadata = 10;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_can_update_metadata() != 0) {
        total_size += 2;
      }
    }
    // bool agent = 11 [deprecated = true];
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_agent() != 0) {
        total_size += 2;
      }
    }
    // bool can_subscribe_metrics = 12;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_can_subscribe_metrics() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ParticipantPermission::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ParticipantPermission*>(&to_msg);
  auto& from = static_cast<const ParticipantPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantPermission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_can_publish_sources()->MergeFrom(from._internal_can_publish_sources());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_can_subscribe() != 0) {
        _this->_impl_.can_subscribe_ = from._impl_.can_subscribe_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_can_publish() != 0) {
        _this->_impl_.can_publish_ = from._impl_.can_publish_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_can_publish_data() != 0) {
        _this->_impl_.can_publish_data_ = from._impl_.can_publish_data_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_hidden() != 0) {
        _this->_impl_.hidden_ = from._impl_.hidden_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_recorder() != 0) {
        _this->_impl_.recorder_ = from._impl_.recorder_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_can_update_metadata() != 0) {
        _this->_impl_.can_update_metadata_ = from._impl_.can_update_metadata_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_agent() != 0) {
        _this->_impl_.agent_ = from._impl_.agent_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_can_subscribe_metrics() != 0) {
        _this->_impl_.can_subscribe_metrics_ = from._impl_.can_subscribe_metrics_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantPermission::CopyFrom(const ParticipantPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ParticipantPermission::InternalSwap(ParticipantPermission* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.can_publish_sources_.InternalSwap(&other->_impl_.can_publish_sources_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_metrics_)
      + sizeof(ParticipantPermission::_impl_.can_subscribe_metrics_)
      - PROTOBUF_FIELD_OFFSET(ParticipantPermission, _impl_.can_subscribe_)>(
          reinterpret_cast<char*>(&_impl_.can_subscribe_),
          reinterpret_cast<char*>(&other->_impl_.can_subscribe_));
}

::google::protobuf::Metadata ParticipantPermission::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse()
    : SuperType(ParticipantInfo_AttributesEntry_DoNotUse_class_data_.base()) {}
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, ParticipantInfo_AttributesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse() : SuperType() {}
ParticipantInfo_AttributesEntry_DoNotUse::ParticipantInfo_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL ParticipantInfo_AttributesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantInfo_AttributesEntry_DoNotUse(arena);
}
constexpr auto ParticipantInfo_AttributesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ParticipantInfo_AttributesEntry_DoNotUse),
                                            alignof(ParticipantInfo_AttributesEntry_DoNotUse));
}
constexpr auto ParticipantInfo_AttributesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantInfo_AttributesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantInfo_AttributesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantInfo_AttributesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&ParticipantInfo_AttributesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &ParticipantInfo_AttributesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantInfo_AttributesEntry_DoNotUse_class_data_ =
            ParticipantInfo_AttributesEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantInfo_AttributesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantInfo_AttributesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantInfo_AttributesEntry_DoNotUse_class_data_.tc_table);
  return ParticipantInfo_AttributesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 56, 2>
ParticipantInfo_AttributesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ParticipantInfo_AttributesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantInfo_AttributesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo_AttributesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\3\5\0\0\0\0\0"
    "livekit.ParticipantInfo.AttributesEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class ParticipantInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ParticipantInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_._has_bits_);
};

ParticipantInfo::ParticipantInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantInfo)
}
PROTOBUF_NDEBUG_INLINE ParticipantInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ParticipantInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tracks_{visibility, arena, from.tracks_},
        attributes_{visibility, arena, from.attributes_},
        sid_(arena, from.sid_),
        identity_(arena, from.identity_),
        metadata_(arena, from.metadata_),
        name_(arena, from.name_),
        region_(arena, from.region_) {}

ParticipantInfo::ParticipantInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ParticipantInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ParticipantInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.permission_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.permission_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joined_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, joined_at_),
           offsetof(Impl_, disconnect_reason_) -
               offsetof(Impl_, joined_at_) +
               sizeof(Impl_::disconnect_reason_));

  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantInfo)
}
PROTOBUF_NDEBUG_INLINE ParticipantInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        tracks_{visibility, arena},
        attributes_{visibility, arena},
        sid_(arena),
        identity_(arena),
        metadata_(arena),
        name_(arena),
        region_(arena) {}

inline void ParticipantInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, permission_),
           0,
           offsetof(Impl_, disconnect_reason_) -
               offsetof(Impl_, permission_) +
               sizeof(Impl_::disconnect_reason_));
}
ParticipantInfo::~ParticipantInfo() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantInfo)
  SharedDtor(*this);
}
inline void ParticipantInfo::SharedDtor(MessageLite& self) {
  ParticipantInfo& this_ = static_cast<ParticipantInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sid_.Destroy();
  this_._impl_.identity_.Destroy();
  this_._impl_.metadata_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.region_.Destroy();
  delete this_._impl_.permission_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ParticipantInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantInfo(arena);
}
constexpr auto ParticipantInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.tracks_) +
          decltype(ParticipantInfo::_impl_.tracks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.attributes_) +
          decltype(ParticipantInfo::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.attributes_) +
          decltype(ParticipantInfo::_impl_.attributes_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ParticipantInfo), alignof(ParticipantInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ParticipantInfo::PlacementNew_,
                                 sizeof(ParticipantInfo),
                                 alignof(ParticipantInfo));
  }
}
constexpr auto ParticipantInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ParticipantInfo>(), &ParticipantInfo::ByteSizeLong,
              &ParticipantInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_._cached_size_),
          false,
      },
      &ParticipantInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantInfo_class_data_ =
            ParticipantInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantInfo_class_data_.tc_table);
  return ParticipantInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 3, 79, 2>
ParticipantInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_._has_bits_),
    0, // no _extensions_
    17, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836416,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ParticipantInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.DisconnectReason disconnect_reason = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 12, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.disconnect_reason_)}},
    // string sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.sid_)}},
    // string identity = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.identity_)}},
    // .livekit.ParticipantInfo.State state = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ParticipantInfo, _impl_.state_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.state_)}},
    // repeated .livekit.TrackInfo tracks = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.tracks_)}},
    // string metadata = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.metadata_)}},
    // int64 joined_at = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ParticipantInfo, _impl_.joined_at_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.joined_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.name_)}},
    // uint32 version = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ParticipantInfo, _impl_.version_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.version_)}},
    // .livekit.ParticipantPermission permission = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 5, 1, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.permission_)}},
    // string region = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 4, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.region_)}},
    // bool is_publisher = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantInfo, _impl_.is_publisher_), 9>(),
     {104, 9, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.is_publisher_)}},
    // .livekit.ParticipantInfo.Kind kind = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ParticipantInfo, _impl_.kind_), 10>(),
     {112, 10, 0, PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string sid = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string identity = 2;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.identity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ParticipantInfo.State state = 3;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.state_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // repeated .livekit.TrackInfo tracks = 4;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.tracks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string metadata = 5;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.metadata_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 joined_at = 6;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.joined_at_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string name = 9;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.name_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 version = 10;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.version_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .livekit.ParticipantPermission permission = 11;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.permission_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string region = 12;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.region_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_publisher = 13;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.is_publisher_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.ParticipantInfo.Kind kind = 14;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.kind_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // map<string, string> attributes = 15;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.attributes_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .livekit.DisconnectReason disconnect_reason = 16;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.disconnect_reason_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // int64 joined_at_ms = 17;
    {PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.joined_at_ms_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::TrackInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::ParticipantPermission>()},
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\27\3\10\0\0\10\0\4\0\0\6\0\0\12\0\0"
    "livekit.ParticipantInfo"
    "sid"
    "identity"
    "metadata"
    "name"
    "region"
    "attributes"
  }},
};
PROTOBUF_NOINLINE void ParticipantInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracks_.Clear();
  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.permission_ != nullptr);
      _impl_.permission_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000c0u) != 0) {
    ::memset(&_impl_.joined_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.joined_at_)) + sizeof(_impl_.state_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.disconnect_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ParticipantInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ParticipantInfo& this_ = static_cast<const ParticipantInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ParticipantInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ParticipantInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string identity = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_identity().empty()) {
      const std::string& _s = this_._internal_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.identity");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .livekit.ParticipantInfo.State state = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_state() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_state(), target);
    }
  }

  // repeated .livekit.TrackInfo tracks = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_tracks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_tracks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string metadata = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_metadata().empty()) {
      const std::string& _s = this_._internal_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.metadata");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // int64 joined_at = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_joined_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
              stream, this_._internal_joined_at(), target);
    }
  }

  // string name = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.name");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // uint32 version = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_version(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.ParticipantPermission permission = 11;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.permission_, this_._impl_.permission_->GetCachedSize(), target,
        stream);
  }

  // string region = 12;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_region().empty()) {
      const std::string& _s = this_._internal_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.region");
      target = stream->WriteStringMaybeAliased(12, _s, target);
    }
  }

  // bool is_publisher = 13;
  if ((cached_has_bits & 0x00000200u) != 0) {
    if (this_._internal_is_publisher() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          13, this_._internal_is_publisher(), target);
    }
  }

  // .livekit.ParticipantInfo.Kind kind = 14;
  if ((cached_has_bits & 0x00000400u) != 0) {
    if (this_._internal_kind() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          14, this_._internal_kind(), target);
    }
  }

  // map<string, string> attributes = 15;
  if (!this_._internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantInfo.attributes");
      }
    }
  }

  // .livekit.DisconnectReason disconnect_reason = 16;
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_disconnect_reason() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          16, this_._internal_disconnect_reason(), target);
    }
  }

  // int64 joined_at_ms = 17;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (this_._internal_joined_at_ms() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          17, this_._internal_joined_at_ms(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ParticipantInfo::ByteSizeLong(const MessageLite& base) {
  const ParticipantInfo& this_ = static_cast<const ParticipantInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ParticipantInfo::ByteSizeLong() const {
  const ParticipantInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TrackInfo tracks = 4;
    {
      total_size += 1UL * this_._internal_tracks_size();
      for (const auto& msg : this_._internal_tracks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // map<string, string> attributes = 15;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_attributes_size());
      for (const auto& entry : this_._internal_attributes()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // string identity = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_identity());
      }
    }
    // string metadata = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_metadata());
      }
    }
    // string name = 9;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string region = 12;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_region());
      }
    }
    // .livekit.ParticipantPermission permission = 11;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.permission_);
    }
    // int64 joined_at = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_joined_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_joined_at());
      }
    }
    // .livekit.ParticipantInfo.State state = 3;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_state() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_state());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // uint32 version = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
    // bool is_publisher = 13;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_is_publisher() != 0) {
        total_size += 2;
      }
    }
    // .livekit.ParticipantInfo.Kind kind = 14;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_kind() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_kind());
      }
    }
    // int64 joined_at_ms = 17;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_joined_at_ms() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                        this_._internal_joined_at_ms());
      }
    }
    // .livekit.DisconnectReason disconnect_reason = 16;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_disconnect_reason() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_disconnect_reason());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ParticipantInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ParticipantInfo*>(&to_msg);
  auto& from = static_cast<const ParticipantInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tracks()->MergeFrom(
      from._internal_tracks());
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_identity().empty()) {
        _this->_internal_set_identity(from._internal_identity());
      } else {
        if (_this->_impl_.identity_.IsDefault()) {
          _this->_internal_set_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_metadata().empty()) {
        _this->_internal_set_metadata(from._internal_metadata());
      } else {
        if (_this->_impl_.metadata_.IsDefault()) {
          _this->_internal_set_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_region().empty()) {
        _this->_internal_set_region(from._internal_region());
      } else {
        if (_this->_impl_.region_.IsDefault()) {
          _this->_internal_set_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.permission_ != nullptr);
      if (_this->_impl_.permission_ == nullptr) {
        _this->_impl_.permission_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.permission_);
      } else {
        _this->_impl_.permission_->MergeFrom(*from._impl_.permission_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_joined_at() != 0) {
        _this->_impl_.joined_at_ = from._impl_.joined_at_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_state() != 0) {
        _this->_impl_.state_ = from._impl_.state_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_is_publisher() != 0) {
        _this->_impl_.is_publisher_ = from._impl_.is_publisher_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_kind() != 0) {
        _this->_impl_.kind_ = from._impl_.kind_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_joined_at_ms() != 0) {
        _this->_impl_.joined_at_ms_ = from._impl_.joined_at_ms_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_disconnect_reason() != 0) {
        _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantInfo::CopyFrom(const ParticipantInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ParticipantInfo::InternalSwap(ParticipantInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tracks_.InternalSwap(&other->_impl_.tracks_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_, &other->_impl_.identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, &other->_impl_.metadata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.disconnect_reason_)
      + sizeof(ParticipantInfo::_impl_.disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(ParticipantInfo, _impl_.permission_)>(
          reinterpret_cast<char*>(&_impl_.permission_),
          reinterpret_cast<char*>(&other->_impl_.permission_));
}

::google::protobuf::Metadata ParticipantInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Encryption::_Internal {
 public:
};

Encryption::Encryption(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, Encryption_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:livekit.Encryption)
}
Encryption::Encryption(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Encryption& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, Encryption_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Encryption* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:livekit.Encryption)
}

inline void* PROTOBUF_NONNULL Encryption::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Encryption(arena);
}
constexpr auto Encryption::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Encryption),
                                            alignof(Encryption));
}
constexpr auto Encryption::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Encryption_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Encryption::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Encryption>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Encryption::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Encryption>(), &Encryption::ByteSizeLong,
              &Encryption::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Encryption, _impl_._cached_size_),
          false,
      },
      &Encryption::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Encryption_class_data_ =
            Encryption::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Encryption::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Encryption_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Encryption_class_data_.tc_table);
  return Encryption_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
Encryption::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Encryption_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Encryption>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata Encryption::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimulcastCodecInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimulcastCodecInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_._has_bits_);
};

SimulcastCodecInfo::SimulcastCodecInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulcastCodecInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulcastCodecInfo)
}
PROTOBUF_NDEBUG_INLINE SimulcastCodecInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SimulcastCodecInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layers_{visibility, arena, from.layers_},
        mime_type_(arena, from.mime_type_),
        mid_(arena, from.mid_),
        cid_(arena, from.cid_) {}

SimulcastCodecInfo::SimulcastCodecInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SimulcastCodecInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulcastCodecInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimulcastCodecInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SimulcastCodecInfo)
}
PROTOBUF_NDEBUG_INLINE SimulcastCodecInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        layers_{visibility, arena},
        mime_type_(arena),
        mid_(arena),
        cid_(arena) {}

inline void SimulcastCodecInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SimulcastCodecInfo::~SimulcastCodecInfo() {
  // @@protoc_insertion_point(destructor:livekit.SimulcastCodecInfo)
  SharedDtor(*this);
}
inline void SimulcastCodecInfo::SharedDtor(MessageLite& self) {
  SimulcastCodecInfo& this_ = static_cast<SimulcastCodecInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mime_type_.Destroy();
  this_._impl_.mid_.Destroy();
  this_._impl_.cid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SimulcastCodecInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SimulcastCodecInfo(arena);
}
constexpr auto SimulcastCodecInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.layers_) +
          decltype(SimulcastCodecInfo::_impl_.layers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SimulcastCodecInfo), alignof(SimulcastCodecInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SimulcastCodecInfo::PlacementNew_,
                                 sizeof(SimulcastCodecInfo),
                                 alignof(SimulcastCodecInfo));
  }
}
constexpr auto SimulcastCodecInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SimulcastCodecInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SimulcastCodecInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SimulcastCodecInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SimulcastCodecInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SimulcastCodecInfo>(), &SimulcastCodecInfo::ByteSizeLong,
              &SimulcastCodecInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_._cached_size_),
          false,
      },
      &SimulcastCodecInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SimulcastCodecInfo_class_data_ =
            SimulcastCodecInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SimulcastCodecInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SimulcastCodecInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SimulcastCodecInfo_class_data_.tc_table);
  return SimulcastCodecInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 50, 2>
SimulcastCodecInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SimulcastCodecInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SimulcastCodecInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.VideoLayer layers = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.layers_)}},
    // string mime_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.mime_type_)}},
    // string mid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.mid_)}},
    // string cid = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.cid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mime_type = 1;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.mime_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mid = 2;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.mid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cid = 3;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.cid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.VideoLayer layers = 4;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodecInfo, _impl_.layers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoLayer>()},
  }},
  {{
    "\32\11\3\3\0\0\0\0"
    "livekit.SimulcastCodecInfo"
    "mime_type"
    "mid"
    "cid"
  }},
};
PROTOBUF_NOINLINE void SimulcastCodecInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulcastCodecInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.mid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.cid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SimulcastCodecInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SimulcastCodecInfo& this_ = static_cast<const SimulcastCodecInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SimulcastCodecInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SimulcastCodecInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulcastCodecInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mime_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_mime_type().empty()) {
      const std::string& _s = this_._internal_mime_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SimulcastCodecInfo.mime_type");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string mid = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_mid().empty()) {
      const std::string& _s = this_._internal_mid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SimulcastCodecInfo.mid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string cid = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_cid().empty()) {
      const std::string& _s = this_._internal_cid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SimulcastCodecInfo.cid");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // repeated .livekit.VideoLayer layers = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_layers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulcastCodecInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SimulcastCodecInfo::ByteSizeLong(const MessageLite& base) {
  const SimulcastCodecInfo& this_ = static_cast<const SimulcastCodecInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SimulcastCodecInfo::ByteSizeLong() const {
  const SimulcastCodecInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SimulcastCodecInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.VideoLayer layers = 4;
    {
      total_size += 1UL * this_._internal_layers_size();
      for (const auto& msg : this_._internal_layers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string mime_type = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_mime_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime_type());
      }
    }
    // string mid = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_mid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mid());
      }
    }
    // string cid = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_cid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SimulcastCodecInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimulcastCodecInfo*>(&to_msg);
  auto& from = static_cast<const SimulcastCodecInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulcastCodecInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_mime_type().empty()) {
        _this->_internal_set_mime_type(from._internal_mime_type());
      } else {
        if (_this->_impl_.mime_type_.IsDefault()) {
          _this->_internal_set_mime_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_mid().empty()) {
        _this->_internal_set_mid(from._internal_mid());
      } else {
        if (_this->_impl_.mid_.IsDefault()) {
          _this->_internal_set_mid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_cid().empty()) {
        _this->_internal_set_cid(from._internal_cid());
      } else {
        if (_this->_impl_.cid_.IsDefault()) {
          _this->_internal_set_cid("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimulcastCodecInfo::CopyFrom(const SimulcastCodecInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulcastCodecInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimulcastCodecInfo::InternalSwap(SimulcastCodecInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mid_, &other->_impl_.mid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cid_, &other->_impl_.cid_, arena);
}

::google::protobuf::Metadata SimulcastCodecInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_._has_bits_);
};

TrackInfo::TrackInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackInfo)
}
PROTOBUF_NDEBUG_INLINE TrackInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layers_{visibility, arena, from.layers_},
        codecs_{visibility, arena, from.codecs_},
        audio_features_{visibility, arena, from.audio_features_},
        _audio_features_cached_byte_size_{0},
        sid_(arena, from.sid_),
        name_(arena, from.name_),
        mime_type_(arena, from.mime_type_),
        mid_(arena, from.mid_),
        stream_(arena, from.stream_) {}

TrackInfo::TrackInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.version_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, backup_codec_policy_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::backup_codec_policy_));

  // @@protoc_insertion_point(copy_constructor:livekit.TrackInfo)
}
PROTOBUF_NDEBUG_INLINE TrackInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        layers_{visibility, arena},
        codecs_{visibility, arena},
        audio_features_{visibility, arena},
        _audio_features_cached_byte_size_{0},
        sid_(arena),
        name_(arena),
        mime_type_(arena),
        mid_(arena),
        stream_(arena) {}

inline void TrackInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           0,
           offsetof(Impl_, backup_codec_policy_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::backup_codec_policy_));
}
TrackInfo::~TrackInfo() {
  // @@protoc_insertion_point(destructor:livekit.TrackInfo)
  SharedDtor(*this);
}
inline void TrackInfo::SharedDtor(MessageLite& self) {
  TrackInfo& this_ = static_cast<TrackInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.mime_type_.Destroy();
  this_._impl_.mid_.Destroy();
  this_._impl_.stream_.Destroy();
  delete this_._impl_.version_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrackInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackInfo(arena);
}
constexpr auto TrackInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.layers_) +
          decltype(TrackInfo::_impl_.layers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.codecs_) +
          decltype(TrackInfo::_impl_.codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.audio_features_) +
          decltype(TrackInfo::_impl_.audio_features_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TrackInfo), alignof(TrackInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TrackInfo::PlacementNew_,
                                 sizeof(TrackInfo),
                                 alignof(TrackInfo));
  }
}
constexpr auto TrackInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackInfo>(), &TrackInfo::ByteSizeLong,
              &TrackInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_._cached_size_),
          false,
      },
      &TrackInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackInfo_class_data_ =
            TrackInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackInfo_class_data_.tc_table);
  return TrackInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 3, 67, 2>
TrackInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrackInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.sid_)}},
    // .livekit.TrackType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrackInfo, _impl_.type_), 6>(),
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.name_)}},
    // bool muted = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackInfo, _impl_.muted_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.muted_)}},
    // uint32 width = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrackInfo, _impl_.width_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.width_)}},
    // uint32 height = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrackInfo, _impl_.height_), 8>(),
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.height_)}},
    // bool simulcast = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackInfo, _impl_.simulcast_), 10>(),
     {56, 10, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.simulcast_)}},
    // bool disable_dtx = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackInfo, _impl_.disable_dtx_), 11>(),
     {64, 11, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.disable_dtx_)}},
    // .livekit.TrackSource source = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrackInfo, _impl_.source_), 13>(),
     {72, 13, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.source_)}},
    // repeated .livekit.VideoLayer layers = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.layers_)}},
    // string mime_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.mime_type_)}},
    // string mid = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 3, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.mid_)}},
    // repeated .livekit.SimulcastCodecInfo codecs = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 1, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.codecs_)}},
    // bool stereo = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackInfo, _impl_.stereo_), 12>(),
     {112, 12, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.stereo_)}},
    // bool disable_red = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackInfo, _impl_.disable_red_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.disable_red_)}},
    // .livekit.Encryption.Type encryption = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.encryption_)}},
    // string stream = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 4, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.stream_)}},
    // .livekit.TimedVersion version = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 5, 2, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.version_)}},
    // repeated .livekit.AudioTrackFeature audio_features = 19;
    {::_pbi::TcParser::FastV32P2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.audio_features_)}},
    // .livekit.BackupCodecPolicy backup_codec_policy = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 16, 0, PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.backup_codec_policy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string sid = 1;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackType type = 2;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.type_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool muted = 4;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.muted_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 width = 5;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.width_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 6;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.height_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool simulcast = 7;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.simulcast_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool disable_dtx = 8;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.disable_dtx_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.TrackSource source = 9;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.source_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // repeated .livekit.VideoLayer layers = 10;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.layers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string mime_type = 11;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.mime_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mid = 12;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.mid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.SimulcastCodecInfo codecs = 13;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.codecs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool stereo = 14;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.stereo_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool disable_red = 15;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.disable_red_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.Encryption.Type encryption = 16;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.encryption_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string stream = 17;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.stream_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TimedVersion version = 18;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.version_), _Internal::kHasBitsOffset + 5, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.AudioTrackFeature audio_features = 19;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.audio_features_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .livekit.BackupCodecPolicy backup_codec_policy = 20;
    {PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.backup_codec_policy_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoLayer>()},
      {::_pbi::TcParser::GetTable<::livekit::SimulcastCodecInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::TimedVersion>()},
  }},
  {{
    "\21\3\0\4\0\0\0\0\0\0\0\11\3\0\0\0\0\6\0\0\0\0\0\0"
    "livekit.TrackInfo"
    "sid"
    "name"
    "mime_type"
    "mid"
    "stream"
  }},
};
PROTOBUF_NOINLINE void TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.codecs_.Clear();
  _impl_.audio_features_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.mid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.stream_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000c0u) != 0) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.width_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.height_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encryption_) -
        reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.encryption_));
  }
  _impl_.backup_codec_policy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackInfo& this_ = static_cast<const TrackInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackInfo.sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.TrackType type = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_type(), target);
    }
  }

  // string name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackInfo.name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // bool muted = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_muted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_muted(), target);
    }
  }

  // uint32 width = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_width(), target);
    }
  }

  // uint32 height = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_height(), target);
    }
  }

  // bool simulcast = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_simulcast() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_simulcast(), target);
    }
  }

  // bool disable_dtx = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_disable_dtx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_disable_dtx(), target);
    }
  }

  // .livekit.TrackSource source = 9;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (this_._internal_source() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          9, this_._internal_source(), target);
    }
  }

  // repeated .livekit.VideoLayer layers = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_layers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string mime_type = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_mime_type().empty()) {
      const std::string& _s = this_._internal_mime_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackInfo.mime_type");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  // string mid = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_mid().empty()) {
      const std::string& _s = this_._internal_mid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackInfo.mid");
      target = stream->WriteStringMaybeAliased(12, _s, target);
    }
  }

  // repeated .livekit.SimulcastCodecInfo codecs = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool stereo = 14;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_stereo() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          14, this_._internal_stereo(), target);
    }
  }

  // bool disable_red = 15;
  if ((this_._impl_._has_bits_[0] & 0x00004000u) != 0) {
    if (this_._internal_disable_red() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          15, this_._internal_disable_red(), target);
    }
  }

  // .livekit.Encryption.Type encryption = 16;
  if ((this_._impl_._has_bits_[0] & 0x00008000u) != 0) {
    if (this_._internal_encryption() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          16, this_._internal_encryption(), target);
    }
  }

  // string stream = 17;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_stream().empty()) {
      const std::string& _s = this_._internal_stream();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackInfo.stream");
      target = stream->WriteStringMaybeAliased(17, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.TimedVersion version = 18;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.version_, this_._impl_.version_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.AudioTrackFeature audio_features = 19;
  {
    std::size_t byte_size =
                                      this_._impl_._audio_features_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          19, this_._internal_audio_features(), byte_size, target);
    }
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 20;
  if ((cached_has_bits & 0x00010000u) != 0) {
    if (this_._internal_backup_codec_policy() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          20, this_._internal_backup_codec_policy(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackInfo::ByteSizeLong(const MessageLite& base) {
  const TrackInfo& this_ = static_cast<const TrackInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackInfo::ByteSizeLong() const {
  const TrackInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.VideoLayer layers = 10;
    {
      total_size += 1UL * this_._internal_layers_size();
      for (const auto& msg : this_._internal_layers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SimulcastCodecInfo codecs = 13;
    {
      total_size += 1UL * this_._internal_codecs_size();
      for (const auto& msg : this_._internal_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.AudioTrackFeature audio_features = 19;
    {
      total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
          this_._internal_audio_features(), 2, this_._impl_._audio_features_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // string name = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string mime_type = 11;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_mime_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime_type());
      }
    }
    // string mid = 12;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_mid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mid());
      }
    }
    // string stream = 17;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_stream().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream());
      }
    }
    // .livekit.TimedVersion version = 18;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.version_);
    }
    // .livekit.TrackType type = 2;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
    // uint32 width = 5;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // uint32 height = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
    // bool muted = 4;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_muted() != 0) {
        total_size += 2;
      }
    }
    // bool simulcast = 7;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_simulcast() != 0) {
        total_size += 2;
      }
    }
    // bool disable_dtx = 8;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_disable_dtx() != 0) {
        total_size += 2;
      }
    }
    // bool stereo = 14;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_stereo() != 0) {
        total_size += 2;
      }
    }
    // .livekit.TrackSource source = 9;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_source() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_source());
      }
    }
    // bool disable_red = 15;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_disable_red() != 0) {
        total_size += 2;
      }
    }
    // .livekit.Encryption.Type encryption = 16;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (this_._internal_encryption() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_encryption());
      }
    }
  }
   {
    // .livekit.BackupCodecPolicy backup_codec_policy = 20;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (this_._internal_backup_codec_policy() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_backup_codec_policy());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackInfo*>(&to_msg);
  auto& from = static_cast<const TrackInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  _this->_internal_mutable_codecs()->MergeFrom(
      from._internal_codecs());
  _this->_internal_mutable_audio_features()->MergeFrom(from._internal_audio_features());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_mime_type().empty()) {
        _this->_internal_set_mime_type(from._internal_mime_type());
      } else {
        if (_this->_impl_.mime_type_.IsDefault()) {
          _this->_internal_set_mime_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_mid().empty()) {
        _this->_internal_set_mid(from._internal_mid());
      } else {
        if (_this->_impl_.mid_.IsDefault()) {
          _this->_internal_set_mid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_stream().empty()) {
        _this->_internal_set_stream(from._internal_stream());
      } else {
        if (_this->_impl_.stream_.IsDefault()) {
          _this->_internal_set_stream("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.version_ != nullptr);
      if (_this->_impl_.version_ == nullptr) {
        _this->_impl_.version_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.version_);
      } else {
        _this->_impl_.version_->MergeFrom(*from._impl_.version_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_muted() != 0) {
        _this->_impl_.muted_ = from._impl_.muted_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_simulcast() != 0) {
        _this->_impl_.simulcast_ = from._impl_.simulcast_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_disable_dtx() != 0) {
        _this->_impl_.disable_dtx_ = from._impl_.disable_dtx_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_stereo() != 0) {
        _this->_impl_.stereo_ = from._impl_.stereo_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_source() != 0) {
        _this->_impl_.source_ = from._impl_.source_;
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_disable_red() != 0) {
        _this->_impl_.disable_red_ = from._impl_.disable_red_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (from._internal_encryption() != 0) {
        _this->_impl_.encryption_ = from._impl_.encryption_;
      }
    }
  }
  if ((cached_has_bits & 0x00010000u) != 0) {
    if (from._internal_backup_codec_policy() != 0) {
      _this->_impl_.backup_codec_policy_ = from._impl_.backup_codec_policy_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackInfo::CopyFrom(const TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackInfo::InternalSwap(TrackInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.codecs_.InternalSwap(&other->_impl_.codecs_);
  _impl_.audio_features_.InternalSwap(&other->_impl_.audio_features_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mid_, &other->_impl_.mid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_, &other->_impl_.stream_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.backup_codec_policy_)
      + sizeof(TrackInfo::_impl_.backup_codec_policy_)
      - PROTOBUF_FIELD_OFFSET(TrackInfo, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::google::protobuf::Metadata TrackInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VideoLayer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VideoLayer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_._has_bits_);
};

VideoLayer::VideoLayer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VideoLayer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.VideoLayer)
}
VideoLayer::VideoLayer(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoLayer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VideoLayer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE VideoLayer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VideoLayer::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_),
           0,
           offsetof(Impl_, ssrc_) -
               offsetof(Impl_, quality_) +
               sizeof(Impl_::ssrc_));
}
VideoLayer::~VideoLayer() {
  // @@protoc_insertion_point(destructor:livekit.VideoLayer)
  SharedDtor(*this);
}
inline void VideoLayer::SharedDtor(MessageLite& self) {
  VideoLayer& this_ = static_cast<VideoLayer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VideoLayer::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VideoLayer(arena);
}
constexpr auto VideoLayer::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VideoLayer),
                                            alignof(VideoLayer));
}
constexpr auto VideoLayer::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VideoLayer_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VideoLayer::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VideoLayer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VideoLayer::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VideoLayer>(), &VideoLayer::ByteSizeLong,
              &VideoLayer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_._cached_size_),
          false,
      },
      &VideoLayer::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        VideoLayer_class_data_ =
            VideoLayer::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL VideoLayer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VideoLayer_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VideoLayer_class_data_.tc_table);
  return VideoLayer_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2>
VideoLayer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    VideoLayer_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::VideoLayer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.VideoQuality quality = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoLayer, _impl_.quality_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.quality_)}},
    // uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoLayer, _impl_.width_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.width_)}},
    // uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoLayer, _impl_.height_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.height_)}},
    // uint32 bitrate = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoLayer, _impl_.bitrate_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.bitrate_)}},
    // uint32 ssrc = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoLayer, _impl_.ssrc_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.ssrc_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.VideoQuality quality = 1;
    {PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.quality_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.width_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.height_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 bitrate = 4;
    {PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.bitrate_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 ssrc = 5;
    {PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.ssrc_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void VideoLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoLayer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    ::memset(&_impl_.quality_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ssrc_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.ssrc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VideoLayer::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VideoLayer& this_ = static_cast<const VideoLayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VideoLayer::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VideoLayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoLayer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_quality() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_quality(), target);
    }
  }

  // uint32 width = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_width(), target);
    }
  }

  // uint32 height = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_height(), target);
    }
  }

  // uint32 bitrate = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_bitrate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_bitrate(), target);
    }
  }

  // uint32 ssrc = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_ssrc() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_ssrc(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoLayer)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VideoLayer::ByteSizeLong(const MessageLite& base) {
  const VideoLayer& this_ = static_cast<const VideoLayer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VideoLayer::ByteSizeLong() const {
  const VideoLayer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.VideoLayer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .livekit.VideoQuality quality = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_quality() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_quality());
      }
    }
    // uint32 width = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
    // uint32 height = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
    // uint32 bitrate = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_bitrate());
      }
    }
    // uint32 ssrc = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_ssrc() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_ssrc());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VideoLayer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VideoLayer*>(&to_msg);
  auto& from = static_cast<const VideoLayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoLayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_quality() != 0) {
        _this->_impl_.quality_ = from._impl_.quality_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_bitrate() != 0) {
        _this->_impl_.bitrate_ = from._impl_.bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_ssrc() != 0) {
        _this->_impl_.ssrc_ = from._impl_.ssrc_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VideoLayer::CopyFrom(const VideoLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VideoLayer::InternalSwap(VideoLayer* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.ssrc_)
      + sizeof(VideoLayer::_impl_.ssrc_)
      - PROTOBUF_FIELD_OFFSET(VideoLayer, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::google::protobuf::Metadata VideoLayer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataPacket::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataPacket, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::DataPacket, _impl_._oneof_case_);
};

void DataPacket::set_allocated_user(::livekit::UserPacket* PROTOBUF_NULLABLE user) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (user) {
    ::google::protobuf::Arena* submessage_arena = user->GetArena();
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(message_arena, user, submessage_arena);
    }
    set_has_user();
    _impl_.value_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.user)
}
void DataPacket::set_allocated_speaker(::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE speaker) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (speaker) {
    ::google::protobuf::Arena* submessage_arena = speaker->GetArena();
    if (message_arena != submessage_arena) {
      speaker = ::google::protobuf::internal::GetOwnedMessage(message_arena, speaker, submessage_arena);
    }
    set_has_speaker();
    _impl_.value_.speaker_ = speaker;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.speaker)
}
void DataPacket::set_allocated_sip_dtmf(::livekit::SipDTMF* PROTOBUF_NULLABLE sip_dtmf) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (sip_dtmf) {
    ::google::protobuf::Arena* submessage_arena = sip_dtmf->GetArena();
    if (message_arena != submessage_arena) {
      sip_dtmf = ::google::protobuf::internal::GetOwnedMessage(message_arena, sip_dtmf, submessage_arena);
    }
    set_has_sip_dtmf();
    _impl_.value_.sip_dtmf_ = sip_dtmf;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.sip_dtmf)
}
void DataPacket::set_allocated_transcription(::livekit::Transcription* PROTOBUF_NULLABLE transcription) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (transcription) {
    ::google::protobuf::Arena* submessage_arena = transcription->GetArena();
    if (message_arena != submessage_arena) {
      transcription = ::google::protobuf::internal::GetOwnedMessage(message_arena, transcription, submessage_arena);
    }
    set_has_transcription();
    _impl_.value_.transcription_ = transcription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.transcription)
}
void DataPacket::set_allocated_metrics(::livekit::MetricsBatch* PROTOBUF_NULLABLE metrics) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (metrics) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(metrics)->GetArena();
    if (message_arena != submessage_arena) {
      metrics = ::google::protobuf::internal::GetOwnedMessage(message_arena, metrics, submessage_arena);
    }
    set_has_metrics();
    _impl_.value_.metrics_ = metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.metrics)
}
void DataPacket::clear_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kMetrics) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.metrics_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.metrics_);
    }
    clear_has_value();
  }
}
void DataPacket::set_allocated_chat_message(::livekit::ChatMessage* PROTOBUF_NULLABLE chat_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (chat_message) {
    ::google::protobuf::Arena* submessage_arena = chat_message->GetArena();
    if (message_arena != submessage_arena) {
      chat_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, chat_message, submessage_arena);
    }
    set_has_chat_message();
    _impl_.value_.chat_message_ = chat_message;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.chat_message)
}
void DataPacket::set_allocated_rpc_request(::livekit::RpcRequest* PROTOBUF_NULLABLE rpc_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (rpc_request) {
    ::google::protobuf::Arena* submessage_arena = rpc_request->GetArena();
    if (message_arena != submessage_arena) {
      rpc_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, rpc_request, submessage_arena);
    }
    set_has_rpc_request();
    _impl_.value_.rpc_request_ = rpc_request;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_request)
}
void DataPacket::set_allocated_rpc_ack(::livekit::RpcAck* PROTOBUF_NULLABLE rpc_ack) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (rpc_ack) {
    ::google::protobuf::Arena* submessage_arena = rpc_ack->GetArena();
    if (message_arena != submessage_arena) {
      rpc_ack = ::google::protobuf::internal::GetOwnedMessage(message_arena, rpc_ack, submessage_arena);
    }
    set_has_rpc_ack();
    _impl_.value_.rpc_ack_ = rpc_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_ack)
}
void DataPacket::set_allocated_rpc_response(::livekit::RpcResponse* PROTOBUF_NULLABLE rpc_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (rpc_response) {
    ::google::protobuf::Arena* submessage_arena = rpc_response->GetArena();
    if (message_arena != submessage_arena) {
      rpc_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, rpc_response, submessage_arena);
    }
    set_has_rpc_response();
    _impl_.value_.rpc_response_ = rpc_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.rpc_response)
}
void DataPacket::set_allocated_stream_header(::livekit::DataStream_Header* PROTOBUF_NULLABLE stream_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (stream_header) {
    ::google::protobuf::Arena* submessage_arena = stream_header->GetArena();
    if (message_arena != submessage_arena) {
      stream_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream_header, submessage_arena);
    }
    set_has_stream_header();
    _impl_.value_.stream_header_ = stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_header)
}
void DataPacket::set_allocated_stream_chunk(::livekit::DataStream_Chunk* PROTOBUF_NULLABLE stream_chunk) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (stream_chunk) {
    ::google::protobuf::Arena* submessage_arena = stream_chunk->GetArena();
    if (message_arena != submessage_arena) {
      stream_chunk = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream_chunk, submessage_arena);
    }
    set_has_stream_chunk();
    _impl_.value_.stream_chunk_ = stream_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_chunk)
}
void DataPacket::set_allocated_stream_trailer(::livekit::DataStream_Trailer* PROTOBUF_NULLABLE stream_trailer) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (stream_trailer) {
    ::google::protobuf::Arena* submessage_arena = stream_trailer->GetArena();
    if (message_arena != submessage_arena) {
      stream_trailer = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream_trailer, submessage_arena);
    }
    set_has_stream_trailer();
    _impl_.value_.stream_trailer_ = stream_trailer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.stream_trailer)
}
DataPacket::DataPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataPacket_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataPacket)
}
PROTOBUF_NDEBUG_INLINE DataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataPacket& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        destination_identities_{visibility, arena, from.destination_identities_},
        participant_identity_(arena, from.participant_identity_),
        value_{},
        _oneof_case_{from._oneof_case_[0]} {}

DataPacket::DataPacket(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataPacket& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataPacket_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.kind_ = from._impl_.kind_;
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kUser:
        _impl_.value_.user_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.user_);
        break;
      case kSpeaker:
        _impl_.value_.speaker_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.speaker_);
        break;
      case kSipDtmf:
        _impl_.value_.sip_dtmf_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.sip_dtmf_);
        break;
      case kTranscription:
        _impl_.value_.transcription_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.transcription_);
        break;
      case kMetrics:
        _impl_.value_.metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.metrics_);
        break;
      case kChatMessage:
        _impl_.value_.chat_message_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.chat_message_);
        break;
      case kRpcRequest:
        _impl_.value_.rpc_request_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_request_);
        break;
      case kRpcAck:
        _impl_.value_.rpc_ack_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_ack_);
        break;
      case kRpcResponse:
        _impl_.value_.rpc_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_response_);
        break;
      case kStreamHeader:
        _impl_.value_.stream_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_header_);
        break;
      case kStreamChunk:
        _impl_.value_.stream_chunk_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_chunk_);
        break;
      case kStreamTrailer:
        _impl_.value_.stream_trailer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_trailer_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.DataPacket)
}
PROTOBUF_NDEBUG_INLINE DataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        destination_identities_{visibility, arena},
        participant_identity_(arena),
        value_{},
        _oneof_case_{} {}

inline void DataPacket::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.kind_ = {};
}
DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:livekit.DataPacket)
  SharedDtor(*this);
}
inline void DataPacket::SharedDtor(MessageLite& self) {
  DataPacket& this_ = static_cast<DataPacket&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_identity_.Destroy();
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void DataPacket::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DataPacket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kUser: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.user_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.user_);
      }
      break;
    }
    case kSpeaker: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.speaker_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.speaker_);
      }
      break;
    }
    case kSipDtmf: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.sip_dtmf_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.sip_dtmf_);
      }
      break;
    }
    case kTranscription: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.transcription_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.transcription_);
      }
      break;
    }
    case kMetrics: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.metrics_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.metrics_);
      }
      break;
    }
    case kChatMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.chat_message_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.chat_message_);
      }
      break;
    }
    case kRpcRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.rpc_request_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_request_);
      }
      break;
    }
    case kRpcAck: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.rpc_ack_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_ack_);
      }
      break;
    }
    case kRpcResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.rpc_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_response_);
      }
      break;
    }
    case kStreamHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.stream_header_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_header_);
      }
      break;
    }
    case kStreamChunk: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.stream_chunk_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_chunk_);
      }
      break;
    }
    case kStreamTrailer: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.stream_trailer_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_trailer_);
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* PROTOBUF_NONNULL DataPacket::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataPacket(arena);
}
constexpr auto DataPacket::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.destination_identities_) +
          decltype(DataPacket::_impl_.destination_identities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataPacket), alignof(DataPacket), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataPacket::PlacementNew_,
                                 sizeof(DataPacket),
                                 alignof(DataPacket));
  }
}
constexpr auto DataPacket::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataPacket_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataPacket::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataPacket>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataPacket::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataPacket>(), &DataPacket::ByteSizeLong,
              &DataPacket::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataPacket, _impl_._cached_size_),
          false,
      },
      &DataPacket::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataPacket_class_data_ =
            DataPacket::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataPacket::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataPacket_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataPacket_class_data_.tc_table);
  return DataPacket_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 15, 12, 77, 2>
DataPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataPacket, _impl_._has_bits_),
    0, // no _extensions_
    15, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DataPacket_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataPacket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataPacket, _impl_.kind_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string participant_identity = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.participant_identity_)}},
    // repeated string destination_identities = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.destination_identities_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.kind_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.UserPacket user = 2;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.user_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.speaker_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string participant_identity = 4;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.participant_identity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string destination_identities = 5;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.destination_identities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .livekit.SipDTMF sip_dtmf = 6;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.sip_dtmf_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.Transcription transcription = 7;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.transcription_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.MetricsBatch metrics = 8;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.metrics_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ChatMessage chat_message = 9;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.chat_message_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RpcRequest rpc_request = 10;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.rpc_request_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RpcAck rpc_ack = 11;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.rpc_ack_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RpcResponse rpc_response = 12;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.rpc_response_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.DataStream.Header stream_header = 13;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.stream_header_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.DataStream.Chunk stream_chunk = 14;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.stream_chunk_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.DataStream.Trailer stream_trailer = 15;
    {PROTOBUF_FIELD_OFFSET(DataPacket, _impl_.value_.stream_trailer_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::UserPacket>()},
      {::_pbi::TcParser::GetTable<::livekit::ActiveSpeakerUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::SipDTMF>()},
      {::_pbi::TcParser::GetTable<::livekit::Transcription>()},
      {::_pbi::TcParser::GetTable<::livekit::MetricsBatch>()},
      {::_pbi::TcParser::GetTable<::livekit::ChatMessage>()},
      {::_pbi::TcParser::GetTable<::livekit::RpcRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::RpcAck>()},
      {::_pbi::TcParser::GetTable<::livekit::RpcResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::DataStream_Header>()},
      {::_pbi::TcParser::GetTable<::livekit::DataStream_Chunk>()},
      {::_pbi::TcParser::GetTable<::livekit::DataStream_Trailer>()},
  }},
  {{
    "\22\0\0\0\24\26\0\0\0\0\0\0\0\0\0\0"
    "livekit.DataPacket"
    "participant_identity"
    "destination_identities"
  }},
};
PROTOBUF_NOINLINE void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataPacket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.participant_identity_.ClearNonDefaultToEmpty();
  }
  _impl_.kind_ = 0;
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataPacket::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataPacket& this_ = static_cast<const DataPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataPacket::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_kind() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_kind(), target);
    }
  }

  switch (this_.value_case()) {
    case kUser: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.value_.user_, this_._impl_.value_.user_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSpeaker: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.value_.speaker_, this_._impl_.value_.speaker_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // string participant_identity = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataPacket.participant_identity");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // repeated string destination_identities = 5;
  for (int i = 0, n = this_._internal_destination_identities_size(); i < n; ++i) {
    const auto& s = this_._internal_destination_identities().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataPacket.destination_identities");
    target = stream->WriteString(5, s, target);
  }

  switch (this_.value_case()) {
    case kSipDtmf: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.value_.sip_dtmf_, this_._impl_.value_.sip_dtmf_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTranscription: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.value_.transcription_, this_._impl_.value_.transcription_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMetrics: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.value_.metrics_, this_._impl_.value_.metrics_->GetCachedSize(), target,
          stream);
      break;
    }
    case kChatMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.value_.chat_message_, this_._impl_.value_.chat_message_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRpcRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.value_.rpc_request_, this_._impl_.value_.rpc_request_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRpcAck: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *this_._impl_.value_.rpc_ack_, this_._impl_.value_.rpc_ack_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRpcResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, *this_._impl_.value_.rpc_response_, this_._impl_.value_.rpc_response_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStreamHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, *this_._impl_.value_.stream_header_, this_._impl_.value_.stream_header_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStreamChunk: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, *this_._impl_.value_.stream_chunk_, this_._impl_.value_.stream_chunk_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStreamTrailer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          15, *this_._impl_.value_.stream_trailer_, this_._impl_.value_.stream_trailer_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataPacket)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataPacket::ByteSizeLong(const MessageLite& base) {
  const DataPacket& this_ = static_cast<const DataPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataPacket::ByteSizeLong() const {
  const DataPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string destination_identities = 5;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_destination_identities().size());
      for (int i = 0, n = this_._internal_destination_identities().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_destination_identities().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string participant_identity = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_kind() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_kind());
      }
    }
  }
  switch (this_.value_case()) {
    // .livekit.UserPacket user = 2;
    case kUser: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.user_);
      break;
    }
    // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
    case kSpeaker: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.speaker_);
      break;
    }
    // .livekit.SipDTMF sip_dtmf = 6;
    case kSipDtmf: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.sip_dtmf_);
      break;
    }
    // .livekit.Transcription transcription = 7;
    case kTranscription: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.transcription_);
      break;
    }
    // .livekit.MetricsBatch metrics = 8;
    case kMetrics: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.metrics_);
      break;
    }
    // .livekit.ChatMessage chat_message = 9;
    case kChatMessage: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.chat_message_);
      break;
    }
    // .livekit.RpcRequest rpc_request = 10;
    case kRpcRequest: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.rpc_request_);
      break;
    }
    // .livekit.RpcAck rpc_ack = 11;
    case kRpcAck: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.rpc_ack_);
      break;
    }
    // .livekit.RpcResponse rpc_response = 12;
    case kRpcResponse: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.rpc_response_);
      break;
    }
    // .livekit.DataStream.Header stream_header = 13;
    case kStreamHeader: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.stream_header_);
      break;
    }
    // .livekit.DataStream.Chunk stream_chunk = 14;
    case kStreamChunk: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.stream_chunk_);
      break;
    }
    // .livekit.DataStream.Trailer stream_trailer = 15;
    case kStreamTrailer: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.stream_trailer_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataPacket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataPacket*>(&to_msg);
  auto& from = static_cast<const DataPacket&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_destination_identities()->MergeFrom(from._internal_destination_identities());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_kind() != 0) {
        _this->_impl_.kind_ = from._impl_.kind_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kUser: {
        if (oneof_needs_init) {
          _this->_impl_.value_.user_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.user_);
        } else {
          _this->_impl_.value_.user_->MergeFrom(*from._impl_.value_.user_);
        }
        break;
      }
      case kSpeaker: {
        if (oneof_needs_init) {
          _this->_impl_.value_.speaker_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.speaker_);
        } else {
          _this->_impl_.value_.speaker_->MergeFrom(*from._impl_.value_.speaker_);
        }
        break;
      }
      case kSipDtmf: {
        if (oneof_needs_init) {
          _this->_impl_.value_.sip_dtmf_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.sip_dtmf_);
        } else {
          _this->_impl_.value_.sip_dtmf_->MergeFrom(*from._impl_.value_.sip_dtmf_);
        }
        break;
      }
      case kTranscription: {
        if (oneof_needs_init) {
          _this->_impl_.value_.transcription_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.transcription_);
        } else {
          _this->_impl_.value_.transcription_->MergeFrom(*from._impl_.value_.transcription_);
        }
        break;
      }
      case kMetrics: {
        if (oneof_needs_init) {
          _this->_impl_.value_.metrics_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.metrics_);
        } else {
          _this->_impl_.value_.metrics_->MergeFrom(*from._impl_.value_.metrics_);
        }
        break;
      }
      case kChatMessage: {
        if (oneof_needs_init) {
          _this->_impl_.value_.chat_message_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.chat_message_);
        } else {
          _this->_impl_.value_.chat_message_->MergeFrom(*from._impl_.value_.chat_message_);
        }
        break;
      }
      case kRpcRequest: {
        if (oneof_needs_init) {
          _this->_impl_.value_.rpc_request_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_request_);
        } else {
          _this->_impl_.value_.rpc_request_->MergeFrom(*from._impl_.value_.rpc_request_);
        }
        break;
      }
      case kRpcAck: {
        if (oneof_needs_init) {
          _this->_impl_.value_.rpc_ack_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_ack_);
        } else {
          _this->_impl_.value_.rpc_ack_->MergeFrom(*from._impl_.value_.rpc_ack_);
        }
        break;
      }
      case kRpcResponse: {
        if (oneof_needs_init) {
          _this->_impl_.value_.rpc_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.rpc_response_);
        } else {
          _this->_impl_.value_.rpc_response_->MergeFrom(*from._impl_.value_.rpc_response_);
        }
        break;
      }
      case kStreamHeader: {
        if (oneof_needs_init) {
          _this->_impl_.value_.stream_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_header_);
        } else {
          _this->_impl_.value_.stream_header_->MergeFrom(*from._impl_.value_.stream_header_);
        }
        break;
      }
      case kStreamChunk: {
        if (oneof_needs_init) {
          _this->_impl_.value_.stream_chunk_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_chunk_);
        } else {
          _this->_impl_.value_.stream_chunk_->MergeFrom(*from._impl_.value_.stream_chunk_);
        }
        break;
      }
      case kStreamTrailer: {
        if (oneof_needs_init) {
          _this->_impl_.value_.stream_trailer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.stream_trailer_);
        } else {
          _this->_impl_.value_.stream_trailer_->MergeFrom(*from._impl_.value_.stream_trailer_);
        }
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataPacket::InternalSwap(DataPacket* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DataPacket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ActiveSpeakerUpdate::_Internal {
 public:
};

ActiveSpeakerUpdate::ActiveSpeakerUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ActiveSpeakerUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ActiveSpeakerUpdate)
}
PROTOBUF_NDEBUG_INLINE ActiveSpeakerUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ActiveSpeakerUpdate& from_msg)
      : speakers_{visibility, arena, from.speakers_},
        _cached_size_{0} {}

ActiveSpeakerUpdate::ActiveSpeakerUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ActiveSpeakerUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ActiveSpeakerUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ActiveSpeakerUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ActiveSpeakerUpdate)
}
PROTOBUF_NDEBUG_INLINE ActiveSpeakerUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : speakers_{visibility, arena},
        _cached_size_{0} {}

inline void ActiveSpeakerUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ActiveSpeakerUpdate::~ActiveSpeakerUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ActiveSpeakerUpdate)
  SharedDtor(*this);
}
inline void ActiveSpeakerUpdate::SharedDtor(MessageLite& self) {
  ActiveSpeakerUpdate& this_ = static_cast<ActiveSpeakerUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ActiveSpeakerUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ActiveSpeakerUpdate(arena);
}
constexpr auto ActiveSpeakerUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ActiveSpeakerUpdate, _impl_.speakers_) +
          decltype(ActiveSpeakerUpdate::_impl_.speakers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ActiveSpeakerUpdate), alignof(ActiveSpeakerUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ActiveSpeakerUpdate::PlacementNew_,
                                 sizeof(ActiveSpeakerUpdate),
                                 alignof(ActiveSpeakerUpdate));
  }
}
constexpr auto ActiveSpeakerUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ActiveSpeakerUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ActiveSpeakerUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ActiveSpeakerUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ActiveSpeakerUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ActiveSpeakerUpdate>(), &ActiveSpeakerUpdate::ByteSizeLong,
              &ActiveSpeakerUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ActiveSpeakerUpdate, _impl_._cached_size_),
          false,
      },
      &ActiveSpeakerUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ActiveSpeakerUpdate_class_data_ =
            ActiveSpeakerUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ActiveSpeakerUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ActiveSpeakerUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ActiveSpeakerUpdate_class_data_.tc_table);
  return ActiveSpeakerUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ActiveSpeakerUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ActiveSpeakerUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ActiveSpeakerUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.SpeakerInfo speakers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ActiveSpeakerUpdate, _impl_.speakers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.SpeakerInfo speakers = 1;
    {PROTOBUF_FIELD_OFFSET(ActiveSpeakerUpdate, _impl_.speakers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SpeakerInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ActiveSpeakerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ActiveSpeakerUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speakers_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ActiveSpeakerUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ActiveSpeakerUpdate& this_ = static_cast<const ActiveSpeakerUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ActiveSpeakerUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ActiveSpeakerUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ActiveSpeakerUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_speakers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_speakers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ActiveSpeakerUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ActiveSpeakerUpdate::ByteSizeLong(const MessageLite& base) {
  const ActiveSpeakerUpdate& this_ = static_cast<const ActiveSpeakerUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ActiveSpeakerUpdate::ByteSizeLong() const {
  const ActiveSpeakerUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ActiveSpeakerUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.SpeakerInfo speakers = 1;
    {
      total_size += 1UL * this_._internal_speakers_size();
      for (const auto& msg : this_._internal_speakers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ActiveSpeakerUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ActiveSpeakerUpdate*>(&to_msg);
  auto& from = static_cast<const ActiveSpeakerUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ActiveSpeakerUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_speakers()->MergeFrom(
      from._internal_speakers());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveSpeakerUpdate::CopyFrom(const ActiveSpeakerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ActiveSpeakerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ActiveSpeakerUpdate::InternalSwap(ActiveSpeakerUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speakers_.InternalSwap(&other->_impl_.speakers_);
}

::google::protobuf::Metadata ActiveSpeakerUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SpeakerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SpeakerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_._has_bits_);
};

SpeakerInfo::SpeakerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SpeakerInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakerInfo)
}
PROTOBUF_NDEBUG_INLINE SpeakerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SpeakerInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sid_(arena, from.sid_) {}

SpeakerInfo::SpeakerInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SpeakerInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SpeakerInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SpeakerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, active_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::active_));

  // @@protoc_insertion_point(copy_constructor:livekit.SpeakerInfo)
}
PROTOBUF_NDEBUG_INLINE SpeakerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        sid_(arena) {}

inline void SpeakerInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           0,
           offsetof(Impl_, active_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::active_));
}
SpeakerInfo::~SpeakerInfo() {
  // @@protoc_insertion_point(destructor:livekit.SpeakerInfo)
  SharedDtor(*this);
}
inline void SpeakerInfo::SharedDtor(MessageLite& self) {
  SpeakerInfo& this_ = static_cast<SpeakerInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SpeakerInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SpeakerInfo(arena);
}
constexpr auto SpeakerInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SpeakerInfo),
                                            alignof(SpeakerInfo));
}
constexpr auto SpeakerInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SpeakerInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SpeakerInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SpeakerInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SpeakerInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SpeakerInfo>(), &SpeakerInfo::ByteSizeLong,
              &SpeakerInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_._cached_size_),
          false,
      },
      &SpeakerInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SpeakerInfo_class_data_ =
            SpeakerInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SpeakerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SpeakerInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SpeakerInfo_class_data_.tc_table);
  return SpeakerInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 31, 2>
SpeakerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SpeakerInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SpeakerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.sid_)}},
    // float level = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.level_)}},
    // bool active = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SpeakerInfo, _impl_.active_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.active_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string sid = 1;
    {PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float level = 2;
    {PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.level_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // bool active = 3;
    {PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.active_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\3\0\0\0\0\0\0"
    "livekit.SpeakerInfo"
    "sid"
  }},
};
PROTOBUF_NOINLINE void SpeakerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.sid_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SpeakerInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SpeakerInfo& this_ = static_cast<const SpeakerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SpeakerInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SpeakerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakerInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SpeakerInfo.sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // float level = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_level()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          2, this_._internal_level(), target);
    }
  }

  // bool active = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_active() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_active(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakerInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SpeakerInfo::ByteSizeLong(const MessageLite& base) {
  const SpeakerInfo& this_ = static_cast<const SpeakerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SpeakerInfo::ByteSizeLong() const {
  const SpeakerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SpeakerInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // float level = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_level()) != 0) {
        total_size += 5;
      }
    }
    // bool active = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_active() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SpeakerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpeakerInfo*>(&to_msg);
  auto& from = static_cast<const SpeakerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_level()) != 0) {
        _this->_impl_.level_ = from._impl_.level_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_active() != 0) {
        _this->_impl_.active_ = from._impl_.active_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakerInfo::CopyFrom(const SpeakerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpeakerInfo::InternalSwap(SpeakerInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.active_)
      + sizeof(SpeakerInfo::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(SpeakerInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::google::protobuf::Metadata SpeakerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UserPacket::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UserPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UserPacket, _impl_._has_bits_);
};

UserPacket::UserPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UserPacket_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UserPacket)
}
PROTOBUF_NDEBUG_INLINE UserPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UserPacket& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        destination_sids_{visibility, arena, from.destination_sids_},
        destination_identities_{visibility, arena, from.destination_identities_},
        participant_sid_(arena, from.participant_sid_),
        payload_(arena, from.payload_),
        topic_(arena, from.topic_),
        participant_identity_(arena, from.participant_identity_),
        id_(arena, from.id_),
        nonce_(arena, from.nonce_) {}

UserPacket::UserPacket(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UserPacket& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UserPacket_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UserPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_),
           offsetof(Impl_, end_time_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::end_time_));

  // @@protoc_insertion_point(copy_constructor:livekit.UserPacket)
}
PROTOBUF_NDEBUG_INLINE UserPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        destination_sids_{visibility, arena},
        destination_identities_{visibility, arena},
        participant_sid_(arena),
        payload_(arena),
        topic_(arena),
        participant_identity_(arena),
        id_(arena),
        nonce_(arena) {}

inline void UserPacket::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, end_time_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::end_time_));
}
UserPacket::~UserPacket() {
  // @@protoc_insertion_point(destructor:livekit.UserPacket)
  SharedDtor(*this);
}
inline void UserPacket::SharedDtor(MessageLite& self) {
  UserPacket& this_ = static_cast<UserPacket&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.payload_.Destroy();
  this_._impl_.topic_.Destroy();
  this_._impl_.participant_identity_.Destroy();
  this_._impl_.id_.Destroy();
  this_._impl_.nonce_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UserPacket::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UserPacket(arena);
}
constexpr auto UserPacket::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_sids_) +
          decltype(UserPacket::_impl_.destination_sids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_identities_) +
          decltype(UserPacket::_impl_.destination_identities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UserPacket), alignof(UserPacket), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UserPacket::PlacementNew_,
                                 sizeof(UserPacket),
                                 alignof(UserPacket));
  }
}
constexpr auto UserPacket::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UserPacket_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UserPacket::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UserPacket>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UserPacket::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UserPacket>(), &UserPacket::ByteSizeLong,
              &UserPacket::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UserPacket, _impl_._cached_size_),
          false,
      },
      &UserPacket::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UserPacket_class_data_ =
            UserPacket::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UserPacket::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UserPacket_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UserPacket_class_data_.tc_table);
  return UserPacket_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 115, 2>
UserPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UserPacket, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965312,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UserPacket_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UserPacket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string participant_sid = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.participant_sid_)}},
    // bytes payload = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.payload_)}},
    // repeated string destination_sids = 3 [deprecated = true];
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_sids_)}},
    // optional string topic = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.topic_)}},
    // string participant_identity = 5 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.participant_identity_)}},
    // repeated string destination_identities = 6 [deprecated = true];
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_identities_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string id = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.id_)}},
    // optional uint64 start_time = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UserPacket, _impl_.start_time_), 6>(),
     {72, 6, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.start_time_)}},
    // optional uint64 end_time = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(UserPacket, _impl_.end_time_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.end_time_)}},
    // bytes nonce = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 5, 0, PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.nonce_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes payload = 2;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.payload_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated string destination_sids = 3 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_sids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // optional string topic = 4;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.topic_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_identity = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.participant_identity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string destination_identities = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.destination_identities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // optional string id = 8;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint64 start_time = 9;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.start_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 end_time = 10;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.end_time_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes nonce = 11;
    {PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.nonce_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\17\0\20\5\24\26\2\0\0\0\0\0\0\0\0"
    "livekit.UserPacket"
    "participant_sid"
    "destination_sids"
    "topic"
    "participant_identity"
    "destination_identities"
    "id"
  }},
};
PROTOBUF_NOINLINE void UserPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UserPacket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destination_sids_.Clear();
  _impl_.destination_identities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.participant_sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.nonce_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000c0u) != 0) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UserPacket::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UserPacket& this_ = static_cast<const UserPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UserPacket::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UserPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UserPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1 [deprecated = true];
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // bytes payload = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_payload().empty()) {
      const std::string& _s = this_._internal_payload();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // repeated string destination_sids = 3 [deprecated = true];
  for (int i = 0, n = this_._internal_destination_sids_size(); i < n; ++i) {
    const auto& s = this_._internal_destination_sids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.destination_sids");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string topic = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_topic();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.topic");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string participant_identity = 5 [deprecated = true];
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.participant_identity");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // repeated string destination_identities = 6 [deprecated = true];
  for (int i = 0, n = this_._internal_destination_identities_size(); i < n; ++i) {
    const auto& s = this_._internal_destination_identities().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.destination_identities");
    target = stream->WriteString(6, s, target);
  }

  // optional string id = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    const std::string& _s = this_._internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UserPacket.id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional uint64 start_time = 9;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this_._internal_start_time(), target);
  }

  // optional uint64 end_time = 10;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this_._internal_end_time(), target);
  }

  // bytes nonce = 11;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_nonce().empty()) {
      const std::string& _s = this_._internal_nonce();
      target = stream->WriteBytesMaybeAliased(11, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UserPacket)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UserPacket::ByteSizeLong(const MessageLite& base) {
  const UserPacket& this_ = static_cast<const UserPacket&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UserPacket::ByteSizeLong() const {
  const UserPacket& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UserPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string destination_sids = 3 [deprecated = true];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_destination_sids().size());
      for (int i = 0, n = this_._internal_destination_sids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_destination_sids().Get(i));
      }
    }
    // repeated string destination_identities = 6 [deprecated = true];
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_destination_identities().size());
      for (int i = 0, n = this_._internal_destination_identities().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_destination_identities().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string participant_sid = 1 [deprecated = true];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
    // bytes payload = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_payload().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_payload());
      }
    }
    // optional string topic = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_topic());
    }
    // string participant_identity = 5 [deprecated = true];
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // optional string id = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id());
    }
    // bytes nonce = 11;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_nonce().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_nonce());
      }
    }
    // optional uint64 start_time = 9;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_start_time());
    }
    // optional uint64 end_time = 10;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_end_time());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UserPacket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UserPacket*>(&to_msg);
  auto& from = static_cast<const UserPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UserPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_destination_sids()->MergeFrom(from._internal_destination_sids());
  _this->_internal_mutable_destination_identities()->MergeFrom(from._internal_destination_identities());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_sid().empty()) {
        _this->_internal_set_participant_sid(from._internal_participant_sid());
      } else {
        if (_this->_impl_.participant_sid_.IsDefault()) {
          _this->_internal_set_participant_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_payload().empty()) {
        _this->_internal_set_payload(from._internal_payload());
      } else {
        if (_this->_impl_.payload_.IsDefault()) {
          _this->_internal_set_payload("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_topic(from._internal_topic());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_id(from._internal_id());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_nonce().empty()) {
        _this->_internal_set_nonce(from._internal_nonce());
      } else {
        if (_this->_impl_.nonce_.IsDefault()) {
          _this->_internal_set_nonce("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserPacket::CopyFrom(const UserPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UserPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UserPacket::InternalSwap(UserPacket* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.destination_sids_.InternalSwap(&other->_impl_.destination_sids_);
  _impl_.destination_identities_.InternalSwap(&other->_impl_.destination_identities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nonce_, &other->_impl_.nonce_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.end_time_)
      + sizeof(UserPacket::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(UserPacket, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata UserPacket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SipDTMF::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SipDTMF>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_._has_bits_);
};

SipDTMF::SipDTMF(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SipDTMF_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SipDTMF)
}
PROTOBUF_NDEBUG_INLINE SipDTMF::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SipDTMF& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        digit_(arena, from.digit_) {}

SipDTMF::SipDTMF(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SipDTMF& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SipDTMF_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SipDTMF* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:livekit.SipDTMF)
}
PROTOBUF_NDEBUG_INLINE SipDTMF::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        digit_(arena) {}

inline void SipDTMF::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
SipDTMF::~SipDTMF() {
  // @@protoc_insertion_point(destructor:livekit.SipDTMF)
  SharedDtor(*this);
}
inline void SipDTMF::SharedDtor(MessageLite& self) {
  SipDTMF& this_ = static_cast<SipDTMF&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.digit_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SipDTMF::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SipDTMF(arena);
}
constexpr auto SipDTMF::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SipDTMF),
                                            alignof(SipDTMF));
}
constexpr auto SipDTMF::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SipDTMF_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SipDTMF::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SipDTMF>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SipDTMF::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SipDTMF>(), &SipDTMF::ByteSizeLong,
              &SipDTMF::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_._cached_size_),
          false,
      },
      &SipDTMF::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SipDTMF_class_data_ =
            SipDTMF::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SipDTMF::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SipDTMF_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SipDTMF_class_data_.tc_table);
  return SipDTMF_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 29, 2>
SipDTMF::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967283,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SipDTMF_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SipDTMF>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string digit = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_.digit_)}},
    // uint32 code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SipDTMF, _impl_.code_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 code = 3;
    {PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_.code_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string digit = 4;
    {PROTOBUF_FIELD_OFFSET(SipDTMF, _impl_.digit_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\0\5\0\0\0\0\0"
    "livekit.SipDTMF"
    "digit"
  }},
};
PROTOBUF_NOINLINE void SipDTMF::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SipDTMF)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.digit_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SipDTMF::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SipDTMF& this_ = static_cast<const SipDTMF&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SipDTMF::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SipDTMF& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SipDTMF)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 code = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_code(), target);
    }
  }

  // string digit = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_digit().empty()) {
      const std::string& _s = this_._internal_digit();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SipDTMF.digit");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SipDTMF)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SipDTMF::ByteSizeLong(const MessageLite& base) {
  const SipDTMF& this_ = static_cast<const SipDTMF&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SipDTMF::ByteSizeLong() const {
  const SipDTMF& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SipDTMF)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string digit = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_digit().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_digit());
      }
    }
    // uint32 code = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_code() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SipDTMF::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SipDTMF*>(&to_msg);
  auto& from = static_cast<const SipDTMF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SipDTMF)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_digit().empty()) {
        _this->_internal_set_digit(from._internal_digit());
      } else {
        if (_this->_impl_.digit_.IsDefault()) {
          _this->_internal_set_digit("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_code() != 0) {
        _this->_impl_.code_ = from._impl_.code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SipDTMF::CopyFrom(const SipDTMF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SipDTMF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SipDTMF::InternalSwap(SipDTMF* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.digit_, &other->_impl_.digit_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata SipDTMF::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Transcription::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transcription>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transcription, _impl_._has_bits_);
};

Transcription::Transcription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Transcription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Transcription)
}
PROTOBUF_NDEBUG_INLINE Transcription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::Transcription& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        segments_{visibility, arena, from.segments_},
        transcribed_participant_identity_(arena, from.transcribed_participant_identity_),
        track_id_(arena, from.track_id_) {}

Transcription::Transcription(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Transcription& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Transcription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transcription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.Transcription)
}
PROTOBUF_NDEBUG_INLINE Transcription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        segments_{visibility, arena},
        transcribed_participant_identity_(arena),
        track_id_(arena) {}

inline void Transcription::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Transcription::~Transcription() {
  // @@protoc_insertion_point(destructor:livekit.Transcription)
  SharedDtor(*this);
}
inline void Transcription::SharedDtor(MessageLite& self) {
  Transcription& this_ = static_cast<Transcription&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.transcribed_participant_identity_.Destroy();
  this_._impl_.track_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Transcription::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Transcription(arena);
}
constexpr auto Transcription::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Transcription, _impl_.segments_) +
          decltype(Transcription::_impl_.segments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Transcription), alignof(Transcription), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Transcription::PlacementNew_,
                                 sizeof(Transcription),
                                 alignof(Transcription));
  }
}
constexpr auto Transcription::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Transcription_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Transcription::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Transcription>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Transcription::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Transcription>(), &Transcription::ByteSizeLong,
              &Transcription::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Transcription, _impl_._cached_size_),
          false,
      },
      &Transcription::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Transcription_class_data_ =
            Transcription::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Transcription::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Transcription_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Transcription_class_data_.tc_table);
  return Transcription_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 70, 2>
Transcription::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transcription, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967281,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Transcription_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Transcription>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.TranscriptionSegment segments = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Transcription, _impl_.segments_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string transcribed_participant_identity = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Transcription, _impl_.transcribed_participant_identity_)}},
    // string track_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Transcription, _impl_.track_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string transcribed_participant_identity = 2;
    {PROTOBUF_FIELD_OFFSET(Transcription, _impl_.transcribed_participant_identity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string track_id = 3;
    {PROTOBUF_FIELD_OFFSET(Transcription, _impl_.track_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.TranscriptionSegment segments = 4;
    {PROTOBUF_FIELD_OFFSET(Transcription, _impl_.segments_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::TranscriptionSegment>()},
  }},
  {{
    "\25\40\10\0\0\0\0\0"
    "livekit.Transcription"
    "transcribed_participant_identity"
    "track_id"
  }},
};
PROTOBUF_NOINLINE void Transcription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Transcription)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.transcribed_participant_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.track_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Transcription::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Transcription& this_ = static_cast<const Transcription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Transcription::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Transcription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Transcription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string transcribed_participant_identity = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_transcribed_participant_identity().empty()) {
      const std::string& _s = this_._internal_transcribed_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Transcription.transcribed_participant_identity");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string track_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_track_id().empty()) {
      const std::string& _s = this_._internal_track_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.Transcription.track_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // repeated .livekit.TranscriptionSegment segments = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segments_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segments().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Transcription)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Transcription::ByteSizeLong(const MessageLite& base) {
  const Transcription& this_ = static_cast<const Transcription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Transcription::ByteSizeLong() const {
  const Transcription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Transcription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TranscriptionSegment segments = 4;
    {
      total_size += 1UL * this_._internal_segments_size();
      for (const auto& msg : this_._internal_segments()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string transcribed_participant_identity = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_transcribed_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_transcribed_participant_identity());
      }
    }
    // string track_id = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_track_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Transcription::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transcription*>(&to_msg);
  auto& from = static_cast<const Transcription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Transcription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_segments()->MergeFrom(
      from._internal_segments());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_transcribed_participant_identity().empty()) {
        _this->_internal_set_transcribed_participant_identity(from._internal_transcribed_participant_identity());
      } else {
        if (_this->_impl_.transcribed_participant_identity_.IsDefault()) {
          _this->_internal_set_transcribed_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_track_id().empty()) {
        _this->_internal_set_track_id(from._internal_track_id());
      } else {
        if (_this->_impl_.track_id_.IsDefault()) {
          _this->_internal_set_track_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transcription::CopyFrom(const Transcription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Transcription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transcription::InternalSwap(Transcription* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.segments_.InternalSwap(&other->_impl_.segments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.transcribed_participant_identity_, &other->_impl_.transcribed_participant_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_id_, &other->_impl_.track_id_, arena);
}

::google::protobuf::Metadata Transcription::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TranscriptionSegment::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TranscriptionSegment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_._has_bits_);
};

TranscriptionSegment::TranscriptionSegment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TranscriptionSegment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TranscriptionSegment)
}
PROTOBUF_NDEBUG_INLINE TranscriptionSegment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TranscriptionSegment& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        text_(arena, from.text_),
        language_(arena, from.language_) {}

TranscriptionSegment::TranscriptionSegment(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TranscriptionSegment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TranscriptionSegment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TranscriptionSegment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_),
           offsetof(Impl_, final_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::final_));

  // @@protoc_insertion_point(copy_constructor:livekit.TranscriptionSegment)
}
PROTOBUF_NDEBUG_INLINE TranscriptionSegment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena),
        text_(arena),
        language_(arena) {}

inline void TranscriptionSegment::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, final_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::final_));
}
TranscriptionSegment::~TranscriptionSegment() {
  // @@protoc_insertion_point(destructor:livekit.TranscriptionSegment)
  SharedDtor(*this);
}
inline void TranscriptionSegment::SharedDtor(MessageLite& self) {
  TranscriptionSegment& this_ = static_cast<TranscriptionSegment&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.text_.Destroy();
  this_._impl_.language_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TranscriptionSegment::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TranscriptionSegment(arena);
}
constexpr auto TranscriptionSegment::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TranscriptionSegment),
                                            alignof(TranscriptionSegment));
}
constexpr auto TranscriptionSegment::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TranscriptionSegment_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TranscriptionSegment::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TranscriptionSegment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TranscriptionSegment::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TranscriptionSegment>(), &TranscriptionSegment::ByteSizeLong,
              &TranscriptionSegment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_._cached_size_),
          false,
      },
      &TranscriptionSegment::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TranscriptionSegment_class_data_ =
            TranscriptionSegment::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TranscriptionSegment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TranscriptionSegment_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TranscriptionSegment_class_data_.tc_table);
  return TranscriptionSegment_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 51, 2>
TranscriptionSegment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TranscriptionSegment_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TranscriptionSegment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.id_)}},
    // string text = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.text_)}},
    // uint64 start_time = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TranscriptionSegment, _impl_.start_time_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.start_time_)}},
    // uint64 end_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TranscriptionSegment, _impl_.end_time_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.end_time_)}},
    // bool final = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TranscriptionSegment, _impl_.final_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.final_)}},
    // string language = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.language_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string text = 2;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.text_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 start_time = 3;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.start_time_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 end_time = 4;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.end_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bool final = 5;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.final_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string language = 6;
    {PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.language_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\2\4\0\0\0\10\0"
    "livekit.TranscriptionSegment"
    "id"
    "text"
    "language"
  }},
};
PROTOBUF_NOINLINE void TranscriptionSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TranscriptionSegment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000038u) != 0) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.final_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.final_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TranscriptionSegment::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TranscriptionSegment& this_ = static_cast<const TranscriptionSegment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TranscriptionSegment::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TranscriptionSegment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TranscriptionSegment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TranscriptionSegment.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string text = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_text().empty()) {
      const std::string& _s = this_._internal_text();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TranscriptionSegment.text");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // uint64 start_time = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_start_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_start_time(), target);
    }
  }

  // uint64 end_time = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_end_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_end_time(), target);
    }
  }

  // bool final = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_final() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_final(), target);
    }
  }

  // string language = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_language().empty()) {
      const std::string& _s = this_._internal_language();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TranscriptionSegment.language");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TranscriptionSegment)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TranscriptionSegment::ByteSizeLong(const MessageLite& base) {
  const TranscriptionSegment& this_ = static_cast<const TranscriptionSegment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TranscriptionSegment::ByteSizeLong() const {
  const TranscriptionSegment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TranscriptionSegment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string text = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_text().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_text());
      }
    }
    // string language = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_language().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_language());
      }
    }
    // uint64 start_time = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_start_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_start_time());
      }
    }
    // uint64 end_time = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_end_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_end_time());
      }
    }
    // bool final = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_final() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TranscriptionSegment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TranscriptionSegment*>(&to_msg);
  auto& from = static_cast<const TranscriptionSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TranscriptionSegment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_text().empty()) {
        _this->_internal_set_text(from._internal_text());
      } else {
        if (_this->_impl_.text_.IsDefault()) {
          _this->_internal_set_text("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_language().empty()) {
        _this->_internal_set_language(from._internal_language());
      } else {
        if (_this->_impl_.language_.IsDefault()) {
          _this->_internal_set_language("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_start_time() != 0) {
        _this->_impl_.start_time_ = from._impl_.start_time_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_end_time() != 0) {
        _this->_impl_.end_time_ = from._impl_.end_time_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_final() != 0) {
        _this->_impl_.final_ = from._impl_.final_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TranscriptionSegment::CopyFrom(const TranscriptionSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TranscriptionSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TranscriptionSegment::InternalSwap(TranscriptionSegment* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.language_, &other->_impl_.language_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.final_)
      + sizeof(TranscriptionSegment::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TranscriptionSegment, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata TranscriptionSegment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_);
};

ChatMessage::ChatMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ChatMessage_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ChatMessage)
}
PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ChatMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        message_(arena, from.message_) {}

ChatMessage::ChatMessage(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ChatMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ChatMessage_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, generated_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::generated_));

  // @@protoc_insertion_point(copy_constructor:livekit.ChatMessage)
}
PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena),
        message_(arena) {}

inline void ChatMessage::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, generated_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::generated_));
}
ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:livekit.ChatMessage)
  SharedDtor(*this);
}
inline void ChatMessage::SharedDtor(MessageLite& self) {
  ChatMessage& this_ = static_cast<ChatMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ChatMessage::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ChatMessage(arena);
}
constexpr auto ChatMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatMessage),
                                            alignof(ChatMessage));
}
constexpr auto ChatMessage::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ChatMessage_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ChatMessage::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ChatMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ChatMessage::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ChatMessage>(), &ChatMessage::ByteSizeLong,
              &ChatMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._cached_size_),
          false,
      },
      &ChatMessage::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ChatMessage_class_data_ =
            ChatMessage::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ChatMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ChatMessage_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ChatMessage_class_data_.tc_table);
  return ChatMessage_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 37, 2>
ChatMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ChatMessage_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ChatMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.id_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ChatMessage, _impl_.timestamp_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)}},
    // optional int64 edit_timestamp = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ChatMessage, _impl_.edit_timestamp_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.edit_timestamp_)}},
    // string message = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_)}},
    // bool deleted = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatMessage, _impl_.deleted_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.deleted_)}},
    // bool generated = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatMessage, _impl_.generated_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.generated_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 edit_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.edit_timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string message = 4;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool deleted = 5;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.deleted_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool generated = 6;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.generated_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\2\0\0\7\0\0\0"
    "livekit.ChatMessage"
    "id"
    "message"
  }},
};
PROTOBUF_NOINLINE void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ChatMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.generated_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.generated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ChatMessage::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ChatMessage& this_ = static_cast<const ChatMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ChatMessage::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ChatMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ChatMessage.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int64 edit_timestamp = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
            stream, this_._internal_edit_timestamp(), target);
  }

  // string message = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_message().empty()) {
      const std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ChatMessage.message");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // bool deleted = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (this_._internal_deleted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_deleted(), target);
    }
  }

  // bool generated = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_generated() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_generated(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ChatMessage)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ChatMessage::ByteSizeLong(const MessageLite& base) {
  const ChatMessage& this_ = static_cast<const ChatMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ChatMessage::ByteSizeLong() const {
  const ChatMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ChatMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string message = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // optional int64 edit_timestamp = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_edit_timestamp());
    }
    // bool deleted = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_deleted() != 0) {
        total_size += 2;
      }
    }
    // bool generated = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_generated() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ChatMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.edit_timestamp_ = from._impl_.edit_timestamp_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_deleted() != 0) {
        _this->_impl_.deleted_ = from._impl_.deleted_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_generated() != 0) {
        _this->_impl_.generated_ = from._impl_.generated_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatMessage::InternalSwap(ChatMessage* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.generated_)
      + sizeof(ChatMessage::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_._has_bits_);
};

RpcRequest::RpcRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcRequest)
}
PROTOBUF_NDEBUG_INLINE RpcRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RpcRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        method_(arena, from.method_),
        payload_(arena, from.payload_) {}

RpcRequest::RpcRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RpcRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, response_timeout_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, response_timeout_ms_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, response_timeout_ms_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:livekit.RpcRequest)
}
PROTOBUF_NDEBUG_INLINE RpcRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena),
        method_(arena),
        payload_(arena) {}

inline void RpcRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, response_timeout_ms_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, response_timeout_ms_) +
               sizeof(Impl_::version_));
}
RpcRequest::~RpcRequest() {
  // @@protoc_insertion_point(destructor:livekit.RpcRequest)
  SharedDtor(*this);
}
inline void RpcRequest::SharedDtor(MessageLite& self) {
  RpcRequest& this_ = static_cast<RpcRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.method_.Destroy();
  this_._impl_.payload_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RpcRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RpcRequest(arena);
}
constexpr auto RpcRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RpcRequest),
                                            alignof(RpcRequest));
}
constexpr auto RpcRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RpcRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RpcRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RpcRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RpcRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RpcRequest>(), &RpcRequest::ByteSizeLong,
              &RpcRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_._cached_size_),
          false,
      },
      &RpcRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RpcRequest_class_data_ =
            RpcRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RpcRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RpcRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RpcRequest_class_data_.tc_table);
  return RpcRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 42, 2>
RpcRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RpcRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RpcRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.id_)}},
    // string method = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.method_)}},
    // string payload = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.payload_)}},
    // uint32 response_timeout_ms = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcRequest, _impl_.response_timeout_ms_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.response_timeout_ms_)}},
    // uint32 version = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcRequest, _impl_.version_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string method = 2;
    {PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.method_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string payload = 3;
    {PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.payload_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 response_timeout_ms = 4;
    {PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.response_timeout_ms_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 version = 5;
    {PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.version_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\22\2\6\7\0\0\0\0"
    "livekit.RpcRequest"
    "id"
    "method"
    "payload"
  }},
};
PROTOBUF_NOINLINE void RpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.method_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.response_timeout_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.response_timeout_ms_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RpcRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RpcRequest& this_ = static_cast<const RpcRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RpcRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RpcRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_id().empty()) {
      const std::string& _s = this_._internal_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcRequest.id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string method = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_method().empty()) {
      const std::string& _s = this_._internal_method();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcRequest.method");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string payload = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_payload().empty()) {
      const std::string& _s = this_._internal_payload();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcRequest.payload");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // uint32 response_timeout_ms = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_response_timeout_ms() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_response_timeout_ms(), target);
    }
  }

  // uint32 version = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_version() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_version(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RpcRequest::ByteSizeLong(const MessageLite& base) {
  const RpcRequest& this_ = static_cast<const RpcRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RpcRequest::ByteSizeLong() const {
  const RpcRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RpcRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_id());
      }
    }
    // string method = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_method().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_method());
      }
    }
    // string payload = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_payload().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_payload());
      }
    }
    // uint32 response_timeout_ms = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_response_timeout_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_response_timeout_ms());
      }
    }
    // uint32 version = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_version());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RpcRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcRequest*>(&to_msg);
  auto& from = static_cast<const RpcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_id().empty()) {
        _this->_internal_set_id(from._internal_id());
      } else {
        if (_this->_impl_.id_.IsDefault()) {
          _this->_internal_set_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_method().empty()) {
        _this->_internal_set_method(from._internal_method());
      } else {
        if (_this->_impl_.method_.IsDefault()) {
          _this->_internal_set_method("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_payload().empty()) {
        _this->_internal_set_payload(from._internal_payload());
      } else {
        if (_this->_impl_.payload_.IsDefault()) {
          _this->_internal_set_payload("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_response_timeout_ms() != 0) {
        _this->_impl_.response_timeout_ms_ = from._impl_.response_timeout_ms_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequest::CopyFrom(const RpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcRequest::InternalSwap(RpcRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.version_)
      + sizeof(RpcRequest::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(RpcRequest, _impl_.response_timeout_ms_)>(
          reinterpret_cast<char*>(&_impl_.response_timeout_ms_),
          reinterpret_cast<char*>(&other->_impl_.response_timeout_ms_));
}

::google::protobuf::Metadata RpcRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcAck::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcAck>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcAck, _impl_._has_bits_);
};

RpcAck::RpcAck(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcAck_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcAck)
}
PROTOBUF_NDEBUG_INLINE RpcAck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RpcAck& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        request_id_(arena, from.request_id_) {}

RpcAck::RpcAck(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RpcAck& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcAck_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcAck* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.RpcAck)
}
PROTOBUF_NDEBUG_INLINE RpcAck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        request_id_(arena) {}

inline void RpcAck::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RpcAck::~RpcAck() {
  // @@protoc_insertion_point(destructor:livekit.RpcAck)
  SharedDtor(*this);
}
inline void RpcAck::SharedDtor(MessageLite& self) {
  RpcAck& this_ = static_cast<RpcAck&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.request_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RpcAck::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RpcAck(arena);
}
constexpr auto RpcAck::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RpcAck),
                                            alignof(RpcAck));
}
constexpr auto RpcAck::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RpcAck_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RpcAck::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RpcAck>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RpcAck::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RpcAck>(), &RpcAck::ByteSizeLong,
              &RpcAck::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RpcAck, _impl_._cached_size_),
          false,
      },
      &RpcAck::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RpcAck_class_data_ =
            RpcAck::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RpcAck::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RpcAck_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RpcAck_class_data_.tc_table);
  return RpcAck_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 33, 2>
RpcAck::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcAck, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RpcAck_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RpcAck>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string request_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RpcAck, _impl_.request_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string request_id = 1;
    {PROTOBUF_FIELD_OFFSET(RpcAck, _impl_.request_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\12\0\0\0\0\0\0"
    "livekit.RpcAck"
    "request_id"
  }},
};
PROTOBUF_NOINLINE void RpcAck::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcAck)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.request_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RpcAck::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RpcAck& this_ = static_cast<const RpcAck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RpcAck::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RpcAck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcAck)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string request_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_request_id().empty()) {
      const std::string& _s = this_._internal_request_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcAck.request_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcAck)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RpcAck::ByteSizeLong(const MessageLite& base) {
  const RpcAck& this_ = static_cast<const RpcAck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RpcAck::ByteSizeLong() const {
  const RpcAck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RpcAck)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string request_id = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_request_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_request_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RpcAck::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcAck*>(&to_msg);
  auto& from = static_cast<const RpcAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcAck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_request_id().empty()) {
      _this->_internal_set_request_id(from._internal_request_id());
    } else {
      if (_this->_impl_.request_id_.IsDefault()) {
        _this->_internal_set_request_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcAck::CopyFrom(const RpcAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcAck::InternalSwap(RpcAck* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, &other->_impl_.request_id_, arena);
}

::google::protobuf::Metadata RpcAck::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::RpcResponse, _impl_._oneof_case_);
};

void RpcResponse::set_allocated_error(::livekit::RpcError* PROTOBUF_NULLABLE error) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = error->GetArena();
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.value_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcResponse.error)
}
RpcResponse::RpcResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcResponse)
}
PROTOBUF_NDEBUG_INLINE RpcResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RpcResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        request_id_(arena, from.request_id_),
        value_{},
        _oneof_case_{from._oneof_case_[0]} {}

RpcResponse::RpcResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RpcResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kPayload:
        new (&_impl_.value_.payload_) decltype(_impl_.value_.payload_){arena, from._impl_.value_.payload_};
        break;
      case kError:
        _impl_.value_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.error_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.RpcResponse)
}
PROTOBUF_NDEBUG_INLINE RpcResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        request_id_(arena),
        value_{},
        _oneof_case_{} {}

inline void RpcResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RpcResponse::~RpcResponse() {
  // @@protoc_insertion_point(destructor:livekit.RpcResponse)
  SharedDtor(*this);
}
inline void RpcResponse::SharedDtor(MessageLite& self) {
  RpcResponse& this_ = static_cast<RpcResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.request_id_.Destroy();
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void RpcResponse::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RpcResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kPayload: {
      _impl_.value_.payload_.Destroy();
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.error_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.error_);
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* PROTOBUF_NONNULL RpcResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RpcResponse(arena);
}
constexpr auto RpcResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RpcResponse),
                                            alignof(RpcResponse));
}
constexpr auto RpcResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RpcResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RpcResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RpcResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RpcResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RpcResponse>(), &RpcResponse::ByteSizeLong,
              &RpcResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_._cached_size_),
          false,
      },
      &RpcResponse::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RpcResponse_class_data_ =
            RpcResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RpcResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RpcResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RpcResponse_class_data_.tc_table);
  return RpcResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 1, 45, 2>
RpcResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RpcResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RpcResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string request_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_.request_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string request_id = 1;
    {PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_.request_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string payload = 2;
    {PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_.value_.payload_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.RpcError error = 3;
    {PROTOBUF_FIELD_OFFSET(RpcResponse, _impl_.value_.error_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::RpcError>()},
  }},
  {{
    "\23\12\7\0\0\0\0\0"
    "livekit.RpcResponse"
    "request_id"
    "payload"
  }},
};
PROTOBUF_NOINLINE void RpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.request_id_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RpcResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RpcResponse& this_ = static_cast<const RpcResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RpcResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RpcResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string request_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_request_id().empty()) {
      const std::string& _s = this_._internal_request_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcResponse.request_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  switch (this_.value_case()) {
    case kPayload: {
      const std::string& _s = this_._internal_payload();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcResponse.payload");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kError: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.value_.error_, this_._impl_.value_.error_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RpcResponse::ByteSizeLong(const MessageLite& base) {
  const RpcResponse& this_ = static_cast<const RpcResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RpcResponse::ByteSizeLong() const {
  const RpcResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RpcResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string request_id = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_request_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_request_id());
      }
    }
  }
  switch (this_.value_case()) {
    // string payload = 2;
    case kPayload: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_payload());
      break;
    }
    // .livekit.RpcError error = 3;
    case kError: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.error_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RpcResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcResponse*>(&to_msg);
  auto& from = static_cast<const RpcResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_request_id().empty()) {
      _this->_internal_set_request_id(from._internal_request_id());
    } else {
      if (_this->_impl_.request_id_.IsDefault()) {
        _this->_internal_set_request_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPayload: {
        if (oneof_needs_init) {
          _this->_impl_.value_.payload_.InitDefault();
        }
        _this->_impl_.value_.payload_.Set(from._internal_payload(), arena);
        break;
      }
      case kError: {
        if (oneof_needs_init) {
          _this->_impl_.value_.error_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.value_.error_);
        } else {
          _this->_impl_.value_.error_->MergeFrom(*from._impl_.value_.error_);
        }
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponse::CopyFrom(const RpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcResponse::InternalSwap(RpcResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, &other->_impl_.request_id_, arena);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RpcResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RpcError::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RpcError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RpcError, _impl_._has_bits_);
};

RpcError::RpcError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RpcError)
}
PROTOBUF_NDEBUG_INLINE RpcError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RpcError& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_),
        data_(arena, from.data_) {}

RpcError::RpcError(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RpcError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RpcError_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RpcError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:livekit.RpcError)
}
PROTOBUF_NDEBUG_INLINE RpcError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        message_(arena),
        data_(arena) {}

inline void RpcError::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
RpcError::~RpcError() {
  // @@protoc_insertion_point(destructor:livekit.RpcError)
  SharedDtor(*this);
}
inline void RpcError::SharedDtor(MessageLite& self) {
  RpcError& this_ = static_cast<RpcError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RpcError::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RpcError(arena);
}
constexpr auto RpcError::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RpcError),
                                            alignof(RpcError));
}
constexpr auto RpcError::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RpcError_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RpcError::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RpcError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RpcError::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RpcError>(), &RpcError::ByteSizeLong,
              &RpcError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RpcError, _impl_._cached_size_),
          false,
      },
      &RpcError::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RpcError_class_data_ =
            RpcError::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RpcError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RpcError_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RpcError_class_data_.tc_table);
  return RpcError_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 36, 2>
RpcError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RpcError, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RpcError_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RpcError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcError, _impl_.code_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(RpcError, _impl_.code_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(RpcError, _impl_.message_)}},
    // string data = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(RpcError, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 code = 1;
    {PROTOBUF_FIELD_OFFSET(RpcError, _impl_.code_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(RpcError, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string data = 3;
    {PROTOBUF_FIELD_OFFSET(RpcError, _impl_.data_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\0\7\4\0\0\0\0"
    "livekit.RpcError"
    "message"
    "data"
  }},
};
PROTOBUF_NOINLINE void RpcError::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RpcError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.code_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RpcError::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RpcError& this_ = static_cast<const RpcError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RpcError::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RpcError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RpcError)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 code = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_code(), target);
    }
  }

  // string message = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_message().empty()) {
      const std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcError.message");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string data = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_data().empty()) {
      const std::string& _s = this_._internal_data();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RpcError.data");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RpcError)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RpcError::ByteSizeLong(const MessageLite& base) {
  const RpcError& this_ = static_cast<const RpcError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RpcError::ByteSizeLong() const {
  const RpcError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RpcError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string message = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // string data = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_data().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_data());
      }
    }
    // uint32 code = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_code() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RpcError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RpcError*>(&to_msg);
  auto& from = static_cast<const RpcError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RpcError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_data().empty()) {
        _this->_internal_set_data(from._internal_data());
      } else {
        if (_this->_impl_.data_.IsDefault()) {
          _this->_internal_set_data("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_code() != 0) {
        _this->_impl_.code_ = from._impl_.code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcError::CopyFrom(const RpcError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RpcError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RpcError::InternalSwap(RpcError* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata RpcError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ParticipantTracks::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ParticipantTracks>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_._has_bits_);
};

ParticipantTracks::ParticipantTracks(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantTracks_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantTracks)
}
PROTOBUF_NDEBUG_INLINE ParticipantTracks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ParticipantTracks& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sids_{visibility, arena, from.track_sids_},
        participant_sid_(arena, from.participant_sid_) {}

ParticipantTracks::ParticipantTracks(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ParticipantTracks& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantTracks_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ParticipantTracks* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantTracks)
}
PROTOBUF_NDEBUG_INLINE ParticipantTracks::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sids_{visibility, arena},
        participant_sid_(arena) {}

inline void ParticipantTracks::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ParticipantTracks::~ParticipantTracks() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantTracks)
  SharedDtor(*this);
}
inline void ParticipantTracks::SharedDtor(MessageLite& self) {
  ParticipantTracks& this_ = static_cast<ParticipantTracks&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ParticipantTracks::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantTracks(arena);
}
constexpr auto ParticipantTracks::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_.track_sids_) +
          decltype(ParticipantTracks::_impl_.track_sids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ParticipantTracks), alignof(ParticipantTracks), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ParticipantTracks::PlacementNew_,
                                 sizeof(ParticipantTracks),
                                 alignof(ParticipantTracks));
  }
}
constexpr auto ParticipantTracks::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantTracks_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantTracks::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantTracks>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantTracks::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ParticipantTracks>(), &ParticipantTracks::ByteSizeLong,
              &ParticipantTracks::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_._cached_size_),
          false,
      },
      &ParticipantTracks::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantTracks_class_data_ =
            ParticipantTracks::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantTracks::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantTracks_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantTracks_class_data_.tc_table);
  return ParticipantTracks_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2>
ParticipantTracks::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ParticipantTracks_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantTracks>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string track_sids = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_.track_sids_)}},
    // string participant_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_.participant_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string track_sids = 2;
    {PROTOBUF_FIELD_OFFSET(ParticipantTracks, _impl_.track_sids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\31\17\12\0\0\0\0\0"
    "livekit.ParticipantTracks"
    "participant_sid"
    "track_sids"
  }},
};
PROTOBUF_NOINLINE void ParticipantTracks::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantTracks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.participant_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ParticipantTracks::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ParticipantTracks& this_ = static_cast<const ParticipantTracks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ParticipantTracks::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ParticipantTracks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantTracks)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantTracks.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated string track_sids = 2;
  for (int i = 0, n = this_._internal_track_sids_size(); i < n; ++i) {
    const auto& s = this_._internal_track_sids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantTracks.track_sids");
    target = stream->WriteString(2, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantTracks)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ParticipantTracks::ByteSizeLong(const MessageLite& base) {
  const ParticipantTracks& this_ = static_cast<const ParticipantTracks&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ParticipantTracks::ByteSizeLong() const {
  const ParticipantTracks& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantTracks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string track_sids = 2;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_track_sids().size());
      for (int i = 0, n = this_._internal_track_sids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_track_sids().Get(i));
      }
    }
  }
   {
    // string participant_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ParticipantTracks::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ParticipantTracks*>(&to_msg);
  auto& from = static_cast<const ParticipantTracks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantTracks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_track_sids()->MergeFrom(from._internal_track_sids());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_participant_sid().empty()) {
      _this->_internal_set_participant_sid(from._internal_participant_sid());
    } else {
      if (_this->_impl_.participant_sid_.IsDefault()) {
        _this->_internal_set_participant_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantTracks::CopyFrom(const ParticipantTracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ParticipantTracks::InternalSwap(ParticipantTracks* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
}

::google::protobuf::Metadata ParticipantTracks::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._has_bits_);
};

ServerInfo::ServerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServerInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ServerInfo)
}
PROTOBUF_NDEBUG_INLINE ServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ServerInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        version_(arena, from.version_),
        region_(arena, from.region_),
        node_id_(arena, from.node_id_),
        debug_info_(arena, from.debug_info_) {}

ServerInfo::ServerInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ServerInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServerInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, edition_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, edition_),
           offsetof(Impl_, agent_protocol_) -
               offsetof(Impl_, edition_) +
               sizeof(Impl_::agent_protocol_));

  // @@protoc_insertion_point(copy_constructor:livekit.ServerInfo)
}
PROTOBUF_NDEBUG_INLINE ServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        version_(arena),
        region_(arena),
        node_id_(arena),
        debug_info_(arena) {}

inline void ServerInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, edition_),
           0,
           offsetof(Impl_, agent_protocol_) -
               offsetof(Impl_, edition_) +
               sizeof(Impl_::agent_protocol_));
}
ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:livekit.ServerInfo)
  SharedDtor(*this);
}
inline void ServerInfo::SharedDtor(MessageLite& self) {
  ServerInfo& this_ = static_cast<ServerInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.version_.Destroy();
  this_._impl_.region_.Destroy();
  this_._impl_.node_id_.Destroy();
  this_._impl_.debug_info_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ServerInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ServerInfo(arena);
}
constexpr auto ServerInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ServerInfo),
                                            alignof(ServerInfo));
}
constexpr auto ServerInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ServerInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ServerInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ServerInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ServerInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ServerInfo>(), &ServerInfo::ByteSizeLong,
              &ServerInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._cached_size_),
          false,
      },
      &ServerInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ServerInfo_class_data_ =
            ServerInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ServerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ServerInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ServerInfo_class_data_.tc_table);
  return ServerInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 57, 2>
ServerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ServerInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ServerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.ServerInfo.Edition edition = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.edition_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.edition_)}},
    // string version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.version_)}},
    // int32 protocol = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.protocol_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.protocol_)}},
    // string region = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.region_)}},
    // string node_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.node_id_)}},
    // string debug_info = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.debug_info_)}},
    // int32 agent_protocol = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.agent_protocol_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.agent_protocol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.ServerInfo.Edition edition = 1;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.edition_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string version = 2;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 protocol = 3;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.protocol_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string region = 4;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.region_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string node_id = 5;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.node_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string debug_info = 6;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.debug_info_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 agent_protocol = 7;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.agent_protocol_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\7\0\6\7\12\0"
    "livekit.ServerInfo"
    "version"
    "region"
    "node_id"
    "debug_info"
  }},
};
PROTOBUF_NOINLINE void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ServerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.node_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.debug_info_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000070u) != 0) {
    ::memset(&_impl_.edition_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.agent_protocol_) -
        reinterpret_cast<char*>(&_impl_.edition_)) + sizeof(_impl_.agent_protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ServerInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ServerInfo& this_ = static_cast<const ServerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ServerInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ServerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ServerInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.ServerInfo.Edition edition = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_edition() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_edition(), target);
    }
  }

  // string version = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_version().empty()) {
      const std::string& _s = this_._internal_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ServerInfo.version");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 protocol = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_protocol() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_protocol(), target);
    }
  }

  // string region = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_region().empty()) {
      const std::string& _s = this_._internal_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ServerInfo.region");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string node_id = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_node_id().empty()) {
      const std::string& _s = this_._internal_node_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ServerInfo.node_id");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string debug_info = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_debug_info().empty()) {
      const std::string& _s = this_._internal_debug_info();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ServerInfo.debug_info");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // int32 agent_protocol = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_agent_protocol() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_agent_protocol(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ServerInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ServerInfo::ByteSizeLong(const MessageLite& base) {
  const ServerInfo& this_ = static_cast<const ServerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ServerInfo::ByteSizeLong() const {
  const ServerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ServerInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // string version = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_version());
      }
    }
    // string region = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_region());
      }
    }
    // string node_id = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_node_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_node_id());
      }
    }
    // string debug_info = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_debug_info().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_debug_info());
      }
    }
    // .livekit.ServerInfo.Edition edition = 1;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_edition() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_edition());
      }
    }
    // int32 protocol = 3;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_protocol() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_protocol());
      }
    }
    // int32 agent_protocol = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_agent_protocol() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_agent_protocol());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ServerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ServerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_version().empty()) {
        _this->_internal_set_version(from._internal_version());
      } else {
        if (_this->_impl_.version_.IsDefault()) {
          _this->_internal_set_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_region().empty()) {
        _this->_internal_set_region(from._internal_region());
      } else {
        if (_this->_impl_.region_.IsDefault()) {
          _this->_internal_set_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_node_id().empty()) {
        _this->_internal_set_node_id(from._internal_node_id());
      } else {
        if (_this->_impl_.node_id_.IsDefault()) {
          _this->_internal_set_node_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_debug_info().empty()) {
        _this->_internal_set_debug_info(from._internal_debug_info());
      } else {
        if (_this->_impl_.debug_info_.IsDefault()) {
          _this->_internal_set_debug_info("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_edition() != 0) {
        _this->_impl_.edition_ = from._impl_.edition_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_protocol() != 0) {
        _this->_impl_.protocol_ = from._impl_.protocol_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_agent_protocol() != 0) {
        _this->_impl_.agent_protocol_ = from._impl_.agent_protocol_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerInfo::InternalSwap(ServerInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.node_id_, &other->_impl_.node_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.debug_info_, &other->_impl_.debug_info_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.agent_protocol_)
      + sizeof(ServerInfo::_impl_.agent_protocol_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.edition_)>(
          reinterpret_cast<char*>(&_impl_.edition_),
          reinterpret_cast<char*>(&other->_impl_.edition_));
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClientInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ClientInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_._has_bits_);
};

ClientInfo::ClientInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClientInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ClientInfo)
}
PROTOBUF_NDEBUG_INLINE ClientInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ClientInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        version_(arena, from.version_),
        os_(arena, from.os_),
        os_version_(arena, from.os_version_),
        device_model_(arena, from.device_model_),
        browser_(arena, from.browser_),
        browser_version_(arena, from.browser_version_),
        address_(arena, from.address_),
        network_(arena, from.network_),
        other_sdks_(arena, from.other_sdks_) {}

ClientInfo::ClientInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ClientInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClientInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClientInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sdk_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sdk_),
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, sdk_) +
               sizeof(Impl_::protocol_));

  // @@protoc_insertion_point(copy_constructor:livekit.ClientInfo)
}
PROTOBUF_NDEBUG_INLINE ClientInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        version_(arena),
        os_(arena),
        os_version_(arena),
        device_model_(arena),
        browser_(arena),
        browser_version_(arena),
        address_(arena),
        network_(arena),
        other_sdks_(arena) {}

inline void ClientInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sdk_),
           0,
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, sdk_) +
               sizeof(Impl_::protocol_));
}
ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:livekit.ClientInfo)
  SharedDtor(*this);
}
inline void ClientInfo::SharedDtor(MessageLite& self) {
  ClientInfo& this_ = static_cast<ClientInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.version_.Destroy();
  this_._impl_.os_.Destroy();
  this_._impl_.os_version_.Destroy();
  this_._impl_.device_model_.Destroy();
  this_._impl_.browser_.Destroy();
  this_._impl_.browser_version_.Destroy();
  this_._impl_.address_.Destroy();
  this_._impl_.network_.Destroy();
  this_._impl_.other_sdks_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ClientInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ClientInfo(arena);
}
constexpr auto ClientInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ClientInfo),
                                            alignof(ClientInfo));
}
constexpr auto ClientInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ClientInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ClientInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ClientInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ClientInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ClientInfo>(), &ClientInfo::ByteSizeLong,
              &ClientInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_._cached_size_),
          false,
      },
      &ClientInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ClientInfo_class_data_ =
            ClientInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ClientInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ClientInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ClientInfo_class_data_.tc_table);
  return ClientInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 112, 2>
ClientInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ClientInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ClientInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.ClientInfo.SDK sdk = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientInfo, _impl_.sdk_), 9>(),
     {8, 9, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.sdk_)}},
    // string version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.version_)}},
    // int32 protocol = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientInfo, _impl_.protocol_), 10>(),
     {24, 10, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.protocol_)}},
    // string os = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.os_)}},
    // string os_version = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.os_version_)}},
    // string device_model = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.device_model_)}},
    // string browser = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 4, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.browser_)}},
    // string browser_version = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 5, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.browser_version_)}},
    // string address = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 6, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.address_)}},
    // string network = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 7, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.network_)}},
    // string other_sdks = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 8, 0, PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.other_sdks_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.ClientInfo.SDK sdk = 1;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.sdk_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string version = 2;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 protocol = 3;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.protocol_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string os = 4;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.os_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string os_version = 5;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.os_version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_model = 6;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.device_model_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string browser = 7;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.browser_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string browser_version = 8;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.browser_version_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string address = 9;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.address_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string network = 10;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.network_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string other_sdks = 11;
    {PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.other_sdks_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\7\0\2\12\14\7\17\7\7\12\0\0\0\0"
    "livekit.ClientInfo"
    "version"
    "os"
    "os_version"
    "device_model"
    "browser"
    "browser_version"
    "address"
    "network"
    "other_sdks"
  }},
};
PROTOBUF_NOINLINE void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.os_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.os_version_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.device_model_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.browser_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.browser_version_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.address_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.network_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    _impl_.other_sdks_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000600u) != 0) {
    ::memset(&_impl_.sdk_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.sdk_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ClientInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ClientInfo& this_ = static_cast<const ClientInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ClientInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ClientInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.ClientInfo.SDK sdk = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_sdk() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_sdk(), target);
    }
  }

  // string version = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_version().empty()) {
      const std::string& _s = this_._internal_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.version");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 protocol = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_protocol() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_protocol(), target);
    }
  }

  // string os = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_os().empty()) {
      const std::string& _s = this_._internal_os();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.os");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string os_version = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_os_version().empty()) {
      const std::string& _s = this_._internal_os_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.os_version");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // string device_model = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_device_model().empty()) {
      const std::string& _s = this_._internal_device_model();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.device_model");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // string browser = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_browser().empty()) {
      const std::string& _s = this_._internal_browser();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.browser");
      target = stream->WriteStringMaybeAliased(7, _s, target);
    }
  }

  // string browser_version = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (!this_._internal_browser_version().empty()) {
      const std::string& _s = this_._internal_browser_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.browser_version");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // string address = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (!this_._internal_address().empty()) {
      const std::string& _s = this_._internal_address();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.address");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // string network = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (!this_._internal_network().empty()) {
      const std::string& _s = this_._internal_network();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.network");
      target = stream->WriteStringMaybeAliased(10, _s, target);
    }
  }

  // string other_sdks = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (!this_._internal_other_sdks().empty()) {
      const std::string& _s = this_._internal_other_sdks();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ClientInfo.other_sdks");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ClientInfo::ByteSizeLong(const MessageLite& base) {
  const ClientInfo& this_ = static_cast<const ClientInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ClientInfo::ByteSizeLong() const {
  const ClientInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ClientInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string version = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_version());
      }
    }
    // string os = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_os().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_os());
      }
    }
    // string os_version = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_os_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_os_version());
      }
    }
    // string device_model = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_device_model().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_device_model());
      }
    }
    // string browser = 7;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_browser().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_browser());
      }
    }
    // string browser_version = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_browser_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_browser_version());
      }
    }
    // string address = 9;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_address().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_address());
      }
    }
    // string network = 10;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!this_._internal_network().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_network());
      }
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    // string other_sdks = 11;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!this_._internal_other_sdks().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_other_sdks());
      }
    }
    // .livekit.ClientInfo.SDK sdk = 1;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_sdk() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_sdk());
      }
    }
    // int32 protocol = 3;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_protocol() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_protocol());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ClientInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClientInfo*>(&to_msg);
  auto& from = static_cast<const ClientInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_version().empty()) {
        _this->_internal_set_version(from._internal_version());
      } else {
        if (_this->_impl_.version_.IsDefault()) {
          _this->_internal_set_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_os().empty()) {
        _this->_internal_set_os(from._internal_os());
      } else {
        if (_this->_impl_.os_.IsDefault()) {
          _this->_internal_set_os("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_os_version().empty()) {
        _this->_internal_set_os_version(from._internal_os_version());
      } else {
        if (_this->_impl_.os_version_.IsDefault()) {
          _this->_internal_set_os_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_device_model().empty()) {
        _this->_internal_set_device_model(from._internal_device_model());
      } else {
        if (_this->_impl_.device_model_.IsDefault()) {
          _this->_internal_set_device_model("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_browser().empty()) {
        _this->_internal_set_browser(from._internal_browser());
      } else {
        if (_this->_impl_.browser_.IsDefault()) {
          _this->_internal_set_browser("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_browser_version().empty()) {
        _this->_internal_set_browser_version(from._internal_browser_version());
      } else {
        if (_this->_impl_.browser_version_.IsDefault()) {
          _this->_internal_set_browser_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_address().empty()) {
        _this->_internal_set_address(from._internal_address());
      } else {
        if (_this->_impl_.address_.IsDefault()) {
          _this->_internal_set_address("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!from._internal_network().empty()) {
        _this->_internal_set_network(from._internal_network());
      } else {
        if (_this->_impl_.network_.IsDefault()) {
          _this->_internal_set_network("");
        }
      }
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!from._internal_other_sdks().empty()) {
        _this->_internal_set_other_sdks(from._internal_other_sdks());
      } else {
        if (_this->_impl_.other_sdks_.IsDefault()) {
          _this->_internal_set_other_sdks("");
        }
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_sdk() != 0) {
        _this->_impl_.sdk_ = from._impl_.sdk_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_protocol() != 0) {
        _this->_impl_.protocol_ = from._impl_.protocol_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClientInfo::InternalSwap(ClientInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.os_, &other->_impl_.os_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.os_version_, &other->_impl_.os_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_model_, &other->_impl_.device_model_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.browser_, &other->_impl_.browser_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.browser_version_, &other->_impl_.browser_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, &other->_impl_.address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_, &other->_impl_.network_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.other_sdks_, &other->_impl_.other_sdks_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.protocol_)
      + sizeof(ClientInfo::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(ClientInfo, _impl_.sdk_)>(
          reinterpret_cast<char*>(&_impl_.sdk_),
          reinterpret_cast<char*>(&other->_impl_.sdk_));
}

::google::protobuf::Metadata ClientInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClientConfiguration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ClientConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_._has_bits_);
};

ClientConfiguration::ClientConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClientConfiguration_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ClientConfiguration)
}
PROTOBUF_NDEBUG_INLINE ClientConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ClientConfiguration& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ClientConfiguration::ClientConfiguration(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ClientConfiguration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ClientConfiguration_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClientConfiguration* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.video_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_)
                : nullptr;
  _impl_.screen_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.screen_)
                : nullptr;
  _impl_.disabled_codecs_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.disabled_codecs_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, resume_connection_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, resume_connection_),
           offsetof(Impl_, force_relay_) -
               offsetof(Impl_, resume_connection_) +
               sizeof(Impl_::force_relay_));

  // @@protoc_insertion_point(copy_constructor:livekit.ClientConfiguration)
}
PROTOBUF_NDEBUG_INLINE ClientConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ClientConfiguration::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, video_),
           0,
           offsetof(Impl_, force_relay_) -
               offsetof(Impl_, video_) +
               sizeof(Impl_::force_relay_));
}
ClientConfiguration::~ClientConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.ClientConfiguration)
  SharedDtor(*this);
}
inline void ClientConfiguration::SharedDtor(MessageLite& self) {
  ClientConfiguration& this_ = static_cast<ClientConfiguration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.video_;
  delete this_._impl_.screen_;
  delete this_._impl_.disabled_codecs_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ClientConfiguration::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ClientConfiguration(arena);
}
constexpr auto ClientConfiguration::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ClientConfiguration),
                                            alignof(ClientConfiguration));
}
constexpr auto ClientConfiguration::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ClientConfiguration_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ClientConfiguration::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ClientConfiguration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ClientConfiguration::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ClientConfiguration>(), &ClientConfiguration::ByteSizeLong,
              &ClientConfiguration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_._cached_size_),
          false,
      },
      &ClientConfiguration::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ClientConfiguration_class_data_ =
            ClientConfiguration::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ClientConfiguration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ClientConfiguration_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ClientConfiguration_class_data_.tc_table);
  return ClientConfiguration_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2>
ClientConfiguration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ClientConfiguration_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ClientConfiguration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.VideoConfiguration video = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.video_)}},
    // .livekit.VideoConfiguration screen = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.screen_)}},
    // .livekit.ClientConfigSetting resume_connection = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientConfiguration, _impl_.resume_connection_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.resume_connection_)}},
    // .livekit.DisabledCodecs disabled_codecs = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.disabled_codecs_)}},
    // .livekit.ClientConfigSetting force_relay = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientConfiguration, _impl_.force_relay_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.force_relay_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.VideoConfiguration video = 1;
    {PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.video_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.VideoConfiguration screen = 2;
    {PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.screen_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ClientConfigSetting resume_connection = 3;
    {PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.resume_connection_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.DisabledCodecs disabled_codecs = 4;
    {PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.disabled_codecs_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ClientConfigSetting force_relay = 5;
    {PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.force_relay_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoConfiguration>()},
      {::_pbi::TcParser::GetTable<::livekit::VideoConfiguration>()},
      {::_pbi::TcParser::GetTable<::livekit::DisabledCodecs>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ClientConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ClientConfiguration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.screen_ != nullptr);
      _impl_.screen_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.disabled_codecs_ != nullptr);
      _impl_.disabled_codecs_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.resume_connection_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.force_relay_) -
        reinterpret_cast<char*>(&_impl_.resume_connection_)) + sizeof(_impl_.force_relay_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ClientConfiguration::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ClientConfiguration& this_ = static_cast<const ClientConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ClientConfiguration::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ClientConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ClientConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.VideoConfiguration video = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.video_, this_._impl_.video_->GetCachedSize(), target,
        stream);
  }

  // .livekit.VideoConfiguration screen = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.screen_, this_._impl_.screen_->GetCachedSize(), target,
        stream);
  }

  // .livekit.ClientConfigSetting resume_connection = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_resume_connection() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_resume_connection(), target);
    }
  }

  // .livekit.DisabledCodecs disabled_codecs = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.disabled_codecs_, this_._impl_.disabled_codecs_->GetCachedSize(), target,
        stream);
  }

  // .livekit.ClientConfigSetting force_relay = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (this_._internal_force_relay() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_force_relay(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ClientConfiguration)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ClientConfiguration::ByteSizeLong(const MessageLite& base) {
  const ClientConfiguration& this_ = static_cast<const ClientConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ClientConfiguration::ByteSizeLong() const {
  const ClientConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ClientConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // .livekit.VideoConfiguration video = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.video_);
    }
    // .livekit.VideoConfiguration screen = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.screen_);
    }
    // .livekit.DisabledCodecs disabled_codecs = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.disabled_codecs_);
    }
    // .livekit.ClientConfigSetting resume_connection = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_resume_connection() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_resume_connection());
      }
    }
    // .livekit.ClientConfigSetting force_relay = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_force_relay() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_force_relay());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ClientConfiguration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClientConfiguration*>(&to_msg);
  auto& from = static_cast<const ClientConfiguration&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ClientConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.video_ != nullptr);
      if (_this->_impl_.video_ == nullptr) {
        _this->_impl_.video_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_);
      } else {
        _this->_impl_.video_->MergeFrom(*from._impl_.video_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.screen_ != nullptr);
      if (_this->_impl_.screen_ == nullptr) {
        _this->_impl_.screen_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.screen_);
      } else {
        _this->_impl_.screen_->MergeFrom(*from._impl_.screen_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.disabled_codecs_ != nullptr);
      if (_this->_impl_.disabled_codecs_ == nullptr) {
        _this->_impl_.disabled_codecs_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.disabled_codecs_);
      } else {
        _this->_impl_.disabled_codecs_->MergeFrom(*from._impl_.disabled_codecs_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_resume_connection() != 0) {
        _this->_impl_.resume_connection_ = from._impl_.resume_connection_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_force_relay() != 0) {
        _this->_impl_.force_relay_ = from._impl_.force_relay_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConfiguration::CopyFrom(const ClientConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ClientConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClientConfiguration::InternalSwap(ClientConfiguration* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.force_relay_)
      + sizeof(ClientConfiguration::_impl_.force_relay_)
      - PROTOBUF_FIELD_OFFSET(ClientConfiguration, _impl_.video_)>(
          reinterpret_cast<char*>(&_impl_.video_),
          reinterpret_cast<char*>(&other->_impl_.video_));
}

::google::protobuf::Metadata ClientConfiguration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VideoConfiguration::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VideoConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VideoConfiguration, _impl_._has_bits_);
};

VideoConfiguration::VideoConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VideoConfiguration_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.VideoConfiguration)
}
VideoConfiguration::VideoConfiguration(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoConfiguration& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VideoConfiguration_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE VideoConfiguration::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VideoConfiguration::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.hardware_encoder_ = {};
}
VideoConfiguration::~VideoConfiguration() {
  // @@protoc_insertion_point(destructor:livekit.VideoConfiguration)
  SharedDtor(*this);
}
inline void VideoConfiguration::SharedDtor(MessageLite& self) {
  VideoConfiguration& this_ = static_cast<VideoConfiguration&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VideoConfiguration::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VideoConfiguration(arena);
}
constexpr auto VideoConfiguration::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VideoConfiguration),
                                            alignof(VideoConfiguration));
}
constexpr auto VideoConfiguration::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VideoConfiguration_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VideoConfiguration::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VideoConfiguration>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VideoConfiguration::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VideoConfiguration>(), &VideoConfiguration::ByteSizeLong,
              &VideoConfiguration::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VideoConfiguration, _impl_._cached_size_),
          false,
      },
      &VideoConfiguration::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        VideoConfiguration_class_data_ =
            VideoConfiguration::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL VideoConfiguration::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VideoConfiguration_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VideoConfiguration_class_data_.tc_table);
  return VideoConfiguration_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
VideoConfiguration::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VideoConfiguration, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    VideoConfiguration_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::VideoConfiguration>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.ClientConfigSetting hardware_encoder = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VideoConfiguration, _impl_.hardware_encoder_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(VideoConfiguration, _impl_.hardware_encoder_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.ClientConfigSetting hardware_encoder = 1;
    {PROTOBUF_FIELD_OFFSET(VideoConfiguration, _impl_.hardware_encoder_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void VideoConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VideoConfiguration)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hardware_encoder_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VideoConfiguration::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VideoConfiguration& this_ = static_cast<const VideoConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VideoConfiguration::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VideoConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VideoConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.ClientConfigSetting hardware_encoder = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_hardware_encoder() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_hardware_encoder(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VideoConfiguration)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VideoConfiguration::ByteSizeLong(const MessageLite& base) {
  const VideoConfiguration& this_ = static_cast<const VideoConfiguration&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VideoConfiguration::ByteSizeLong() const {
  const VideoConfiguration& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.VideoConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .livekit.ClientConfigSetting hardware_encoder = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_hardware_encoder() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_hardware_encoder());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VideoConfiguration::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VideoConfiguration*>(&to_msg);
  auto& from = static_cast<const VideoConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VideoConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_hardware_encoder() != 0) {
      _this->_impl_.hardware_encoder_ = from._impl_.hardware_encoder_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VideoConfiguration::CopyFrom(const VideoConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VideoConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VideoConfiguration::InternalSwap(VideoConfiguration* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.hardware_encoder_, other->_impl_.hardware_encoder_);
}

::google::protobuf::Metadata VideoConfiguration::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DisabledCodecs::_Internal {
 public:
};

DisabledCodecs::DisabledCodecs(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DisabledCodecs_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DisabledCodecs)
}
PROTOBUF_NDEBUG_INLINE DisabledCodecs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DisabledCodecs& from_msg)
      : codecs_{visibility, arena, from.codecs_},
        publish_{visibility, arena, from.publish_},
        _cached_size_{0} {}

DisabledCodecs::DisabledCodecs(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DisabledCodecs& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DisabledCodecs_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DisabledCodecs* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.DisabledCodecs)
}
PROTOBUF_NDEBUG_INLINE DisabledCodecs::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : codecs_{visibility, arena},
        publish_{visibility, arena},
        _cached_size_{0} {}

inline void DisabledCodecs::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DisabledCodecs::~DisabledCodecs() {
  // @@protoc_insertion_point(destructor:livekit.DisabledCodecs)
  SharedDtor(*this);
}
inline void DisabledCodecs::SharedDtor(MessageLite& self) {
  DisabledCodecs& this_ = static_cast<DisabledCodecs&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DisabledCodecs::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DisabledCodecs(arena);
}
constexpr auto DisabledCodecs::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.codecs_) +
          decltype(DisabledCodecs::_impl_.codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.publish_) +
          decltype(DisabledCodecs::_impl_.publish_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DisabledCodecs), alignof(DisabledCodecs), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DisabledCodecs::PlacementNew_,
                                 sizeof(DisabledCodecs),
                                 alignof(DisabledCodecs));
  }
}
constexpr auto DisabledCodecs::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DisabledCodecs_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DisabledCodecs::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DisabledCodecs>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DisabledCodecs::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DisabledCodecs>(), &DisabledCodecs::ByteSizeLong,
              &DisabledCodecs::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_._cached_size_),
          false,
      },
      &DisabledCodecs::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DisabledCodecs_class_data_ =
            DisabledCodecs::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DisabledCodecs::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DisabledCodecs_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DisabledCodecs_class_data_.tc_table);
  return DisabledCodecs_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
DisabledCodecs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DisabledCodecs_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DisabledCodecs>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.Codec publish = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.publish_)}},
    // repeated .livekit.Codec codecs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.codecs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.Codec codecs = 1;
    {PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.codecs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.Codec publish = 2;
    {PROTOBUF_FIELD_OFFSET(DisabledCodecs, _impl_.publish_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::Codec>()},
      {::_pbi::TcParser::GetTable<::livekit::Codec>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void DisabledCodecs::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DisabledCodecs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.codecs_.Clear();
  _impl_.publish_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DisabledCodecs::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DisabledCodecs& this_ = static_cast<const DisabledCodecs&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DisabledCodecs::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DisabledCodecs& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DisabledCodecs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.Codec codecs = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.Codec publish = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_publish_size());
       i < n; i++) {
    const auto& repfield = this_._internal_publish().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DisabledCodecs)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DisabledCodecs::ByteSizeLong(const MessageLite& base) {
  const DisabledCodecs& this_ = static_cast<const DisabledCodecs&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DisabledCodecs::ByteSizeLong() const {
  const DisabledCodecs& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DisabledCodecs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.Codec codecs = 1;
    {
      total_size += 1UL * this_._internal_codecs_size();
      for (const auto& msg : this_._internal_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.Codec publish = 2;
    {
      total_size += 1UL * this_._internal_publish_size();
      for (const auto& msg : this_._internal_publish()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DisabledCodecs::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DisabledCodecs*>(&to_msg);
  auto& from = static_cast<const DisabledCodecs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DisabledCodecs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_codecs()->MergeFrom(
      from._internal_codecs());
  _this->_internal_mutable_publish()->MergeFrom(
      from._internal_publish());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DisabledCodecs::CopyFrom(const DisabledCodecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DisabledCodecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DisabledCodecs::InternalSwap(DisabledCodecs* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.codecs_.InternalSwap(&other->_impl_.codecs_);
  _impl_.publish_.InternalSwap(&other->_impl_.publish_);
}

::google::protobuf::Metadata DisabledCodecs::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RTPDrift::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RTPDrift>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_._has_bits_);
};

void RTPDrift::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RTPDrift::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RTPDrift::RTPDrift(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPDrift_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPDrift)
}
PROTOBUF_NDEBUG_INLINE RTPDrift::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RTPDrift& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RTPDrift::RTPDrift(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RTPDrift& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPDrift_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RTPDrift* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_time_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_time_)
                : nullptr;
  _impl_.end_time_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, clock_rate_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::clock_rate_));

  // @@protoc_insertion_point(copy_constructor:livekit.RTPDrift)
}
PROTOBUF_NDEBUG_INLINE RTPDrift::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RTPDrift::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, clock_rate_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::clock_rate_));
}
RTPDrift::~RTPDrift() {
  // @@protoc_insertion_point(destructor:livekit.RTPDrift)
  SharedDtor(*this);
}
inline void RTPDrift::SharedDtor(MessageLite& self) {
  RTPDrift& this_ = static_cast<RTPDrift&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.start_time_;
  delete this_._impl_.end_time_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RTPDrift::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTPDrift(arena);
}
constexpr auto RTPDrift::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RTPDrift),
                                            alignof(RTPDrift));
}
constexpr auto RTPDrift::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTPDrift_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTPDrift::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTPDrift>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTPDrift::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RTPDrift>(), &RTPDrift::ByteSizeLong,
              &RTPDrift::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_._cached_size_),
          false,
      },
      &RTPDrift::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTPDrift_class_data_ =
            RTPDrift::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTPDrift::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTPDrift_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTPDrift_class_data_.tc_table);
  return RTPDrift_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 0, 2>
RTPDrift::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RTPDrift_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTPDrift>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp start_time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.end_time_)}},
    // double duration = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.duration_)}},
    // uint64 start_timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPDrift, _impl_.start_timestamp_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_timestamp_)}},
    // uint64 end_timestamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPDrift, _impl_.end_timestamp_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.end_timestamp_)}},
    // uint64 rtp_clock_ticks = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPDrift, _impl_.rtp_clock_ticks_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.rtp_clock_ticks_)}},
    // int64 drift_samples = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPDrift, _impl_.drift_samples_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.drift_samples_)}},
    // double drift_ms = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 7, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.drift_ms_)}},
    // double clock_rate = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 8, 0, PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.clock_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp start_time = 1;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 2;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.end_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double duration = 3;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.duration_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint64 start_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 end_timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.end_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 rtp_clock_ticks = 6;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.rtp_clock_ticks_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // int64 drift_samples = 7;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.drift_samples_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // double drift_ms = 8;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.drift_ms_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double clock_rate = 9;
    {PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.clock_rate_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RTPDrift::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPDrift)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.drift_ms_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.drift_ms_));
  }
  _impl_.clock_rate_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RTPDrift::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RTPDrift& this_ = static_cast<const RTPDrift&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RTPDrift::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RTPDrift& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPDrift)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_time = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.end_time_, this_._impl_.end_time_->GetCachedSize(), target,
        stream);
  }

  // double duration = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_duration()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_duration(), target);
    }
  }

  // uint64 start_timestamp = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (this_._internal_start_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_start_timestamp(), target);
    }
  }

  // uint64 end_timestamp = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (this_._internal_end_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          5, this_._internal_end_timestamp(), target);
    }
  }

  // uint64 rtp_clock_ticks = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_rtp_clock_ticks() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          6, this_._internal_rtp_clock_ticks(), target);
    }
  }

  // int64 drift_samples = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (this_._internal_drift_samples() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
              stream, this_._internal_drift_samples(), target);
    }
  }

  // double drift_ms = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_drift_ms()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this_._internal_drift_ms(), target);
    }
  }

  // double clock_rate = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_clock_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this_._internal_clock_rate(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPDrift)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RTPDrift::ByteSizeLong(const MessageLite& base) {
  const RTPDrift& this_ = static_cast<const RTPDrift&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RTPDrift::ByteSizeLong() const {
  const RTPDrift& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RTPDrift)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .google.protobuf.Timestamp start_time = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
    }
    // .google.protobuf.Timestamp end_time = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_time_);
    }
    // double duration = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_duration()) != 0) {
        total_size += 9;
      }
    }
    // uint64 start_timestamp = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_start_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_start_timestamp());
      }
    }
    // uint64 end_timestamp = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_end_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_end_timestamp());
      }
    }
    // uint64 rtp_clock_ticks = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_rtp_clock_ticks() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_rtp_clock_ticks());
      }
    }
    // int64 drift_samples = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_drift_samples() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_drift_samples());
      }
    }
    // double drift_ms = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_drift_ms()) != 0) {
        total_size += 9;
      }
    }
  }
   {
    // double clock_rate = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_clock_rate()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RTPDrift::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RTPDrift*>(&to_msg);
  auto& from = static_cast<const RTPDrift&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPDrift)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.end_time_ != nullptr);
      if (_this->_impl_.end_time_ == nullptr) {
        _this->_impl_.end_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_time_);
      } else {
        _this->_impl_.end_time_->MergeFrom(*from._impl_.end_time_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_duration()) != 0) {
        _this->_impl_.duration_ = from._impl_.duration_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_start_timestamp() != 0) {
        _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_end_timestamp() != 0) {
        _this->_impl_.end_timestamp_ = from._impl_.end_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_rtp_clock_ticks() != 0) {
        _this->_impl_.rtp_clock_ticks_ = from._impl_.rtp_clock_ticks_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_drift_samples() != 0) {
        _this->_impl_.drift_samples_ = from._impl_.drift_samples_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_drift_ms()) != 0) {
        _this->_impl_.drift_ms_ = from._impl_.drift_ms_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(from._internal_clock_rate()) != 0) {
      _this->_impl_.clock_rate_ = from._impl_.clock_rate_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RTPDrift::CopyFrom(const RTPDrift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPDrift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RTPDrift::InternalSwap(RTPDrift* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.clock_rate_)
      + sizeof(RTPDrift::_impl_.clock_rate_)
      - PROTOBUF_FIELD_OFFSET(RTPDrift, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata RTPDrift::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse()
    : SuperType(RTPStats_GapHistogramEntry_DoNotUse_class_data_.base()) {}
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, RTPStats_GapHistogramEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse() : SuperType() {}
RTPStats_GapHistogramEntry_DoNotUse::RTPStats_GapHistogramEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL RTPStats_GapHistogramEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTPStats_GapHistogramEntry_DoNotUse(arena);
}
constexpr auto RTPStats_GapHistogramEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RTPStats_GapHistogramEntry_DoNotUse),
                                            alignof(RTPStats_GapHistogramEntry_DoNotUse));
}
constexpr auto RTPStats_GapHistogramEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTPStats_GapHistogramEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTPStats_GapHistogramEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTPStats_GapHistogramEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTPStats_GapHistogramEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&RTPStats_GapHistogramEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &RTPStats_GapHistogramEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTPStats_GapHistogramEntry_DoNotUse_class_data_ =
            RTPStats_GapHistogramEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTPStats_GapHistogramEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTPStats_GapHistogramEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTPStats_GapHistogramEntry_DoNotUse_class_data_.tc_table);
  return RTPStats_GapHistogramEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
RTPStats_GapHistogramEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RTPStats_GapHistogramEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTPStats_GapHistogramEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats_GapHistogramEntry_DoNotUse, _impl_.value_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_.value_)}},
    // int32 key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats_GapHistogramEntry_DoNotUse, _impl_.key_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key = 1;
    {PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // uint32 value = 2;
    {PROTOBUF_FIELD_OFFSET(RTPStats_GapHistogramEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
// ===================================================================

class RTPStats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RTPStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RTPStats, _impl_._has_bits_);
};

void RTPStats::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RTPStats::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RTPStats::clear_last_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_pli_ != nullptr) _impl_.last_pli_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RTPStats::clear_last_fir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_fir_ != nullptr) _impl_.last_fir_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RTPStats::clear_last_key_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_key_frame_ != nullptr) _impl_.last_key_frame_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void RTPStats::clear_last_layer_lock_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_layer_lock_pli_ != nullptr) _impl_.last_layer_lock_pli_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
RTPStats::RTPStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPStats_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPStats)
}
PROTOBUF_NDEBUG_INLINE RTPStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RTPStats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gap_histogram_{visibility, arena, from.gap_histogram_} {}

RTPStats::RTPStats(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RTPStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPStats_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RTPStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_time_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_time_)
                : nullptr;
  _impl_.end_time_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_time_)
                : nullptr;
  _impl_.last_pli_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_pli_)
                : nullptr;
  _impl_.last_fir_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_fir_)
                : nullptr;
  _impl_.last_key_frame_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_key_frame_)
                : nullptr;
  _impl_.last_layer_lock_pli_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_layer_lock_pli_)
                : nullptr;
  _impl_.packet_drift_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.packet_drift_)
                : nullptr;
  _impl_.ntp_report_drift_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ntp_report_drift_)
                : nullptr;
  _impl_.rebased_report_drift_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rebased_report_drift_)
                : nullptr;
  _impl_.received_report_drift_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.received_report_drift_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, nack_repeated_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::nack_repeated_));

  // @@protoc_insertion_point(copy_constructor:livekit.RTPStats)
}
PROTOBUF_NDEBUG_INLINE RTPStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        gap_histogram_{visibility, arena} {}

inline void RTPStats::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, nack_repeated_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::nack_repeated_));
}
RTPStats::~RTPStats() {
  // @@protoc_insertion_point(destructor:livekit.RTPStats)
  SharedDtor(*this);
}
inline void RTPStats::SharedDtor(MessageLite& self) {
  RTPStats& this_ = static_cast<RTPStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.start_time_;
  delete this_._impl_.end_time_;
  delete this_._impl_.last_pli_;
  delete this_._impl_.last_fir_;
  delete this_._impl_.last_key_frame_;
  delete this_._impl_.last_layer_lock_pli_;
  delete this_._impl_.packet_drift_;
  delete this_._impl_.ntp_report_drift_;
  delete this_._impl_.rebased_report_drift_;
  delete this_._impl_.received_report_drift_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RTPStats::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTPStats(arena);
}
constexpr auto RTPStats::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.gap_histogram_) +
          decltype(RTPStats::_impl_.gap_histogram_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.gap_histogram_) +
          decltype(RTPStats::_impl_.gap_histogram_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RTPStats), alignof(RTPStats), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RTPStats::PlacementNew_,
                                 sizeof(RTPStats),
                                 alignof(RTPStats));
  }
}
constexpr auto RTPStats::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTPStats_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTPStats::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTPStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTPStats::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RTPStats>(), &RTPStats::ByteSizeLong,
              &RTPStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTPStats, _impl_._cached_size_),
          false,
      },
      &RTPStats::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTPStats_class_data_ =
            RTPStats::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTPStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTPStats_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTPStats_class_data_.tc_table);
  return RTPStats_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 45, 11, 0, 7>
RTPStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTPStats, _impl_._has_bits_),
    0, // no _extensions_
    47, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    45,  // num_field_entries
    11,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RTPStats_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTPStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp start_time = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.end_time_)}},
    // double duration = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 10, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.duration_)}},
    // uint32 packets = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats, _impl_.packets_), 13>(),
     {32, 13, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_)}},
    // double packet_rate = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 11, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_rate_)}},
    // uint64 bytes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPStats, _impl_.bytes_), 12>(),
     {48, 12, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_)}},
    // double bitrate = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 15, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_)}},
    // uint32 packets_lost = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats, _impl_.packets_lost_), 14>(),
     {64, 14, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_lost_)}},
    // double packet_loss_rate = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 16, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_loss_rate_)}},
    // float packet_loss_percentage = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 17, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_loss_percentage_)}},
    // uint32 packets_duplicate = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats, _impl_.packets_duplicate_), 18>(),
     {88, 18, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_duplicate_)}},
    // double packet_duplicate_rate = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 19, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_duplicate_rate_)}},
    // uint64 bytes_duplicate = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPStats, _impl_.bytes_duplicate_), 20>(),
     {104, 20, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_duplicate_)}},
    // double bitrate_duplicate = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 21, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_duplicate_)}},
    // uint32 packets_padding = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPStats, _impl_.packets_padding_), 24>(),
     {120, 24, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_padding_)}},
    // double packet_padding_rate = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 22, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_padding_rate_)}},
    // uint64 bytes_padding = 17;
    {::_pbi::TcParser::FastV64S2,
     {392, 23, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_padding_)}},
    // double bitrate_padding = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 26, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_padding_)}},
    // uint32 packets_out_of_order = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 25, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_out_of_order_)}},
    // uint32 frames = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 29, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.frames_)}},
    // double frame_rate = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 27, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.frame_rate_)}},
    // double jitter_current = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 28, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.jitter_current_)}},
    // double jitter_max = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 31, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.jitter_max_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 nacks = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 30, 0, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nacks_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp last_pli = 28;
    {::_pbi::TcParser::FastMtS2,
     {482, 2, 2, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_pli_)}},
    // .livekit.RTPDrift ntp_report_drift = 45;
    {::_pbi::TcParser::FastMtS2,
     {746, 7, 7, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.ntp_report_drift_)}},
    // .google.protobuf.Timestamp last_fir = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 3, 3, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_fir_)}},
    // .livekit.RTPDrift received_report_drift = 47;
    {::_pbi::TcParser::FastMtS2,
     {762, 9, 9, PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.received_report_drift_)}},
  }}, {{
    33, 0, 1,
    34304, 32,
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp start_time = 1;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 2;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.end_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double duration = 3;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.duration_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint32 packets = 4;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double packet_rate = 5;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_rate_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint64 bytes = 6;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // double bitrate = 7;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint32 packets_lost = 8;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_lost_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double packet_loss_rate = 9;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_loss_rate_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // float packet_loss_percentage = 10;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_loss_percentage_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // uint32 packets_duplicate = 11;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_duplicate_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double packet_duplicate_rate = 12;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_duplicate_rate_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint64 bytes_duplicate = 13;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_duplicate_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // double bitrate_duplicate = 14;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_duplicate_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint32 packets_padding = 15;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_padding_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double packet_padding_rate = 16;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_padding_rate_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint64 bytes_padding = 17;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bytes_padding_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // double bitrate_padding = 18;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.bitrate_padding_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // uint32 packets_out_of_order = 19;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packets_out_of_order_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 frames = 20;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.frames_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double frame_rate = 21;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.frame_rate_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double jitter_current = 22;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.jitter_current_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double jitter_max = 23;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.jitter_max_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // map<int32, uint32> gap_histogram = 24;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.gap_histogram_), -1, 10,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // uint32 nacks = 25;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nacks_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 nack_misses = 26;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nack_misses_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 plis = 27;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.plis_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp last_pli = 28;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_pli_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 firs = 29;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.firs_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp last_fir = 30;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_fir_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 rtt_current = 31;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.rtt_current_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 rtt_max = 32;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.rtt_max_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 key_frames = 33;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.key_frames_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp last_key_frame = 34;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_key_frame_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 layer_lock_plis = 35;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.layer_lock_plis_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp last_layer_lock_pli = 36;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.last_layer_lock_pli_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 nack_acks = 37;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nack_acks_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 nack_repeated = 38;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nack_repeated_), _Internal::kHasBitsOffset + 43, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 header_bytes = 39;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.header_bytes_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 header_bytes_duplicate = 40;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.header_bytes_duplicate_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 header_bytes_padding = 41;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.header_bytes_padding_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // .livekit.RTPDrift packet_drift = 44;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.packet_drift_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RTPDrift ntp_report_drift = 45;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.ntp_report_drift_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RTPDrift rebased_report_drift = 46;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.rebased_report_drift_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RTPDrift received_report_drift = 47;
    {PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.received_report_drift_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::livekit::RTPDrift>()},
      {::_pbi::TcParser::GetTable<::livekit::RTPDrift>()},
      {::_pbi::TcParser::GetTable<::livekit::RTPDrift>()},
      {::_pbi::TcParser::GetTable<::livekit::RTPDrift>()},
      {::_pbi::TcParser::GetMapAuxInfo(0, 0, 0,
                                       5, 13,
                                       0)},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RTPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gap_histogram_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.last_pli_ != nullptr);
      _impl_.last_pli_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.last_fir_ != nullptr);
      _impl_.last_fir_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.last_key_frame_ != nullptr);
      _impl_.last_key_frame_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.last_layer_lock_pli_ != nullptr);
      _impl_.last_layer_lock_pli_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.packet_drift_ != nullptr);
      _impl_.packet_drift_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.ntp_report_drift_ != nullptr);
      _impl_.ntp_report_drift_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.rebased_report_drift_ != nullptr);
      _impl_.rebased_report_drift_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.received_report_drift_ != nullptr);
      _impl_.received_report_drift_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000fc00u) != 0) {
    ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bitrate_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.bitrate_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.packet_loss_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bytes_padding_) -
        reinterpret_cast<char*>(&_impl_.packet_loss_rate_)) + sizeof(_impl_.bytes_padding_));
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    ::memset(&_impl_.packets_padding_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.jitter_max_) -
        reinterpret_cast<char*>(&_impl_.packets_padding_)) + sizeof(_impl_.jitter_max_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.nack_misses_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nack_acks_) -
        reinterpret_cast<char*>(&_impl_.nack_misses_)) + sizeof(_impl_.nack_acks_));
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    ::memset(&_impl_.header_bytes_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nack_repeated_) -
        reinterpret_cast<char*>(&_impl_.header_bytes_)) + sizeof(_impl_.nack_repeated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RTPStats::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RTPStats& this_ = static_cast<const RTPStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RTPStats::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RTPStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp start_time = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp end_time = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.end_time_, this_._impl_.end_time_->GetCachedSize(), target,
        stream);
  }

  // double duration = 3;
  if ((cached_has_bits & 0x00000400u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_duration()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_duration(), target);
    }
  }

  // uint32 packets = 4;
  if ((cached_has_bits & 0x00002000u) != 0) {
    if (this_._internal_packets() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_packets(), target);
    }
  }

  // double packet_rate = 5;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_packet_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_packet_rate(), target);
    }
  }

  // uint64 bytes = 6;
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          6, this_._internal_bytes(), target);
    }
  }

  // double bitrate = 7;
  if ((cached_has_bits & 0x00008000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_bitrate(), target);
    }
  }

  // uint32 packets_lost = 8;
  if ((cached_has_bits & 0x00004000u) != 0) {
    if (this_._internal_packets_lost() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_packets_lost(), target);
    }
  }

  // double packet_loss_rate = 9;
  if ((cached_has_bits & 0x00010000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this_._internal_packet_loss_rate(), target);
    }
  }

  // float packet_loss_percentage = 10;
  if ((cached_has_bits & 0x00020000u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_percentage()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          10, this_._internal_packet_loss_percentage(), target);
    }
  }

  // uint32 packets_duplicate = 11;
  if ((cached_has_bits & 0x00040000u) != 0) {
    if (this_._internal_packets_duplicate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_packets_duplicate(), target);
    }
  }

  // double packet_duplicate_rate = 12;
  if ((cached_has_bits & 0x00080000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_packet_duplicate_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          12, this_._internal_packet_duplicate_rate(), target);
    }
  }

  // uint64 bytes_duplicate = 13;
  if ((cached_has_bits & 0x00100000u) != 0) {
    if (this_._internal_bytes_duplicate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          13, this_._internal_bytes_duplicate(), target);
    }
  }

  // double bitrate_duplicate = 14;
  if ((cached_has_bits & 0x00200000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate_duplicate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          14, this_._internal_bitrate_duplicate(), target);
    }
  }

  // uint32 packets_padding = 15;
  if ((cached_has_bits & 0x01000000u) != 0) {
    if (this_._internal_packets_padding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          15, this_._internal_packets_padding(), target);
    }
  }

  // double packet_padding_rate = 16;
  if ((cached_has_bits & 0x00400000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_packet_padding_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          16, this_._internal_packet_padding_rate(), target);
    }
  }

  // uint64 bytes_padding = 17;
  if ((cached_has_bits & 0x00800000u) != 0) {
    if (this_._internal_bytes_padding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          17, this_._internal_bytes_padding(), target);
    }
  }

  // double bitrate_padding = 18;
  if ((cached_has_bits & 0x04000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate_padding()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          18, this_._internal_bitrate_padding(), target);
    }
  }

  // uint32 packets_out_of_order = 19;
  if ((cached_has_bits & 0x02000000u) != 0) {
    if (this_._internal_packets_out_of_order() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          19, this_._internal_packets_out_of_order(), target);
    }
  }

  // uint32 frames = 20;
  if ((cached_has_bits & 0x20000000u) != 0) {
    if (this_._internal_frames() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          20, this_._internal_frames(), target);
    }
  }

  // double frame_rate = 21;
  if ((cached_has_bits & 0x08000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_frame_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          21, this_._internal_frame_rate(), target);
    }
  }

  // double jitter_current = 22;
  if ((cached_has_bits & 0x10000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_jitter_current()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          22, this_._internal_jitter_current(), target);
    }
  }

  // double jitter_max = 23;
  if ((cached_has_bits & 0x80000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_jitter_max()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          23, this_._internal_jitter_max(), target);
    }
  }

  // map<int32, uint32> gap_histogram = 24;
  if (!this_._internal_gap_histogram().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::uint32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::uint32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_UINT32>;
    const auto& field = this_._internal_gap_histogram();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            24, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            24, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 nacks = 25;
  if ((cached_has_bits & 0x40000000u) != 0) {
    if (this_._internal_nacks() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          25, this_._internal_nacks(), target);
    }
  }

  // uint32 nack_misses = 26;
  if ((this_._impl_._has_bits_[1] & 0x00000001u) != 0) {
    if (this_._internal_nack_misses() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          26, this_._internal_nack_misses(), target);
    }
  }

  // uint32 plis = 27;
  if ((this_._impl_._has_bits_[1] & 0x00000002u) != 0) {
    if (this_._internal_plis() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          27, this_._internal_plis(), target);
    }
  }

  // .google.protobuf.Timestamp last_pli = 28;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        28, *this_._impl_.last_pli_, this_._impl_.last_pli_->GetCachedSize(), target,
        stream);
  }

  // uint32 firs = 29;
  if ((this_._impl_._has_bits_[1] & 0x00000004u) != 0) {
    if (this_._internal_firs() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          29, this_._internal_firs(), target);
    }
  }

  // .google.protobuf.Timestamp last_fir = 30;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *this_._impl_.last_fir_, this_._impl_.last_fir_->GetCachedSize(), target,
        stream);
  }

  // uint32 rtt_current = 31;
  if ((this_._impl_._has_bits_[1] & 0x00000008u) != 0) {
    if (this_._internal_rtt_current() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          31, this_._internal_rtt_current(), target);
    }
  }

  // uint32 rtt_max = 32;
  if ((this_._impl_._has_bits_[1] & 0x00000010u) != 0) {
    if (this_._internal_rtt_max() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          32, this_._internal_rtt_max(), target);
    }
  }

  // uint32 key_frames = 33;
  if ((this_._impl_._has_bits_[1] & 0x00000020u) != 0) {
    if (this_._internal_key_frames() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          33, this_._internal_key_frames(), target);
    }
  }

  // .google.protobuf.Timestamp last_key_frame = 34;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        34, *this_._impl_.last_key_frame_, this_._impl_.last_key_frame_->GetCachedSize(), target,
        stream);
  }

  // uint32 layer_lock_plis = 35;
  if ((this_._impl_._has_bits_[1] & 0x00000040u) != 0) {
    if (this_._internal_layer_lock_plis() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          35, this_._internal_layer_lock_plis(), target);
    }
  }

  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        36, *this_._impl_.last_layer_lock_pli_, this_._impl_.last_layer_lock_pli_->GetCachedSize(), target,
        stream);
  }

  // uint32 nack_acks = 37;
  if ((this_._impl_._has_bits_[1] & 0x00000080u) != 0) {
    if (this_._internal_nack_acks() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          37, this_._internal_nack_acks(), target);
    }
  }

  // uint32 nack_repeated = 38;
  if ((this_._impl_._has_bits_[1] & 0x00000800u) != 0) {
    if (this_._internal_nack_repeated() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          38, this_._internal_nack_repeated(), target);
    }
  }

  // uint64 header_bytes = 39;
  if ((this_._impl_._has_bits_[1] & 0x00000100u) != 0) {
    if (this_._internal_header_bytes() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          39, this_._internal_header_bytes(), target);
    }
  }

  // uint64 header_bytes_duplicate = 40;
  if ((this_._impl_._has_bits_[1] & 0x00000200u) != 0) {
    if (this_._internal_header_bytes_duplicate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          40, this_._internal_header_bytes_duplicate(), target);
    }
  }

  // uint64 header_bytes_padding = 41;
  if ((this_._impl_._has_bits_[1] & 0x00000400u) != 0) {
    if (this_._internal_header_bytes_padding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          41, this_._internal_header_bytes_padding(), target);
    }
  }

  // .livekit.RTPDrift packet_drift = 44;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        44, *this_._impl_.packet_drift_, this_._impl_.packet_drift_->GetCachedSize(), target,
        stream);
  }

  // .livekit.RTPDrift ntp_report_drift = 45;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        45, *this_._impl_.ntp_report_drift_, this_._impl_.ntp_report_drift_->GetCachedSize(), target,
        stream);
  }

  // .livekit.RTPDrift rebased_report_drift = 46;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        46, *this_._impl_.rebased_report_drift_, this_._impl_.rebased_report_drift_->GetCachedSize(), target,
        stream);
  }

  // .livekit.RTPDrift received_report_drift = 47;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        47, *this_._impl_.received_report_drift_, this_._impl_.received_report_drift_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPStats)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RTPStats::ByteSizeLong(const MessageLite& base) {
  const RTPStats& this_ = static_cast<const RTPStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RTPStats::ByteSizeLong() const {
  const RTPStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RTPStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<int32, uint32> gap_histogram = 24;
    {
      total_size +=
          2 * ::google::protobuf::internal::FromIntSize(this_._internal_gap_histogram_size());
      for (const auto& entry : this_._internal_gap_histogram()) {
        total_size += _pbi::MapEntryFuncs<::int32_t, ::uint32_t,
                                       _pbi::WireFormatLite::TYPE_INT32,
                                       _pbi::WireFormatLite::TYPE_UINT32>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // .google.protobuf.Timestamp start_time = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
    }
    // .google.protobuf.Timestamp end_time = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_time_);
    }
    // .google.protobuf.Timestamp last_pli = 28;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_pli_);
    }
    // .google.protobuf.Timestamp last_fir = 30;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_fir_);
    }
    // .google.protobuf.Timestamp last_key_frame = 34;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_key_frame_);
    }
    // .google.protobuf.Timestamp last_layer_lock_pli = 36;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_layer_lock_pli_);
    }
    // .livekit.RTPDrift packet_drift = 44;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.packet_drift_);
    }
    // .livekit.RTPDrift ntp_report_drift = 45;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ntp_report_drift_);
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // .livekit.RTPDrift rebased_report_drift = 46;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rebased_report_drift_);
    }
    // .livekit.RTPDrift received_report_drift = 47;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.received_report_drift_);
    }
    // double duration = 3;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_duration()) != 0) {
        total_size += 9;
      }
    }
    // double packet_rate = 5;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_packet_rate()) != 0) {
        total_size += 9;
      }
    }
    // uint64 bytes = 6;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_bytes());
      }
    }
    // uint32 packets = 4;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_packets() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_packets());
      }
    }
    // uint32 packets_lost = 8;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_packets_lost() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_packets_lost());
      }
    }
    // double bitrate = 7;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate()) != 0) {
        total_size += 9;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // double packet_loss_rate = 9;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss_rate()) != 0) {
        total_size += 9;
      }
    }
    // float packet_loss_percentage = 10;
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_percentage()) != 0) {
        total_size += 5;
      }
    }
    // uint32 packets_duplicate = 11;
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (this_._internal_packets_duplicate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_packets_duplicate());
      }
    }
    // double packet_duplicate_rate = 12;
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_packet_duplicate_rate()) != 0) {
        total_size += 9;
      }
    }
    // uint64 bytes_duplicate = 13;
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (this_._internal_bytes_duplicate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_bytes_duplicate());
      }
    }
    // double bitrate_duplicate = 14;
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate_duplicate()) != 0) {
        total_size += 9;
      }
    }
    // double packet_padding_rate = 16;
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_packet_padding_rate()) != 0) {
        total_size += 10;
      }
    }
    // uint64 bytes_padding = 17;
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (this_._internal_bytes_padding() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                        this_._internal_bytes_padding());
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    // uint32 packets_padding = 15;
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (this_._internal_packets_padding() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_packets_padding());
      }
    }
    // uint32 packets_out_of_order = 19;
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (this_._internal_packets_out_of_order() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_packets_out_of_order());
      }
    }
    // double bitrate_padding = 18;
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_bitrate_padding()) != 0) {
        total_size += 10;
      }
    }
    // double frame_rate = 21;
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_frame_rate()) != 0) {
        total_size += 10;
      }
    }
    // double jitter_current = 22;
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_jitter_current()) != 0) {
        total_size += 10;
      }
    }
    // uint32 frames = 20;
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (this_._internal_frames() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_frames());
      }
    }
    // uint32 nacks = 25;
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (this_._internal_nacks() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_nacks());
      }
    }
    // double jitter_max = 23;
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_jitter_max()) != 0) {
        total_size += 10;
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // uint32 nack_misses = 26;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_nack_misses() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_nack_misses());
      }
    }
    // uint32 plis = 27;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_plis() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_plis());
      }
    }
    // uint32 firs = 29;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_firs() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_firs());
      }
    }
    // uint32 rtt_current = 31;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_rtt_current() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_rtt_current());
      }
    }
    // uint32 rtt_max = 32;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_rtt_max() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_rtt_max());
      }
    }
    // uint32 key_frames = 33;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_key_frames() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_key_frames());
      }
    }
    // uint32 layer_lock_plis = 35;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_layer_lock_plis() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_layer_lock_plis());
      }
    }
    // uint32 nack_acks = 37;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_nack_acks() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_nack_acks());
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    // uint64 header_bytes = 39;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_header_bytes() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                        this_._internal_header_bytes());
      }
    }
    // uint64 header_bytes_duplicate = 40;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_header_bytes_duplicate() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                        this_._internal_header_bytes_duplicate());
      }
    }
    // uint64 header_bytes_padding = 41;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_header_bytes_padding() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                        this_._internal_header_bytes_padding());
      }
    }
    // uint32 nack_repeated = 38;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_nack_repeated() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                        this_._internal_nack_repeated());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RTPStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RTPStats*>(&to_msg);
  auto& from = static_cast<const RTPStats&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gap_histogram_.MergeFrom(from._impl_.gap_histogram_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.end_time_ != nullptr);
      if (_this->_impl_.end_time_ == nullptr) {
        _this->_impl_.end_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.end_time_);
      } else {
        _this->_impl_.end_time_->MergeFrom(*from._impl_.end_time_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.last_pli_ != nullptr);
      if (_this->_impl_.last_pli_ == nullptr) {
        _this->_impl_.last_pli_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_pli_);
      } else {
        _this->_impl_.last_pli_->MergeFrom(*from._impl_.last_pli_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.last_fir_ != nullptr);
      if (_this->_impl_.last_fir_ == nullptr) {
        _this->_impl_.last_fir_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_fir_);
      } else {
        _this->_impl_.last_fir_->MergeFrom(*from._impl_.last_fir_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.last_key_frame_ != nullptr);
      if (_this->_impl_.last_key_frame_ == nullptr) {
        _this->_impl_.last_key_frame_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_key_frame_);
      } else {
        _this->_impl_.last_key_frame_->MergeFrom(*from._impl_.last_key_frame_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.last_layer_lock_pli_ != nullptr);
      if (_this->_impl_.last_layer_lock_pli_ == nullptr) {
        _this->_impl_.last_layer_lock_pli_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.last_layer_lock_pli_);
      } else {
        _this->_impl_.last_layer_lock_pli_->MergeFrom(*from._impl_.last_layer_lock_pli_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.packet_drift_ != nullptr);
      if (_this->_impl_.packet_drift_ == nullptr) {
        _this->_impl_.packet_drift_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.packet_drift_);
      } else {
        _this->_impl_.packet_drift_->MergeFrom(*from._impl_.packet_drift_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.ntp_report_drift_ != nullptr);
      if (_this->_impl_.ntp_report_drift_ == nullptr) {
        _this->_impl_.ntp_report_drift_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ntp_report_drift_);
      } else {
        _this->_impl_.ntp_report_drift_->MergeFrom(*from._impl_.ntp_report_drift_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.rebased_report_drift_ != nullptr);
      if (_this->_impl_.rebased_report_drift_ == nullptr) {
        _this->_impl_.rebased_report_drift_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rebased_report_drift_);
      } else {
        _this->_impl_.rebased_report_drift_->MergeFrom(*from._impl_.rebased_report_drift_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.received_report_drift_ != nullptr);
      if (_this->_impl_.received_report_drift_ == nullptr) {
        _this->_impl_.received_report_drift_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.received_report_drift_);
      } else {
        _this->_impl_.received_report_drift_->MergeFrom(*from._impl_.received_report_drift_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_duration()) != 0) {
        _this->_impl_.duration_ = from._impl_.duration_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_packet_rate()) != 0) {
        _this->_impl_.packet_rate_ = from._impl_.packet_rate_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_bytes() != 0) {
        _this->_impl_.bytes_ = from._impl_.bytes_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_packets() != 0) {
        _this->_impl_.packets_ = from._impl_.packets_;
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_packets_lost() != 0) {
        _this->_impl_.packets_lost_ = from._impl_.packets_lost_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_bitrate()) != 0) {
        _this->_impl_.bitrate_ = from._impl_.bitrate_;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_packet_loss_rate()) != 0) {
        _this->_impl_.packet_loss_rate_ = from._impl_.packet_loss_rate_;
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_packet_loss_percentage()) != 0) {
        _this->_impl_.packet_loss_percentage_ = from._impl_.packet_loss_percentage_;
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (from._internal_packets_duplicate() != 0) {
        _this->_impl_.packets_duplicate_ = from._impl_.packets_duplicate_;
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_packet_duplicate_rate()) != 0) {
        _this->_impl_.packet_duplicate_rate_ = from._impl_.packet_duplicate_rate_;
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (from._internal_bytes_duplicate() != 0) {
        _this->_impl_.bytes_duplicate_ = from._impl_.bytes_duplicate_;
      }
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_bitrate_duplicate()) != 0) {
        _this->_impl_.bitrate_duplicate_ = from._impl_.bitrate_duplicate_;
      }
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_packet_padding_rate()) != 0) {
        _this->_impl_.packet_padding_rate_ = from._impl_.packet_padding_rate_;
      }
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (from._internal_bytes_padding() != 0) {
        _this->_impl_.bytes_padding_ = from._impl_.bytes_padding_;
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (from._internal_packets_padding() != 0) {
        _this->_impl_.packets_padding_ = from._impl_.packets_padding_;
      }
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (from._internal_packets_out_of_order() != 0) {
        _this->_impl_.packets_out_of_order_ = from._impl_.packets_out_of_order_;
      }
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_bitrate_padding()) != 0) {
        _this->_impl_.bitrate_padding_ = from._impl_.bitrate_padding_;
      }
    }
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_frame_rate()) != 0) {
        _this->_impl_.frame_rate_ = from._impl_.frame_rate_;
      }
    }
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_jitter_current()) != 0) {
        _this->_impl_.jitter_current_ = from._impl_.jitter_current_;
      }
    }
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (from._internal_frames() != 0) {
        _this->_impl_.frames_ = from._impl_.frames_;
      }
    }
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (from._internal_nacks() != 0) {
        _this->_impl_.nacks_ = from._impl_.nacks_;
      }
    }
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_jitter_max()) != 0) {
        _this->_impl_.jitter_max_ = from._impl_.jitter_max_;
      }
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_nack_misses() != 0) {
        _this->_impl_.nack_misses_ = from._impl_.nack_misses_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_plis() != 0) {
        _this->_impl_.plis_ = from._impl_.plis_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_firs() != 0) {
        _this->_impl_.firs_ = from._impl_.firs_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_rtt_current() != 0) {
        _this->_impl_.rtt_current_ = from._impl_.rtt_current_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_rtt_max() != 0) {
        _this->_impl_.rtt_max_ = from._impl_.rtt_max_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_key_frames() != 0) {
        _this->_impl_.key_frames_ = from._impl_.key_frames_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_layer_lock_plis() != 0) {
        _this->_impl_.layer_lock_plis_ = from._impl_.layer_lock_plis_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_nack_acks() != 0) {
        _this->_impl_.nack_acks_ = from._impl_.nack_acks_;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_header_bytes() != 0) {
        _this->_impl_.header_bytes_ = from._impl_.header_bytes_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_header_bytes_duplicate() != 0) {
        _this->_impl_.header_bytes_duplicate_ = from._impl_.header_bytes_duplicate_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_header_bytes_padding() != 0) {
        _this->_impl_.header_bytes_padding_ = from._impl_.header_bytes_padding_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_nack_repeated() != 0) {
        _this->_impl_.nack_repeated_ = from._impl_.nack_repeated_;
      }
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RTPStats::CopyFrom(const RTPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RTPStats::InternalSwap(RTPStats* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.gap_histogram_.InternalSwap(&other->_impl_.gap_histogram_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.nack_repeated_)
      + sizeof(RTPStats::_impl_.nack_repeated_)
      - PROTOBUF_FIELD_OFFSET(RTPStats, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata RTPStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RTCPSenderReportState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RTCPSenderReportState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_._has_bits_);
};

RTCPSenderReportState::RTCPSenderReportState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTCPSenderReportState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RTCPSenderReportState)
}
RTCPSenderReportState::RTCPSenderReportState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTCPSenderReportState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTCPSenderReportState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE RTCPSenderReportState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RTCPSenderReportState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rtp_timestamp_ext_),
           0,
           offsetof(Impl_, octets_) -
               offsetof(Impl_, rtp_timestamp_ext_) +
               sizeof(Impl_::octets_));
}
RTCPSenderReportState::~RTCPSenderReportState() {
  // @@protoc_insertion_point(destructor:livekit.RTCPSenderReportState)
  SharedDtor(*this);
}
inline void RTCPSenderReportState::SharedDtor(MessageLite& self) {
  RTCPSenderReportState& this_ = static_cast<RTCPSenderReportState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RTCPSenderReportState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTCPSenderReportState(arena);
}
constexpr auto RTCPSenderReportState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RTCPSenderReportState),
                                            alignof(RTCPSenderReportState));
}
constexpr auto RTCPSenderReportState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTCPSenderReportState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTCPSenderReportState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTCPSenderReportState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTCPSenderReportState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RTCPSenderReportState>(), &RTCPSenderReportState::ByteSizeLong,
              &RTCPSenderReportState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_._cached_size_),
          false,
      },
      &RTCPSenderReportState::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTCPSenderReportState_class_data_ =
            RTCPSenderReportState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTCPSenderReportState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTCPSenderReportState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTCPSenderReportState_class_data_.tc_table);
  return RTCPSenderReportState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
RTCPSenderReportState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RTCPSenderReportState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTCPSenderReportState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 rtp_timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTCPSenderReportState, _impl_.rtp_timestamp_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_)}},
    // uint64 rtp_timestamp_ext = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTCPSenderReportState, _impl_.rtp_timestamp_ext_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_ext_)}},
    // uint64 ntp_timestamp = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTCPSenderReportState, _impl_.ntp_timestamp_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.ntp_timestamp_)}},
    // int64 at = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTCPSenderReportState, _impl_.at_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.at_)}},
    // int64 at_adjusted = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTCPSenderReportState, _impl_.at_adjusted_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.at_adjusted_)}},
    // uint32 packets = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTCPSenderReportState, _impl_.packets_), 3>(),
     {48, 3, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.packets_)}},
    // uint64 octets = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTCPSenderReportState, _impl_.octets_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.octets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 rtp_timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 rtp_timestamp_ext = 2;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_ext_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 ntp_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.ntp_timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // int64 at = 4;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.at_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 at_adjusted = 5;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.at_adjusted_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // uint32 packets = 6;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.packets_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 octets = 7;
    {PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.octets_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void RTCPSenderReportState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTCPSenderReportState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    ::memset(&_impl_.rtp_timestamp_ext_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.octets_) -
        reinterpret_cast<char*>(&_impl_.rtp_timestamp_ext_)) + sizeof(_impl_.octets_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RTCPSenderReportState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RTCPSenderReportState& this_ = static_cast<const RTCPSenderReportState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RTCPSenderReportState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RTCPSenderReportState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTCPSenderReportState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 rtp_timestamp = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_rtp_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_rtp_timestamp(), target);
    }
  }

  // uint64 rtp_timestamp_ext = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_rtp_timestamp_ext() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this_._internal_rtp_timestamp_ext(), target);
    }
  }

  // uint64 ntp_timestamp = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_ntp_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_ntp_timestamp(), target);
    }
  }

  // int64 at = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_at(), target);
    }
  }

  // int64 at_adjusted = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_at_adjusted() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_at_adjusted(), target);
    }
  }

  // uint32 packets = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_packets() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_packets(), target);
    }
  }

  // uint64 octets = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_octets() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          7, this_._internal_octets(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTCPSenderReportState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RTCPSenderReportState::ByteSizeLong(const MessageLite& base) {
  const RTCPSenderReportState& this_ = static_cast<const RTCPSenderReportState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RTCPSenderReportState::ByteSizeLong() const {
  const RTCPSenderReportState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RTCPSenderReportState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // uint64 rtp_timestamp_ext = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_rtp_timestamp_ext() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_rtp_timestamp_ext());
      }
    }
    // uint64 ntp_timestamp = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_ntp_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ntp_timestamp());
      }
    }
    // uint32 rtp_timestamp = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_rtp_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_rtp_timestamp());
      }
    }
    // uint32 packets = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_packets() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_packets());
      }
    }
    // int64 at = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_at());
      }
    }
    // int64 at_adjusted = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_at_adjusted() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_at_adjusted());
      }
    }
    // uint64 octets = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_octets() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_octets());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RTCPSenderReportState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RTCPSenderReportState*>(&to_msg);
  auto& from = static_cast<const RTCPSenderReportState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTCPSenderReportState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_rtp_timestamp_ext() != 0) {
        _this->_impl_.rtp_timestamp_ext_ = from._impl_.rtp_timestamp_ext_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_ntp_timestamp() != 0) {
        _this->_impl_.ntp_timestamp_ = from._impl_.ntp_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_rtp_timestamp() != 0) {
        _this->_impl_.rtp_timestamp_ = from._impl_.rtp_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_packets() != 0) {
        _this->_impl_.packets_ = from._impl_.packets_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_at() != 0) {
        _this->_impl_.at_ = from._impl_.at_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_at_adjusted() != 0) {
        _this->_impl_.at_adjusted_ = from._impl_.at_adjusted_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_octets() != 0) {
        _this->_impl_.octets_ = from._impl_.octets_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RTCPSenderReportState::CopyFrom(const RTCPSenderReportState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTCPSenderReportState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RTCPSenderReportState::InternalSwap(RTCPSenderReportState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.octets_)
      + sizeof(RTCPSenderReportState::_impl_.octets_)
      - PROTOBUF_FIELD_OFFSET(RTCPSenderReportState, _impl_.rtp_timestamp_ext_)>(
          reinterpret_cast<char*>(&_impl_.rtp_timestamp_ext_),
          reinterpret_cast<char*>(&other->_impl_.rtp_timestamp_ext_));
}

::google::protobuf::Metadata RTCPSenderReportState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RTPForwarderState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RTPForwarderState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::RTPForwarderState, _impl_._oneof_case_);
};

void RTPForwarderState::set_allocated_vp8_munger(::livekit::VP8MungerState* PROTOBUF_NULLABLE vp8_munger) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_codec_munger();
  if (vp8_munger) {
    ::google::protobuf::Arena* submessage_arena = vp8_munger->GetArena();
    if (message_arena != submessage_arena) {
      vp8_munger = ::google::protobuf::internal::GetOwnedMessage(message_arena, vp8_munger, submessage_arena);
    }
    set_has_vp8_munger();
    _impl_.codec_munger_.vp8_munger_ = vp8_munger;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPForwarderState.vp8_munger)
}
RTPForwarderState::RTPForwarderState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPForwarderState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPForwarderState)
}
PROTOBUF_NDEBUG_INLINE RTPForwarderState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RTPForwarderState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sender_report_state_{visibility, arena, from.sender_report_state_},
        codec_munger_{},
        _oneof_case_{from._oneof_case_[0]} {}

RTPForwarderState::RTPForwarderState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RTPForwarderState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPForwarderState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RTPForwarderState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.rtp_munger_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rtp_munger_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, started_),
           offsetof(Impl_, dummy_start_timestamp_offset_) -
               offsetof(Impl_, started_) +
               sizeof(Impl_::dummy_start_timestamp_offset_));
  switch (codec_munger_case()) {
    case CODEC_MUNGER_NOT_SET:
      break;
      case kVp8Munger:
        _impl_.codec_munger_.vp8_munger_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.codec_munger_.vp8_munger_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.RTPForwarderState)
}
PROTOBUF_NDEBUG_INLINE RTPForwarderState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        sender_report_state_{visibility, arena},
        codec_munger_{},
        _oneof_case_{} {}

inline void RTPForwarderState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rtp_munger_),
           0,
           offsetof(Impl_, dummy_start_timestamp_offset_) -
               offsetof(Impl_, rtp_munger_) +
               sizeof(Impl_::dummy_start_timestamp_offset_));
}
RTPForwarderState::~RTPForwarderState() {
  // @@protoc_insertion_point(destructor:livekit.RTPForwarderState)
  SharedDtor(*this);
}
inline void RTPForwarderState::SharedDtor(MessageLite& self) {
  RTPForwarderState& this_ = static_cast<RTPForwarderState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.rtp_munger_;
  if (this_.has_codec_munger()) {
    this_.clear_codec_munger();
  }
  this_._impl_.~Impl_();
}

void RTPForwarderState::clear_codec_munger() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RTPForwarderState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (codec_munger_case()) {
    case kVp8Munger: {
      if (GetArena() == nullptr) {
        delete _impl_.codec_munger_.vp8_munger_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.codec_munger_.vp8_munger_);
      }
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CODEC_MUNGER_NOT_SET;
}


inline void* PROTOBUF_NONNULL RTPForwarderState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTPForwarderState(arena);
}
constexpr auto RTPForwarderState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.sender_report_state_) +
          decltype(RTPForwarderState::_impl_.sender_report_state_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RTPForwarderState), alignof(RTPForwarderState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RTPForwarderState::PlacementNew_,
                                 sizeof(RTPForwarderState),
                                 alignof(RTPForwarderState));
  }
}
constexpr auto RTPForwarderState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTPForwarderState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTPForwarderState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTPForwarderState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTPForwarderState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RTPForwarderState>(), &RTPForwarderState::ByteSizeLong,
              &RTPForwarderState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_._cached_size_),
          false,
      },
      &RTPForwarderState::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTPForwarderState_class_data_ =
            RTPForwarderState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTPForwarderState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTPForwarderState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTPForwarderState_class_data_.tc_table);
  return RTPForwarderState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 0, 2>
RTPForwarderState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RTPForwarderState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTPForwarderState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 2, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.sender_report_state_)}},
    // bool started = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RTPForwarderState, _impl_.started_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.started_)}},
    // int32 reference_layer_spatial = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RTPForwarderState, _impl_.reference_layer_spatial_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.reference_layer_spatial_)}},
    // int64 pre_start_time = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPForwarderState, _impl_.pre_start_time_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.pre_start_time_)}},
    // uint64 ext_first_timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPForwarderState, _impl_.ext_first_timestamp_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.ext_first_timestamp_)}},
    // uint64 dummy_start_timestamp_offset = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPForwarderState, _impl_.dummy_start_timestamp_offset_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.dummy_start_timestamp_offset_)}},
    // .livekit.RTPMungerState rtp_munger = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.rtp_munger_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool started = 1;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.started_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 reference_layer_spatial = 2;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.reference_layer_spatial_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int64 pre_start_time = 3;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.pre_start_time_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // uint64 ext_first_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.ext_first_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 dummy_start_timestamp_offset = 5;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.dummy_start_timestamp_offset_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // .livekit.RTPMungerState rtp_munger = 6;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.rtp_munger_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.VP8MungerState vp8_munger = 7;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.codec_munger_.vp8_munger_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
    {PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.sender_report_state_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::RTPMungerState>()},
      {::_pbi::TcParser::GetTable<::livekit::VP8MungerState>()},
      {::_pbi::TcParser::GetTable<::livekit::RTCPSenderReportState>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RTPForwarderState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPForwarderState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_report_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.rtp_munger_ != nullptr);
    _impl_.rtp_munger_->Clear();
  }
  if ((cached_has_bits & 0x0000003eu) != 0) {
    ::memset(&_impl_.started_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dummy_start_timestamp_offset_) -
        reinterpret_cast<char*>(&_impl_.started_)) + sizeof(_impl_.dummy_start_timestamp_offset_));
  }
  clear_codec_munger();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RTPForwarderState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RTPForwarderState& this_ = static_cast<const RTPForwarderState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RTPForwarderState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RTPForwarderState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPForwarderState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool started = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_started() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_started(), target);
    }
  }

  // int32 reference_layer_spatial = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_reference_layer_spatial() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_reference_layer_spatial(), target);
    }
  }

  // int64 pre_start_time = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_pre_start_time() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_pre_start_time(), target);
    }
  }

  // uint64 ext_first_timestamp = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_ext_first_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_ext_first_timestamp(), target);
    }
  }

  // uint64 dummy_start_timestamp_offset = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_dummy_start_timestamp_offset() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          5, this_._internal_dummy_start_timestamp_offset(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.RTPMungerState rtp_munger = 6;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.rtp_munger_, this_._impl_.rtp_munger_->GetCachedSize(), target,
        stream);
  }

  // .livekit.VP8MungerState vp8_munger = 7;
  if (this_.codec_munger_case() == kVp8Munger) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.codec_munger_.vp8_munger_, this_._impl_.codec_munger_.vp8_munger_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_sender_report_state_size());
       i < n; i++) {
    const auto& repfield = this_._internal_sender_report_state().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPForwarderState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RTPForwarderState::ByteSizeLong(const MessageLite& base) {
  const RTPForwarderState& this_ = static_cast<const RTPForwarderState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RTPForwarderState::ByteSizeLong() const {
  const RTPForwarderState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RTPForwarderState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
    {
      total_size += 1UL * this_._internal_sender_report_state_size();
      for (const auto& msg : this_._internal_sender_report_state()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // .livekit.RTPMungerState rtp_munger = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rtp_munger_);
    }
    // bool started = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_started() != 0) {
        total_size += 2;
      }
    }
    // int32 reference_layer_spatial = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_reference_layer_spatial() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_reference_layer_spatial());
      }
    }
    // int64 pre_start_time = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_pre_start_time() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_pre_start_time());
      }
    }
    // uint64 ext_first_timestamp = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_ext_first_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ext_first_timestamp());
      }
    }
    // uint64 dummy_start_timestamp_offset = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_dummy_start_timestamp_offset() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_dummy_start_timestamp_offset());
      }
    }
  }
  switch (this_.codec_munger_case()) {
    // .livekit.VP8MungerState vp8_munger = 7;
    case kVp8Munger: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.codec_munger_.vp8_munger_);
      break;
    }
    case CODEC_MUNGER_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RTPForwarderState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RTPForwarderState*>(&to_msg);
  auto& from = static_cast<const RTPForwarderState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPForwarderState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_sender_report_state()->MergeFrom(
      from._internal_sender_report_state());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.rtp_munger_ != nullptr);
      if (_this->_impl_.rtp_munger_ == nullptr) {
        _this->_impl_.rtp_munger_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.rtp_munger_);
      } else {
        _this->_impl_.rtp_munger_->MergeFrom(*from._impl_.rtp_munger_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_started() != 0) {
        _this->_impl_.started_ = from._impl_.started_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_reference_layer_spatial() != 0) {
        _this->_impl_.reference_layer_spatial_ = from._impl_.reference_layer_spatial_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_pre_start_time() != 0) {
        _this->_impl_.pre_start_time_ = from._impl_.pre_start_time_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_ext_first_timestamp() != 0) {
        _this->_impl_.ext_first_timestamp_ = from._impl_.ext_first_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_dummy_start_timestamp_offset() != 0) {
        _this->_impl_.dummy_start_timestamp_offset_ = from._impl_.dummy_start_timestamp_offset_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_codec_munger();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kVp8Munger: {
        if (oneof_needs_init) {
          _this->_impl_.codec_munger_.vp8_munger_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.codec_munger_.vp8_munger_);
        } else {
          _this->_impl_.codec_munger_.vp8_munger_->MergeFrom(*from._impl_.codec_munger_.vp8_munger_);
        }
        break;
      }
      case CODEC_MUNGER_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RTPForwarderState::CopyFrom(const RTPForwarderState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPForwarderState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RTPForwarderState::InternalSwap(RTPForwarderState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sender_report_state_.InternalSwap(&other->_impl_.sender_report_state_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.dummy_start_timestamp_offset_)
      + sizeof(RTPForwarderState::_impl_.dummy_start_timestamp_offset_)
      - PROTOBUF_FIELD_OFFSET(RTPForwarderState, _impl_.rtp_munger_)>(
          reinterpret_cast<char*>(&_impl_.rtp_munger_),
          reinterpret_cast<char*>(&other->_impl_.rtp_munger_));
  swap(_impl_.codec_munger_, other->_impl_.codec_munger_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata RTPForwarderState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RTPMungerState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RTPMungerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_._has_bits_);
};

RTPMungerState::RTPMungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPMungerState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RTPMungerState)
}
RTPMungerState::RTPMungerState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTPMungerState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RTPMungerState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE RTPMungerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RTPMungerState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ext_last_sequence_number_),
           0,
           offsetof(Impl_, second_last_marker_) -
               offsetof(Impl_, ext_last_sequence_number_) +
               sizeof(Impl_::second_last_marker_));
}
RTPMungerState::~RTPMungerState() {
  // @@protoc_insertion_point(destructor:livekit.RTPMungerState)
  SharedDtor(*this);
}
inline void RTPMungerState::SharedDtor(MessageLite& self) {
  RTPMungerState& this_ = static_cast<RTPMungerState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RTPMungerState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RTPMungerState(arena);
}
constexpr auto RTPMungerState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RTPMungerState),
                                            alignof(RTPMungerState));
}
constexpr auto RTPMungerState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RTPMungerState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RTPMungerState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RTPMungerState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RTPMungerState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RTPMungerState>(), &RTPMungerState::ByteSizeLong,
              &RTPMungerState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_._cached_size_),
          false,
      },
      &RTPMungerState::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RTPMungerState_class_data_ =
            RTPMungerState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RTPMungerState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RTPMungerState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RTPMungerState_class_data_.tc_table);
  return RTPMungerState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
RTPMungerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RTPMungerState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RTPMungerState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 ext_last_sequence_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPMungerState, _impl_.ext_last_sequence_number_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_sequence_number_)}},
    // uint64 ext_second_last_sequence_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPMungerState, _impl_.ext_second_last_sequence_number_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_second_last_sequence_number_)}},
    // uint64 ext_last_timestamp = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPMungerState, _impl_.ext_last_timestamp_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_timestamp_)}},
    // uint64 ext_second_last_timestamp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RTPMungerState, _impl_.ext_second_last_timestamp_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_second_last_timestamp_)}},
    // bool last_marker = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RTPMungerState, _impl_.last_marker_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.last_marker_)}},
    // bool second_last_marker = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RTPMungerState, _impl_.second_last_marker_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.second_last_marker_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 ext_last_sequence_number = 1;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_sequence_number_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 ext_second_last_sequence_number = 2;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_second_last_sequence_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 ext_last_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // uint64 ext_second_last_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_second_last_timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bool last_marker = 5;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.last_marker_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool second_last_marker = 6;
    {PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.second_last_marker_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void RTPMungerState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RTPMungerState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    ::memset(&_impl_.ext_last_sequence_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.second_last_marker_) -
        reinterpret_cast<char*>(&_impl_.ext_last_sequence_number_)) + sizeof(_impl_.second_last_marker_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RTPMungerState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RTPMungerState& this_ = static_cast<const RTPMungerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RTPMungerState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RTPMungerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RTPMungerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint64 ext_last_sequence_number = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_ext_last_sequence_number() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          1, this_._internal_ext_last_sequence_number(), target);
    }
  }

  // uint64 ext_second_last_sequence_number = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_ext_second_last_sequence_number() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this_._internal_ext_second_last_sequence_number(), target);
    }
  }

  // uint64 ext_last_timestamp = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_ext_last_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          3, this_._internal_ext_last_timestamp(), target);
    }
  }

  // uint64 ext_second_last_timestamp = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_ext_second_last_timestamp() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          4, this_._internal_ext_second_last_timestamp(), target);
    }
  }

  // bool last_marker = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_last_marker() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_last_marker(), target);
    }
  }

  // bool second_last_marker = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_second_last_marker() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_second_last_marker(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RTPMungerState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RTPMungerState::ByteSizeLong(const MessageLite& base) {
  const RTPMungerState& this_ = static_cast<const RTPMungerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RTPMungerState::ByteSizeLong() const {
  const RTPMungerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RTPMungerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // uint64 ext_last_sequence_number = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_ext_last_sequence_number() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ext_last_sequence_number());
      }
    }
    // uint64 ext_second_last_sequence_number = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_ext_second_last_sequence_number() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ext_second_last_sequence_number());
      }
    }
    // uint64 ext_last_timestamp = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_ext_last_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ext_last_timestamp());
      }
    }
    // uint64 ext_second_last_timestamp = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_ext_second_last_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_ext_second_last_timestamp());
      }
    }
    // bool last_marker = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_last_marker() != 0) {
        total_size += 2;
      }
    }
    // bool second_last_marker = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_second_last_marker() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RTPMungerState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RTPMungerState*>(&to_msg);
  auto& from = static_cast<const RTPMungerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RTPMungerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_ext_last_sequence_number() != 0) {
        _this->_impl_.ext_last_sequence_number_ = from._impl_.ext_last_sequence_number_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_ext_second_last_sequence_number() != 0) {
        _this->_impl_.ext_second_last_sequence_number_ = from._impl_.ext_second_last_sequence_number_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_ext_last_timestamp() != 0) {
        _this->_impl_.ext_last_timestamp_ = from._impl_.ext_last_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_ext_second_last_timestamp() != 0) {
        _this->_impl_.ext_second_last_timestamp_ = from._impl_.ext_second_last_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_last_marker() != 0) {
        _this->_impl_.last_marker_ = from._impl_.last_marker_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_second_last_marker() != 0) {
        _this->_impl_.second_last_marker_ = from._impl_.second_last_marker_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RTPMungerState::CopyFrom(const RTPMungerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RTPMungerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RTPMungerState::InternalSwap(RTPMungerState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.second_last_marker_)
      + sizeof(RTPMungerState::_impl_.second_last_marker_)
      - PROTOBUF_FIELD_OFFSET(RTPMungerState, _impl_.ext_last_sequence_number_)>(
          reinterpret_cast<char*>(&_impl_.ext_last_sequence_number_),
          reinterpret_cast<char*>(&other->_impl_.ext_last_sequence_number_));
}

::google::protobuf::Metadata RTPMungerState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VP8MungerState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VP8MungerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_._has_bits_);
};

VP8MungerState::VP8MungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VP8MungerState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.VP8MungerState)
}
VP8MungerState::VP8MungerState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VP8MungerState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VP8MungerState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE VP8MungerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void VP8MungerState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ext_last_picture_id_),
           0,
           offsetof(Impl_, last_key_idx_) -
               offsetof(Impl_, ext_last_picture_id_) +
               sizeof(Impl_::last_key_idx_));
}
VP8MungerState::~VP8MungerState() {
  // @@protoc_insertion_point(destructor:livekit.VP8MungerState)
  SharedDtor(*this);
}
inline void VP8MungerState::SharedDtor(MessageLite& self) {
  VP8MungerState& this_ = static_cast<VP8MungerState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VP8MungerState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VP8MungerState(arena);
}
constexpr auto VP8MungerState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(VP8MungerState),
                                            alignof(VP8MungerState));
}
constexpr auto VP8MungerState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VP8MungerState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VP8MungerState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VP8MungerState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VP8MungerState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VP8MungerState>(), &VP8MungerState::ByteSizeLong,
              &VP8MungerState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_._cached_size_),
          false,
      },
      &VP8MungerState::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        VP8MungerState_class_data_ =
            VP8MungerState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL VP8MungerState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VP8MungerState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VP8MungerState_class_data_.tc_table);
  return VP8MungerState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
VP8MungerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    VP8MungerState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::VP8MungerState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 ext_last_picture_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VP8MungerState, _impl_.ext_last_picture_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.ext_last_picture_id_)}},
    // bool picture_id_used = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VP8MungerState, _impl_.picture_id_used_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.picture_id_used_)}},
    // uint32 last_tl0_pic_idx = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VP8MungerState, _impl_.last_tl0_pic_idx_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_tl0_pic_idx_)}},
    // bool tl0_pic_idx_used = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VP8MungerState, _impl_.tl0_pic_idx_used_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.tl0_pic_idx_used_)}},
    // bool tid_used = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VP8MungerState, _impl_.tid_used_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.tid_used_)}},
    // uint32 last_key_idx = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VP8MungerState, _impl_.last_key_idx_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_key_idx_)}},
    // bool key_idx_used = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(VP8MungerState, _impl_.key_idx_used_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.key_idx_used_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 ext_last_picture_id = 1;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.ext_last_picture_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool picture_id_used = 2;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.picture_id_used_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 last_tl0_pic_idx = 3;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_tl0_pic_idx_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool tl0_pic_idx_used = 4;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.tl0_pic_idx_used_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool tid_used = 5;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.tid_used_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 last_key_idx = 6;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_key_idx_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool key_idx_used = 7;
    {PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.key_idx_used_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void VP8MungerState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.VP8MungerState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    ::memset(&_impl_.ext_last_picture_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.last_key_idx_) -
        reinterpret_cast<char*>(&_impl_.ext_last_picture_id_)) + sizeof(_impl_.last_key_idx_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VP8MungerState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VP8MungerState& this_ = static_cast<const VP8MungerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VP8MungerState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VP8MungerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.VP8MungerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 ext_last_picture_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_ext_last_picture_id() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_ext_last_picture_id(), target);
    }
  }

  // bool picture_id_used = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_picture_id_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_picture_id_used(), target);
    }
  }

  // uint32 last_tl0_pic_idx = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_last_tl0_pic_idx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_last_tl0_pic_idx(), target);
    }
  }

  // bool tl0_pic_idx_used = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_tl0_pic_idx_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_tl0_pic_idx_used(), target);
    }
  }

  // bool tid_used = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_tid_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_tid_used(), target);
    }
  }

  // uint32 last_key_idx = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_last_key_idx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_last_key_idx(), target);
    }
  }

  // bool key_idx_used = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_key_idx_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_key_idx_used(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.VP8MungerState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VP8MungerState::ByteSizeLong(const MessageLite& base) {
  const VP8MungerState& this_ = static_cast<const VP8MungerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VP8MungerState::ByteSizeLong() const {
  const VP8MungerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.VP8MungerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // int32 ext_last_picture_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_ext_last_picture_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ext_last_picture_id());
      }
    }
    // uint32 last_tl0_pic_idx = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_last_tl0_pic_idx() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_last_tl0_pic_idx());
      }
    }
    // bool picture_id_used = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_picture_id_used() != 0) {
        total_size += 2;
      }
    }
    // bool tl0_pic_idx_used = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_tl0_pic_idx_used() != 0) {
        total_size += 2;
      }
    }
    // bool tid_used = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_tid_used() != 0) {
        total_size += 2;
      }
    }
    // bool key_idx_used = 7;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_key_idx_used() != 0) {
        total_size += 2;
      }
    }
    // uint32 last_key_idx = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_last_key_idx() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_last_key_idx());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VP8MungerState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VP8MungerState*>(&to_msg);
  auto& from = static_cast<const VP8MungerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.VP8MungerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_ext_last_picture_id() != 0) {
        _this->_impl_.ext_last_picture_id_ = from._impl_.ext_last_picture_id_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_last_tl0_pic_idx() != 0) {
        _this->_impl_.last_tl0_pic_idx_ = from._impl_.last_tl0_pic_idx_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_picture_id_used() != 0) {
        _this->_impl_.picture_id_used_ = from._impl_.picture_id_used_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_tl0_pic_idx_used() != 0) {
        _this->_impl_.tl0_pic_idx_used_ = from._impl_.tl0_pic_idx_used_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_tid_used() != 0) {
        _this->_impl_.tid_used_ = from._impl_.tid_used_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_key_idx_used() != 0) {
        _this->_impl_.key_idx_used_ = from._impl_.key_idx_used_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_last_key_idx() != 0) {
        _this->_impl_.last_key_idx_ = from._impl_.last_key_idx_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VP8MungerState::CopyFrom(const VP8MungerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.VP8MungerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VP8MungerState::InternalSwap(VP8MungerState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.last_key_idx_)
      + sizeof(VP8MungerState::_impl_.last_key_idx_)
      - PROTOBUF_FIELD_OFFSET(VP8MungerState, _impl_.ext_last_picture_id_)>(
          reinterpret_cast<char*>(&_impl_.ext_last_picture_id_),
          reinterpret_cast<char*>(&other->_impl_.ext_last_picture_id_));
}

::google::protobuf::Metadata VP8MungerState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimedVersion::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TimedVersion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_._has_bits_);
};

TimedVersion::TimedVersion(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedVersion_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TimedVersion)
}
TimedVersion::TimedVersion(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TimedVersion& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimedVersion_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE TimedVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void TimedVersion::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, unix_micro_),
           0,
           offsetof(Impl_, ticks_) -
               offsetof(Impl_, unix_micro_) +
               sizeof(Impl_::ticks_));
}
TimedVersion::~TimedVersion() {
  // @@protoc_insertion_point(destructor:livekit.TimedVersion)
  SharedDtor(*this);
}
inline void TimedVersion::SharedDtor(MessageLite& self) {
  TimedVersion& this_ = static_cast<TimedVersion&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TimedVersion::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TimedVersion(arena);
}
constexpr auto TimedVersion::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TimedVersion),
                                            alignof(TimedVersion));
}
constexpr auto TimedVersion::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TimedVersion_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TimedVersion::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TimedVersion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TimedVersion::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TimedVersion>(), &TimedVersion::ByteSizeLong,
              &TimedVersion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_._cached_size_),
          false,
      },
      &TimedVersion::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TimedVersion_class_data_ =
            TimedVersion::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TimedVersion::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TimedVersion_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TimedVersion_class_data_.tc_table);
  return TimedVersion_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
TimedVersion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TimedVersion_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TimedVersion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 ticks = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimedVersion, _impl_.ticks_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.ticks_)}},
    // int64 unix_micro = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TimedVersion, _impl_.unix_micro_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.unix_micro_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 unix_micro = 1;
    {PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.unix_micro_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int32 ticks = 2;
    {PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.ticks_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void TimedVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TimedVersion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.unix_micro_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ticks_) -
        reinterpret_cast<char*>(&_impl_.unix_micro_)) + sizeof(_impl_.ticks_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TimedVersion::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TimedVersion& this_ = static_cast<const TimedVersion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TimedVersion::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TimedVersion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TimedVersion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 unix_micro = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_unix_micro() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_unix_micro(), target);
    }
  }

  // int32 ticks = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_ticks() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_ticks(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TimedVersion)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TimedVersion::ByteSizeLong(const MessageLite& base) {
  const TimedVersion& this_ = static_cast<const TimedVersion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TimedVersion::ByteSizeLong() const {
  const TimedVersion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TimedVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int64 unix_micro = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_unix_micro() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_unix_micro());
      }
    }
    // int32 ticks = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_ticks() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ticks());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TimedVersion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimedVersion*>(&to_msg);
  auto& from = static_cast<const TimedVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TimedVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_unix_micro() != 0) {
        _this->_impl_.unix_micro_ = from._impl_.unix_micro_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_ticks() != 0) {
        _this->_impl_.ticks_ = from._impl_.ticks_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimedVersion::CopyFrom(const TimedVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TimedVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimedVersion::InternalSwap(TimedVersion* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.ticks_)
      + sizeof(TimedVersion::_impl_.ticks_)
      - PROTOBUF_FIELD_OFFSET(TimedVersion, _impl_.unix_micro_)>(
          reinterpret_cast<char*>(&_impl_.unix_micro_),
          reinterpret_cast<char*>(&other->_impl_.unix_micro_));
}

::google::protobuf::Metadata TimedVersion::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataStream_TextHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataStream_TextHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_._has_bits_);
};

DataStream_TextHeader::DataStream_TextHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_TextHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.TextHeader)
}
PROTOBUF_NDEBUG_INLINE DataStream_TextHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataStream_TextHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attached_stream_ids_{visibility, arena, from.attached_stream_ids_},
        reply_to_stream_id_(arena, from.reply_to_stream_id_) {}

DataStream_TextHeader::DataStream_TextHeader(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream_TextHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_TextHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream_TextHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, operation_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, operation_type_),
           offsetof(Impl_, generated_) -
               offsetof(Impl_, operation_type_) +
               sizeof(Impl_::generated_));

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.TextHeader)
}
PROTOBUF_NDEBUG_INLINE DataStream_TextHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        attached_stream_ids_{visibility, arena},
        reply_to_stream_id_(arena) {}

inline void DataStream_TextHeader::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, operation_type_),
           0,
           offsetof(Impl_, generated_) -
               offsetof(Impl_, operation_type_) +
               sizeof(Impl_::generated_));
}
DataStream_TextHeader::~DataStream_TextHeader() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.TextHeader)
  SharedDtor(*this);
}
inline void DataStream_TextHeader::SharedDtor(MessageLite& self) {
  DataStream_TextHeader& this_ = static_cast<DataStream_TextHeader&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reply_to_stream_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DataStream_TextHeader::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_TextHeader(arena);
}
constexpr auto DataStream_TextHeader::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.attached_stream_ids_) +
          decltype(DataStream_TextHeader::_impl_.attached_stream_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataStream_TextHeader), alignof(DataStream_TextHeader), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataStream_TextHeader::PlacementNew_,
                                 sizeof(DataStream_TextHeader),
                                 alignof(DataStream_TextHeader));
  }
}
constexpr auto DataStream_TextHeader::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_TextHeader_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_TextHeader::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_TextHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_TextHeader::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataStream_TextHeader>(), &DataStream_TextHeader::ByteSizeLong,
              &DataStream_TextHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_._cached_size_),
          false,
      },
      &DataStream_TextHeader::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_TextHeader_class_data_ =
            DataStream_TextHeader::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_TextHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_TextHeader_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_TextHeader_class_data_.tc_table);
  return DataStream_TextHeader_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 75, 2>
DataStream_TextHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_TextHeader_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_TextHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.DataStream.OperationType operation_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataStream_TextHeader, _impl_.operation_type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.operation_type_)}},
    // int32 version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataStream_TextHeader, _impl_.version_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.version_)}},
    // string reply_to_stream_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.reply_to_stream_id_)}},
    // repeated string attached_stream_ids = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.attached_stream_ids_)}},
    // bool generated = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DataStream_TextHeader, _impl_.generated_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.generated_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.DataStream.OperationType operation_type = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.operation_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // int32 version = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string reply_to_stream_id = 3;
    {PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.reply_to_stream_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string attached_stream_ids = 4;
    {PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.attached_stream_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool generated = 5;
    {PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.generated_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\35\0\0\22\23\0\0\0"
    "livekit.DataStream.TextHeader"
    "reply_to_stream_id"
    "attached_stream_ids"
  }},
};
PROTOBUF_NOINLINE void DataStream_TextHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.TextHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attached_stream_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.reply_to_stream_id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.operation_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.generated_) -
        reinterpret_cast<char*>(&_impl_.operation_type_)) + sizeof(_impl_.generated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataStream_TextHeader::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataStream_TextHeader& this_ = static_cast<const DataStream_TextHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataStream_TextHeader::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataStream_TextHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.TextHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.DataStream.OperationType operation_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_operation_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_operation_type(), target);
    }
  }

  // int32 version = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_version() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_version(), target);
    }
  }

  // string reply_to_stream_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_reply_to_stream_id().empty()) {
      const std::string& _s = this_._internal_reply_to_stream_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.TextHeader.reply_to_stream_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // repeated string attached_stream_ids = 4;
  for (int i = 0, n = this_._internal_attached_stream_ids_size(); i < n; ++i) {
    const auto& s = this_._internal_attached_stream_ids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.TextHeader.attached_stream_ids");
    target = stream->WriteString(4, s, target);
  }

  // bool generated = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_generated() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_generated(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.TextHeader)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataStream_TextHeader::ByteSizeLong(const MessageLite& base) {
  const DataStream_TextHeader& this_ = static_cast<const DataStream_TextHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataStream_TextHeader::ByteSizeLong() const {
  const DataStream_TextHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.TextHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string attached_stream_ids = 4;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_attached_stream_ids().size());
      for (int i = 0, n = this_._internal_attached_stream_ids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_attached_stream_ids().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string reply_to_stream_id = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_reply_to_stream_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_reply_to_stream_id());
      }
    }
    // .livekit.DataStream.OperationType operation_type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_operation_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_operation_type());
      }
    }
    // int32 version = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_version());
      }
    }
    // bool generated = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_generated() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataStream_TextHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataStream_TextHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_TextHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.TextHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attached_stream_ids()->MergeFrom(from._internal_attached_stream_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_reply_to_stream_id().empty()) {
        _this->_internal_set_reply_to_stream_id(from._internal_reply_to_stream_id());
      } else {
        if (_this->_impl_.reply_to_stream_id_.IsDefault()) {
          _this->_internal_set_reply_to_stream_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_operation_type() != 0) {
        _this->_impl_.operation_type_ = from._impl_.operation_type_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_generated() != 0) {
        _this->_impl_.generated_ = from._impl_.generated_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_TextHeader::CopyFrom(const DataStream_TextHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.TextHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataStream_TextHeader::InternalSwap(DataStream_TextHeader* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attached_stream_ids_.InternalSwap(&other->_impl_.attached_stream_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reply_to_stream_id_, &other->_impl_.reply_to_stream_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.generated_)
      + sizeof(DataStream_TextHeader::_impl_.generated_)
      - PROTOBUF_FIELD_OFFSET(DataStream_TextHeader, _impl_.operation_type_)>(
          reinterpret_cast<char*>(&_impl_.operation_type_),
          reinterpret_cast<char*>(&other->_impl_.operation_type_));
}

::google::protobuf::Metadata DataStream_TextHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataStream_ByteHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataStream_ByteHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataStream_ByteHeader, _impl_._has_bits_);
};

DataStream_ByteHeader::DataStream_ByteHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_ByteHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.ByteHeader)
}
PROTOBUF_NDEBUG_INLINE DataStream_ByteHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataStream_ByteHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_) {}

DataStream_ByteHeader::DataStream_ByteHeader(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream_ByteHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_ByteHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream_ByteHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.ByteHeader)
}
PROTOBUF_NDEBUG_INLINE DataStream_ByteHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena) {}

inline void DataStream_ByteHeader::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DataStream_ByteHeader::~DataStream_ByteHeader() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.ByteHeader)
  SharedDtor(*this);
}
inline void DataStream_ByteHeader::SharedDtor(MessageLite& self) {
  DataStream_ByteHeader& this_ = static_cast<DataStream_ByteHeader&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DataStream_ByteHeader::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_ByteHeader(arena);
}
constexpr auto DataStream_ByteHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataStream_ByteHeader),
                                            alignof(DataStream_ByteHeader));
}
constexpr auto DataStream_ByteHeader::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_ByteHeader_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_ByteHeader::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_ByteHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_ByteHeader::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataStream_ByteHeader>(), &DataStream_ByteHeader::ByteSizeLong,
              &DataStream_ByteHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_ByteHeader, _impl_._cached_size_),
          false,
      },
      &DataStream_ByteHeader::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_ByteHeader_class_data_ =
            DataStream_ByteHeader::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_ByteHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_ByteHeader_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_ByteHeader_class_data_.tc_table);
  return DataStream_ByteHeader_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 42, 2>
DataStream_ByteHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_ByteHeader, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_ByteHeader_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_ByteHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_ByteHeader, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_ByteHeader, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\4\0\0\0\0\0\0"
    "livekit.DataStream.ByteHeader"
    "name"
  }},
};
PROTOBUF_NOINLINE void DataStream_ByteHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.ByteHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataStream_ByteHeader::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataStream_ByteHeader& this_ = static_cast<const DataStream_ByteHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataStream_ByteHeader::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataStream_ByteHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.ByteHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.ByteHeader.name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.ByteHeader)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataStream_ByteHeader::ByteSizeLong(const MessageLite& base) {
  const DataStream_ByteHeader& this_ = static_cast<const DataStream_ByteHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataStream_ByteHeader::ByteSizeLong() const {
  const DataStream_ByteHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.ByteHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string name = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataStream_ByteHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataStream_ByteHeader*>(&to_msg);
  auto& from = static_cast<const DataStream_ByteHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.ByteHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_name().empty()) {
      _this->_internal_set_name(from._internal_name());
    } else {
      if (_this->_impl_.name_.IsDefault()) {
        _this->_internal_set_name("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_ByteHeader::CopyFrom(const DataStream_ByteHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.ByteHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataStream_ByteHeader::InternalSwap(DataStream_ByteHeader* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata DataStream_ByteHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse()
    : SuperType(DataStream_Header_AttributesEntry_DoNotUse_class_data_.base()) {}
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, DataStream_Header_AttributesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse() : SuperType() {}
DataStream_Header_AttributesEntry_DoNotUse::DataStream_Header_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL DataStream_Header_AttributesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_Header_AttributesEntry_DoNotUse(arena);
}
constexpr auto DataStream_Header_AttributesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataStream_Header_AttributesEntry_DoNotUse),
                                            alignof(DataStream_Header_AttributesEntry_DoNotUse));
}
constexpr auto DataStream_Header_AttributesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_Header_AttributesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_Header_AttributesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_Header_AttributesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_Header_AttributesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&DataStream_Header_AttributesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &DataStream_Header_AttributesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_Header_AttributesEntry_DoNotUse_class_data_ =
            DataStream_Header_AttributesEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_Header_AttributesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_Header_AttributesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_Header_AttributesEntry_DoNotUse_class_data_.tc_table);
  return DataStream_Header_AttributesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2>
DataStream_Header_AttributesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_Header_AttributesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_Header_AttributesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header_AttributesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\51\3\5\0\0\0\0\0"
    "livekit.DataStream.Header.AttributesEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class DataStream_Header::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataStream_Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::DataStream_Header, _impl_._oneof_case_);
};

void DataStream_Header::set_allocated_text_header(::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE text_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_content_header();
  if (text_header) {
    ::google::protobuf::Arena* submessage_arena = text_header->GetArena();
    if (message_arena != submessage_arena) {
      text_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, text_header, submessage_arena);
    }
    set_has_text_header();
    _impl_.content_header_.text_header_ = text_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.text_header)
}
void DataStream_Header::set_allocated_byte_header(::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE byte_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_content_header();
  if (byte_header) {
    ::google::protobuf::Arena* submessage_arena = byte_header->GetArena();
    if (message_arena != submessage_arena) {
      byte_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, byte_header, submessage_arena);
    }
    set_has_byte_header();
    _impl_.content_header_.byte_header_ = byte_header;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.byte_header)
}
DataStream_Header::DataStream_Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Header_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Header)
}
PROTOBUF_NDEBUG_INLINE DataStream_Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataStream_Header& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        stream_id_(arena, from.stream_id_),
        topic_(arena, from.topic_),
        mime_type_(arena, from.mime_type_),
        content_header_{},
        _oneof_case_{from._oneof_case_[0]} {}

DataStream_Header::DataStream_Header(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream_Header& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Header_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream_Header* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, encryption_type_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::encryption_type_));
  switch (content_header_case()) {
    case CONTENT_HEADER_NOT_SET:
      break;
      case kTextHeader:
        _impl_.content_header_.text_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.content_header_.text_header_);
        break;
      case kByteHeader:
        _impl_.content_header_.byte_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.content_header_.byte_header_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Header)
}
PROTOBUF_NDEBUG_INLINE DataStream_Header::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        stream_id_(arena),
        topic_(arena),
        mime_type_(arena),
        content_header_{},
        _oneof_case_{} {}

inline void DataStream_Header::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, encryption_type_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::encryption_type_));
}
DataStream_Header::~DataStream_Header() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Header)
  SharedDtor(*this);
}
inline void DataStream_Header::SharedDtor(MessageLite& self) {
  DataStream_Header& this_ = static_cast<DataStream_Header&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.topic_.Destroy();
  this_._impl_.mime_type_.Destroy();
  if (this_.has_content_header()) {
    this_.clear_content_header();
  }
  this_._impl_.~Impl_();
}

void DataStream_Header::clear_content_header() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DataStream.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (content_header_case()) {
    case kTextHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.content_header_.text_header_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.content_header_.text_header_);
      }
      break;
    }
    case kByteHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.content_header_.byte_header_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.content_header_.byte_header_);
      }
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_HEADER_NOT_SET;
}


inline void* PROTOBUF_NONNULL DataStream_Header::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_Header(arena);
}
constexpr auto DataStream_Header::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.attributes_) +
          decltype(DataStream_Header::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.attributes_) +
          decltype(DataStream_Header::_impl_.attributes_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataStream_Header), alignof(DataStream_Header), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataStream_Header::PlacementNew_,
                                 sizeof(DataStream_Header),
                                 alignof(DataStream_Header));
  }
}
constexpr auto DataStream_Header::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_Header_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_Header::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_Header>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_Header::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataStream_Header>(), &DataStream_Header::ByteSizeLong,
              &DataStream_Header::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_._cached_size_),
          false,
      },
      &DataStream_Header::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_Header_class_data_ =
            DataStream_Header::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_Header::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_Header_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_Header_class_data_.tc_table);
  return DataStream_Header_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 9, 3, 75, 2>
DataStream_Header::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_._has_bits_),
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966304,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DataStream_Header_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_Header>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.stream_id_)}},
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DataStream_Header, _impl_.timestamp_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.timestamp_)}},
    // string topic = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.topic_)}},
    // string mime_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.mime_type_)}},
    // optional uint64 total_length = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DataStream_Header, _impl_.total_length_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.total_length_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.Encryption.Type encryption_type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataStream_Header, _impl_.encryption_type_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.encryption_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.stream_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string topic = 3;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.topic_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mime_type = 4;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.mime_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint64 total_length = 5;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.total_length_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // .livekit.Encryption.Type encryption_type = 7;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.encryption_type_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // map<string, string> attributes = 8;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.attributes_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .livekit.DataStream.TextHeader text_header = 9;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.content_header_.text_header_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.DataStream.ByteHeader byte_header = 10;
    {PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.content_header_.byte_header_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::DataStream_TextHeader>()},
      {::_pbi::TcParser::GetTable<::livekit::DataStream_ByteHeader>()},
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\31\11\0\5\11\0\0\12\0\0\0\0\0\0\0\0"
    "livekit.DataStream.Header"
    "stream_id"
    "topic"
    "mime_type"
    "attributes"
  }},
};
PROTOBUF_NOINLINE void DataStream_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Header)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.mime_type_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000038u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encryption_type_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.encryption_type_));
  }
  clear_content_header();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataStream_Header::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataStream_Header& this_ = static_cast<const DataStream_Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataStream_Header::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataStream_Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Header)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string stream_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_stream_id().empty()) {
      const std::string& _s = this_._internal_stream_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.stream_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // string topic = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_topic().empty()) {
      const std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.topic");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string mime_type = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_mime_type().empty()) {
      const std::string& _s = this_._internal_mime_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.mime_type");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint64 total_length = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this_._internal_total_length(), target);
  }

  // .livekit.Encryption.Type encryption_type = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_encryption_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_encryption_type(), target);
    }
  }

  // map<string, string> attributes = 8;
  if (!this_._internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Header.attributes");
      }
    }
  }

  switch (this_.content_header_case()) {
    case kTextHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.content_header_.text_header_, this_._impl_.content_header_.text_header_->GetCachedSize(), target,
          stream);
      break;
    }
    case kByteHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.content_header_.byte_header_, this_._impl_.content_header_.byte_header_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Header)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataStream_Header::ByteSizeLong(const MessageLite& base) {
  const DataStream_Header& this_ = static_cast<const DataStream_Header&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataStream_Header::ByteSizeLong() const {
  const DataStream_Header& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> attributes = 8;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_attributes_size());
      for (const auto& entry : this_._internal_attributes()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string stream_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_stream_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream_id());
      }
    }
    // string topic = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_topic());
      }
    }
    // string mime_type = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_mime_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime_type());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // optional uint64 total_length = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_total_length());
    }
    // .livekit.Encryption.Type encryption_type = 7;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_encryption_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_encryption_type());
      }
    }
  }
  switch (this_.content_header_case()) {
    // .livekit.DataStream.TextHeader text_header = 9;
    case kTextHeader: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.content_header_.text_header_);
      break;
    }
    // .livekit.DataStream.ByteHeader byte_header = 10;
    case kByteHeader: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.content_header_.byte_header_);
      break;
    }
    case CONTENT_HEADER_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataStream_Header::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataStream_Header*>(&to_msg);
  auto& from = static_cast<const DataStream_Header&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_stream_id().empty()) {
        _this->_internal_set_stream_id(from._internal_stream_id());
      } else {
        if (_this->_impl_.stream_id_.IsDefault()) {
          _this->_internal_set_stream_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_mime_type().empty()) {
        _this->_internal_set_mime_type(from._internal_mime_type());
      } else {
        if (_this->_impl_.mime_type_.IsDefault()) {
          _this->_internal_set_mime_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.total_length_ = from._impl_.total_length_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_encryption_type() != 0) {
        _this->_impl_.encryption_type_ = from._impl_.encryption_type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_content_header();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kTextHeader: {
        if (oneof_needs_init) {
          _this->_impl_.content_header_.text_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.content_header_.text_header_);
        } else {
          _this->_impl_.content_header_.text_header_->MergeFrom(*from._impl_.content_header_.text_header_);
        }
        break;
      }
      case kByteHeader: {
        if (oneof_needs_init) {
          _this->_impl_.content_header_.byte_header_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.content_header_.byte_header_);
        } else {
          _this->_impl_.content_header_.byte_header_->MergeFrom(*from._impl_.content_header_.byte_header_);
        }
        break;
      }
      case CONTENT_HEADER_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Header::CopyFrom(const DataStream_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataStream_Header::InternalSwap(DataStream_Header* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.encryption_type_)
      + sizeof(DataStream_Header::_impl_.encryption_type_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Header, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.content_header_, other->_impl_.content_header_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DataStream_Header::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataStream_Chunk::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataStream_Chunk>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_._has_bits_);
};

DataStream_Chunk::DataStream_Chunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Chunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Chunk)
}
PROTOBUF_NDEBUG_INLINE DataStream_Chunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataStream_Chunk& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        stream_id_(arena, from.stream_id_),
        content_(arena, from.content_),
        iv_(arena, from.iv_) {}

DataStream_Chunk::DataStream_Chunk(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream_Chunk& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Chunk_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream_Chunk* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, chunk_index_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, chunk_index_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Chunk)
}
PROTOBUF_NDEBUG_INLINE DataStream_Chunk::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        stream_id_(arena),
        content_(arena),
        iv_(arena) {}

inline void DataStream_Chunk::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, chunk_index_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, chunk_index_) +
               sizeof(Impl_::version_));
}
DataStream_Chunk::~DataStream_Chunk() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Chunk)
  SharedDtor(*this);
}
inline void DataStream_Chunk::SharedDtor(MessageLite& self) {
  DataStream_Chunk& this_ = static_cast<DataStream_Chunk&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.content_.Destroy();
  this_._impl_.iv_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DataStream_Chunk::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_Chunk(arena);
}
constexpr auto DataStream_Chunk::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataStream_Chunk),
                                            alignof(DataStream_Chunk));
}
constexpr auto DataStream_Chunk::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_Chunk_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_Chunk::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_Chunk>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_Chunk::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataStream_Chunk>(), &DataStream_Chunk::ByteSizeLong,
              &DataStream_Chunk::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_._cached_size_),
          false,
      },
      &DataStream_Chunk::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_Chunk_class_data_ =
            DataStream_Chunk::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_Chunk::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_Chunk_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_Chunk_class_data_.tc_table);
  return DataStream_Chunk_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 42, 2>
DataStream_Chunk::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_Chunk_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_Chunk>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.stream_id_)}},
    // uint64 chunk_index = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(DataStream_Chunk, _impl_.chunk_index_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.chunk_index_)}},
    // bytes content = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.content_)}},
    // int32 version = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataStream_Chunk, _impl_.version_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.version_)}},
    // optional bytes iv = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.iv_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.stream_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 chunk_index = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.chunk_index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bytes content = 3;
    {PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.content_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 version = 4;
    {PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.version_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bytes iv = 5;
    {PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.iv_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\11\0\0\0\0\0\0"
    "livekit.DataStream.Chunk"
    "stream_id"
  }},
};
PROTOBUF_NOINLINE void DataStream_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Chunk)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.iv_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000018u) != 0) {
    ::memset(&_impl_.chunk_index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.chunk_index_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataStream_Chunk::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataStream_Chunk& this_ = static_cast<const DataStream_Chunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataStream_Chunk::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataStream_Chunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Chunk)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string stream_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_stream_id().empty()) {
      const std::string& _s = this_._internal_stream_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Chunk.stream_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // uint64 chunk_index = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_chunk_index() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          2, this_._internal_chunk_index(), target);
    }
  }

  // bytes content = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_content().empty()) {
      const std::string& _s = this_._internal_content();
      target = stream->WriteBytesMaybeAliased(3, _s, target);
    }
  }

  // int32 version = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_version() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_version(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bytes iv = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_iv();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Chunk)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataStream_Chunk::ByteSizeLong(const MessageLite& base) {
  const DataStream_Chunk& this_ = static_cast<const DataStream_Chunk&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataStream_Chunk::ByteSizeLong() const {
  const DataStream_Chunk& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Chunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string stream_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_stream_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream_id());
      }
    }
    // bytes content = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_content().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_content());
      }
    }
    // optional bytes iv = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_iv());
    }
    // uint64 chunk_index = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_chunk_index() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_chunk_index());
      }
    }
    // int32 version = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_version() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_version());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataStream_Chunk::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataStream_Chunk*>(&to_msg);
  auto& from = static_cast<const DataStream_Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Chunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_stream_id().empty()) {
        _this->_internal_set_stream_id(from._internal_stream_id());
      } else {
        if (_this->_impl_.stream_id_.IsDefault()) {
          _this->_internal_set_stream_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_content().empty()) {
        _this->_internal_set_content(from._internal_content());
      } else {
        if (_this->_impl_.content_.IsDefault()) {
          _this->_internal_set_content("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_iv(from._internal_iv());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_chunk_index() != 0) {
        _this->_impl_.chunk_index_ = from._impl_.chunk_index_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_version() != 0) {
        _this->_impl_.version_ = from._impl_.version_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Chunk::CopyFrom(const DataStream_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataStream_Chunk::InternalSwap(DataStream_Chunk* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iv_, &other->_impl_.iv_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.version_)
      + sizeof(DataStream_Chunk::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(DataStream_Chunk, _impl_.chunk_index_)>(
          reinterpret_cast<char*>(&_impl_.chunk_index_),
          reinterpret_cast<char*>(&other->_impl_.chunk_index_));
}

::google::protobuf::Metadata DataStream_Chunk::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse()
    : SuperType(DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.base()) {}
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse() : SuperType() {}
DataStream_Trailer_AttributesEntry_DoNotUse::DataStream_Trailer_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL DataStream_Trailer_AttributesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_Trailer_AttributesEntry_DoNotUse(arena);
}
constexpr auto DataStream_Trailer_AttributesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataStream_Trailer_AttributesEntry_DoNotUse),
                                            alignof(DataStream_Trailer_AttributesEntry_DoNotUse));
}
constexpr auto DataStream_Trailer_AttributesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_Trailer_AttributesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_Trailer_AttributesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_Trailer_AttributesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&DataStream_Trailer_AttributesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &DataStream_Trailer_AttributesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_Trailer_AttributesEntry_DoNotUse_class_data_ =
            DataStream_Trailer_AttributesEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_Trailer_AttributesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_Trailer_AttributesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.tc_table);
  return DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2>
DataStream_Trailer_AttributesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_Trailer_AttributesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_Trailer_AttributesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_Trailer_AttributesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\3\5\0\0\0\0\0"
    "livekit.DataStream.Trailer.AttributesEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class DataStream_Trailer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataStream_Trailer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_._has_bits_);
};

DataStream_Trailer::DataStream_Trailer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Trailer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream.Trailer)
}
PROTOBUF_NDEBUG_INLINE DataStream_Trailer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataStream_Trailer& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        stream_id_(arena, from.stream_id_),
        reason_(arena, from.reason_) {}

DataStream_Trailer::DataStream_Trailer(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream_Trailer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataStream_Trailer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream_Trailer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream.Trailer)
}
PROTOBUF_NDEBUG_INLINE DataStream_Trailer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        stream_id_(arena),
        reason_(arena) {}

inline void DataStream_Trailer::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DataStream_Trailer::~DataStream_Trailer() {
  // @@protoc_insertion_point(destructor:livekit.DataStream.Trailer)
  SharedDtor(*this);
}
inline void DataStream_Trailer::SharedDtor(MessageLite& self) {
  DataStream_Trailer& this_ = static_cast<DataStream_Trailer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stream_id_.Destroy();
  this_._impl_.reason_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DataStream_Trailer::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream_Trailer(arena);
}
constexpr auto DataStream_Trailer::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.attributes_) +
          decltype(DataStream_Trailer::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.attributes_) +
          decltype(DataStream_Trailer::_impl_.attributes_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataStream_Trailer), alignof(DataStream_Trailer), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataStream_Trailer::PlacementNew_,
                                 sizeof(DataStream_Trailer),
                                 alignof(DataStream_Trailer));
  }
}
constexpr auto DataStream_Trailer::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_Trailer_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream_Trailer::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataStream_Trailer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream_Trailer::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataStream_Trailer>(), &DataStream_Trailer::ByteSizeLong,
              &DataStream_Trailer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_._cached_size_),
          false,
      },
      &DataStream_Trailer::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_Trailer_class_data_ =
            DataStream_Trailer::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream_Trailer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_Trailer_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_Trailer_class_data_.tc_table);
  return DataStream_Trailer_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 1, 60, 2>
DataStream_Trailer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DataStream_Trailer_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream_Trailer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.reason_)}},
    // string stream_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.stream_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string stream_id = 1;
    {PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.stream_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.reason_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> attributes = 3;
    {PROTOBUF_FIELD_OFFSET(DataStream_Trailer, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }},
  {{
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\32\11\6\12\0\0\0\0"
    "livekit.DataStream.Trailer"
    "stream_id"
    "reason"
    "attributes"
  }},
};
PROTOBUF_NOINLINE void DataStream_Trailer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataStream.Trailer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.stream_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataStream_Trailer::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataStream_Trailer& this_ = static_cast<const DataStream_Trailer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataStream_Trailer::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataStream_Trailer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataStream.Trailer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string stream_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_stream_id().empty()) {
      const std::string& _s = this_._internal_stream_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.stream_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string reason = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_reason().empty()) {
      const std::string& _s = this_._internal_reason();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.reason");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // map<string, string> attributes = 3;
  if (!this_._internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataStream.Trailer.attributes");
      }
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataStream.Trailer)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataStream_Trailer::ByteSizeLong(const MessageLite& base) {
  const DataStream_Trailer& this_ = static_cast<const DataStream_Trailer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataStream_Trailer::ByteSizeLong() const {
  const DataStream_Trailer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataStream.Trailer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> attributes = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_attributes_size());
      for (const auto& entry : this_._internal_attributes()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string stream_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_stream_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream_id());
      }
    }
    // string reason = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_reason().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_reason());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataStream_Trailer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataStream_Trailer*>(&to_msg);
  auto& from = static_cast<const DataStream_Trailer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataStream.Trailer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_stream_id().empty()) {
        _this->_internal_set_stream_id(from._internal_stream_id());
      } else {
        if (_this->_impl_.stream_id_.IsDefault()) {
          _this->_internal_set_stream_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_reason().empty()) {
        _this->_internal_set_reason(from._internal_reason());
      } else {
        if (_this->_impl_.reason_.IsDefault()) {
          _this->_internal_set_reason("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataStream_Trailer::CopyFrom(const DataStream_Trailer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataStream.Trailer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataStream_Trailer::InternalSwap(DataStream_Trailer* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_id_, &other->_impl_.stream_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
}

::google::protobuf::Metadata DataStream_Trailer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataStream::_Internal {
 public:
};

DataStream::DataStream(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, DataStream_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:livekit.DataStream)
}
DataStream::DataStream(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataStream& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, DataStream_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:livekit.DataStream)
}

inline void* PROTOBUF_NONNULL DataStream::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataStream(arena);
}
constexpr auto DataStream::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DataStream),
                                            alignof(DataStream));
}
constexpr auto DataStream::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataStream_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataStream::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DataStream>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataStream::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DataStream>(), &DataStream::ByteSizeLong,
              &DataStream::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataStream, _impl_._cached_size_),
          false,
      },
      &DataStream::kDescriptorMethods,
      &descriptor_table_livekit_5fmodels_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataStream_class_data_ =
            DataStream::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataStream::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataStream_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataStream_class_data_.tc_table);
  return DataStream_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
DataStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataStream_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataStream>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata DataStream::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_livekit_5fmodels_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
