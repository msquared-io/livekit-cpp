// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_models.proto
// Protobuf C++ Version: 6.30.1

#ifndef livekit_5fmodels_2eproto_2epb_2eh
#define livekit_5fmodels_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_type_handler.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "livekit_metrics.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_livekit_5fmodels_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fmodels_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_livekit_5fmodels_2eproto;
}  // extern "C"
namespace livekit {
enum AudioCodec : int;
extern const uint32_t AudioCodec_internal_data_[];
enum AudioTrackFeature : int;
extern const uint32_t AudioTrackFeature_internal_data_[];
enum BackupCodecPolicy : int;
extern const uint32_t BackupCodecPolicy_internal_data_[];
enum ClientConfigSetting : int;
extern const uint32_t ClientConfigSetting_internal_data_[];
enum ClientInfo_SDK : int;
extern const uint32_t ClientInfo_SDK_internal_data_[];
enum ConnectionQuality : int;
extern const uint32_t ConnectionQuality_internal_data_[];
enum DataPacket_Kind : int;
extern const uint32_t DataPacket_Kind_internal_data_[];
enum DataStream_OperationType : int;
extern const uint32_t DataStream_OperationType_internal_data_[];
enum DisconnectReason : int;
extern const uint32_t DisconnectReason_internal_data_[];
enum Encryption_Type : int;
extern const uint32_t Encryption_Type_internal_data_[];
enum ImageCodec : int;
extern const uint32_t ImageCodec_internal_data_[];
enum ParticipantInfo_Kind : int;
extern const uint32_t ParticipantInfo_Kind_internal_data_[];
enum ParticipantInfo_State : int;
extern const uint32_t ParticipantInfo_State_internal_data_[];
enum ReconnectReason : int;
extern const uint32_t ReconnectReason_internal_data_[];
enum ServerInfo_Edition : int;
extern const uint32_t ServerInfo_Edition_internal_data_[];
enum SubscriptionError : int;
extern const uint32_t SubscriptionError_internal_data_[];
enum TrackSource : int;
extern const uint32_t TrackSource_internal_data_[];
enum TrackType : int;
extern const uint32_t TrackType_internal_data_[];
enum VideoCodec : int;
extern const uint32_t VideoCodec_internal_data_[];
enum VideoQuality : int;
extern const uint32_t VideoQuality_internal_data_[];
class ActiveSpeakerUpdate;
struct ActiveSpeakerUpdateDefaultTypeInternal;
extern ActiveSpeakerUpdateDefaultTypeInternal _ActiveSpeakerUpdate_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ActiveSpeakerUpdate_class_data_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ChatMessage_class_data_;
class ClientConfiguration;
struct ClientConfigurationDefaultTypeInternal;
extern ClientConfigurationDefaultTypeInternal _ClientConfiguration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ClientConfiguration_class_data_;
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ClientInfo_class_data_;
class Codec;
struct CodecDefaultTypeInternal;
extern CodecDefaultTypeInternal _Codec_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Codec_class_data_;
class DataPacket;
struct DataPacketDefaultTypeInternal;
extern DataPacketDefaultTypeInternal _DataPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataPacket_class_data_;
class DataStream;
struct DataStreamDefaultTypeInternal;
extern DataStreamDefaultTypeInternal _DataStream_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_class_data_;
class DataStream_ByteHeader;
struct DataStream_ByteHeaderDefaultTypeInternal;
extern DataStream_ByteHeaderDefaultTypeInternal _DataStream_ByteHeader_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_ByteHeader_class_data_;
class DataStream_Chunk;
struct DataStream_ChunkDefaultTypeInternal;
extern DataStream_ChunkDefaultTypeInternal _DataStream_Chunk_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_Chunk_class_data_;
class DataStream_Header;
struct DataStream_HeaderDefaultTypeInternal;
extern DataStream_HeaderDefaultTypeInternal _DataStream_Header_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_Header_class_data_;
class DataStream_Header_AttributesEntry_DoNotUse;
struct DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal;
extern DataStream_Header_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Header_AttributesEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_Header_AttributesEntry_DoNotUse_class_data_;
class DataStream_TextHeader;
struct DataStream_TextHeaderDefaultTypeInternal;
extern DataStream_TextHeaderDefaultTypeInternal _DataStream_TextHeader_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_TextHeader_class_data_;
class DataStream_Trailer;
struct DataStream_TrailerDefaultTypeInternal;
extern DataStream_TrailerDefaultTypeInternal _DataStream_Trailer_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_Trailer_class_data_;
class DataStream_Trailer_AttributesEntry_DoNotUse;
struct DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal;
extern DataStream_Trailer_AttributesEntry_DoNotUseDefaultTypeInternal _DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DataStream_Trailer_AttributesEntry_DoNotUse_class_data_;
class DisabledCodecs;
struct DisabledCodecsDefaultTypeInternal;
extern DisabledCodecsDefaultTypeInternal _DisabledCodecs_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull DisabledCodecs_class_data_;
class Encryption;
struct EncryptionDefaultTypeInternal;
extern EncryptionDefaultTypeInternal _Encryption_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Encryption_class_data_;
class Pagination;
struct PaginationDefaultTypeInternal;
extern PaginationDefaultTypeInternal _Pagination_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Pagination_class_data_;
class ParticipantInfo;
struct ParticipantInfoDefaultTypeInternal;
extern ParticipantInfoDefaultTypeInternal _ParticipantInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParticipantInfo_class_data_;
class ParticipantInfo_AttributesEntry_DoNotUse;
struct ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal;
extern ParticipantInfo_AttributesEntry_DoNotUseDefaultTypeInternal _ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParticipantInfo_AttributesEntry_DoNotUse_class_data_;
class ParticipantPermission;
struct ParticipantPermissionDefaultTypeInternal;
extern ParticipantPermissionDefaultTypeInternal _ParticipantPermission_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParticipantPermission_class_data_;
class ParticipantTracks;
struct ParticipantTracksDefaultTypeInternal;
extern ParticipantTracksDefaultTypeInternal _ParticipantTracks_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ParticipantTracks_class_data_;
class PlayoutDelay;
struct PlayoutDelayDefaultTypeInternal;
extern PlayoutDelayDefaultTypeInternal _PlayoutDelay_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PlayoutDelay_class_data_;
class RTCPSenderReportState;
struct RTCPSenderReportStateDefaultTypeInternal;
extern RTCPSenderReportStateDefaultTypeInternal _RTCPSenderReportState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTCPSenderReportState_class_data_;
class RTPDrift;
struct RTPDriftDefaultTypeInternal;
extern RTPDriftDefaultTypeInternal _RTPDrift_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTPDrift_class_data_;
class RTPForwarderState;
struct RTPForwarderStateDefaultTypeInternal;
extern RTPForwarderStateDefaultTypeInternal _RTPForwarderState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTPForwarderState_class_data_;
class RTPMungerState;
struct RTPMungerStateDefaultTypeInternal;
extern RTPMungerStateDefaultTypeInternal _RTPMungerState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTPMungerState_class_data_;
class RTPStats;
struct RTPStatsDefaultTypeInternal;
extern RTPStatsDefaultTypeInternal _RTPStats_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTPStats_class_data_;
class RTPStats_GapHistogramEntry_DoNotUse;
struct RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal;
extern RTPStats_GapHistogramEntry_DoNotUseDefaultTypeInternal _RTPStats_GapHistogramEntry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RTPStats_GapHistogramEntry_DoNotUse_class_data_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Room_class_data_;
class RpcAck;
struct RpcAckDefaultTypeInternal;
extern RpcAckDefaultTypeInternal _RpcAck_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RpcAck_class_data_;
class RpcError;
struct RpcErrorDefaultTypeInternal;
extern RpcErrorDefaultTypeInternal _RpcError_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RpcError_class_data_;
class RpcRequest;
struct RpcRequestDefaultTypeInternal;
extern RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RpcRequest_class_data_;
class RpcResponse;
struct RpcResponseDefaultTypeInternal;
extern RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RpcResponse_class_data_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ServerInfo_class_data_;
class SimulcastCodecInfo;
struct SimulcastCodecInfoDefaultTypeInternal;
extern SimulcastCodecInfoDefaultTypeInternal _SimulcastCodecInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimulcastCodecInfo_class_data_;
class SipDTMF;
struct SipDTMFDefaultTypeInternal;
extern SipDTMFDefaultTypeInternal _SipDTMF_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SipDTMF_class_data_;
class SpeakerInfo;
struct SpeakerInfoDefaultTypeInternal;
extern SpeakerInfoDefaultTypeInternal _SpeakerInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SpeakerInfo_class_data_;
class TimedVersion;
struct TimedVersionDefaultTypeInternal;
extern TimedVersionDefaultTypeInternal _TimedVersion_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TimedVersion_class_data_;
class TrackInfo;
struct TrackInfoDefaultTypeInternal;
extern TrackInfoDefaultTypeInternal _TrackInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TrackInfo_class_data_;
class Transcription;
struct TranscriptionDefaultTypeInternal;
extern TranscriptionDefaultTypeInternal _Transcription_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Transcription_class_data_;
class TranscriptionSegment;
struct TranscriptionSegmentDefaultTypeInternal;
extern TranscriptionSegmentDefaultTypeInternal _TranscriptionSegment_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TranscriptionSegment_class_data_;
class UserPacket;
struct UserPacketDefaultTypeInternal;
extern UserPacketDefaultTypeInternal _UserPacket_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull UserPacket_class_data_;
class VP8MungerState;
struct VP8MungerStateDefaultTypeInternal;
extern VP8MungerStateDefaultTypeInternal _VP8MungerState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull VP8MungerState_class_data_;
class VideoConfiguration;
struct VideoConfigurationDefaultTypeInternal;
extern VideoConfigurationDefaultTypeInternal _VideoConfiguration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull VideoConfiguration_class_data_;
class VideoLayer;
struct VideoLayerDefaultTypeInternal;
extern VideoLayerDefaultTypeInternal _VideoLayer_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull VideoLayer_class_data_;
}  // namespace livekit
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::livekit::AudioCodec_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::AudioCodec>;
template <>
internal::EnumTraitsT<::livekit::AudioTrackFeature_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::AudioTrackFeature>;
template <>
internal::EnumTraitsT<::livekit::BackupCodecPolicy_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::BackupCodecPolicy>;
template <>
internal::EnumTraitsT<::livekit::ClientConfigSetting_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ClientConfigSetting>;
template <>
internal::EnumTraitsT<::livekit::ClientInfo_SDK_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ClientInfo_SDK>;
template <>
internal::EnumTraitsT<::livekit::ConnectionQuality_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ConnectionQuality>;
template <>
internal::EnumTraitsT<::livekit::DataPacket_Kind_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::DataPacket_Kind>;
template <>
internal::EnumTraitsT<::livekit::DataStream_OperationType_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::DataStream_OperationType>;
template <>
internal::EnumTraitsT<::livekit::DisconnectReason_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::DisconnectReason>;
template <>
internal::EnumTraitsT<::livekit::Encryption_Type_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::Encryption_Type>;
template <>
internal::EnumTraitsT<::livekit::ImageCodec_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ImageCodec>;
template <>
internal::EnumTraitsT<::livekit::ParticipantInfo_Kind_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ParticipantInfo_Kind>;
template <>
internal::EnumTraitsT<::livekit::ParticipantInfo_State_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ParticipantInfo_State>;
template <>
internal::EnumTraitsT<::livekit::ReconnectReason_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ReconnectReason>;
template <>
internal::EnumTraitsT<::livekit::ServerInfo_Edition_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::ServerInfo_Edition>;
template <>
internal::EnumTraitsT<::livekit::SubscriptionError_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::SubscriptionError>;
template <>
internal::EnumTraitsT<::livekit::TrackSource_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::TrackSource>;
template <>
internal::EnumTraitsT<::livekit::TrackType_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::TrackType>;
template <>
internal::EnumTraitsT<::livekit::VideoCodec_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::VideoCodec>;
template <>
internal::EnumTraitsT<::livekit::VideoQuality_internal_data_>
    internal::EnumTraitsImpl::value<::livekit::VideoQuality>;
}  // namespace protobuf
}  // namespace google

namespace livekit {
enum ParticipantInfo_State : int {
  ParticipantInfo_State_JOINING = 0,
  ParticipantInfo_State_JOINED = 1,
  ParticipantInfo_State_ACTIVE = 2,
  ParticipantInfo_State_DISCONNECTED = 3,
  ParticipantInfo_State_ParticipantInfo_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ParticipantInfo_State_ParticipantInfo_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ParticipantInfo_State_internal_data_[];
inline constexpr ParticipantInfo_State ParticipantInfo_State_State_MIN =
    static_cast<ParticipantInfo_State>(0);
inline constexpr ParticipantInfo_State ParticipantInfo_State_State_MAX =
    static_cast<ParticipantInfo_State>(3);
inline bool ParticipantInfo_State_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int ParticipantInfo_State_State_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParticipantInfo_State_descriptor();
template <typename T>
const std::string& ParticipantInfo_State_Name(T value) {
  static_assert(std::is_same<T, ParticipantInfo_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return ParticipantInfo_State_Name(static_cast<ParticipantInfo_State>(value));
}
template <>
inline const std::string& ParticipantInfo_State_Name(ParticipantInfo_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ParticipantInfo_State_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool ParticipantInfo_State_Parse(
    absl::string_view name, ParticipantInfo_State* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParticipantInfo_State>(ParticipantInfo_State_descriptor(), name,
                                           value);
}
enum ParticipantInfo_Kind : int {
  ParticipantInfo_Kind_STANDARD = 0,
  ParticipantInfo_Kind_INGRESS = 1,
  ParticipantInfo_Kind_EGRESS = 2,
  ParticipantInfo_Kind_SIP = 3,
  ParticipantInfo_Kind_AGENT = 4,
  ParticipantInfo_Kind_FORWARDED = 5,
  ParticipantInfo_Kind_ParticipantInfo_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ParticipantInfo_Kind_ParticipantInfo_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ParticipantInfo_Kind_internal_data_[];
inline constexpr ParticipantInfo_Kind ParticipantInfo_Kind_Kind_MIN =
    static_cast<ParticipantInfo_Kind>(0);
inline constexpr ParticipantInfo_Kind ParticipantInfo_Kind_Kind_MAX =
    static_cast<ParticipantInfo_Kind>(5);
inline bool ParticipantInfo_Kind_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int ParticipantInfo_Kind_Kind_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ParticipantInfo_Kind_descriptor();
template <typename T>
const std::string& ParticipantInfo_Kind_Name(T value) {
  static_assert(std::is_same<T, ParticipantInfo_Kind>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Kind_Name().");
  return ParticipantInfo_Kind_Name(static_cast<ParticipantInfo_Kind>(value));
}
template <>
inline const std::string& ParticipantInfo_Kind_Name(ParticipantInfo_Kind value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ParticipantInfo_Kind_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool ParticipantInfo_Kind_Parse(
    absl::string_view name, ParticipantInfo_Kind* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParticipantInfo_Kind>(ParticipantInfo_Kind_descriptor(), name,
                                           value);
}
enum Encryption_Type : int {
  Encryption_Type_NONE = 0,
  Encryption_Type_GCM = 1,
  Encryption_Type_CUSTOM = 2,
  Encryption_Type_Encryption_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Encryption_Type_Encryption_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t Encryption_Type_internal_data_[];
inline constexpr Encryption_Type Encryption_Type_Type_MIN =
    static_cast<Encryption_Type>(0);
inline constexpr Encryption_Type Encryption_Type_Type_MAX =
    static_cast<Encryption_Type>(2);
inline bool Encryption_Type_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int Encryption_Type_Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Encryption_Type_descriptor();
template <typename T>
const std::string& Encryption_Type_Name(T value) {
  static_assert(std::is_same<T, Encryption_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Encryption_Type_Name(static_cast<Encryption_Type>(value));
}
template <>
inline const std::string& Encryption_Type_Name(Encryption_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Encryption_Type_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool Encryption_Type_Parse(
    absl::string_view name, Encryption_Type* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<Encryption_Type>(Encryption_Type_descriptor(), name,
                                           value);
}
enum DataPacket_Kind : int {
  DataPacket_Kind_RELIABLE = 0,
  DataPacket_Kind_LOSSY = 1,
  DataPacket_Kind_DataPacket_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataPacket_Kind_DataPacket_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t DataPacket_Kind_internal_data_[];
inline constexpr DataPacket_Kind DataPacket_Kind_Kind_MIN =
    static_cast<DataPacket_Kind>(0);
inline constexpr DataPacket_Kind DataPacket_Kind_Kind_MAX =
    static_cast<DataPacket_Kind>(1);
inline bool DataPacket_Kind_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int DataPacket_Kind_Kind_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DataPacket_Kind_descriptor();
template <typename T>
const std::string& DataPacket_Kind_Name(T value) {
  static_assert(std::is_same<T, DataPacket_Kind>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Kind_Name().");
  return DataPacket_Kind_Name(static_cast<DataPacket_Kind>(value));
}
template <>
inline const std::string& DataPacket_Kind_Name(DataPacket_Kind value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataPacket_Kind_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool DataPacket_Kind_Parse(
    absl::string_view name, DataPacket_Kind* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataPacket_Kind>(DataPacket_Kind_descriptor(), name,
                                           value);
}
enum ServerInfo_Edition : int {
  ServerInfo_Edition_Standard = 0,
  ServerInfo_Edition_Cloud = 1,
  ServerInfo_Edition_ServerInfo_Edition_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerInfo_Edition_ServerInfo_Edition_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ServerInfo_Edition_internal_data_[];
inline constexpr ServerInfo_Edition ServerInfo_Edition_Edition_MIN =
    static_cast<ServerInfo_Edition>(0);
inline constexpr ServerInfo_Edition ServerInfo_Edition_Edition_MAX =
    static_cast<ServerInfo_Edition>(1);
inline bool ServerInfo_Edition_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int ServerInfo_Edition_Edition_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ServerInfo_Edition_descriptor();
template <typename T>
const std::string& ServerInfo_Edition_Name(T value) {
  static_assert(std::is_same<T, ServerInfo_Edition>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Edition_Name().");
  return ServerInfo_Edition_Name(static_cast<ServerInfo_Edition>(value));
}
template <>
inline const std::string& ServerInfo_Edition_Name(ServerInfo_Edition value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ServerInfo_Edition_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool ServerInfo_Edition_Parse(
    absl::string_view name, ServerInfo_Edition* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerInfo_Edition>(ServerInfo_Edition_descriptor(), name,
                                           value);
}
enum ClientInfo_SDK : int {
  ClientInfo_SDK_UNKNOWN = 0,
  ClientInfo_SDK_JS = 1,
  ClientInfo_SDK_SWIFT = 2,
  ClientInfo_SDK_ANDROID = 3,
  ClientInfo_SDK_FLUTTER = 4,
  ClientInfo_SDK_GO = 5,
  ClientInfo_SDK_UNITY = 6,
  ClientInfo_SDK_REACT_NATIVE = 7,
  ClientInfo_SDK_RUST = 8,
  ClientInfo_SDK_PYTHON = 9,
  ClientInfo_SDK_CPP = 10,
  ClientInfo_SDK_UNITY_WEB = 11,
  ClientInfo_SDK_NODE = 12,
  ClientInfo_SDK_ClientInfo_SDK_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClientInfo_SDK_ClientInfo_SDK_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ClientInfo_SDK_internal_data_[];
inline constexpr ClientInfo_SDK ClientInfo_SDK_SDK_MIN =
    static_cast<ClientInfo_SDK>(0);
inline constexpr ClientInfo_SDK ClientInfo_SDK_SDK_MAX =
    static_cast<ClientInfo_SDK>(12);
inline bool ClientInfo_SDK_IsValid(int value) {
  return 0 <= value && value <= 12;
}
inline constexpr int ClientInfo_SDK_SDK_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ClientInfo_SDK_descriptor();
template <typename T>
const std::string& ClientInfo_SDK_Name(T value) {
  static_assert(std::is_same<T, ClientInfo_SDK>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SDK_Name().");
  return ClientInfo_SDK_Name(static_cast<ClientInfo_SDK>(value));
}
template <>
inline const std::string& ClientInfo_SDK_Name(ClientInfo_SDK value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ClientInfo_SDK_descriptor, 0, 12>(
      static_cast<int>(value));
}
inline bool ClientInfo_SDK_Parse(
    absl::string_view name, ClientInfo_SDK* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientInfo_SDK>(ClientInfo_SDK_descriptor(), name,
                                           value);
}
enum DataStream_OperationType : int {
  DataStream_OperationType_CREATE = 0,
  DataStream_OperationType_UPDATE = 1,
  DataStream_OperationType_DELETE = 2,
  DataStream_OperationType_REACTION = 3,
  DataStream_OperationType_DataStream_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DataStream_OperationType_DataStream_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t DataStream_OperationType_internal_data_[];
inline constexpr DataStream_OperationType DataStream_OperationType_OperationType_MIN =
    static_cast<DataStream_OperationType>(0);
inline constexpr DataStream_OperationType DataStream_OperationType_OperationType_MAX =
    static_cast<DataStream_OperationType>(3);
inline bool DataStream_OperationType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int DataStream_OperationType_OperationType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DataStream_OperationType_descriptor();
template <typename T>
const std::string& DataStream_OperationType_Name(T value) {
  static_assert(std::is_same<T, DataStream_OperationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OperationType_Name().");
  return DataStream_OperationType_Name(static_cast<DataStream_OperationType>(value));
}
template <>
inline const std::string& DataStream_OperationType_Name(DataStream_OperationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataStream_OperationType_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool DataStream_OperationType_Parse(
    absl::string_view name, DataStream_OperationType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataStream_OperationType>(DataStream_OperationType_descriptor(), name,
                                           value);
}
enum AudioCodec : int {
  DEFAULT_AC = 0,
  OPUS = 1,
  AAC = 2,
  AudioCodec_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioCodec_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t AudioCodec_internal_data_[];
inline constexpr AudioCodec AudioCodec_MIN =
    static_cast<AudioCodec>(0);
inline constexpr AudioCodec AudioCodec_MAX =
    static_cast<AudioCodec>(2);
inline bool AudioCodec_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int AudioCodec_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AudioCodec_descriptor();
template <typename T>
const std::string& AudioCodec_Name(T value) {
  static_assert(std::is_same<T, AudioCodec>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioCodec_Name().");
  return AudioCodec_Name(static_cast<AudioCodec>(value));
}
template <>
inline const std::string& AudioCodec_Name(AudioCodec value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioCodec_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool AudioCodec_Parse(
    absl::string_view name, AudioCodec* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioCodec>(AudioCodec_descriptor(), name,
                                           value);
}
enum VideoCodec : int {
  DEFAULT_VC = 0,
  H264_BASELINE = 1,
  H264_MAIN = 2,
  H264_HIGH = 3,
  VP8 = 4,
  VideoCodec_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VideoCodec_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t VideoCodec_internal_data_[];
inline constexpr VideoCodec VideoCodec_MIN =
    static_cast<VideoCodec>(0);
inline constexpr VideoCodec VideoCodec_MAX =
    static_cast<VideoCodec>(4);
inline bool VideoCodec_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int VideoCodec_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VideoCodec_descriptor();
template <typename T>
const std::string& VideoCodec_Name(T value) {
  static_assert(std::is_same<T, VideoCodec>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VideoCodec_Name().");
  return VideoCodec_Name(static_cast<VideoCodec>(value));
}
template <>
inline const std::string& VideoCodec_Name(VideoCodec value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VideoCodec_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool VideoCodec_Parse(
    absl::string_view name, VideoCodec* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoCodec>(VideoCodec_descriptor(), name,
                                           value);
}
enum ImageCodec : int {
  IC_DEFAULT = 0,
  IC_JPEG = 1,
  ImageCodec_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ImageCodec_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ImageCodec_internal_data_[];
inline constexpr ImageCodec ImageCodec_MIN =
    static_cast<ImageCodec>(0);
inline constexpr ImageCodec ImageCodec_MAX =
    static_cast<ImageCodec>(1);
inline bool ImageCodec_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int ImageCodec_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ImageCodec_descriptor();
template <typename T>
const std::string& ImageCodec_Name(T value) {
  static_assert(std::is_same<T, ImageCodec>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ImageCodec_Name().");
  return ImageCodec_Name(static_cast<ImageCodec>(value));
}
template <>
inline const std::string& ImageCodec_Name(ImageCodec value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ImageCodec_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool ImageCodec_Parse(
    absl::string_view name, ImageCodec* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageCodec>(ImageCodec_descriptor(), name,
                                           value);
}
enum BackupCodecPolicy : int {
  REGRESSION = 0,
  SIMULCAST = 1,
  BackupCodecPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BackupCodecPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t BackupCodecPolicy_internal_data_[];
inline constexpr BackupCodecPolicy BackupCodecPolicy_MIN =
    static_cast<BackupCodecPolicy>(0);
inline constexpr BackupCodecPolicy BackupCodecPolicy_MAX =
    static_cast<BackupCodecPolicy>(1);
inline bool BackupCodecPolicy_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int BackupCodecPolicy_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL BackupCodecPolicy_descriptor();
template <typename T>
const std::string& BackupCodecPolicy_Name(T value) {
  static_assert(std::is_same<T, BackupCodecPolicy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BackupCodecPolicy_Name().");
  return BackupCodecPolicy_Name(static_cast<BackupCodecPolicy>(value));
}
template <>
inline const std::string& BackupCodecPolicy_Name(BackupCodecPolicy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BackupCodecPolicy_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool BackupCodecPolicy_Parse(
    absl::string_view name, BackupCodecPolicy* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<BackupCodecPolicy>(BackupCodecPolicy_descriptor(), name,
                                           value);
}
enum TrackType : int {
  AUDIO = 0,
  VIDEO = 1,
  DATA = 2,
  TrackType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrackType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrackType_internal_data_[];
inline constexpr TrackType TrackType_MIN =
    static_cast<TrackType>(0);
inline constexpr TrackType TrackType_MAX =
    static_cast<TrackType>(2);
inline bool TrackType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int TrackType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrackType_descriptor();
template <typename T>
const std::string& TrackType_Name(T value) {
  static_assert(std::is_same<T, TrackType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrackType_Name().");
  return TrackType_Name(static_cast<TrackType>(value));
}
template <>
inline const std::string& TrackType_Name(TrackType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackType_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool TrackType_Parse(
    absl::string_view name, TrackType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackType>(TrackType_descriptor(), name,
                                           value);
}
enum TrackSource : int {
  UNKNOWN = 0,
  CAMERA = 1,
  MICROPHONE = 2,
  SCREEN_SHARE = 3,
  SCREEN_SHARE_AUDIO = 4,
  TrackSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TrackSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t TrackSource_internal_data_[];
inline constexpr TrackSource TrackSource_MIN =
    static_cast<TrackSource>(0);
inline constexpr TrackSource TrackSource_MAX =
    static_cast<TrackSource>(4);
inline bool TrackSource_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int TrackSource_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL TrackSource_descriptor();
template <typename T>
const std::string& TrackSource_Name(T value) {
  static_assert(std::is_same<T, TrackSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TrackSource_Name().");
  return TrackSource_Name(static_cast<TrackSource>(value));
}
template <>
inline const std::string& TrackSource_Name(TrackSource value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TrackSource_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool TrackSource_Parse(
    absl::string_view name, TrackSource* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrackSource>(TrackSource_descriptor(), name,
                                           value);
}
enum VideoQuality : int {
  LOW = 0,
  MEDIUM = 1,
  HIGH = 2,
  OFF = 3,
  VideoQuality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VideoQuality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t VideoQuality_internal_data_[];
inline constexpr VideoQuality VideoQuality_MIN =
    static_cast<VideoQuality>(0);
inline constexpr VideoQuality VideoQuality_MAX =
    static_cast<VideoQuality>(3);
inline bool VideoQuality_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int VideoQuality_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL VideoQuality_descriptor();
template <typename T>
const std::string& VideoQuality_Name(T value) {
  static_assert(std::is_same<T, VideoQuality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VideoQuality_Name().");
  return VideoQuality_Name(static_cast<VideoQuality>(value));
}
template <>
inline const std::string& VideoQuality_Name(VideoQuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VideoQuality_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool VideoQuality_Parse(
    absl::string_view name, VideoQuality* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoQuality>(VideoQuality_descriptor(), name,
                                           value);
}
enum ConnectionQuality : int {
  POOR = 0,
  GOOD = 1,
  EXCELLENT = 2,
  LOST = 3,
  ConnectionQuality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConnectionQuality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ConnectionQuality_internal_data_[];
inline constexpr ConnectionQuality ConnectionQuality_MIN =
    static_cast<ConnectionQuality>(0);
inline constexpr ConnectionQuality ConnectionQuality_MAX =
    static_cast<ConnectionQuality>(3);
inline bool ConnectionQuality_IsValid(int value) {
  return 0 <= value && value <= 3;
}
inline constexpr int ConnectionQuality_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ConnectionQuality_descriptor();
template <typename T>
const std::string& ConnectionQuality_Name(T value) {
  static_assert(std::is_same<T, ConnectionQuality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConnectionQuality_Name().");
  return ConnectionQuality_Name(static_cast<ConnectionQuality>(value));
}
template <>
inline const std::string& ConnectionQuality_Name(ConnectionQuality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConnectionQuality_descriptor, 0, 3>(
      static_cast<int>(value));
}
inline bool ConnectionQuality_Parse(
    absl::string_view name, ConnectionQuality* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionQuality>(ConnectionQuality_descriptor(), name,
                                           value);
}
enum ClientConfigSetting : int {
  UNSET = 0,
  DISABLED = 1,
  ENABLED = 2,
  ClientConfigSetting_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClientConfigSetting_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ClientConfigSetting_internal_data_[];
inline constexpr ClientConfigSetting ClientConfigSetting_MIN =
    static_cast<ClientConfigSetting>(0);
inline constexpr ClientConfigSetting ClientConfigSetting_MAX =
    static_cast<ClientConfigSetting>(2);
inline bool ClientConfigSetting_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int ClientConfigSetting_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ClientConfigSetting_descriptor();
template <typename T>
const std::string& ClientConfigSetting_Name(T value) {
  static_assert(std::is_same<T, ClientConfigSetting>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClientConfigSetting_Name().");
  return ClientConfigSetting_Name(static_cast<ClientConfigSetting>(value));
}
template <>
inline const std::string& ClientConfigSetting_Name(ClientConfigSetting value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ClientConfigSetting_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool ClientConfigSetting_Parse(
    absl::string_view name, ClientConfigSetting* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientConfigSetting>(ClientConfigSetting_descriptor(), name,
                                           value);
}
enum DisconnectReason : int {
  UNKNOWN_REASON = 0,
  CLIENT_INITIATED = 1,
  DUPLICATE_IDENTITY = 2,
  SERVER_SHUTDOWN = 3,
  PARTICIPANT_REMOVED = 4,
  ROOM_DELETED = 5,
  STATE_MISMATCH = 6,
  JOIN_FAILURE = 7,
  MIGRATION = 8,
  SIGNAL_CLOSE = 9,
  ROOM_CLOSED = 10,
  USER_UNAVAILABLE = 11,
  USER_REJECTED = 12,
  SIP_TRUNK_FAILURE = 13,
  DisconnectReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DisconnectReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t DisconnectReason_internal_data_[];
inline constexpr DisconnectReason DisconnectReason_MIN =
    static_cast<DisconnectReason>(0);
inline constexpr DisconnectReason DisconnectReason_MAX =
    static_cast<DisconnectReason>(13);
inline bool DisconnectReason_IsValid(int value) {
  return 0 <= value && value <= 13;
}
inline constexpr int DisconnectReason_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL DisconnectReason_descriptor();
template <typename T>
const std::string& DisconnectReason_Name(T value) {
  static_assert(std::is_same<T, DisconnectReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DisconnectReason_Name().");
  return DisconnectReason_Name(static_cast<DisconnectReason>(value));
}
template <>
inline const std::string& DisconnectReason_Name(DisconnectReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DisconnectReason_descriptor, 0, 13>(
      static_cast<int>(value));
}
inline bool DisconnectReason_Parse(
    absl::string_view name, DisconnectReason* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<DisconnectReason>(DisconnectReason_descriptor(), name,
                                           value);
}
enum ReconnectReason : int {
  RR_UNKNOWN = 0,
  RR_SIGNAL_DISCONNECTED = 1,
  RR_PUBLISHER_FAILED = 2,
  RR_SUBSCRIBER_FAILED = 3,
  RR_SWITCH_CANDIDATE = 4,
  ReconnectReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ReconnectReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ReconnectReason_internal_data_[];
inline constexpr ReconnectReason ReconnectReason_MIN =
    static_cast<ReconnectReason>(0);
inline constexpr ReconnectReason ReconnectReason_MAX =
    static_cast<ReconnectReason>(4);
inline bool ReconnectReason_IsValid(int value) {
  return 0 <= value && value <= 4;
}
inline constexpr int ReconnectReason_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ReconnectReason_descriptor();
template <typename T>
const std::string& ReconnectReason_Name(T value) {
  static_assert(std::is_same<T, ReconnectReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ReconnectReason_Name().");
  return ReconnectReason_Name(static_cast<ReconnectReason>(value));
}
template <>
inline const std::string& ReconnectReason_Name(ReconnectReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ReconnectReason_descriptor, 0, 4>(
      static_cast<int>(value));
}
inline bool ReconnectReason_Parse(
    absl::string_view name, ReconnectReason* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReconnectReason>(ReconnectReason_descriptor(), name,
                                           value);
}
enum SubscriptionError : int {
  SE_UNKNOWN = 0,
  SE_CODEC_UNSUPPORTED = 1,
  SE_TRACK_NOTFOUND = 2,
  SubscriptionError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubscriptionError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t SubscriptionError_internal_data_[];
inline constexpr SubscriptionError SubscriptionError_MIN =
    static_cast<SubscriptionError>(0);
inline constexpr SubscriptionError SubscriptionError_MAX =
    static_cast<SubscriptionError>(2);
inline bool SubscriptionError_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int SubscriptionError_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SubscriptionError_descriptor();
template <typename T>
const std::string& SubscriptionError_Name(T value) {
  static_assert(std::is_same<T, SubscriptionError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubscriptionError_Name().");
  return SubscriptionError_Name(static_cast<SubscriptionError>(value));
}
template <>
inline const std::string& SubscriptionError_Name(SubscriptionError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubscriptionError_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool SubscriptionError_Parse(
    absl::string_view name, SubscriptionError* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionError>(SubscriptionError_descriptor(), name,
                                           value);
}
enum AudioTrackFeature : int {
  TF_STEREO = 0,
  TF_NO_DTX = 1,
  TF_AUTO_GAIN_CONTROL = 2,
  TF_ECHO_CANCELLATION = 3,
  TF_NOISE_SUPPRESSION = 4,
  TF_ENHANCED_NOISE_CANCELLATION = 5,
  AudioTrackFeature_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AudioTrackFeature_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t AudioTrackFeature_internal_data_[];
inline constexpr AudioTrackFeature AudioTrackFeature_MIN =
    static_cast<AudioTrackFeature>(0);
inline constexpr AudioTrackFeature AudioTrackFeature_MAX =
    static_cast<AudioTrackFeature>(5);
inline bool AudioTrackFeature_IsValid(int value) {
  return 0 <= value && value <= 5;
}
inline constexpr int AudioTrackFeature_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AudioTrackFeature_descriptor();
template <typename T>
const std::string& AudioTrackFeature_Name(T value) {
  static_assert(std::is_same<T, AudioTrackFeature>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AudioTrackFeature_Name().");
  return AudioTrackFeature_Name(static_cast<AudioTrackFeature>(value));
}
template <>
inline const std::string& AudioTrackFeature_Name(AudioTrackFeature value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AudioTrackFeature_descriptor, 0, 5>(
      static_cast<int>(value));
}
inline bool AudioTrackFeature_Parse(
    absl::string_view name, AudioTrackFeature* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioTrackFeature>(AudioTrackFeature_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class VideoLayer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.VideoLayer) */ {
 public:
  inline VideoLayer() : VideoLayer(nullptr) {}
  ~VideoLayer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VideoLayer* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VideoLayer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoLayer(::google::protobuf::internal::ConstantInitialized);

  inline VideoLayer(const VideoLayer& from) : VideoLayer(nullptr, from) {}
  inline VideoLayer(VideoLayer&& from) noexcept
      : VideoLayer(nullptr, std::move(from)) {}
  inline VideoLayer& operator=(const VideoLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoLayer& operator=(VideoLayer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoLayer& default_instance() {
    return *reinterpret_cast<const VideoLayer*>(
        &_VideoLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(VideoLayer& a, VideoLayer& b) { a.Swap(&b); }
  inline void Swap(VideoLayer* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoLayer* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoLayer* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VideoLayer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoLayer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoLayer& from) { VideoLayer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VideoLayer* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.VideoLayer"; }

 protected:
  explicit VideoLayer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VideoLayer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoLayer& from);
  VideoLayer(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VideoLayer&& from) noexcept
      : VideoLayer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQualityFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kBitrateFieldNumber = 4,
    kSsrcFieldNumber = 5,
  };
  // .livekit.VideoQuality quality = 1;
  void clear_quality() ;
  ::livekit::VideoQuality quality() const;
  void set_quality(::livekit::VideoQuality value);

  private:
  ::livekit::VideoQuality _internal_quality() const;
  void _internal_set_quality(::livekit::VideoQuality value);

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 bitrate = 4;
  void clear_bitrate() ;
  ::uint32_t bitrate() const;
  void set_bitrate(::uint32_t value);

  private:
  ::uint32_t _internal_bitrate() const;
  void _internal_set_bitrate(::uint32_t value);

  public:
  // uint32 ssrc = 5;
  void clear_ssrc() ;
  ::uint32_t ssrc() const;
  void set_ssrc(::uint32_t value);

  private:
  ::uint32_t _internal_ssrc() const;
  void _internal_set_ssrc(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.VideoLayer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VideoLayer& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int quality_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t bitrate_;
    ::uint32_t ssrc_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull VideoLayer_class_data_;
// -------------------------------------------------------------------

class VideoConfiguration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.VideoConfiguration) */ {
 public:
  inline VideoConfiguration() : VideoConfiguration(nullptr) {}
  ~VideoConfiguration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VideoConfiguration* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VideoConfiguration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoConfiguration(::google::protobuf::internal::ConstantInitialized);

  inline VideoConfiguration(const VideoConfiguration& from) : VideoConfiguration(nullptr, from) {}
  inline VideoConfiguration(VideoConfiguration&& from) noexcept
      : VideoConfiguration(nullptr, std::move(from)) {}
  inline VideoConfiguration& operator=(const VideoConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoConfiguration& operator=(VideoConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoConfiguration& default_instance() {
    return *reinterpret_cast<const VideoConfiguration*>(
        &_VideoConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(VideoConfiguration& a, VideoConfiguration& b) { a.Swap(&b); }
  inline void Swap(VideoConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoConfiguration* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VideoConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoConfiguration& from) { VideoConfiguration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VideoConfiguration* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.VideoConfiguration"; }

 protected:
  explicit VideoConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VideoConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VideoConfiguration& from);
  VideoConfiguration(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VideoConfiguration&& from) noexcept
      : VideoConfiguration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHardwareEncoderFieldNumber = 1,
  };
  // .livekit.ClientConfigSetting hardware_encoder = 1;
  void clear_hardware_encoder() ;
  ::livekit::ClientConfigSetting hardware_encoder() const;
  void set_hardware_encoder(::livekit::ClientConfigSetting value);

  private:
  ::livekit::ClientConfigSetting _internal_hardware_encoder() const;
  void _internal_set_hardware_encoder(::livekit::ClientConfigSetting value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.VideoConfiguration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VideoConfiguration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int hardware_encoder_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull VideoConfiguration_class_data_;
// -------------------------------------------------------------------

class VP8MungerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.VP8MungerState) */ {
 public:
  inline VP8MungerState() : VP8MungerState(nullptr) {}
  ~VP8MungerState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(VP8MungerState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(VP8MungerState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VP8MungerState(::google::protobuf::internal::ConstantInitialized);

  inline VP8MungerState(const VP8MungerState& from) : VP8MungerState(nullptr, from) {}
  inline VP8MungerState(VP8MungerState&& from) noexcept
      : VP8MungerState(nullptr, std::move(from)) {}
  inline VP8MungerState& operator=(const VP8MungerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VP8MungerState& operator=(VP8MungerState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VP8MungerState& default_instance() {
    return *reinterpret_cast<const VP8MungerState*>(
        &_VP8MungerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(VP8MungerState& a, VP8MungerState& b) { a.Swap(&b); }
  inline void Swap(VP8MungerState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VP8MungerState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VP8MungerState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<VP8MungerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VP8MungerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VP8MungerState& from) { VP8MungerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(VP8MungerState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.VP8MungerState"; }

 protected:
  explicit VP8MungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  VP8MungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const VP8MungerState& from);
  VP8MungerState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, VP8MungerState&& from) noexcept
      : VP8MungerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtLastPictureIdFieldNumber = 1,
    kLastTl0PicIdxFieldNumber = 3,
    kPictureIdUsedFieldNumber = 2,
    kTl0PicIdxUsedFieldNumber = 4,
    kTidUsedFieldNumber = 5,
    kKeyIdxUsedFieldNumber = 7,
    kLastKeyIdxFieldNumber = 6,
  };
  // int32 ext_last_picture_id = 1;
  void clear_ext_last_picture_id() ;
  ::int32_t ext_last_picture_id() const;
  void set_ext_last_picture_id(::int32_t value);

  private:
  ::int32_t _internal_ext_last_picture_id() const;
  void _internal_set_ext_last_picture_id(::int32_t value);

  public:
  // uint32 last_tl0_pic_idx = 3;
  void clear_last_tl0_pic_idx() ;
  ::uint32_t last_tl0_pic_idx() const;
  void set_last_tl0_pic_idx(::uint32_t value);

  private:
  ::uint32_t _internal_last_tl0_pic_idx() const;
  void _internal_set_last_tl0_pic_idx(::uint32_t value);

  public:
  // bool picture_id_used = 2;
  void clear_picture_id_used() ;
  bool picture_id_used() const;
  void set_picture_id_used(bool value);

  private:
  bool _internal_picture_id_used() const;
  void _internal_set_picture_id_used(bool value);

  public:
  // bool tl0_pic_idx_used = 4;
  void clear_tl0_pic_idx_used() ;
  bool tl0_pic_idx_used() const;
  void set_tl0_pic_idx_used(bool value);

  private:
  bool _internal_tl0_pic_idx_used() const;
  void _internal_set_tl0_pic_idx_used(bool value);

  public:
  // bool tid_used = 5;
  void clear_tid_used() ;
  bool tid_used() const;
  void set_tid_used(bool value);

  private:
  bool _internal_tid_used() const;
  void _internal_set_tid_used(bool value);

  public:
  // bool key_idx_used = 7;
  void clear_key_idx_used() ;
  bool key_idx_used() const;
  void set_key_idx_used(bool value);

  private:
  bool _internal_key_idx_used() const;
  void _internal_set_key_idx_used(bool value);

  public:
  // uint32 last_key_idx = 6;
  void clear_last_key_idx() ;
  ::uint32_t last_key_idx() const;
  void set_last_key_idx(::uint32_t value);

  private:
  ::uint32_t _internal_last_key_idx() const;
  void _internal_set_last_key_idx(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.VP8MungerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const VP8MungerState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t ext_last_picture_id_;
    ::uint32_t last_tl0_pic_idx_;
    bool picture_id_used_;
    bool tl0_pic_idx_used_;
    bool tid_used_;
    bool key_idx_used_;
    ::uint32_t last_key_idx_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull VP8MungerState_class_data_;
// -------------------------------------------------------------------

class UserPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.UserPacket) */ {
 public:
  inline UserPacket() : UserPacket(nullptr) {}
  ~UserPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserPacket* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserPacket(::google::protobuf::internal::ConstantInitialized);

  inline UserPacket(const UserPacket& from) : UserPacket(nullptr, from) {}
  inline UserPacket(UserPacket&& from) noexcept
      : UserPacket(nullptr, std::move(from)) {}
  inline UserPacket& operator=(const UserPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPacket& operator=(UserPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPacket& default_instance() {
    return *reinterpret_cast<const UserPacket*>(
        &_UserPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UserPacket& a, UserPacket& b) { a.Swap(&b); }
  inline void Swap(UserPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserPacket& from) { UserPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.UserPacket"; }

 protected:
  explicit UserPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  UserPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const UserPacket& from);
  UserPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, UserPacket&& from) noexcept
      : UserPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDestinationSidsFieldNumber = 3,
    kDestinationIdentitiesFieldNumber = 6,
    kParticipantSidFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kTopicFieldNumber = 4,
    kParticipantIdentityFieldNumber = 5,
    kIdFieldNumber = 8,
    kNonceFieldNumber = 11,
    kStartTimeFieldNumber = 9,
    kEndTimeFieldNumber = 10,
  };
  // repeated string destination_sids = 3 [deprecated = true];
  [[deprecated]]  int destination_sids_size() const;
  private:
  int _internal_destination_sids_size() const;

  public:
  [[deprecated]]  void clear_destination_sids() ;
  [[deprecated]] const std::string& destination_sids(int index) const;
  [[deprecated]] std::string* PROTOBUF_NONNULL mutable_destination_sids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_destination_sids(int index, Arg_&& value, Args_... args);
  [[deprecated]] std::string* PROTOBUF_NONNULL add_destination_sids();
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void add_destination_sids(Arg_&& value, Args_... args);
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<std::string>& destination_sids() const;
  [[deprecated]] ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_destination_sids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_destination_sids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_destination_sids();

  public:
  // repeated string destination_identities = 6 [deprecated = true];
  [[deprecated]]  int destination_identities_size() const;
  private:
  int _internal_destination_identities_size() const;

  public:
  [[deprecated]]  void clear_destination_identities() ;
  [[deprecated]] const std::string& destination_identities(int index) const;
  [[deprecated]] std::string* PROTOBUF_NONNULL mutable_destination_identities(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_destination_identities(int index, Arg_&& value, Args_... args);
  [[deprecated]] std::string* PROTOBUF_NONNULL add_destination_identities();
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void add_destination_identities(Arg_&& value, Args_... args);
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<std::string>& destination_identities() const;
  [[deprecated]] ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_destination_identities();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_destination_identities() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_destination_identities();

  public:
  // string participant_sid = 1 [deprecated = true];
  [[deprecated]]  void clear_participant_sid() ;
  [[deprecated]] const std::string& participant_sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_participant_sid(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* PROTOBUF_NONNULL mutable_participant_sid();
  [[deprecated]] [[nodiscard]] std::string* PROTOBUF_NULLABLE release_participant_sid();
  [[deprecated]] void set_allocated_participant_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_participant_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_participant_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_participant_sid();

  public:
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_payload();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_payload();
  void set_allocated_payload(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_payload() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_payload();

  public:
  // optional string topic = 4;
  bool has_topic() const;
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_topic();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_topic();
  void set_allocated_topic(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_topic() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_topic();

  public:
  // string participant_identity = 5 [deprecated = true];
  [[deprecated]]  void clear_participant_identity() ;
  [[deprecated]] const std::string& participant_identity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_participant_identity(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* PROTOBUF_NONNULL mutable_participant_identity();
  [[deprecated]] [[nodiscard]] std::string* PROTOBUF_NULLABLE release_participant_identity();
  [[deprecated]] void set_allocated_participant_identity(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_participant_identity() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_participant_identity();

  public:
  // optional string id = 8;
  bool has_id() const;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // bytes nonce = 11;
  void clear_nonce() ;
  const std::string& nonce() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nonce(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_nonce();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_nonce();
  void set_allocated_nonce(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_nonce() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_nonce();

  public:
  // optional uint64 start_time = 9;
  bool has_start_time() const;
  void clear_start_time() ;
  ::uint64_t start_time() const;
  void set_start_time(::uint64_t value);

  private:
  ::uint64_t _internal_start_time() const;
  void _internal_set_start_time(::uint64_t value);

  public:
  // optional uint64 end_time = 10;
  bool has_end_time() const;
  void clear_end_time() ;
  ::uint64_t end_time() const;
  void set_end_time(::uint64_t value);

  private:
  ::uint64_t _internal_end_time() const;
  void _internal_set_end_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.UserPacket)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 115,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const UserPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> destination_sids_;
    ::google::protobuf::RepeatedPtrField<std::string> destination_identities_;
    ::google::protobuf::internal::ArenaStringPtr participant_sid_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr participant_identity_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr nonce_;
    ::uint64_t start_time_;
    ::uint64_t end_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull UserPacket_class_data_;
// -------------------------------------------------------------------

class TranscriptionSegment final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.TranscriptionSegment) */ {
 public:
  inline TranscriptionSegment() : TranscriptionSegment(nullptr) {}
  ~TranscriptionSegment() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TranscriptionSegment* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TranscriptionSegment));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TranscriptionSegment(::google::protobuf::internal::ConstantInitialized);

  inline TranscriptionSegment(const TranscriptionSegment& from) : TranscriptionSegment(nullptr, from) {}
  inline TranscriptionSegment(TranscriptionSegment&& from) noexcept
      : TranscriptionSegment(nullptr, std::move(from)) {}
  inline TranscriptionSegment& operator=(const TranscriptionSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptionSegment& operator=(TranscriptionSegment&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranscriptionSegment& default_instance() {
    return *reinterpret_cast<const TranscriptionSegment*>(
        &_TranscriptionSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(TranscriptionSegment& a, TranscriptionSegment& b) { a.Swap(&b); }
  inline void Swap(TranscriptionSegment* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptionSegment* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranscriptionSegment* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TranscriptionSegment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TranscriptionSegment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TranscriptionSegment& from) { TranscriptionSegment::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TranscriptionSegment* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.TranscriptionSegment"; }

 protected:
  explicit TranscriptionSegment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TranscriptionSegment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TranscriptionSegment& from);
  TranscriptionSegment(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TranscriptionSegment&& from) noexcept
      : TranscriptionSegment(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kTextFieldNumber = 2,
    kLanguageFieldNumber = 6,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kFinalFieldNumber = 5,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string text = 2;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_text();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_text();
  void set_allocated_text(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_text() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_text();

  public:
  // string language = 6;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_language();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_language();
  void set_allocated_language(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_language() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_language();

  public:
  // uint64 start_time = 3;
  void clear_start_time() ;
  ::uint64_t start_time() const;
  void set_start_time(::uint64_t value);

  private:
  ::uint64_t _internal_start_time() const;
  void _internal_set_start_time(::uint64_t value);

  public:
  // uint64 end_time = 4;
  void clear_end_time() ;
  ::uint64_t end_time() const;
  void set_end_time(::uint64_t value);

  private:
  ::uint64_t _internal_end_time() const;
  void _internal_set_end_time(::uint64_t value);

  public:
  // bool final = 5;
  void clear_final() ;
  bool final() const;
  void set_final(bool value);

  private:
  bool _internal_final() const;
  void _internal_set_final(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.TranscriptionSegment)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 51,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TranscriptionSegment& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    ::uint64_t start_time_;
    ::uint64_t end_time_;
    bool final_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TranscriptionSegment_class_data_;
// -------------------------------------------------------------------

class TimedVersion final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.TimedVersion) */ {
 public:
  inline TimedVersion() : TimedVersion(nullptr) {}
  ~TimedVersion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TimedVersion* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TimedVersion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimedVersion(::google::protobuf::internal::ConstantInitialized);

  inline TimedVersion(const TimedVersion& from) : TimedVersion(nullptr, from) {}
  inline TimedVersion(TimedVersion&& from) noexcept
      : TimedVersion(nullptr, std::move(from)) {}
  inline TimedVersion& operator=(const TimedVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedVersion& operator=(TimedVersion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimedVersion& default_instance() {
    return *reinterpret_cast<const TimedVersion*>(
        &_TimedVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(TimedVersion& a, TimedVersion& b) { a.Swap(&b); }
  inline void Swap(TimedVersion* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimedVersion* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimedVersion* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TimedVersion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimedVersion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimedVersion& from) { TimedVersion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TimedVersion* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.TimedVersion"; }

 protected:
  explicit TimedVersion(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TimedVersion(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TimedVersion& from);
  TimedVersion(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TimedVersion&& from) noexcept
      : TimedVersion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUnixMicroFieldNumber = 1,
    kTicksFieldNumber = 2,
  };
  // int64 unix_micro = 1;
  void clear_unix_micro() ;
  ::int64_t unix_micro() const;
  void set_unix_micro(::int64_t value);

  private:
  ::int64_t _internal_unix_micro() const;
  void _internal_set_unix_micro(::int64_t value);

  public:
  // int32 ticks = 2;
  void clear_ticks() ;
  ::int32_t ticks() const;
  void set_ticks(::int32_t value);

  private:
  ::int32_t _internal_ticks() const;
  void _internal_set_ticks(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.TimedVersion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TimedVersion& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t unix_micro_;
    ::int32_t ticks_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TimedVersion_class_data_;
// -------------------------------------------------------------------

class SpeakerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.SpeakerInfo) */ {
 public:
  inline SpeakerInfo() : SpeakerInfo(nullptr) {}
  ~SpeakerInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpeakerInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpeakerInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpeakerInfo(::google::protobuf::internal::ConstantInitialized);

  inline SpeakerInfo(const SpeakerInfo& from) : SpeakerInfo(nullptr, from) {}
  inline SpeakerInfo(SpeakerInfo&& from) noexcept
      : SpeakerInfo(nullptr, std::move(from)) {}
  inline SpeakerInfo& operator=(const SpeakerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeakerInfo& operator=(SpeakerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeakerInfo& default_instance() {
    return *reinterpret_cast<const SpeakerInfo*>(
        &_SpeakerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(SpeakerInfo& a, SpeakerInfo& b) { a.Swap(&b); }
  inline void Swap(SpeakerInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeakerInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeakerInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpeakerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpeakerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpeakerInfo& from) { SpeakerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpeakerInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.SpeakerInfo"; }

 protected:
  explicit SpeakerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SpeakerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SpeakerInfo& from);
  SpeakerInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SpeakerInfo&& from) noexcept
      : SpeakerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kActiveFieldNumber = 3,
  };
  // string sid = 1;
  void clear_sid() ;
  const std::string& sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sid();
  void set_allocated_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sid();

  public:
  // float level = 2;
  void clear_level() ;
  float level() const;
  void set_level(float value);

  private:
  float _internal_level() const;
  void _internal_set_level(float value);

  public:
  // bool active = 3;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.SpeakerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 31,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SpeakerInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sid_;
    float level_;
    bool active_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SpeakerInfo_class_data_;
// -------------------------------------------------------------------

class SipDTMF final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.SipDTMF) */ {
 public:
  inline SipDTMF() : SipDTMF(nullptr) {}
  ~SipDTMF() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SipDTMF* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SipDTMF));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SipDTMF(::google::protobuf::internal::ConstantInitialized);

  inline SipDTMF(const SipDTMF& from) : SipDTMF(nullptr, from) {}
  inline SipDTMF(SipDTMF&& from) noexcept
      : SipDTMF(nullptr, std::move(from)) {}
  inline SipDTMF& operator=(const SipDTMF& from) {
    CopyFrom(from);
    return *this;
  }
  inline SipDTMF& operator=(SipDTMF&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SipDTMF& default_instance() {
    return *reinterpret_cast<const SipDTMF*>(
        &_SipDTMF_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(SipDTMF& a, SipDTMF& b) { a.Swap(&b); }
  inline void Swap(SipDTMF* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SipDTMF* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SipDTMF* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SipDTMF>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SipDTMF& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SipDTMF& from) { SipDTMF::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SipDTMF* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.SipDTMF"; }

 protected:
  explicit SipDTMF(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SipDTMF(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SipDTMF& from);
  SipDTMF(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SipDTMF&& from) noexcept
      : SipDTMF(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDigitFieldNumber = 4,
    kCodeFieldNumber = 3,
  };
  // string digit = 4;
  void clear_digit() ;
  const std::string& digit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_digit(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_digit();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_digit();
  void set_allocated_digit(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_digit() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_digit(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_digit();

  public:
  // uint32 code = 3;
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.SipDTMF)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 29,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SipDTMF& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr digit_;
    ::uint32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SipDTMF_class_data_;
// -------------------------------------------------------------------

class ServerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerInfo(::google::protobuf::internal::ConstantInitialized);

  inline ServerInfo(const ServerInfo& from) : ServerInfo(nullptr, from) {}
  inline ServerInfo(ServerInfo&& from) noexcept
      : ServerInfo(nullptr, std::move(from)) {}
  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *reinterpret_cast<const ServerInfo*>(
        &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(ServerInfo& a, ServerInfo& b) { a.Swap(&b); }
  inline void Swap(ServerInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerInfo& from) { ServerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ServerInfo"; }

 protected:
  explicit ServerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ServerInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ServerInfo& from);
  ServerInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ServerInfo&& from) noexcept
      : ServerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Edition = ServerInfo_Edition;
  static constexpr Edition Standard = ServerInfo_Edition_Standard;
  static constexpr Edition Cloud = ServerInfo_Edition_Cloud;
  static inline bool Edition_IsValid(int value) {
    return ServerInfo_Edition_IsValid(value);
  }
  static constexpr Edition Edition_MIN = ServerInfo_Edition_Edition_MIN;
  static constexpr Edition Edition_MAX = ServerInfo_Edition_Edition_MAX;
  static constexpr int Edition_ARRAYSIZE = ServerInfo_Edition_Edition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Edition_descriptor() {
    return ServerInfo_Edition_descriptor();
  }
  template <typename T>
  static inline const std::string& Edition_Name(T value) {
    return ServerInfo_Edition_Name(value);
  }
  static inline bool Edition_Parse(
      absl::string_view name, Edition* PROTOBUF_NONNULL value) {
    return ServerInfo_Edition_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kVersionFieldNumber = 2,
    kRegionFieldNumber = 4,
    kNodeIdFieldNumber = 5,
    kDebugInfoFieldNumber = 6,
    kEditionFieldNumber = 1,
    kProtocolFieldNumber = 3,
    kAgentProtocolFieldNumber = 7,
  };
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_version();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_version();
  void set_allocated_version(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_version() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // string region = 4;
  void clear_region() ;
  const std::string& region() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_region(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_region();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_region();
  void set_allocated_region(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_region() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_region();

  public:
  // string node_id = 5;
  void clear_node_id() ;
  const std::string& node_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_node_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_node_id();
  void set_allocated_node_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_node_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_node_id();

  public:
  // string debug_info = 6;
  void clear_debug_info() ;
  const std::string& debug_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_debug_info(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_debug_info();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_debug_info();
  void set_allocated_debug_info(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_debug_info() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_debug_info(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_debug_info();

  public:
  // .livekit.ServerInfo.Edition edition = 1;
  void clear_edition() ;
  ::livekit::ServerInfo_Edition edition() const;
  void set_edition(::livekit::ServerInfo_Edition value);

  private:
  ::livekit::ServerInfo_Edition _internal_edition() const;
  void _internal_set_edition(::livekit::ServerInfo_Edition value);

  public:
  // int32 protocol = 3;
  void clear_protocol() ;
  ::int32_t protocol() const;
  void set_protocol(::int32_t value);

  private:
  ::int32_t _internal_protocol() const;
  void _internal_set_protocol(::int32_t value);

  public:
  // int32 agent_protocol = 7;
  void clear_agent_protocol() ;
  ::int32_t agent_protocol() const;
  void set_agent_protocol(::int32_t value);

  private:
  ::int32_t _internal_agent_protocol() const;
  void _internal_set_agent_protocol(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ServerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 57,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ServerInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr region_;
    ::google::protobuf::internal::ArenaStringPtr node_id_;
    ::google::protobuf::internal::ArenaStringPtr debug_info_;
    int edition_;
    ::int32_t protocol_;
    ::int32_t agent_protocol_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ServerInfo_class_data_;
// -------------------------------------------------------------------

class RpcRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RpcRequest) */ {
 public:
  inline RpcRequest() : RpcRequest(nullptr) {}
  ~RpcRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RpcRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RpcRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcRequest(::google::protobuf::internal::ConstantInitialized);

  inline RpcRequest(const RpcRequest& from) : RpcRequest(nullptr, from) {}
  inline RpcRequest(RpcRequest&& from) noexcept
      : RpcRequest(nullptr, std::move(from)) {}
  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequest& operator=(RpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequest& default_instance() {
    return *reinterpret_cast<const RpcRequest*>(
        &_RpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(RpcRequest& a, RpcRequest& b) { a.Swap(&b); }
  inline void Swap(RpcRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RpcRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RpcRequest& from) { RpcRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RpcRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RpcRequest"; }

 protected:
  explicit RpcRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RpcRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RpcRequest& from);
  RpcRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RpcRequest&& from) noexcept
      : RpcRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPayloadFieldNumber = 3,
    kResponseTimeoutMsFieldNumber = 4,
    kVersionFieldNumber = 5,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string method = 2;
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_method();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_method();
  void set_allocated_method(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_method() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_method();

  public:
  // string payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_payload();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_payload();
  void set_allocated_payload(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_payload() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_payload();

  public:
  // uint32 response_timeout_ms = 4;
  void clear_response_timeout_ms() ;
  ::uint32_t response_timeout_ms() const;
  void set_response_timeout_ms(::uint32_t value);

  private:
  ::uint32_t _internal_response_timeout_ms() const;
  void _internal_set_response_timeout_ms(::uint32_t value);

  public:
  // uint32 version = 5;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RpcRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RpcRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    ::uint32_t response_timeout_ms_;
    ::uint32_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RpcRequest_class_data_;
// -------------------------------------------------------------------

class RpcError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RpcError) */ {
 public:
  inline RpcError() : RpcError(nullptr) {}
  ~RpcError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RpcError* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RpcError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcError(::google::protobuf::internal::ConstantInitialized);

  inline RpcError(const RpcError& from) : RpcError(nullptr, from) {}
  inline RpcError(RpcError&& from) noexcept
      : RpcError(nullptr, std::move(from)) {}
  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcError& operator=(RpcError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcError& default_instance() {
    return *reinterpret_cast<const RpcError*>(
        &_RpcError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(RpcError& a, RpcError& b) { a.Swap(&b); }
  inline void Swap(RpcError* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcError* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcError* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RpcError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RpcError& from) { RpcError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RpcError* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RpcError"; }

 protected:
  explicit RpcError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RpcError(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RpcError& from);
  RpcError(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RpcError&& from) noexcept
      : RpcError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_message();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_message();
  void set_allocated_message(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // string data = 3;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_data();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_data();
  void set_allocated_data(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_data();

  public:
  // uint32 code = 1;
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RpcError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 36,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RpcError& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RpcError_class_data_;
// -------------------------------------------------------------------

class RpcAck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RpcAck) */ {
 public:
  inline RpcAck() : RpcAck(nullptr) {}
  ~RpcAck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RpcAck* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RpcAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcAck(::google::protobuf::internal::ConstantInitialized);

  inline RpcAck(const RpcAck& from) : RpcAck(nullptr, from) {}
  inline RpcAck(RpcAck&& from) noexcept
      : RpcAck(nullptr, std::move(from)) {}
  inline RpcAck& operator=(const RpcAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcAck& operator=(RpcAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcAck& default_instance() {
    return *reinterpret_cast<const RpcAck*>(
        &_RpcAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(RpcAck& a, RpcAck& b) { a.Swap(&b); }
  inline void Swap(RpcAck* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcAck* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcAck* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RpcAck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcAck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RpcAck& from) { RpcAck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RpcAck* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RpcAck"; }

 protected:
  explicit RpcAck(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RpcAck(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RpcAck& from);
  RpcAck(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RpcAck&& from) noexcept
      : RpcAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_request_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_request_id();
  void set_allocated_request_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_request_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_request_id();

  public:
  // @@protoc_insertion_point(class_scope:livekit.RpcAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 33,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RpcAck& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RpcAck_class_data_;
// -------------------------------------------------------------------

class RTPStats_GapHistogramEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<::int32_t, ::uint32_t,
                             ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<::int32_t, ::uint32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>;
  RTPStats_GapHistogramEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTPStats_GapHistogramEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit RTPStats_GapHistogramEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_RTPStats_GapHistogramEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_livekit_5fmodels_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull RTPStats_GapHistogramEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class RTPMungerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RTPMungerState) */ {
 public:
  inline RTPMungerState() : RTPMungerState(nullptr) {}
  ~RTPMungerState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RTPMungerState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RTPMungerState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTPMungerState(::google::protobuf::internal::ConstantInitialized);

  inline RTPMungerState(const RTPMungerState& from) : RTPMungerState(nullptr, from) {}
  inline RTPMungerState(RTPMungerState&& from) noexcept
      : RTPMungerState(nullptr, std::move(from)) {}
  inline RTPMungerState& operator=(const RTPMungerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTPMungerState& operator=(RTPMungerState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTPMungerState& default_instance() {
    return *reinterpret_cast<const RTPMungerState*>(
        &_RTPMungerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(RTPMungerState& a, RTPMungerState& b) { a.Swap(&b); }
  inline void Swap(RTPMungerState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTPMungerState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTPMungerState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RTPMungerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RTPMungerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RTPMungerState& from) { RTPMungerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RTPMungerState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RTPMungerState"; }

 protected:
  explicit RTPMungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RTPMungerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTPMungerState& from);
  RTPMungerState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RTPMungerState&& from) noexcept
      : RTPMungerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtLastSequenceNumberFieldNumber = 1,
    kExtSecondLastSequenceNumberFieldNumber = 2,
    kExtLastTimestampFieldNumber = 3,
    kExtSecondLastTimestampFieldNumber = 4,
    kLastMarkerFieldNumber = 5,
    kSecondLastMarkerFieldNumber = 6,
  };
  // uint64 ext_last_sequence_number = 1;
  void clear_ext_last_sequence_number() ;
  ::uint64_t ext_last_sequence_number() const;
  void set_ext_last_sequence_number(::uint64_t value);

  private:
  ::uint64_t _internal_ext_last_sequence_number() const;
  void _internal_set_ext_last_sequence_number(::uint64_t value);

  public:
  // uint64 ext_second_last_sequence_number = 2;
  void clear_ext_second_last_sequence_number() ;
  ::uint64_t ext_second_last_sequence_number() const;
  void set_ext_second_last_sequence_number(::uint64_t value);

  private:
  ::uint64_t _internal_ext_second_last_sequence_number() const;
  void _internal_set_ext_second_last_sequence_number(::uint64_t value);

  public:
  // uint64 ext_last_timestamp = 3;
  void clear_ext_last_timestamp() ;
  ::uint64_t ext_last_timestamp() const;
  void set_ext_last_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_ext_last_timestamp() const;
  void _internal_set_ext_last_timestamp(::uint64_t value);

  public:
  // uint64 ext_second_last_timestamp = 4;
  void clear_ext_second_last_timestamp() ;
  ::uint64_t ext_second_last_timestamp() const;
  void set_ext_second_last_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_ext_second_last_timestamp() const;
  void _internal_set_ext_second_last_timestamp(::uint64_t value);

  public:
  // bool last_marker = 5;
  void clear_last_marker() ;
  bool last_marker() const;
  void set_last_marker(bool value);

  private:
  bool _internal_last_marker() const;
  void _internal_set_last_marker(bool value);

  public:
  // bool second_last_marker = 6;
  void clear_second_last_marker() ;
  bool second_last_marker() const;
  void set_second_last_marker(bool value);

  private:
  bool _internal_second_last_marker() const;
  void _internal_set_second_last_marker(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RTPMungerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RTPMungerState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t ext_last_sequence_number_;
    ::uint64_t ext_second_last_sequence_number_;
    ::uint64_t ext_last_timestamp_;
    ::uint64_t ext_second_last_timestamp_;
    bool last_marker_;
    bool second_last_marker_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RTPMungerState_class_data_;
// -------------------------------------------------------------------

class RTCPSenderReportState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RTCPSenderReportState) */ {
 public:
  inline RTCPSenderReportState() : RTCPSenderReportState(nullptr) {}
  ~RTCPSenderReportState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RTCPSenderReportState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RTCPSenderReportState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTCPSenderReportState(::google::protobuf::internal::ConstantInitialized);

  inline RTCPSenderReportState(const RTCPSenderReportState& from) : RTCPSenderReportState(nullptr, from) {}
  inline RTCPSenderReportState(RTCPSenderReportState&& from) noexcept
      : RTCPSenderReportState(nullptr, std::move(from)) {}
  inline RTCPSenderReportState& operator=(const RTCPSenderReportState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTCPSenderReportState& operator=(RTCPSenderReportState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTCPSenderReportState& default_instance() {
    return *reinterpret_cast<const RTCPSenderReportState*>(
        &_RTCPSenderReportState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(RTCPSenderReportState& a, RTCPSenderReportState& b) { a.Swap(&b); }
  inline void Swap(RTCPSenderReportState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTCPSenderReportState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTCPSenderReportState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RTCPSenderReportState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RTCPSenderReportState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RTCPSenderReportState& from) { RTCPSenderReportState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RTCPSenderReportState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RTCPSenderReportState"; }

 protected:
  explicit RTCPSenderReportState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RTCPSenderReportState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTCPSenderReportState& from);
  RTCPSenderReportState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RTCPSenderReportState&& from) noexcept
      : RTCPSenderReportState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRtpTimestampExtFieldNumber = 2,
    kNtpTimestampFieldNumber = 3,
    kRtpTimestampFieldNumber = 1,
    kPacketsFieldNumber = 6,
    kAtFieldNumber = 4,
    kAtAdjustedFieldNumber = 5,
    kOctetsFieldNumber = 7,
  };
  // uint64 rtp_timestamp_ext = 2;
  void clear_rtp_timestamp_ext() ;
  ::uint64_t rtp_timestamp_ext() const;
  void set_rtp_timestamp_ext(::uint64_t value);

  private:
  ::uint64_t _internal_rtp_timestamp_ext() const;
  void _internal_set_rtp_timestamp_ext(::uint64_t value);

  public:
  // uint64 ntp_timestamp = 3;
  void clear_ntp_timestamp() ;
  ::uint64_t ntp_timestamp() const;
  void set_ntp_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_ntp_timestamp() const;
  void _internal_set_ntp_timestamp(::uint64_t value);

  public:
  // uint32 rtp_timestamp = 1;
  void clear_rtp_timestamp() ;
  ::uint32_t rtp_timestamp() const;
  void set_rtp_timestamp(::uint32_t value);

  private:
  ::uint32_t _internal_rtp_timestamp() const;
  void _internal_set_rtp_timestamp(::uint32_t value);

  public:
  // uint32 packets = 6;
  void clear_packets() ;
  ::uint32_t packets() const;
  void set_packets(::uint32_t value);

  private:
  ::uint32_t _internal_packets() const;
  void _internal_set_packets(::uint32_t value);

  public:
  // int64 at = 4;
  void clear_at() ;
  ::int64_t at() const;
  void set_at(::int64_t value);

  private:
  ::int64_t _internal_at() const;
  void _internal_set_at(::int64_t value);

  public:
  // int64 at_adjusted = 5;
  void clear_at_adjusted() ;
  ::int64_t at_adjusted() const;
  void set_at_adjusted(::int64_t value);

  private:
  ::int64_t _internal_at_adjusted() const;
  void _internal_set_at_adjusted(::int64_t value);

  public:
  // uint64 octets = 7;
  void clear_octets() ;
  ::uint64_t octets() const;
  void set_octets(::uint64_t value);

  private:
  ::uint64_t _internal_octets() const;
  void _internal_set_octets(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RTCPSenderReportState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RTCPSenderReportState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t rtp_timestamp_ext_;
    ::uint64_t ntp_timestamp_;
    ::uint32_t rtp_timestamp_;
    ::uint32_t packets_;
    ::int64_t at_;
    ::int64_t at_adjusted_;
    ::uint64_t octets_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RTCPSenderReportState_class_data_;
// -------------------------------------------------------------------

class PlayoutDelay final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.PlayoutDelay) */ {
 public:
  inline PlayoutDelay() : PlayoutDelay(nullptr) {}
  ~PlayoutDelay() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayoutDelay* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayoutDelay));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayoutDelay(::google::protobuf::internal::ConstantInitialized);

  inline PlayoutDelay(const PlayoutDelay& from) : PlayoutDelay(nullptr, from) {}
  inline PlayoutDelay(PlayoutDelay&& from) noexcept
      : PlayoutDelay(nullptr, std::move(from)) {}
  inline PlayoutDelay& operator=(const PlayoutDelay& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayoutDelay& operator=(PlayoutDelay&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayoutDelay& default_instance() {
    return *reinterpret_cast<const PlayoutDelay*>(
        &_PlayoutDelay_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PlayoutDelay& a, PlayoutDelay& b) { a.Swap(&b); }
  inline void Swap(PlayoutDelay* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayoutDelay* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayoutDelay* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayoutDelay>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayoutDelay& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayoutDelay& from) { PlayoutDelay::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayoutDelay* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.PlayoutDelay"; }

 protected:
  explicit PlayoutDelay(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  PlayoutDelay(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PlayoutDelay& from);
  PlayoutDelay(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, PlayoutDelay&& from) noexcept
      : PlayoutDelay(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnabledFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // bool enabled = 1;
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // uint32 min = 2;
  void clear_min() ;
  ::uint32_t min() const;
  void set_min(::uint32_t value);

  private:
  ::uint32_t _internal_min() const;
  void _internal_set_min(::uint32_t value);

  public:
  // uint32 max = 3;
  void clear_max() ;
  ::uint32_t max() const;
  void set_max(::uint32_t value);

  private:
  ::uint32_t _internal_max() const;
  void _internal_set_max(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.PlayoutDelay)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const PlayoutDelay& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool enabled_;
    ::uint32_t min_;
    ::uint32_t max_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PlayoutDelay_class_data_;
// -------------------------------------------------------------------

class ParticipantTracks final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ParticipantTracks) */ {
 public:
  inline ParticipantTracks() : ParticipantTracks(nullptr) {}
  ~ParticipantTracks() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParticipantTracks* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParticipantTracks));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantTracks(::google::protobuf::internal::ConstantInitialized);

  inline ParticipantTracks(const ParticipantTracks& from) : ParticipantTracks(nullptr, from) {}
  inline ParticipantTracks(ParticipantTracks&& from) noexcept
      : ParticipantTracks(nullptr, std::move(from)) {}
  inline ParticipantTracks& operator=(const ParticipantTracks& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantTracks& operator=(ParticipantTracks&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantTracks& default_instance() {
    return *reinterpret_cast<const ParticipantTracks*>(
        &_ParticipantTracks_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(ParticipantTracks& a, ParticipantTracks& b) { a.Swap(&b); }
  inline void Swap(ParticipantTracks* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantTracks* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantTracks* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParticipantTracks>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParticipantTracks& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParticipantTracks& from) { ParticipantTracks::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParticipantTracks* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ParticipantTracks"; }

 protected:
  explicit ParticipantTracks(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParticipantTracks(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParticipantTracks& from);
  ParticipantTracks(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParticipantTracks&& from) noexcept
      : ParticipantTracks(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTrackSidsFieldNumber = 2,
    kParticipantSidFieldNumber = 1,
  };
  // repeated string track_sids = 2;
  int track_sids_size() const;
  private:
  int _internal_track_sids_size() const;

  public:
  void clear_track_sids() ;
  const std::string& track_sids(int index) const;
  std::string* PROTOBUF_NONNULL mutable_track_sids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_track_sids(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_track_sids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_track_sids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& track_sids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_track_sids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_track_sids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_track_sids();

  public:
  // string participant_sid = 1;
  void clear_participant_sid() ;
  const std::string& participant_sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_sid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_participant_sid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_participant_sid();
  void set_allocated_participant_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_participant_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_participant_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_participant_sid();

  public:
  // @@protoc_insertion_point(class_scope:livekit.ParticipantTracks)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 59,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParticipantTracks& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> track_sids_;
    ::google::protobuf::internal::ArenaStringPtr participant_sid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParticipantTracks_class_data_;
// -------------------------------------------------------------------

class ParticipantPermission final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ParticipantPermission) */ {
 public:
  inline ParticipantPermission() : ParticipantPermission(nullptr) {}
  ~ParticipantPermission() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParticipantPermission* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParticipantPermission));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantPermission(::google::protobuf::internal::ConstantInitialized);

  inline ParticipantPermission(const ParticipantPermission& from) : ParticipantPermission(nullptr, from) {}
  inline ParticipantPermission(ParticipantPermission&& from) noexcept
      : ParticipantPermission(nullptr, std::move(from)) {}
  inline ParticipantPermission& operator=(const ParticipantPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantPermission& operator=(ParticipantPermission&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantPermission& default_instance() {
    return *reinterpret_cast<const ParticipantPermission*>(
        &_ParticipantPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ParticipantPermission& a, ParticipantPermission& b) { a.Swap(&b); }
  inline void Swap(ParticipantPermission* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantPermission* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantPermission* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParticipantPermission>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParticipantPermission& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParticipantPermission& from) { ParticipantPermission::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParticipantPermission* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ParticipantPermission"; }

 protected:
  explicit ParticipantPermission(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParticipantPermission(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParticipantPermission& from);
  ParticipantPermission(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParticipantPermission&& from) noexcept
      : ParticipantPermission(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCanPublishSourcesFieldNumber = 9,
    kCanSubscribeFieldNumber = 1,
    kCanPublishFieldNumber = 2,
    kCanPublishDataFieldNumber = 3,
    kHiddenFieldNumber = 7,
    kRecorderFieldNumber = 8,
    kCanUpdateMetadataFieldNumber = 10,
    kAgentFieldNumber = 11,
    kCanSubscribeMetricsFieldNumber = 12,
  };
  // repeated .livekit.TrackSource can_publish_sources = 9;
  int can_publish_sources_size() const;
  private:
  int _internal_can_publish_sources_size() const;

  public:
  void clear_can_publish_sources() ;
  public:
  ::livekit::TrackSource can_publish_sources(int index) const;
  void set_can_publish_sources(int index, ::livekit::TrackSource value);
  void add_can_publish_sources(::livekit::TrackSource value);
  const ::google::protobuf::RepeatedField<int>& can_publish_sources() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_can_publish_sources();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_can_publish_sources() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_can_publish_sources();

  public:
  // bool can_subscribe = 1;
  void clear_can_subscribe() ;
  bool can_subscribe() const;
  void set_can_subscribe(bool value);

  private:
  bool _internal_can_subscribe() const;
  void _internal_set_can_subscribe(bool value);

  public:
  // bool can_publish = 2;
  void clear_can_publish() ;
  bool can_publish() const;
  void set_can_publish(bool value);

  private:
  bool _internal_can_publish() const;
  void _internal_set_can_publish(bool value);

  public:
  // bool can_publish_data = 3;
  void clear_can_publish_data() ;
  bool can_publish_data() const;
  void set_can_publish_data(bool value);

  private:
  bool _internal_can_publish_data() const;
  void _internal_set_can_publish_data(bool value);

  public:
  // bool hidden = 7;
  void clear_hidden() ;
  bool hidden() const;
  void set_hidden(bool value);

  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);

  public:
  // bool recorder = 8 [deprecated = true];
  [[deprecated]]  void clear_recorder() ;
  [[deprecated]] bool recorder() const;
  [[deprecated]] void set_recorder(bool value);

  private:
  bool _internal_recorder() const;
  void _internal_set_recorder(bool value);

  public:
  // bool can_update_metadata = 10;
  void clear_can_update_metadata() ;
  bool can_update_metadata() const;
  void set_can_update_metadata(bool value);

  private:
  bool _internal_can_update_metadata() const;
  void _internal_set_can_update_metadata(bool value);

  public:
  // bool agent = 11 [deprecated = true];
  [[deprecated]]  void clear_agent() ;
  [[deprecated]] bool agent() const;
  [[deprecated]] void set_agent(bool value);

  private:
  bool _internal_agent() const;
  void _internal_set_agent(bool value);

  public:
  // bool can_subscribe_metrics = 12;
  void clear_can_subscribe_metrics() ;
  bool can_subscribe_metrics() const;
  void set_can_subscribe_metrics(bool value);

  private:
  bool _internal_can_subscribe_metrics() const;
  void _internal_set_can_subscribe_metrics(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ParticipantPermission)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParticipantPermission& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> can_publish_sources_;
    ::google::protobuf::internal::CachedSize _can_publish_sources_cached_byte_size_;
    bool can_subscribe_;
    bool can_publish_;
    bool can_publish_data_;
    bool hidden_;
    bool recorder_;
    bool can_update_metadata_;
    bool agent_;
    bool can_subscribe_metrics_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParticipantPermission_class_data_;
// -------------------------------------------------------------------

class ParticipantInfo_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ParticipantInfo_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantInfo_AttributesEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit ParticipantInfo_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_ParticipantInfo_AttributesEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_livekit_5fmodels_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 56,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull ParticipantInfo_AttributesEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class Pagination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.Pagination) */ {
 public:
  inline Pagination() : Pagination(nullptr) {}
  ~Pagination() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Pagination* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Pagination));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pagination(::google::protobuf::internal::ConstantInitialized);

  inline Pagination(const Pagination& from) : Pagination(nullptr, from) {}
  inline Pagination(Pagination&& from) noexcept
      : Pagination(nullptr, std::move(from)) {}
  inline Pagination& operator=(const Pagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pagination& operator=(Pagination&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pagination& default_instance() {
    return *reinterpret_cast<const Pagination*>(
        &_Pagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Pagination& a, Pagination& b) { a.Swap(&b); }
  inline void Swap(Pagination* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pagination* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pagination* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Pagination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pagination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pagination& from) { Pagination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Pagination* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.Pagination"; }

 protected:
  explicit Pagination(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Pagination(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Pagination& from);
  Pagination(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Pagination&& from) noexcept
      : Pagination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAfterIdFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // string after_id = 1;
  void clear_after_id() ;
  const std::string& after_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_after_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_after_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_after_id();
  void set_allocated_after_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_after_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_after_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_after_id();

  public:
  // int32 limit = 2;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.Pagination)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 35,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Pagination& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr after_id_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Pagination_class_data_;
// -------------------------------------------------------------------

class Encryption final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:livekit.Encryption) */ {
 public:
  inline Encryption() : Encryption(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Encryption* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Encryption));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Encryption(::google::protobuf::internal::ConstantInitialized);

  inline Encryption(const Encryption& from) : Encryption(nullptr, from) {}
  inline Encryption(Encryption&& from) noexcept
      : Encryption(nullptr, std::move(from)) {}
  inline Encryption& operator=(const Encryption& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encryption& operator=(Encryption&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encryption& default_instance() {
    return *reinterpret_cast<const Encryption*>(
        &_Encryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Encryption& a, Encryption& b) { a.Swap(&b); }
  inline void Swap(Encryption* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encryption* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Encryption* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Encryption>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Encryption& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Encryption& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.Encryption"; }

 protected:
  explicit Encryption(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Encryption(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Encryption& from);
  Encryption(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Encryption&& from) noexcept
      : Encryption(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = Encryption_Type;
  static constexpr Type NONE = Encryption_Type_NONE;
  static constexpr Type GCM = Encryption_Type_GCM;
  static constexpr Type CUSTOM = Encryption_Type_CUSTOM;
  static inline bool Type_IsValid(int value) {
    return Encryption_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = Encryption_Type_Type_MIN;
  static constexpr Type Type_MAX = Encryption_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = Encryption_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Type_descriptor() {
    return Encryption_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return Encryption_Type_Name(value);
  }
  static inline bool Type_Parse(
      absl::string_view name, Type* PROTOBUF_NONNULL value) {
    return Encryption_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:livekit.Encryption)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Encryption& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Encryption_class_data_;
// -------------------------------------------------------------------

class DataStream_Trailer_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DataStream_Trailer_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_Trailer_AttributesEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit DataStream_Trailer_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_DataStream_Trailer_AttributesEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_livekit_5fmodels_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 59,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull DataStream_Trailer_AttributesEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class DataStream_TextHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataStream.TextHeader) */ {
 public:
  inline DataStream_TextHeader() : DataStream_TextHeader(nullptr) {}
  ~DataStream_TextHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream_TextHeader* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream_TextHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_TextHeader(::google::protobuf::internal::ConstantInitialized);

  inline DataStream_TextHeader(const DataStream_TextHeader& from) : DataStream_TextHeader(nullptr, from) {}
  inline DataStream_TextHeader(DataStream_TextHeader&& from) noexcept
      : DataStream_TextHeader(nullptr, std::move(from)) {}
  inline DataStream_TextHeader& operator=(const DataStream_TextHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream_TextHeader& operator=(DataStream_TextHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream_TextHeader& default_instance() {
    return *reinterpret_cast<const DataStream_TextHeader*>(
        &_DataStream_TextHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(DataStream_TextHeader& a, DataStream_TextHeader& b) { a.Swap(&b); }
  inline void Swap(DataStream_TextHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream_TextHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream_TextHeader* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataStream_TextHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataStream_TextHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataStream_TextHeader& from) { DataStream_TextHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataStream_TextHeader* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream.TextHeader"; }

 protected:
  explicit DataStream_TextHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream_TextHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream_TextHeader& from);
  DataStream_TextHeader(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream_TextHeader&& from) noexcept
      : DataStream_TextHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttachedStreamIdsFieldNumber = 4,
    kReplyToStreamIdFieldNumber = 3,
    kOperationTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
    kGeneratedFieldNumber = 5,
  };
  // repeated string attached_stream_ids = 4;
  int attached_stream_ids_size() const;
  private:
  int _internal_attached_stream_ids_size() const;

  public:
  void clear_attached_stream_ids() ;
  const std::string& attached_stream_ids(int index) const;
  std::string* PROTOBUF_NONNULL mutable_attached_stream_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attached_stream_ids(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_attached_stream_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_attached_stream_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& attached_stream_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_attached_stream_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_attached_stream_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_attached_stream_ids();

  public:
  // string reply_to_stream_id = 3;
  void clear_reply_to_stream_id() ;
  const std::string& reply_to_stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reply_to_stream_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_reply_to_stream_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_reply_to_stream_id();
  void set_allocated_reply_to_stream_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_reply_to_stream_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_stream_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_reply_to_stream_id();

  public:
  // .livekit.DataStream.OperationType operation_type = 1;
  void clear_operation_type() ;
  ::livekit::DataStream_OperationType operation_type() const;
  void set_operation_type(::livekit::DataStream_OperationType value);

  private:
  ::livekit::DataStream_OperationType _internal_operation_type() const;
  void _internal_set_operation_type(::livekit::DataStream_OperationType value);

  public:
  // int32 version = 2;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // bool generated = 5;
  void clear_generated() ;
  bool generated() const;
  void set_generated(bool value);

  private:
  bool _internal_generated() const;
  void _internal_set_generated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.DataStream.TextHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 75,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream_TextHeader& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> attached_stream_ids_;
    ::google::protobuf::internal::ArenaStringPtr reply_to_stream_id_;
    int operation_type_;
    ::int32_t version_;
    bool generated_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_TextHeader_class_data_;
// -------------------------------------------------------------------

class DataStream_Header_AttributesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  DataStream_Header_AttributesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_Header_AttributesEntry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit DataStream_Header_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_DataStream_Header_AttributesEntry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_livekit_5fmodels_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 58,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull DataStream_Header_AttributesEntry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class DataStream_Chunk final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataStream.Chunk) */ {
 public:
  inline DataStream_Chunk() : DataStream_Chunk(nullptr) {}
  ~DataStream_Chunk() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream_Chunk* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream_Chunk));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_Chunk(::google::protobuf::internal::ConstantInitialized);

  inline DataStream_Chunk(const DataStream_Chunk& from) : DataStream_Chunk(nullptr, from) {}
  inline DataStream_Chunk(DataStream_Chunk&& from) noexcept
      : DataStream_Chunk(nullptr, std::move(from)) {}
  inline DataStream_Chunk& operator=(const DataStream_Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream_Chunk& operator=(DataStream_Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream_Chunk& default_instance() {
    return *reinterpret_cast<const DataStream_Chunk*>(
        &_DataStream_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(DataStream_Chunk& a, DataStream_Chunk& b) { a.Swap(&b); }
  inline void Swap(DataStream_Chunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream_Chunk* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream_Chunk* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataStream_Chunk>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataStream_Chunk& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataStream_Chunk& from) { DataStream_Chunk::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataStream_Chunk* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream.Chunk"; }

 protected:
  explicit DataStream_Chunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream_Chunk(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream_Chunk& from);
  DataStream_Chunk(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream_Chunk&& from) noexcept
      : DataStream_Chunk(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamIdFieldNumber = 1,
    kContentFieldNumber = 3,
    kIvFieldNumber = 5,
    kChunkIndexFieldNumber = 2,
    kVersionFieldNumber = 4,
  };
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_stream_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_stream_id();
  void set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_stream_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_stream_id();

  public:
  // bytes content = 3;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_content();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_content();
  void set_allocated_content(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_content() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_content();

  public:
  // optional bytes iv = 5;
  bool has_iv() const;
  void clear_iv() ;
  const std::string& iv() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iv(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_iv();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_iv();
  void set_allocated_iv(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_iv() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_iv(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_iv();

  public:
  // uint64 chunk_index = 2;
  void clear_chunk_index() ;
  ::uint64_t chunk_index() const;
  void set_chunk_index(::uint64_t value);

  private:
  ::uint64_t _internal_chunk_index() const;
  void _internal_set_chunk_index(::uint64_t value);

  public:
  // int32 version = 4;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.DataStream.Chunk)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   0, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream_Chunk& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr iv_;
    ::uint64_t chunk_index_;
    ::int32_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_Chunk_class_data_;
// -------------------------------------------------------------------

class DataStream_ByteHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataStream.ByteHeader) */ {
 public:
  inline DataStream_ByteHeader() : DataStream_ByteHeader(nullptr) {}
  ~DataStream_ByteHeader() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream_ByteHeader* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream_ByteHeader));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_ByteHeader(::google::protobuf::internal::ConstantInitialized);

  inline DataStream_ByteHeader(const DataStream_ByteHeader& from) : DataStream_ByteHeader(nullptr, from) {}
  inline DataStream_ByteHeader(DataStream_ByteHeader&& from) noexcept
      : DataStream_ByteHeader(nullptr, std::move(from)) {}
  inline DataStream_ByteHeader& operator=(const DataStream_ByteHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream_ByteHeader& operator=(DataStream_ByteHeader&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream_ByteHeader& default_instance() {
    return *reinterpret_cast<const DataStream_ByteHeader*>(
        &_DataStream_ByteHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(DataStream_ByteHeader& a, DataStream_ByteHeader& b) { a.Swap(&b); }
  inline void Swap(DataStream_ByteHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream_ByteHeader* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream_ByteHeader* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataStream_ByteHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataStream_ByteHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataStream_ByteHeader& from) { DataStream_ByteHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataStream_ByteHeader* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream.ByteHeader"; }

 protected:
  explicit DataStream_ByteHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream_ByteHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream_ByteHeader& from);
  DataStream_ByteHeader(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream_ByteHeader&& from) noexcept
      : DataStream_ByteHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:livekit.DataStream.ByteHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 42,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream_ByteHeader& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_ByteHeader_class_data_;
// -------------------------------------------------------------------

class DataStream final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:livekit.DataStream) */ {
 public:
  inline DataStream() : DataStream(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream(::google::protobuf::internal::ConstantInitialized);

  inline DataStream(const DataStream& from) : DataStream(nullptr, from) {}
  inline DataStream(DataStream&& from) noexcept
      : DataStream(nullptr, std::move(from)) {}
  inline DataStream& operator=(const DataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream& operator=(DataStream&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream& default_instance() {
    return *reinterpret_cast<const DataStream*>(
        &_DataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(DataStream& a, DataStream& b) { a.Swap(&b); }
  inline void Swap(DataStream* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DataStream>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DataStream& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DataStream& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream"; }

 protected:
  explicit DataStream(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream& from);
  DataStream(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream&& from) noexcept
      : DataStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TextHeader = DataStream_TextHeader;
  using ByteHeader = DataStream_ByteHeader;
  using Header = DataStream_Header;
  using Chunk = DataStream_Chunk;
  using Trailer = DataStream_Trailer;
  using OperationType = DataStream_OperationType;
  static constexpr OperationType CREATE = DataStream_OperationType_CREATE;
  static constexpr OperationType UPDATE = DataStream_OperationType_UPDATE;
  static constexpr OperationType DELETE = DataStream_OperationType_DELETE;
  static constexpr OperationType REACTION = DataStream_OperationType_REACTION;
  static inline bool OperationType_IsValid(int value) {
    return DataStream_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN = DataStream_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX = DataStream_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE = DataStream_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL OperationType_descriptor() {
    return DataStream_OperationType_descriptor();
  }
  template <typename T>
  static inline const std::string& OperationType_Name(T value) {
    return DataStream_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(
      absl::string_view name, OperationType* PROTOBUF_NONNULL value) {
    return DataStream_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:livekit.DataStream)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_class_data_;
// -------------------------------------------------------------------

class Codec final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.Codec) */ {
 public:
  inline Codec() : Codec(nullptr) {}
  ~Codec() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Codec* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Codec));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Codec(::google::protobuf::internal::ConstantInitialized);

  inline Codec(const Codec& from) : Codec(nullptr, from) {}
  inline Codec(Codec&& from) noexcept
      : Codec(nullptr, std::move(from)) {}
  inline Codec& operator=(const Codec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Codec& operator=(Codec&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Codec& default_instance() {
    return *reinterpret_cast<const Codec*>(
        &_Codec_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Codec& a, Codec& b) { a.Swap(&b); }
  inline void Swap(Codec* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Codec* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Codec* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Codec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Codec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Codec& from) { Codec::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Codec* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.Codec"; }

 protected:
  explicit Codec(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Codec(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Codec& from);
  Codec(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Codec&& from) noexcept
      : Codec(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMimeFieldNumber = 1,
    kFmtpLineFieldNumber = 2,
  };
  // string mime = 1;
  void clear_mime() ;
  const std::string& mime() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mime();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mime();
  void set_allocated_mime(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mime() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mime(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mime();

  public:
  // string fmtp_line = 2;
  void clear_fmtp_line() ;
  const std::string& fmtp_line() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fmtp_line(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_fmtp_line();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_fmtp_line();
  void set_allocated_fmtp_line(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_fmtp_line() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_fmtp_line(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_fmtp_line();

  public:
  // @@protoc_insertion_point(class_scope:livekit.Codec)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 35,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Codec& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr mime_;
    ::google::protobuf::internal::ArenaStringPtr fmtp_line_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Codec_class_data_;
// -------------------------------------------------------------------

class ClientInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  ~ClientInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientInfo(::google::protobuf::internal::ConstantInitialized);

  inline ClientInfo(const ClientInfo& from) : ClientInfo(nullptr, from) {}
  inline ClientInfo(ClientInfo&& from) noexcept
      : ClientInfo(nullptr, std::move(from)) {}
  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInfo& default_instance() {
    return *reinterpret_cast<const ClientInfo*>(
        &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(ClientInfo& a, ClientInfo& b) { a.Swap(&b); }
  inline void Swap(ClientInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientInfo& from) { ClientInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ClientInfo"; }

 protected:
  explicit ClientInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ClientInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ClientInfo& from);
  ClientInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ClientInfo&& from) noexcept
      : ClientInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SDK = ClientInfo_SDK;
  static constexpr SDK UNKNOWN = ClientInfo_SDK_UNKNOWN;
  static constexpr SDK JS = ClientInfo_SDK_JS;
  static constexpr SDK SWIFT = ClientInfo_SDK_SWIFT;
  static constexpr SDK ANDROID = ClientInfo_SDK_ANDROID;
  static constexpr SDK FLUTTER = ClientInfo_SDK_FLUTTER;
  static constexpr SDK GO = ClientInfo_SDK_GO;
  static constexpr SDK UNITY = ClientInfo_SDK_UNITY;
  static constexpr SDK REACT_NATIVE = ClientInfo_SDK_REACT_NATIVE;
  static constexpr SDK RUST = ClientInfo_SDK_RUST;
  static constexpr SDK PYTHON = ClientInfo_SDK_PYTHON;
  static constexpr SDK CPP = ClientInfo_SDK_CPP;
  static constexpr SDK UNITY_WEB = ClientInfo_SDK_UNITY_WEB;
  static constexpr SDK NODE = ClientInfo_SDK_NODE;
  static inline bool SDK_IsValid(int value) {
    return ClientInfo_SDK_IsValid(value);
  }
  static constexpr SDK SDK_MIN = ClientInfo_SDK_SDK_MIN;
  static constexpr SDK SDK_MAX = ClientInfo_SDK_SDK_MAX;
  static constexpr int SDK_ARRAYSIZE = ClientInfo_SDK_SDK_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SDK_descriptor() {
    return ClientInfo_SDK_descriptor();
  }
  template <typename T>
  static inline const std::string& SDK_Name(T value) {
    return ClientInfo_SDK_Name(value);
  }
  static inline bool SDK_Parse(
      absl::string_view name, SDK* PROTOBUF_NONNULL value) {
    return ClientInfo_SDK_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kVersionFieldNumber = 2,
    kOsFieldNumber = 4,
    kOsVersionFieldNumber = 5,
    kDeviceModelFieldNumber = 6,
    kBrowserFieldNumber = 7,
    kBrowserVersionFieldNumber = 8,
    kAddressFieldNumber = 9,
    kNetworkFieldNumber = 10,
    kOtherSdksFieldNumber = 11,
    kSdkFieldNumber = 1,
    kProtocolFieldNumber = 3,
  };
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_version();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_version();
  void set_allocated_version(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_version() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // string os = 4;
  void clear_os() ;
  const std::string& os() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_os();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_os();
  void set_allocated_os(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_os() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_os(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_os();

  public:
  // string os_version = 5;
  void clear_os_version() ;
  const std::string& os_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os_version(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_os_version();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_os_version();
  void set_allocated_os_version(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_os_version() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_os_version(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_os_version();

  public:
  // string device_model = 6;
  void clear_device_model() ;
  const std::string& device_model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_model(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_device_model();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_device_model();
  void set_allocated_device_model(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_device_model() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_device_model(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_device_model();

  public:
  // string browser = 7;
  void clear_browser() ;
  const std::string& browser() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_browser(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_browser();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_browser();
  void set_allocated_browser(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_browser() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_browser(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_browser();

  public:
  // string browser_version = 8;
  void clear_browser_version() ;
  const std::string& browser_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_browser_version(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_browser_version();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_browser_version();
  void set_allocated_browser_version(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_browser_version() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_browser_version(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_browser_version();

  public:
  // string address = 9;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_address();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_address();
  void set_allocated_address(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_address() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_address();

  public:
  // string network = 10;
  void clear_network() ;
  const std::string& network() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_network();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_network();
  void set_allocated_network(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_network() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_network();

  public:
  // string other_sdks = 11;
  void clear_other_sdks() ;
  const std::string& other_sdks() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_other_sdks(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_other_sdks();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_other_sdks();
  void set_allocated_other_sdks(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_other_sdks() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_other_sdks(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_other_sdks();

  public:
  // .livekit.ClientInfo.SDK sdk = 1;
  void clear_sdk() ;
  ::livekit::ClientInfo_SDK sdk() const;
  void set_sdk(::livekit::ClientInfo_SDK value);

  private:
  ::livekit::ClientInfo_SDK _internal_sdk() const;
  void _internal_set_sdk(::livekit::ClientInfo_SDK value);

  public:
  // int32 protocol = 3;
  void clear_protocol() ;
  ::int32_t protocol() const;
  void set_protocol(::int32_t value);

  private:
  ::int32_t _internal_protocol() const;
  void _internal_set_protocol(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ClientInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11,
                                   0, 112,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ClientInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr os_;
    ::google::protobuf::internal::ArenaStringPtr os_version_;
    ::google::protobuf::internal::ArenaStringPtr device_model_;
    ::google::protobuf::internal::ArenaStringPtr browser_;
    ::google::protobuf::internal::ArenaStringPtr browser_version_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::google::protobuf::internal::ArenaStringPtr network_;
    ::google::protobuf::internal::ArenaStringPtr other_sdks_;
    int sdk_;
    ::int32_t protocol_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ClientInfo_class_data_;
// -------------------------------------------------------------------

class ChatMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatMessage* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage(::google::protobuf::internal::ConstantInitialized);

  inline ChatMessage(const ChatMessage& from) : ChatMessage(nullptr, from) {}
  inline ChatMessage(ChatMessage&& from) noexcept
      : ChatMessage(nullptr, std::move(from)) {}
  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *reinterpret_cast<const ChatMessage*>(
        &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(ChatMessage& a, ChatMessage& b) { a.Swap(&b); }
  inline void Swap(ChatMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from) { ChatMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatMessage* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ChatMessage"; }

 protected:
  explicit ChatMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ChatMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChatMessage& from);
  ChatMessage(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ChatMessage&& from) noexcept
      : ChatMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kEditTimestampFieldNumber = 3,
    kDeletedFieldNumber = 5,
    kGeneratedFieldNumber = 6,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_message();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_message();
  void set_allocated_message(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional int64 edit_timestamp = 3;
  bool has_edit_timestamp() const;
  void clear_edit_timestamp() ;
  ::int64_t edit_timestamp() const;
  void set_edit_timestamp(::int64_t value);

  private:
  ::int64_t _internal_edit_timestamp() const;
  void _internal_set_edit_timestamp(::int64_t value);

  public:
  // bool deleted = 5;
  void clear_deleted() ;
  bool deleted() const;
  void set_deleted(bool value);

  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);

  public:
  // bool generated = 6;
  void clear_generated() ;
  bool generated() const;
  void set_generated(bool value);

  private:
  bool _internal_generated() const;
  void _internal_set_generated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ChatMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6,
                                   0, 37,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ChatMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int64_t timestamp_;
    ::int64_t edit_timestamp_;
    bool deleted_;
    bool generated_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ChatMessage_class_data_;
// -------------------------------------------------------------------

class Transcription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.Transcription) */ {
 public:
  inline Transcription() : Transcription(nullptr) {}
  ~Transcription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Transcription* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Transcription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Transcription(::google::protobuf::internal::ConstantInitialized);

  inline Transcription(const Transcription& from) : Transcription(nullptr, from) {}
  inline Transcription(Transcription&& from) noexcept
      : Transcription(nullptr, std::move(from)) {}
  inline Transcription& operator=(const Transcription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transcription& operator=(Transcription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transcription& default_instance() {
    return *reinterpret_cast<const Transcription*>(
        &_Transcription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Transcription& a, Transcription& b) { a.Swap(&b); }
  inline void Swap(Transcription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transcription* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transcription* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Transcription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Transcription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Transcription& from) { Transcription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Transcription* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.Transcription"; }

 protected:
  explicit Transcription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Transcription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Transcription& from);
  Transcription(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Transcription&& from) noexcept
      : Transcription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSegmentsFieldNumber = 4,
    kTranscribedParticipantIdentityFieldNumber = 2,
    kTrackIdFieldNumber = 3,
  };
  // repeated .livekit.TranscriptionSegment segments = 4;
  int segments_size() const;
  private:
  int _internal_segments_size() const;

  public:
  void clear_segments() ;
  ::livekit::TranscriptionSegment* PROTOBUF_NONNULL mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>* PROTOBUF_NONNULL mutable_segments();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>& _internal_segments() const;
  ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>* PROTOBUF_NONNULL _internal_mutable_segments();
  public:
  const ::livekit::TranscriptionSegment& segments(int index) const;
  ::livekit::TranscriptionSegment* PROTOBUF_NONNULL add_segments();
  const ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>& segments() const;
  // string transcribed_participant_identity = 2;
  void clear_transcribed_participant_identity() ;
  const std::string& transcribed_participant_identity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_transcribed_participant_identity(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_transcribed_participant_identity();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_transcribed_participant_identity();
  void set_allocated_transcribed_participant_identity(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_transcribed_participant_identity() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_transcribed_participant_identity(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_transcribed_participant_identity();

  public:
  // string track_id = 3;
  void clear_track_id() ;
  const std::string& track_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_track_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_track_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_track_id();
  void set_allocated_track_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_track_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_track_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_track_id();

  public:
  // @@protoc_insertion_point(class_scope:livekit.Transcription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   1, 70,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Transcription& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::TranscriptionSegment > segments_;
    ::google::protobuf::internal::ArenaStringPtr transcribed_participant_identity_;
    ::google::protobuf::internal::ArenaStringPtr track_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Transcription_class_data_;
// -------------------------------------------------------------------

class SimulcastCodecInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.SimulcastCodecInfo) */ {
 public:
  inline SimulcastCodecInfo() : SimulcastCodecInfo(nullptr) {}
  ~SimulcastCodecInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimulcastCodecInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimulcastCodecInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimulcastCodecInfo(::google::protobuf::internal::ConstantInitialized);

  inline SimulcastCodecInfo(const SimulcastCodecInfo& from) : SimulcastCodecInfo(nullptr, from) {}
  inline SimulcastCodecInfo(SimulcastCodecInfo&& from) noexcept
      : SimulcastCodecInfo(nullptr, std::move(from)) {}
  inline SimulcastCodecInfo& operator=(const SimulcastCodecInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulcastCodecInfo& operator=(SimulcastCodecInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulcastCodecInfo& default_instance() {
    return *reinterpret_cast<const SimulcastCodecInfo*>(
        &_SimulcastCodecInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SimulcastCodecInfo& a, SimulcastCodecInfo& b) { a.Swap(&b); }
  inline void Swap(SimulcastCodecInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulcastCodecInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulcastCodecInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimulcastCodecInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimulcastCodecInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimulcastCodecInfo& from) { SimulcastCodecInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimulcastCodecInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.SimulcastCodecInfo"; }

 protected:
  explicit SimulcastCodecInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  SimulcastCodecInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SimulcastCodecInfo& from);
  SimulcastCodecInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, SimulcastCodecInfo&& from) noexcept
      : SimulcastCodecInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 4,
    kMimeTypeFieldNumber = 1,
    kMidFieldNumber = 2,
    kCidFieldNumber = 3,
  };
  // repeated .livekit.VideoLayer layers = 4;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::livekit::VideoLayer* PROTOBUF_NONNULL mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL _internal_mutable_layers();
  public:
  const ::livekit::VideoLayer& layers(int index) const;
  ::livekit::VideoLayer* PROTOBUF_NONNULL add_layers();
  const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& layers() const;
  // string mime_type = 1;
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mime_type();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mime_type();
  void set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mime_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mime_type();

  public:
  // string mid = 2;
  void clear_mid() ;
  const std::string& mid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mid();
  void set_allocated_mid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mid();

  public:
  // string cid = 3;
  void clear_cid() ;
  const std::string& cid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_cid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_cid();
  void set_allocated_cid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_cid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_cid();

  public:
  // @@protoc_insertion_point(class_scope:livekit.SimulcastCodecInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4,
                                   1, 50,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const SimulcastCodecInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::VideoLayer > layers_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr mid_;
    ::google::protobuf::internal::ArenaStringPtr cid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimulcastCodecInfo_class_data_;
// -------------------------------------------------------------------

class RpcResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RpcResponse) */ {
 public:
  inline RpcResponse() : RpcResponse(nullptr) {}
  ~RpcResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RpcResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RpcResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcResponse(::google::protobuf::internal::ConstantInitialized);

  inline RpcResponse(const RpcResponse& from) : RpcResponse(nullptr, from) {}
  inline RpcResponse(RpcResponse&& from) noexcept
      : RpcResponse(nullptr, std::move(from)) {}
  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponse& operator=(RpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponse& default_instance() {
    return *reinterpret_cast<const RpcResponse*>(
        &_RpcResponse_default_instance_);
  }
  enum ValueCase {
    kPayload = 2,
    kError = 3,
    VALUE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(RpcResponse& a, RpcResponse& b) { a.Swap(&b); }
  inline void Swap(RpcResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RpcResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RpcResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RpcResponse& from) { RpcResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RpcResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RpcResponse"; }

 protected:
  explicit RpcResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RpcResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RpcResponse& from);
  RpcResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RpcResponse&& from) noexcept
      : RpcResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_request_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_request_id();
  void set_allocated_request_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_request_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_request_id();

  public:
  // string payload = 2;
  bool has_payload() const;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_payload();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_payload();
  void set_allocated_payload(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_payload() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_payload();

  public:
  // .livekit.RpcError error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::livekit::RpcError& error() const;
  [[nodiscard]] ::livekit::RpcError* PROTOBUF_NULLABLE release_error();
  ::livekit::RpcError* PROTOBUF_NONNULL mutable_error();
  void set_allocated_error(::livekit::RpcError* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_error(::livekit::RpcError* PROTOBUF_NULLABLE value);
  ::livekit::RpcError* PROTOBUF_NULLABLE unsafe_arena_release_error();

  private:
  const ::livekit::RpcError& _internal_error() const;
  ::livekit::RpcError* PROTOBUF_NONNULL _internal_mutable_error();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:livekit.RpcResponse)
 private:
  class _Internal;
  void set_has_payload();
  void set_has_error();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 3,
                                   1, 45,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RpcResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr payload_;
      ::livekit::RpcError* PROTOBUF_NULLABLE error_;
    } value_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RpcResponse_class_data_;
// -------------------------------------------------------------------

class Room final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Room* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Room));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Room(::google::protobuf::internal::ConstantInitialized);

  inline Room(const Room& from) : Room(nullptr, from) {}
  inline Room(Room&& from) noexcept
      : Room(nullptr, std::move(from)) {}
  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *reinterpret_cast<const Room*>(
        &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Room& a, Room& b) { a.Swap(&b); }
  inline void Swap(Room* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Room>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Room& from) { Room::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Room* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.Room"; }

 protected:
  explicit Room(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Room(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Room& from);
  Room(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Room&& from) noexcept
      : Room(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEnabledCodecsFieldNumber = 7,
    kSidFieldNumber = 1,
    kNameFieldNumber = 2,
    kTurnPasswordFieldNumber = 6,
    kMetadataFieldNumber = 8,
    kVersionFieldNumber = 13,
    kEmptyTimeoutFieldNumber = 3,
    kMaxParticipantsFieldNumber = 4,
    kCreationTimeFieldNumber = 5,
    kNumParticipantsFieldNumber = 9,
    kActiveRecordingFieldNumber = 10,
    kNumPublishersFieldNumber = 11,
    kDepartureTimeoutFieldNumber = 14,
    kCreationTimeMsFieldNumber = 15,
  };
  // repeated .livekit.Codec enabled_codecs = 7;
  int enabled_codecs_size() const;
  private:
  int _internal_enabled_codecs_size() const;

  public:
  void clear_enabled_codecs() ;
  ::livekit::Codec* PROTOBUF_NONNULL mutable_enabled_codecs(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL mutable_enabled_codecs();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& _internal_enabled_codecs() const;
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL _internal_mutable_enabled_codecs();
  public:
  const ::livekit::Codec& enabled_codecs(int index) const;
  ::livekit::Codec* PROTOBUF_NONNULL add_enabled_codecs();
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& enabled_codecs() const;
  // string sid = 1;
  void clear_sid() ;
  const std::string& sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sid();
  void set_allocated_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sid();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // string turn_password = 6;
  void clear_turn_password() ;
  const std::string& turn_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turn_password(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_turn_password();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_turn_password();
  void set_allocated_turn_password(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_turn_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_turn_password(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_turn_password();

  public:
  // string metadata = 8;
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_metadata();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_metadata();
  void set_allocated_metadata(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_metadata() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_metadata();

  public:
  // .livekit.TimedVersion version = 13;
  bool has_version() const;
  void clear_version() ;
  const ::livekit::TimedVersion& version() const;
  [[nodiscard]] ::livekit::TimedVersion* PROTOBUF_NULLABLE release_version();
  ::livekit::TimedVersion* PROTOBUF_NONNULL mutable_version();
  void set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value);
  ::livekit::TimedVersion* PROTOBUF_NULLABLE unsafe_arena_release_version();

  private:
  const ::livekit::TimedVersion& _internal_version() const;
  ::livekit::TimedVersion* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // uint32 empty_timeout = 3;
  void clear_empty_timeout() ;
  ::uint32_t empty_timeout() const;
  void set_empty_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_empty_timeout() const;
  void _internal_set_empty_timeout(::uint32_t value);

  public:
  // uint32 max_participants = 4;
  void clear_max_participants() ;
  ::uint32_t max_participants() const;
  void set_max_participants(::uint32_t value);

  private:
  ::uint32_t _internal_max_participants() const;
  void _internal_set_max_participants(::uint32_t value);

  public:
  // int64 creation_time = 5;
  void clear_creation_time() ;
  ::int64_t creation_time() const;
  void set_creation_time(::int64_t value);

  private:
  ::int64_t _internal_creation_time() const;
  void _internal_set_creation_time(::int64_t value);

  public:
  // uint32 num_participants = 9;
  void clear_num_participants() ;
  ::uint32_t num_participants() const;
  void set_num_participants(::uint32_t value);

  private:
  ::uint32_t _internal_num_participants() const;
  void _internal_set_num_participants(::uint32_t value);

  public:
  // bool active_recording = 10;
  void clear_active_recording() ;
  bool active_recording() const;
  void set_active_recording(bool value);

  private:
  bool _internal_active_recording() const;
  void _internal_set_active_recording(bool value);

  public:
  // uint32 num_publishers = 11;
  void clear_num_publishers() ;
  ::uint32_t num_publishers() const;
  void set_num_publishers(::uint32_t value);

  private:
  ::uint32_t _internal_num_publishers() const;
  void _internal_set_num_publishers(::uint32_t value);

  public:
  // uint32 departure_timeout = 14;
  void clear_departure_timeout() ;
  ::uint32_t departure_timeout() const;
  void set_departure_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_departure_timeout() const;
  void _internal_set_departure_timeout(::uint32_t value);

  public:
  // int64 creation_time_ms = 15;
  void clear_creation_time_ms() ;
  ::int64_t creation_time_ms() const;
  void set_creation_time_ms(::int64_t value);

  private:
  ::int64_t _internal_creation_time_ms() const;
  void _internal_set_creation_time_ms(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.Room)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 14,
                                   2, 57,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Room& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::Codec > enabled_codecs_;
    ::google::protobuf::internal::ArenaStringPtr sid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr turn_password_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::livekit::TimedVersion* PROTOBUF_NULLABLE version_;
    ::uint32_t empty_timeout_;
    ::uint32_t max_participants_;
    ::int64_t creation_time_;
    ::uint32_t num_participants_;
    bool active_recording_;
    ::uint32_t num_publishers_;
    ::uint32_t departure_timeout_;
    ::int64_t creation_time_ms_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Room_class_data_;
// -------------------------------------------------------------------

class RTPForwarderState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RTPForwarderState) */ {
 public:
  inline RTPForwarderState() : RTPForwarderState(nullptr) {}
  ~RTPForwarderState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RTPForwarderState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RTPForwarderState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTPForwarderState(::google::protobuf::internal::ConstantInitialized);

  inline RTPForwarderState(const RTPForwarderState& from) : RTPForwarderState(nullptr, from) {}
  inline RTPForwarderState(RTPForwarderState&& from) noexcept
      : RTPForwarderState(nullptr, std::move(from)) {}
  inline RTPForwarderState& operator=(const RTPForwarderState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTPForwarderState& operator=(RTPForwarderState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTPForwarderState& default_instance() {
    return *reinterpret_cast<const RTPForwarderState*>(
        &_RTPForwarderState_default_instance_);
  }
  enum CodecMungerCase {
    kVp8Munger = 7,
    CODEC_MUNGER_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(RTPForwarderState& a, RTPForwarderState& b) { a.Swap(&b); }
  inline void Swap(RTPForwarderState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTPForwarderState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTPForwarderState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RTPForwarderState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RTPForwarderState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RTPForwarderState& from) { RTPForwarderState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RTPForwarderState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RTPForwarderState"; }

 protected:
  explicit RTPForwarderState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RTPForwarderState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTPForwarderState& from);
  RTPForwarderState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RTPForwarderState&& from) noexcept
      : RTPForwarderState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenderReportStateFieldNumber = 8,
    kRtpMungerFieldNumber = 6,
    kStartedFieldNumber = 1,
    kReferenceLayerSpatialFieldNumber = 2,
    kPreStartTimeFieldNumber = 3,
    kExtFirstTimestampFieldNumber = 4,
    kDummyStartTimestampOffsetFieldNumber = 5,
    kVp8MungerFieldNumber = 7,
  };
  // repeated .livekit.RTCPSenderReportState sender_report_state = 8;
  int sender_report_state_size() const;
  private:
  int _internal_sender_report_state_size() const;

  public:
  void clear_sender_report_state() ;
  ::livekit::RTCPSenderReportState* PROTOBUF_NONNULL mutable_sender_report_state(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>* PROTOBUF_NONNULL mutable_sender_report_state();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>& _internal_sender_report_state() const;
  ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>* PROTOBUF_NONNULL _internal_mutable_sender_report_state();
  public:
  const ::livekit::RTCPSenderReportState& sender_report_state(int index) const;
  ::livekit::RTCPSenderReportState* PROTOBUF_NONNULL add_sender_report_state();
  const ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>& sender_report_state() const;
  // .livekit.RTPMungerState rtp_munger = 6;
  bool has_rtp_munger() const;
  void clear_rtp_munger() ;
  const ::livekit::RTPMungerState& rtp_munger() const;
  [[nodiscard]] ::livekit::RTPMungerState* PROTOBUF_NULLABLE release_rtp_munger();
  ::livekit::RTPMungerState* PROTOBUF_NONNULL mutable_rtp_munger();
  void set_allocated_rtp_munger(::livekit::RTPMungerState* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rtp_munger(::livekit::RTPMungerState* PROTOBUF_NULLABLE value);
  ::livekit::RTPMungerState* PROTOBUF_NULLABLE unsafe_arena_release_rtp_munger();

  private:
  const ::livekit::RTPMungerState& _internal_rtp_munger() const;
  ::livekit::RTPMungerState* PROTOBUF_NONNULL _internal_mutable_rtp_munger();

  public:
  // bool started = 1;
  void clear_started() ;
  bool started() const;
  void set_started(bool value);

  private:
  bool _internal_started() const;
  void _internal_set_started(bool value);

  public:
  // int32 reference_layer_spatial = 2;
  void clear_reference_layer_spatial() ;
  ::int32_t reference_layer_spatial() const;
  void set_reference_layer_spatial(::int32_t value);

  private:
  ::int32_t _internal_reference_layer_spatial() const;
  void _internal_set_reference_layer_spatial(::int32_t value);

  public:
  // int64 pre_start_time = 3;
  void clear_pre_start_time() ;
  ::int64_t pre_start_time() const;
  void set_pre_start_time(::int64_t value);

  private:
  ::int64_t _internal_pre_start_time() const;
  void _internal_set_pre_start_time(::int64_t value);

  public:
  // uint64 ext_first_timestamp = 4;
  void clear_ext_first_timestamp() ;
  ::uint64_t ext_first_timestamp() const;
  void set_ext_first_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_ext_first_timestamp() const;
  void _internal_set_ext_first_timestamp(::uint64_t value);

  public:
  // uint64 dummy_start_timestamp_offset = 5;
  void clear_dummy_start_timestamp_offset() ;
  ::uint64_t dummy_start_timestamp_offset() const;
  void set_dummy_start_timestamp_offset(::uint64_t value);

  private:
  ::uint64_t _internal_dummy_start_timestamp_offset() const;
  void _internal_set_dummy_start_timestamp_offset(::uint64_t value);

  public:
  // .livekit.VP8MungerState vp8_munger = 7;
  bool has_vp8_munger() const;
  private:
  bool _internal_has_vp8_munger() const;

  public:
  void clear_vp8_munger() ;
  const ::livekit::VP8MungerState& vp8_munger() const;
  [[nodiscard]] ::livekit::VP8MungerState* PROTOBUF_NULLABLE release_vp8_munger();
  ::livekit::VP8MungerState* PROTOBUF_NONNULL mutable_vp8_munger();
  void set_allocated_vp8_munger(::livekit::VP8MungerState* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_vp8_munger(::livekit::VP8MungerState* PROTOBUF_NULLABLE value);
  ::livekit::VP8MungerState* PROTOBUF_NULLABLE unsafe_arena_release_vp8_munger();

  private:
  const ::livekit::VP8MungerState& _internal_vp8_munger() const;
  ::livekit::VP8MungerState* PROTOBUF_NONNULL _internal_mutable_vp8_munger();

  public:
  void clear_codec_munger();
  CodecMungerCase codec_munger_case() const;
  // @@protoc_insertion_point(class_scope:livekit.RTPForwarderState)
 private:
  class _Internal;
  void set_has_vp8_munger();
  inline bool has_codec_munger() const;
  inline void clear_has_codec_munger();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RTPForwarderState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::RTCPSenderReportState > sender_report_state_;
    ::livekit::RTPMungerState* PROTOBUF_NULLABLE rtp_munger_;
    bool started_;
    ::int32_t reference_layer_spatial_;
    ::int64_t pre_start_time_;
    ::uint64_t ext_first_timestamp_;
    ::uint64_t dummy_start_timestamp_offset_;
    union CodecMungerUnion {
      constexpr CodecMungerUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::livekit::VP8MungerState* PROTOBUF_NULLABLE vp8_munger_;
    } codec_munger_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RTPForwarderState_class_data_;
// -------------------------------------------------------------------

class RTPDrift final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RTPDrift) */ {
 public:
  inline RTPDrift() : RTPDrift(nullptr) {}
  ~RTPDrift() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RTPDrift* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RTPDrift));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTPDrift(::google::protobuf::internal::ConstantInitialized);

  inline RTPDrift(const RTPDrift& from) : RTPDrift(nullptr, from) {}
  inline RTPDrift(RTPDrift&& from) noexcept
      : RTPDrift(nullptr, std::move(from)) {}
  inline RTPDrift& operator=(const RTPDrift& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTPDrift& operator=(RTPDrift&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTPDrift& default_instance() {
    return *reinterpret_cast<const RTPDrift*>(
        &_RTPDrift_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(RTPDrift& a, RTPDrift& b) { a.Swap(&b); }
  inline void Swap(RTPDrift* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTPDrift* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTPDrift* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RTPDrift>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RTPDrift& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RTPDrift& from) { RTPDrift::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RTPDrift* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RTPDrift"; }

 protected:
  explicit RTPDrift(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RTPDrift(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTPDrift& from);
  RTPDrift(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RTPDrift&& from) noexcept
      : RTPDrift(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kDurationFieldNumber = 3,
    kStartTimestampFieldNumber = 4,
    kEndTimestampFieldNumber = 5,
    kRtpClockTicksFieldNumber = 6,
    kDriftSamplesFieldNumber = 7,
    kDriftMsFieldNumber = 8,
    kClockRateFieldNumber = 9,
  };
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_start_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_end_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_end_time();

  public:
  // double duration = 3;
  void clear_duration() ;
  double duration() const;
  void set_duration(double value);

  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);

  public:
  // uint64 start_timestamp = 4;
  void clear_start_timestamp() ;
  ::uint64_t start_timestamp() const;
  void set_start_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::uint64_t value);

  public:
  // uint64 end_timestamp = 5;
  void clear_end_timestamp() ;
  ::uint64_t end_timestamp() const;
  void set_end_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_end_timestamp() const;
  void _internal_set_end_timestamp(::uint64_t value);

  public:
  // uint64 rtp_clock_ticks = 6;
  void clear_rtp_clock_ticks() ;
  ::uint64_t rtp_clock_ticks() const;
  void set_rtp_clock_ticks(::uint64_t value);

  private:
  ::uint64_t _internal_rtp_clock_ticks() const;
  void _internal_set_rtp_clock_ticks(::uint64_t value);

  public:
  // int64 drift_samples = 7;
  void clear_drift_samples() ;
  ::int64_t drift_samples() const;
  void set_drift_samples(::int64_t value);

  private:
  ::int64_t _internal_drift_samples() const;
  void _internal_set_drift_samples(::int64_t value);

  public:
  // double drift_ms = 8;
  void clear_drift_ms() ;
  double drift_ms() const;
  void set_drift_ms(double value);

  private:
  double _internal_drift_ms() const;
  void _internal_set_drift_ms(double value);

  public:
  // double clock_rate = 9;
  void clear_clock_rate() ;
  double clock_rate() const;
  void set_clock_rate(double value);

  private:
  double _internal_clock_rate() const;
  void _internal_set_clock_rate(double value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RTPDrift)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RTPDrift& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE start_time_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE end_time_;
    double duration_;
    ::uint64_t start_timestamp_;
    ::uint64_t end_timestamp_;
    ::uint64_t rtp_clock_ticks_;
    ::int64_t drift_samples_;
    double drift_ms_;
    double clock_rate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RTPDrift_class_data_;
// -------------------------------------------------------------------

class DisabledCodecs final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DisabledCodecs) */ {
 public:
  inline DisabledCodecs() : DisabledCodecs(nullptr) {}
  ~DisabledCodecs() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DisabledCodecs* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DisabledCodecs));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DisabledCodecs(::google::protobuf::internal::ConstantInitialized);

  inline DisabledCodecs(const DisabledCodecs& from) : DisabledCodecs(nullptr, from) {}
  inline DisabledCodecs(DisabledCodecs&& from) noexcept
      : DisabledCodecs(nullptr, std::move(from)) {}
  inline DisabledCodecs& operator=(const DisabledCodecs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisabledCodecs& operator=(DisabledCodecs&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisabledCodecs& default_instance() {
    return *reinterpret_cast<const DisabledCodecs*>(
        &_DisabledCodecs_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(DisabledCodecs& a, DisabledCodecs& b) { a.Swap(&b); }
  inline void Swap(DisabledCodecs* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisabledCodecs* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisabledCodecs* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DisabledCodecs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DisabledCodecs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DisabledCodecs& from) { DisabledCodecs::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DisabledCodecs* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DisabledCodecs"; }

 protected:
  explicit DisabledCodecs(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DisabledCodecs(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DisabledCodecs& from);
  DisabledCodecs(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DisabledCodecs&& from) noexcept
      : DisabledCodecs(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCodecsFieldNumber = 1,
    kPublishFieldNumber = 2,
  };
  // repeated .livekit.Codec codecs = 1;
  int codecs_size() const;
  private:
  int _internal_codecs_size() const;

  public:
  void clear_codecs() ;
  ::livekit::Codec* PROTOBUF_NONNULL mutable_codecs(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL mutable_codecs();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& _internal_codecs() const;
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL _internal_mutable_codecs();
  public:
  const ::livekit::Codec& codecs(int index) const;
  ::livekit::Codec* PROTOBUF_NONNULL add_codecs();
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& codecs() const;
  // repeated .livekit.Codec publish = 2;
  int publish_size() const;
  private:
  int _internal_publish_size() const;

  public:
  void clear_publish() ;
  ::livekit::Codec* PROTOBUF_NONNULL mutable_publish(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL mutable_publish();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& _internal_publish() const;
  ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL _internal_mutable_publish();
  public:
  const ::livekit::Codec& publish(int index) const;
  ::livekit::Codec* PROTOBUF_NONNULL add_publish();
  const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& publish() const;
  // @@protoc_insertion_point(class_scope:livekit.DisabledCodecs)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DisabledCodecs& from_msg);
    ::google::protobuf::RepeatedPtrField< ::livekit::Codec > codecs_;
    ::google::protobuf::RepeatedPtrField< ::livekit::Codec > publish_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DisabledCodecs_class_data_;
// -------------------------------------------------------------------

class DataStream_Trailer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataStream.Trailer) */ {
 public:
  inline DataStream_Trailer() : DataStream_Trailer(nullptr) {}
  ~DataStream_Trailer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream_Trailer* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream_Trailer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_Trailer(::google::protobuf::internal::ConstantInitialized);

  inline DataStream_Trailer(const DataStream_Trailer& from) : DataStream_Trailer(nullptr, from) {}
  inline DataStream_Trailer(DataStream_Trailer&& from) noexcept
      : DataStream_Trailer(nullptr, std::move(from)) {}
  inline DataStream_Trailer& operator=(const DataStream_Trailer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream_Trailer& operator=(DataStream_Trailer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream_Trailer& default_instance() {
    return *reinterpret_cast<const DataStream_Trailer*>(
        &_DataStream_Trailer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(DataStream_Trailer& a, DataStream_Trailer& b) { a.Swap(&b); }
  inline void Swap(DataStream_Trailer* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream_Trailer* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream_Trailer* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataStream_Trailer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataStream_Trailer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataStream_Trailer& from) { DataStream_Trailer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataStream_Trailer* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream.Trailer"; }

 protected:
  explicit DataStream_Trailer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream_Trailer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream_Trailer& from);
  DataStream_Trailer(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream_Trailer&& from) noexcept
      : DataStream_Trailer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 3,
    kStreamIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // map<string, string> attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_attributes();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_stream_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_stream_id();
  void set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_stream_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_stream_id();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_reason();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_reason();
  void set_allocated_reason(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_reason() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:livekit.DataStream.Trailer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 3,
                                   1, 60,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream_Trailer& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<DataStream_Trailer_AttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_Trailer_class_data_;
// -------------------------------------------------------------------

class DataStream_Header final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataStream.Header) */ {
 public:
  inline DataStream_Header() : DataStream_Header(nullptr) {}
  ~DataStream_Header() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataStream_Header* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataStream_Header));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataStream_Header(::google::protobuf::internal::ConstantInitialized);

  inline DataStream_Header(const DataStream_Header& from) : DataStream_Header(nullptr, from) {}
  inline DataStream_Header(DataStream_Header&& from) noexcept
      : DataStream_Header(nullptr, std::move(from)) {}
  inline DataStream_Header& operator=(const DataStream_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataStream_Header& operator=(DataStream_Header&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataStream_Header& default_instance() {
    return *reinterpret_cast<const DataStream_Header*>(
        &_DataStream_Header_default_instance_);
  }
  enum ContentHeaderCase {
    kTextHeader = 9,
    kByteHeader = 10,
    CONTENT_HEADER_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(DataStream_Header& a, DataStream_Header& b) { a.Swap(&b); }
  inline void Swap(DataStream_Header* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataStream_Header* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataStream_Header* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataStream_Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataStream_Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataStream_Header& from) { DataStream_Header::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataStream_Header* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataStream.Header"; }

 protected:
  explicit DataStream_Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataStream_Header(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataStream_Header& from);
  DataStream_Header(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataStream_Header&& from) noexcept
      : DataStream_Header(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttributesFieldNumber = 8,
    kStreamIdFieldNumber = 1,
    kTopicFieldNumber = 3,
    kMimeTypeFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kTotalLengthFieldNumber = 5,
    kEncryptionTypeFieldNumber = 7,
    kTextHeaderFieldNumber = 9,
    kByteHeaderFieldNumber = 10,
  };
  // map<string, string> attributes = 8;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_attributes();

  public:
  // string stream_id = 1;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_stream_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_stream_id();
  void set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_stream_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_stream_id();

  public:
  // string topic = 3;
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_topic();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_topic();
  void set_allocated_topic(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_topic() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_topic();

  public:
  // string mime_type = 4;
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mime_type();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mime_type();
  void set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mime_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mime_type();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional uint64 total_length = 5;
  bool has_total_length() const;
  void clear_total_length() ;
  ::uint64_t total_length() const;
  void set_total_length(::uint64_t value);

  private:
  ::uint64_t _internal_total_length() const;
  void _internal_set_total_length(::uint64_t value);

  public:
  // .livekit.Encryption.Type encryption_type = 7;
  void clear_encryption_type() ;
  ::livekit::Encryption_Type encryption_type() const;
  void set_encryption_type(::livekit::Encryption_Type value);

  private:
  ::livekit::Encryption_Type _internal_encryption_type() const;
  void _internal_set_encryption_type(::livekit::Encryption_Type value);

  public:
  // .livekit.DataStream.TextHeader text_header = 9;
  bool has_text_header() const;
  private:
  bool _internal_has_text_header() const;

  public:
  void clear_text_header() ;
  const ::livekit::DataStream_TextHeader& text_header() const;
  [[nodiscard]] ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE release_text_header();
  ::livekit::DataStream_TextHeader* PROTOBUF_NONNULL mutable_text_header();
  void set_allocated_text_header(::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_text_header(::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE value);
  ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE unsafe_arena_release_text_header();

  private:
  const ::livekit::DataStream_TextHeader& _internal_text_header() const;
  ::livekit::DataStream_TextHeader* PROTOBUF_NONNULL _internal_mutable_text_header();

  public:
  // .livekit.DataStream.ByteHeader byte_header = 10;
  bool has_byte_header() const;
  private:
  bool _internal_has_byte_header() const;

  public:
  void clear_byte_header() ;
  const ::livekit::DataStream_ByteHeader& byte_header() const;
  [[nodiscard]] ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE release_byte_header();
  ::livekit::DataStream_ByteHeader* PROTOBUF_NONNULL mutable_byte_header();
  void set_allocated_byte_header(::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_byte_header(::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE value);
  ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE unsafe_arena_release_byte_header();

  private:
  const ::livekit::DataStream_ByteHeader& _internal_byte_header() const;
  ::livekit::DataStream_ByteHeader* PROTOBUF_NONNULL _internal_mutable_byte_header();

  public:
  void clear_content_header();
  ContentHeaderCase content_header_case() const;
  // @@protoc_insertion_point(class_scope:livekit.DataStream.Header)
 private:
  class _Internal;
  void set_has_text_header();
  void set_has_byte_header();
  inline bool has_content_header() const;
  inline void clear_has_content_header();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 9,
                                   3, 75,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataStream_Header& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<DataStream_Header_AttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::int64_t timestamp_;
    ::uint64_t total_length_;
    int encryption_type_;
    union ContentHeaderUnion {
      constexpr ContentHeaderUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE text_header_;
      ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE byte_header_;
    } content_header_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataStream_Header_class_data_;
// -------------------------------------------------------------------

class ActiveSpeakerUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ActiveSpeakerUpdate) */ {
 public:
  inline ActiveSpeakerUpdate() : ActiveSpeakerUpdate(nullptr) {}
  ~ActiveSpeakerUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ActiveSpeakerUpdate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ActiveSpeakerUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActiveSpeakerUpdate(::google::protobuf::internal::ConstantInitialized);

  inline ActiveSpeakerUpdate(const ActiveSpeakerUpdate& from) : ActiveSpeakerUpdate(nullptr, from) {}
  inline ActiveSpeakerUpdate(ActiveSpeakerUpdate&& from) noexcept
      : ActiveSpeakerUpdate(nullptr, std::move(from)) {}
  inline ActiveSpeakerUpdate& operator=(const ActiveSpeakerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveSpeakerUpdate& operator=(ActiveSpeakerUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveSpeakerUpdate& default_instance() {
    return *reinterpret_cast<const ActiveSpeakerUpdate*>(
        &_ActiveSpeakerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ActiveSpeakerUpdate& a, ActiveSpeakerUpdate& b) { a.Swap(&b); }
  inline void Swap(ActiveSpeakerUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveSpeakerUpdate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveSpeakerUpdate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ActiveSpeakerUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActiveSpeakerUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActiveSpeakerUpdate& from) { ActiveSpeakerUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ActiveSpeakerUpdate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ActiveSpeakerUpdate"; }

 protected:
  explicit ActiveSpeakerUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ActiveSpeakerUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ActiveSpeakerUpdate& from);
  ActiveSpeakerUpdate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ActiveSpeakerUpdate&& from) noexcept
      : ActiveSpeakerUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpeakersFieldNumber = 1,
  };
  // repeated .livekit.SpeakerInfo speakers = 1;
  int speakers_size() const;
  private:
  int _internal_speakers_size() const;

  public:
  void clear_speakers() ;
  ::livekit::SpeakerInfo* PROTOBUF_NONNULL mutable_speakers(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>* PROTOBUF_NONNULL mutable_speakers();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>& _internal_speakers() const;
  ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>* PROTOBUF_NONNULL _internal_mutable_speakers();
  public:
  const ::livekit::SpeakerInfo& speakers(int index) const;
  ::livekit::SpeakerInfo* PROTOBUF_NONNULL add_speakers();
  const ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>& speakers() const;
  // @@protoc_insertion_point(class_scope:livekit.ActiveSpeakerUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ActiveSpeakerUpdate& from_msg);
    ::google::protobuf::RepeatedPtrField< ::livekit::SpeakerInfo > speakers_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ActiveSpeakerUpdate_class_data_;
// -------------------------------------------------------------------

class TrackInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.TrackInfo) */ {
 public:
  inline TrackInfo() : TrackInfo(nullptr) {}
  ~TrackInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TrackInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TrackInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TrackInfo(::google::protobuf::internal::ConstantInitialized);

  inline TrackInfo(const TrackInfo& from) : TrackInfo(nullptr, from) {}
  inline TrackInfo(TrackInfo&& from) noexcept
      : TrackInfo(nullptr, std::move(from)) {}
  inline TrackInfo& operator=(const TrackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackInfo& operator=(TrackInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackInfo& default_instance() {
    return *reinterpret_cast<const TrackInfo*>(
        &_TrackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(TrackInfo& a, TrackInfo& b) { a.Swap(&b); }
  inline void Swap(TrackInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TrackInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrackInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TrackInfo& from) { TrackInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TrackInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.TrackInfo"; }

 protected:
  explicit TrackInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TrackInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TrackInfo& from);
  TrackInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TrackInfo&& from) noexcept
      : TrackInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 10,
    kCodecsFieldNumber = 13,
    kAudioFeaturesFieldNumber = 19,
    kSidFieldNumber = 1,
    kNameFieldNumber = 3,
    kMimeTypeFieldNumber = 11,
    kMidFieldNumber = 12,
    kStreamFieldNumber = 17,
    kVersionFieldNumber = 18,
    kTypeFieldNumber = 2,
    kWidthFieldNumber = 5,
    kHeightFieldNumber = 6,
    kMutedFieldNumber = 4,
    kSimulcastFieldNumber = 7,
    kDisableDtxFieldNumber = 8,
    kStereoFieldNumber = 14,
    kSourceFieldNumber = 9,
    kDisableRedFieldNumber = 15,
    kEncryptionFieldNumber = 16,
    kBackupCodecPolicyFieldNumber = 20,
  };
  // repeated .livekit.VideoLayer layers = 10;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::livekit::VideoLayer* PROTOBUF_NONNULL mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL _internal_mutable_layers();
  public:
  const ::livekit::VideoLayer& layers(int index) const;
  ::livekit::VideoLayer* PROTOBUF_NONNULL add_layers();
  const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& layers() const;
  // repeated .livekit.SimulcastCodecInfo codecs = 13;
  int codecs_size() const;
  private:
  int _internal_codecs_size() const;

  public:
  void clear_codecs() ;
  ::livekit::SimulcastCodecInfo* PROTOBUF_NONNULL mutable_codecs(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>* PROTOBUF_NONNULL mutable_codecs();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>& _internal_codecs() const;
  ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>* PROTOBUF_NONNULL _internal_mutable_codecs();
  public:
  const ::livekit::SimulcastCodecInfo& codecs(int index) const;
  ::livekit::SimulcastCodecInfo* PROTOBUF_NONNULL add_codecs();
  const ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>& codecs() const;
  // repeated .livekit.AudioTrackFeature audio_features = 19;
  int audio_features_size() const;
  private:
  int _internal_audio_features_size() const;

  public:
  void clear_audio_features() ;
  public:
  ::livekit::AudioTrackFeature audio_features(int index) const;
  void set_audio_features(int index, ::livekit::AudioTrackFeature value);
  void add_audio_features(::livekit::AudioTrackFeature value);
  const ::google::protobuf::RepeatedField<int>& audio_features() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL mutable_audio_features();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_audio_features() const;
  ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL _internal_mutable_audio_features();

  public:
  // string sid = 1;
  void clear_sid() ;
  const std::string& sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sid();
  void set_allocated_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sid();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // string mime_type = 11;
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mime_type();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mime_type();
  void set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mime_type() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mime_type();

  public:
  // string mid = 12;
  void clear_mid() ;
  const std::string& mid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_mid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_mid();
  void set_allocated_mid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_mid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_mid();

  public:
  // string stream = 17;
  void clear_stream() ;
  const std::string& stream() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_stream();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_stream();
  void set_allocated_stream(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_stream() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_stream(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_stream();

  public:
  // .livekit.TimedVersion version = 18;
  bool has_version() const;
  void clear_version() ;
  const ::livekit::TimedVersion& version() const;
  [[nodiscard]] ::livekit::TimedVersion* PROTOBUF_NULLABLE release_version();
  ::livekit::TimedVersion* PROTOBUF_NONNULL mutable_version();
  void set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value);
  ::livekit::TimedVersion* PROTOBUF_NULLABLE unsafe_arena_release_version();

  private:
  const ::livekit::TimedVersion& _internal_version() const;
  ::livekit::TimedVersion* PROTOBUF_NONNULL _internal_mutable_version();

  public:
  // .livekit.TrackType type = 2;
  void clear_type() ;
  ::livekit::TrackType type() const;
  void set_type(::livekit::TrackType value);

  private:
  ::livekit::TrackType _internal_type() const;
  void _internal_set_type(::livekit::TrackType value);

  public:
  // uint32 width = 5;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 6;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // bool muted = 4;
  void clear_muted() ;
  bool muted() const;
  void set_muted(bool value);

  private:
  bool _internal_muted() const;
  void _internal_set_muted(bool value);

  public:
  // bool simulcast = 7;
  void clear_simulcast() ;
  bool simulcast() const;
  void set_simulcast(bool value);

  private:
  bool _internal_simulcast() const;
  void _internal_set_simulcast(bool value);

  public:
  // bool disable_dtx = 8;
  void clear_disable_dtx() ;
  bool disable_dtx() const;
  void set_disable_dtx(bool value);

  private:
  bool _internal_disable_dtx() const;
  void _internal_set_disable_dtx(bool value);

  public:
  // bool stereo = 14;
  void clear_stereo() ;
  bool stereo() const;
  void set_stereo(bool value);

  private:
  bool _internal_stereo() const;
  void _internal_set_stereo(bool value);

  public:
  // .livekit.TrackSource source = 9;
  void clear_source() ;
  ::livekit::TrackSource source() const;
  void set_source(::livekit::TrackSource value);

  private:
  ::livekit::TrackSource _internal_source() const;
  void _internal_set_source(::livekit::TrackSource value);

  public:
  // bool disable_red = 15;
  void clear_disable_red() ;
  bool disable_red() const;
  void set_disable_red(bool value);

  private:
  bool _internal_disable_red() const;
  void _internal_set_disable_red(bool value);

  public:
  // .livekit.Encryption.Type encryption = 16;
  void clear_encryption() ;
  ::livekit::Encryption_Type encryption() const;
  void set_encryption(::livekit::Encryption_Type value);

  private:
  ::livekit::Encryption_Type _internal_encryption() const;
  void _internal_set_encryption(::livekit::Encryption_Type value);

  public:
  // .livekit.BackupCodecPolicy backup_codec_policy = 20;
  void clear_backup_codec_policy() ;
  ::livekit::BackupCodecPolicy backup_codec_policy() const;
  void set_backup_codec_policy(::livekit::BackupCodecPolicy value);

  private:
  ::livekit::BackupCodecPolicy _internal_backup_codec_policy() const;
  void _internal_set_backup_codec_policy(::livekit::BackupCodecPolicy value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.TrackInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 20,
                                   3, 67,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TrackInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::VideoLayer > layers_;
    ::google::protobuf::RepeatedPtrField< ::livekit::SimulcastCodecInfo > codecs_;
    ::google::protobuf::RepeatedField<int> audio_features_;
    ::google::protobuf::internal::CachedSize _audio_features_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr sid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr mid_;
    ::google::protobuf::internal::ArenaStringPtr stream_;
    ::livekit::TimedVersion* PROTOBUF_NULLABLE version_;
    int type_;
    ::uint32_t width_;
    ::uint32_t height_;
    bool muted_;
    bool simulcast_;
    bool disable_dtx_;
    bool stereo_;
    int source_;
    bool disable_red_;
    int encryption_;
    int backup_codec_policy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TrackInfo_class_data_;
// -------------------------------------------------------------------

class RTPStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.RTPStats) */ {
 public:
  inline RTPStats() : RTPStats(nullptr) {}
  ~RTPStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RTPStats* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RTPStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RTPStats(::google::protobuf::internal::ConstantInitialized);

  inline RTPStats(const RTPStats& from) : RTPStats(nullptr, from) {}
  inline RTPStats(RTPStats&& from) noexcept
      : RTPStats(nullptr, std::move(from)) {}
  inline RTPStats& operator=(const RTPStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RTPStats& operator=(RTPStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RTPStats& default_instance() {
    return *reinterpret_cast<const RTPStats*>(
        &_RTPStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(RTPStats& a, RTPStats& b) { a.Swap(&b); }
  inline void Swap(RTPStats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RTPStats* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RTPStats* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RTPStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RTPStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RTPStats& from) { RTPStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RTPStats* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.RTPStats"; }

 protected:
  explicit RTPStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RTPStats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RTPStats& from);
  RTPStats(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RTPStats&& from) noexcept
      : RTPStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGapHistogramFieldNumber = 24,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kLastPliFieldNumber = 28,
    kLastFirFieldNumber = 30,
    kLastKeyFrameFieldNumber = 34,
    kLastLayerLockPliFieldNumber = 36,
    kPacketDriftFieldNumber = 44,
    kNtpReportDriftFieldNumber = 45,
    kRebasedReportDriftFieldNumber = 46,
    kReceivedReportDriftFieldNumber = 47,
    kDurationFieldNumber = 3,
    kPacketRateFieldNumber = 5,
    kBytesFieldNumber = 6,
    kPacketsFieldNumber = 4,
    kPacketsLostFieldNumber = 8,
    kBitrateFieldNumber = 7,
    kPacketLossRateFieldNumber = 9,
    kPacketLossPercentageFieldNumber = 10,
    kPacketsDuplicateFieldNumber = 11,
    kPacketDuplicateRateFieldNumber = 12,
    kBytesDuplicateFieldNumber = 13,
    kBitrateDuplicateFieldNumber = 14,
    kPacketPaddingRateFieldNumber = 16,
    kBytesPaddingFieldNumber = 17,
    kPacketsPaddingFieldNumber = 15,
    kPacketsOutOfOrderFieldNumber = 19,
    kBitratePaddingFieldNumber = 18,
    kFrameRateFieldNumber = 21,
    kJitterCurrentFieldNumber = 22,
    kFramesFieldNumber = 20,
    kNacksFieldNumber = 25,
    kJitterMaxFieldNumber = 23,
    kNackMissesFieldNumber = 26,
    kPlisFieldNumber = 27,
    kFirsFieldNumber = 29,
    kRttCurrentFieldNumber = 31,
    kRttMaxFieldNumber = 32,
    kKeyFramesFieldNumber = 33,
    kLayerLockPlisFieldNumber = 35,
    kNackAcksFieldNumber = 37,
    kHeaderBytesFieldNumber = 39,
    kHeaderBytesDuplicateFieldNumber = 40,
    kHeaderBytesPaddingFieldNumber = 41,
    kNackRepeatedFieldNumber = 38,
  };
  // map<int32, uint32> gap_histogram = 24;
  int gap_histogram_size() const;
  private:
  int _internal_gap_histogram_size() const;

  public:
  void clear_gap_histogram() ;
  const ::google::protobuf::Map<::int32_t, ::uint32_t>& gap_histogram() const;
  ::google::protobuf::Map<::int32_t, ::uint32_t>* PROTOBUF_NONNULL mutable_gap_histogram();

  private:
  const ::google::protobuf::Map<::int32_t, ::uint32_t>& _internal_gap_histogram() const;
  ::google::protobuf::Map<::int32_t, ::uint32_t>* PROTOBUF_NONNULL _internal_mutable_gap_histogram();

  public:
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_start_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_end_time();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_end_time();

  public:
  // .google.protobuf.Timestamp last_pli = 28;
  bool has_last_pli() const;
  void clear_last_pli() ;
  const ::google::protobuf::Timestamp& last_pli() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_last_pli();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_last_pli();
  void set_allocated_last_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_last_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_last_pli();

  private:
  const ::google::protobuf::Timestamp& _internal_last_pli() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_last_pli();

  public:
  // .google.protobuf.Timestamp last_fir = 30;
  bool has_last_fir() const;
  void clear_last_fir() ;
  const ::google::protobuf::Timestamp& last_fir() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_last_fir();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_last_fir();
  void set_allocated_last_fir(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_last_fir(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_last_fir();

  private:
  const ::google::protobuf::Timestamp& _internal_last_fir() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_last_fir();

  public:
  // .google.protobuf.Timestamp last_key_frame = 34;
  bool has_last_key_frame() const;
  void clear_last_key_frame() ;
  const ::google::protobuf::Timestamp& last_key_frame() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_last_key_frame();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_last_key_frame();
  void set_allocated_last_key_frame(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_last_key_frame(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_last_key_frame();

  private:
  const ::google::protobuf::Timestamp& _internal_last_key_frame() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_last_key_frame();

  public:
  // .google.protobuf.Timestamp last_layer_lock_pli = 36;
  bool has_last_layer_lock_pli() const;
  void clear_last_layer_lock_pli() ;
  const ::google::protobuf::Timestamp& last_layer_lock_pli() const;
  [[nodiscard]] ::google::protobuf::Timestamp* PROTOBUF_NULLABLE release_last_layer_lock_pli();
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL mutable_last_layer_lock_pli();
  void set_allocated_last_layer_lock_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_last_layer_lock_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value);
  ::google::protobuf::Timestamp* PROTOBUF_NULLABLE unsafe_arena_release_last_layer_lock_pli();

  private:
  const ::google::protobuf::Timestamp& _internal_last_layer_lock_pli() const;
  ::google::protobuf::Timestamp* PROTOBUF_NONNULL _internal_mutable_last_layer_lock_pli();

  public:
  // .livekit.RTPDrift packet_drift = 44;
  bool has_packet_drift() const;
  void clear_packet_drift() ;
  const ::livekit::RTPDrift& packet_drift() const;
  [[nodiscard]] ::livekit::RTPDrift* PROTOBUF_NULLABLE release_packet_drift();
  ::livekit::RTPDrift* PROTOBUF_NONNULL mutable_packet_drift();
  void set_allocated_packet_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_packet_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  ::livekit::RTPDrift* PROTOBUF_NULLABLE unsafe_arena_release_packet_drift();

  private:
  const ::livekit::RTPDrift& _internal_packet_drift() const;
  ::livekit::RTPDrift* PROTOBUF_NONNULL _internal_mutable_packet_drift();

  public:
  // .livekit.RTPDrift ntp_report_drift = 45;
  bool has_ntp_report_drift() const;
  void clear_ntp_report_drift() ;
  const ::livekit::RTPDrift& ntp_report_drift() const;
  [[nodiscard]] ::livekit::RTPDrift* PROTOBUF_NULLABLE release_ntp_report_drift();
  ::livekit::RTPDrift* PROTOBUF_NONNULL mutable_ntp_report_drift();
  void set_allocated_ntp_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ntp_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  ::livekit::RTPDrift* PROTOBUF_NULLABLE unsafe_arena_release_ntp_report_drift();

  private:
  const ::livekit::RTPDrift& _internal_ntp_report_drift() const;
  ::livekit::RTPDrift* PROTOBUF_NONNULL _internal_mutable_ntp_report_drift();

  public:
  // .livekit.RTPDrift rebased_report_drift = 46;
  bool has_rebased_report_drift() const;
  void clear_rebased_report_drift() ;
  const ::livekit::RTPDrift& rebased_report_drift() const;
  [[nodiscard]] ::livekit::RTPDrift* PROTOBUF_NULLABLE release_rebased_report_drift();
  ::livekit::RTPDrift* PROTOBUF_NONNULL mutable_rebased_report_drift();
  void set_allocated_rebased_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rebased_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  ::livekit::RTPDrift* PROTOBUF_NULLABLE unsafe_arena_release_rebased_report_drift();

  private:
  const ::livekit::RTPDrift& _internal_rebased_report_drift() const;
  ::livekit::RTPDrift* PROTOBUF_NONNULL _internal_mutable_rebased_report_drift();

  public:
  // .livekit.RTPDrift received_report_drift = 47;
  bool has_received_report_drift() const;
  void clear_received_report_drift() ;
  const ::livekit::RTPDrift& received_report_drift() const;
  [[nodiscard]] ::livekit::RTPDrift* PROTOBUF_NULLABLE release_received_report_drift();
  ::livekit::RTPDrift* PROTOBUF_NONNULL mutable_received_report_drift();
  void set_allocated_received_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_received_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value);
  ::livekit::RTPDrift* PROTOBUF_NULLABLE unsafe_arena_release_received_report_drift();

  private:
  const ::livekit::RTPDrift& _internal_received_report_drift() const;
  ::livekit::RTPDrift* PROTOBUF_NONNULL _internal_mutable_received_report_drift();

  public:
  // double duration = 3;
  void clear_duration() ;
  double duration() const;
  void set_duration(double value);

  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);

  public:
  // double packet_rate = 5;
  void clear_packet_rate() ;
  double packet_rate() const;
  void set_packet_rate(double value);

  private:
  double _internal_packet_rate() const;
  void _internal_set_packet_rate(double value);

  public:
  // uint64 bytes = 6;
  void clear_bytes() ;
  ::uint64_t bytes() const;
  void set_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_bytes() const;
  void _internal_set_bytes(::uint64_t value);

  public:
  // uint32 packets = 4;
  void clear_packets() ;
  ::uint32_t packets() const;
  void set_packets(::uint32_t value);

  private:
  ::uint32_t _internal_packets() const;
  void _internal_set_packets(::uint32_t value);

  public:
  // uint32 packets_lost = 8;
  void clear_packets_lost() ;
  ::uint32_t packets_lost() const;
  void set_packets_lost(::uint32_t value);

  private:
  ::uint32_t _internal_packets_lost() const;
  void _internal_set_packets_lost(::uint32_t value);

  public:
  // double bitrate = 7;
  void clear_bitrate() ;
  double bitrate() const;
  void set_bitrate(double value);

  private:
  double _internal_bitrate() const;
  void _internal_set_bitrate(double value);

  public:
  // double packet_loss_rate = 9;
  void clear_packet_loss_rate() ;
  double packet_loss_rate() const;
  void set_packet_loss_rate(double value);

  private:
  double _internal_packet_loss_rate() const;
  void _internal_set_packet_loss_rate(double value);

  public:
  // float packet_loss_percentage = 10;
  void clear_packet_loss_percentage() ;
  float packet_loss_percentage() const;
  void set_packet_loss_percentage(float value);

  private:
  float _internal_packet_loss_percentage() const;
  void _internal_set_packet_loss_percentage(float value);

  public:
  // uint32 packets_duplicate = 11;
  void clear_packets_duplicate() ;
  ::uint32_t packets_duplicate() const;
  void set_packets_duplicate(::uint32_t value);

  private:
  ::uint32_t _internal_packets_duplicate() const;
  void _internal_set_packets_duplicate(::uint32_t value);

  public:
  // double packet_duplicate_rate = 12;
  void clear_packet_duplicate_rate() ;
  double packet_duplicate_rate() const;
  void set_packet_duplicate_rate(double value);

  private:
  double _internal_packet_duplicate_rate() const;
  void _internal_set_packet_duplicate_rate(double value);

  public:
  // uint64 bytes_duplicate = 13;
  void clear_bytes_duplicate() ;
  ::uint64_t bytes_duplicate() const;
  void set_bytes_duplicate(::uint64_t value);

  private:
  ::uint64_t _internal_bytes_duplicate() const;
  void _internal_set_bytes_duplicate(::uint64_t value);

  public:
  // double bitrate_duplicate = 14;
  void clear_bitrate_duplicate() ;
  double bitrate_duplicate() const;
  void set_bitrate_duplicate(double value);

  private:
  double _internal_bitrate_duplicate() const;
  void _internal_set_bitrate_duplicate(double value);

  public:
  // double packet_padding_rate = 16;
  void clear_packet_padding_rate() ;
  double packet_padding_rate() const;
  void set_packet_padding_rate(double value);

  private:
  double _internal_packet_padding_rate() const;
  void _internal_set_packet_padding_rate(double value);

  public:
  // uint64 bytes_padding = 17;
  void clear_bytes_padding() ;
  ::uint64_t bytes_padding() const;
  void set_bytes_padding(::uint64_t value);

  private:
  ::uint64_t _internal_bytes_padding() const;
  void _internal_set_bytes_padding(::uint64_t value);

  public:
  // uint32 packets_padding = 15;
  void clear_packets_padding() ;
  ::uint32_t packets_padding() const;
  void set_packets_padding(::uint32_t value);

  private:
  ::uint32_t _internal_packets_padding() const;
  void _internal_set_packets_padding(::uint32_t value);

  public:
  // uint32 packets_out_of_order = 19;
  void clear_packets_out_of_order() ;
  ::uint32_t packets_out_of_order() const;
  void set_packets_out_of_order(::uint32_t value);

  private:
  ::uint32_t _internal_packets_out_of_order() const;
  void _internal_set_packets_out_of_order(::uint32_t value);

  public:
  // double bitrate_padding = 18;
  void clear_bitrate_padding() ;
  double bitrate_padding() const;
  void set_bitrate_padding(double value);

  private:
  double _internal_bitrate_padding() const;
  void _internal_set_bitrate_padding(double value);

  public:
  // double frame_rate = 21;
  void clear_frame_rate() ;
  double frame_rate() const;
  void set_frame_rate(double value);

  private:
  double _internal_frame_rate() const;
  void _internal_set_frame_rate(double value);

  public:
  // double jitter_current = 22;
  void clear_jitter_current() ;
  double jitter_current() const;
  void set_jitter_current(double value);

  private:
  double _internal_jitter_current() const;
  void _internal_set_jitter_current(double value);

  public:
  // uint32 frames = 20;
  void clear_frames() ;
  ::uint32_t frames() const;
  void set_frames(::uint32_t value);

  private:
  ::uint32_t _internal_frames() const;
  void _internal_set_frames(::uint32_t value);

  public:
  // uint32 nacks = 25;
  void clear_nacks() ;
  ::uint32_t nacks() const;
  void set_nacks(::uint32_t value);

  private:
  ::uint32_t _internal_nacks() const;
  void _internal_set_nacks(::uint32_t value);

  public:
  // double jitter_max = 23;
  void clear_jitter_max() ;
  double jitter_max() const;
  void set_jitter_max(double value);

  private:
  double _internal_jitter_max() const;
  void _internal_set_jitter_max(double value);

  public:
  // uint32 nack_misses = 26;
  void clear_nack_misses() ;
  ::uint32_t nack_misses() const;
  void set_nack_misses(::uint32_t value);

  private:
  ::uint32_t _internal_nack_misses() const;
  void _internal_set_nack_misses(::uint32_t value);

  public:
  // uint32 plis = 27;
  void clear_plis() ;
  ::uint32_t plis() const;
  void set_plis(::uint32_t value);

  private:
  ::uint32_t _internal_plis() const;
  void _internal_set_plis(::uint32_t value);

  public:
  // uint32 firs = 29;
  void clear_firs() ;
  ::uint32_t firs() const;
  void set_firs(::uint32_t value);

  private:
  ::uint32_t _internal_firs() const;
  void _internal_set_firs(::uint32_t value);

  public:
  // uint32 rtt_current = 31;
  void clear_rtt_current() ;
  ::uint32_t rtt_current() const;
  void set_rtt_current(::uint32_t value);

  private:
  ::uint32_t _internal_rtt_current() const;
  void _internal_set_rtt_current(::uint32_t value);

  public:
  // uint32 rtt_max = 32;
  void clear_rtt_max() ;
  ::uint32_t rtt_max() const;
  void set_rtt_max(::uint32_t value);

  private:
  ::uint32_t _internal_rtt_max() const;
  void _internal_set_rtt_max(::uint32_t value);

  public:
  // uint32 key_frames = 33;
  void clear_key_frames() ;
  ::uint32_t key_frames() const;
  void set_key_frames(::uint32_t value);

  private:
  ::uint32_t _internal_key_frames() const;
  void _internal_set_key_frames(::uint32_t value);

  public:
  // uint32 layer_lock_plis = 35;
  void clear_layer_lock_plis() ;
  ::uint32_t layer_lock_plis() const;
  void set_layer_lock_plis(::uint32_t value);

  private:
  ::uint32_t _internal_layer_lock_plis() const;
  void _internal_set_layer_lock_plis(::uint32_t value);

  public:
  // uint32 nack_acks = 37;
  void clear_nack_acks() ;
  ::uint32_t nack_acks() const;
  void set_nack_acks(::uint32_t value);

  private:
  ::uint32_t _internal_nack_acks() const;
  void _internal_set_nack_acks(::uint32_t value);

  public:
  // uint64 header_bytes = 39;
  void clear_header_bytes() ;
  ::uint64_t header_bytes() const;
  void set_header_bytes(::uint64_t value);

  private:
  ::uint64_t _internal_header_bytes() const;
  void _internal_set_header_bytes(::uint64_t value);

  public:
  // uint64 header_bytes_duplicate = 40;
  void clear_header_bytes_duplicate() ;
  ::uint64_t header_bytes_duplicate() const;
  void set_header_bytes_duplicate(::uint64_t value);

  private:
  ::uint64_t _internal_header_bytes_duplicate() const;
  void _internal_set_header_bytes_duplicate(::uint64_t value);

  public:
  // uint64 header_bytes_padding = 41;
  void clear_header_bytes_padding() ;
  ::uint64_t header_bytes_padding() const;
  void set_header_bytes_padding(::uint64_t value);

  private:
  ::uint64_t _internal_header_bytes_padding() const;
  void _internal_set_header_bytes_padding(::uint64_t value);

  public:
  // uint32 nack_repeated = 38;
  void clear_nack_repeated() ;
  ::uint32_t nack_repeated() const;
  void set_nack_repeated(::uint32_t value);

  private:
  ::uint32_t _internal_nack_repeated() const;
  void _internal_set_nack_repeated(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.RTPStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 45,
                                   11, 0,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RTPStats& from_msg);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<RTPStats_GapHistogramEntry_DoNotUse, ::int32_t, ::uint32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>
        gap_histogram_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE start_time_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE end_time_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE last_pli_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE last_fir_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE last_key_frame_;
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE last_layer_lock_pli_;
    ::livekit::RTPDrift* PROTOBUF_NULLABLE packet_drift_;
    ::livekit::RTPDrift* PROTOBUF_NULLABLE ntp_report_drift_;
    ::livekit::RTPDrift* PROTOBUF_NULLABLE rebased_report_drift_;
    ::livekit::RTPDrift* PROTOBUF_NULLABLE received_report_drift_;
    double duration_;
    double packet_rate_;
    ::uint64_t bytes_;
    ::uint32_t packets_;
    ::uint32_t packets_lost_;
    double bitrate_;
    double packet_loss_rate_;
    float packet_loss_percentage_;
    ::uint32_t packets_duplicate_;
    double packet_duplicate_rate_;
    ::uint64_t bytes_duplicate_;
    double bitrate_duplicate_;
    double packet_padding_rate_;
    ::uint64_t bytes_padding_;
    ::uint32_t packets_padding_;
    ::uint32_t packets_out_of_order_;
    double bitrate_padding_;
    double frame_rate_;
    double jitter_current_;
    ::uint32_t frames_;
    ::uint32_t nacks_;
    double jitter_max_;
    ::uint32_t nack_misses_;
    ::uint32_t plis_;
    ::uint32_t firs_;
    ::uint32_t rtt_current_;
    ::uint32_t rtt_max_;
    ::uint32_t key_frames_;
    ::uint32_t layer_lock_plis_;
    ::uint32_t nack_acks_;
    ::uint64_t header_bytes_;
    ::uint64_t header_bytes_duplicate_;
    ::uint64_t header_bytes_padding_;
    ::uint32_t nack_repeated_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RTPStats_class_data_;
// -------------------------------------------------------------------

class ClientConfiguration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ClientConfiguration) */ {
 public:
  inline ClientConfiguration() : ClientConfiguration(nullptr) {}
  ~ClientConfiguration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientConfiguration* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientConfiguration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConfiguration(::google::protobuf::internal::ConstantInitialized);

  inline ClientConfiguration(const ClientConfiguration& from) : ClientConfiguration(nullptr, from) {}
  inline ClientConfiguration(ClientConfiguration&& from) noexcept
      : ClientConfiguration(nullptr, std::move(from)) {}
  inline ClientConfiguration& operator=(const ClientConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfiguration& operator=(ClientConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConfiguration& default_instance() {
    return *reinterpret_cast<const ClientConfiguration*>(
        &_ClientConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(ClientConfiguration& a, ClientConfiguration& b) { a.Swap(&b); }
  inline void Swap(ClientConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConfiguration* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConfiguration* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientConfiguration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientConfiguration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientConfiguration& from) { ClientConfiguration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientConfiguration* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ClientConfiguration"; }

 protected:
  explicit ClientConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ClientConfiguration(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ClientConfiguration& from);
  ClientConfiguration(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ClientConfiguration&& from) noexcept
      : ClientConfiguration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVideoFieldNumber = 1,
    kScreenFieldNumber = 2,
    kDisabledCodecsFieldNumber = 4,
    kResumeConnectionFieldNumber = 3,
    kForceRelayFieldNumber = 5,
  };
  // .livekit.VideoConfiguration video = 1;
  bool has_video() const;
  void clear_video() ;
  const ::livekit::VideoConfiguration& video() const;
  [[nodiscard]] ::livekit::VideoConfiguration* PROTOBUF_NULLABLE release_video();
  ::livekit::VideoConfiguration* PROTOBUF_NONNULL mutable_video();
  void set_allocated_video(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_video(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value);
  ::livekit::VideoConfiguration* PROTOBUF_NULLABLE unsafe_arena_release_video();

  private:
  const ::livekit::VideoConfiguration& _internal_video() const;
  ::livekit::VideoConfiguration* PROTOBUF_NONNULL _internal_mutable_video();

  public:
  // .livekit.VideoConfiguration screen = 2;
  bool has_screen() const;
  void clear_screen() ;
  const ::livekit::VideoConfiguration& screen() const;
  [[nodiscard]] ::livekit::VideoConfiguration* PROTOBUF_NULLABLE release_screen();
  ::livekit::VideoConfiguration* PROTOBUF_NONNULL mutable_screen();
  void set_allocated_screen(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_screen(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value);
  ::livekit::VideoConfiguration* PROTOBUF_NULLABLE unsafe_arena_release_screen();

  private:
  const ::livekit::VideoConfiguration& _internal_screen() const;
  ::livekit::VideoConfiguration* PROTOBUF_NONNULL _internal_mutable_screen();

  public:
  // .livekit.DisabledCodecs disabled_codecs = 4;
  bool has_disabled_codecs() const;
  void clear_disabled_codecs() ;
  const ::livekit::DisabledCodecs& disabled_codecs() const;
  [[nodiscard]] ::livekit::DisabledCodecs* PROTOBUF_NULLABLE release_disabled_codecs();
  ::livekit::DisabledCodecs* PROTOBUF_NONNULL mutable_disabled_codecs();
  void set_allocated_disabled_codecs(::livekit::DisabledCodecs* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_disabled_codecs(::livekit::DisabledCodecs* PROTOBUF_NULLABLE value);
  ::livekit::DisabledCodecs* PROTOBUF_NULLABLE unsafe_arena_release_disabled_codecs();

  private:
  const ::livekit::DisabledCodecs& _internal_disabled_codecs() const;
  ::livekit::DisabledCodecs* PROTOBUF_NONNULL _internal_mutable_disabled_codecs();

  public:
  // .livekit.ClientConfigSetting resume_connection = 3;
  void clear_resume_connection() ;
  ::livekit::ClientConfigSetting resume_connection() const;
  void set_resume_connection(::livekit::ClientConfigSetting value);

  private:
  ::livekit::ClientConfigSetting _internal_resume_connection() const;
  void _internal_set_resume_connection(::livekit::ClientConfigSetting value);

  public:
  // .livekit.ClientConfigSetting force_relay = 5;
  void clear_force_relay() ;
  ::livekit::ClientConfigSetting force_relay() const;
  void set_force_relay(::livekit::ClientConfigSetting value);

  private:
  ::livekit::ClientConfigSetting _internal_force_relay() const;
  void _internal_set_force_relay(::livekit::ClientConfigSetting value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ClientConfiguration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ClientConfiguration& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::livekit::VideoConfiguration* PROTOBUF_NULLABLE video_;
    ::livekit::VideoConfiguration* PROTOBUF_NULLABLE screen_;
    ::livekit::DisabledCodecs* PROTOBUF_NULLABLE disabled_codecs_;
    int resume_connection_;
    int force_relay_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ClientConfiguration_class_data_;
// -------------------------------------------------------------------

class ParticipantInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.ParticipantInfo) */ {
 public:
  inline ParticipantInfo() : ParticipantInfo(nullptr) {}
  ~ParticipantInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ParticipantInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ParticipantInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ParticipantInfo(::google::protobuf::internal::ConstantInitialized);

  inline ParticipantInfo(const ParticipantInfo& from) : ParticipantInfo(nullptr, from) {}
  inline ParticipantInfo(ParticipantInfo&& from) noexcept
      : ParticipantInfo(nullptr, std::move(from)) {}
  inline ParticipantInfo& operator=(const ParticipantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParticipantInfo& operator=(ParticipantInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParticipantInfo& default_instance() {
    return *reinterpret_cast<const ParticipantInfo*>(
        &_ParticipantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ParticipantInfo& a, ParticipantInfo& b) { a.Swap(&b); }
  inline void Swap(ParticipantInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParticipantInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParticipantInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ParticipantInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParticipantInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ParticipantInfo& from) { ParticipantInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ParticipantInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.ParticipantInfo"; }

 protected:
  explicit ParticipantInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ParticipantInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ParticipantInfo& from);
  ParticipantInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ParticipantInfo&& from) noexcept
      : ParticipantInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using State = ParticipantInfo_State;
  static constexpr State JOINING = ParticipantInfo_State_JOINING;
  static constexpr State JOINED = ParticipantInfo_State_JOINED;
  static constexpr State ACTIVE = ParticipantInfo_State_ACTIVE;
  static constexpr State DISCONNECTED = ParticipantInfo_State_DISCONNECTED;
  static inline bool State_IsValid(int value) {
    return ParticipantInfo_State_IsValid(value);
  }
  static constexpr State State_MIN = ParticipantInfo_State_State_MIN;
  static constexpr State State_MAX = ParticipantInfo_State_State_MAX;
  static constexpr int State_ARRAYSIZE = ParticipantInfo_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL State_descriptor() {
    return ParticipantInfo_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return ParticipantInfo_State_Name(value);
  }
  static inline bool State_Parse(
      absl::string_view name, State* PROTOBUF_NONNULL value) {
    return ParticipantInfo_State_Parse(name, value);
  }
  using Kind = ParticipantInfo_Kind;
  static constexpr Kind STANDARD = ParticipantInfo_Kind_STANDARD;
  static constexpr Kind INGRESS = ParticipantInfo_Kind_INGRESS;
  static constexpr Kind EGRESS = ParticipantInfo_Kind_EGRESS;
  static constexpr Kind SIP = ParticipantInfo_Kind_SIP;
  static constexpr Kind AGENT = ParticipantInfo_Kind_AGENT;
  static constexpr Kind FORWARDED = ParticipantInfo_Kind_FORWARDED;
  static inline bool Kind_IsValid(int value) {
    return ParticipantInfo_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN = ParticipantInfo_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX = ParticipantInfo_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE = ParticipantInfo_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Kind_descriptor() {
    return ParticipantInfo_Kind_descriptor();
  }
  template <typename T>
  static inline const std::string& Kind_Name(T value) {
    return ParticipantInfo_Kind_Name(value);
  }
  static inline bool Kind_Parse(
      absl::string_view name, Kind* PROTOBUF_NONNULL value) {
    return ParticipantInfo_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTracksFieldNumber = 4,
    kAttributesFieldNumber = 15,
    kSidFieldNumber = 1,
    kIdentityFieldNumber = 2,
    kMetadataFieldNumber = 5,
    kNameFieldNumber = 9,
    kRegionFieldNumber = 12,
    kPermissionFieldNumber = 11,
    kJoinedAtFieldNumber = 6,
    kStateFieldNumber = 3,
    kVersionFieldNumber = 10,
    kIsPublisherFieldNumber = 13,
    kKindFieldNumber = 14,
    kJoinedAtMsFieldNumber = 17,
    kDisconnectReasonFieldNumber = 16,
  };
  // repeated .livekit.TrackInfo tracks = 4;
  int tracks_size() const;
  private:
  int _internal_tracks_size() const;

  public:
  void clear_tracks() ;
  ::livekit::TrackInfo* PROTOBUF_NONNULL mutable_tracks(int index);
  ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>* PROTOBUF_NONNULL mutable_tracks();

  private:
  const ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>& _internal_tracks() const;
  ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>* PROTOBUF_NONNULL _internal_mutable_tracks();
  public:
  const ::livekit::TrackInfo& tracks(int index) const;
  ::livekit::TrackInfo* PROTOBUF_NONNULL add_tracks();
  const ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>& tracks() const;
  // map<string, string> attributes = 15;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;

  public:
  void clear_attributes() ;
  const ::google::protobuf::Map<std::string, std::string>& attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_attributes();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributes() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_attributes();

  public:
  // string sid = 1;
  void clear_sid() ;
  const std::string& sid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sid(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sid();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sid();
  void set_allocated_sid(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sid() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sid(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sid();

  public:
  // string identity = 2;
  void clear_identity() ;
  const std::string& identity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_identity();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_identity();
  void set_allocated_identity(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_identity() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_identity(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_identity();

  public:
  // string metadata = 5;
  void clear_metadata() ;
  const std::string& metadata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_metadata();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_metadata();
  void set_allocated_metadata(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_metadata() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_metadata();

  public:
  // string name = 9;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_name();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_name();
  void set_allocated_name(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_name();

  public:
  // string region = 12;
  void clear_region() ;
  const std::string& region() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_region(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_region();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_region();
  void set_allocated_region(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_region() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_region();

  public:
  // .livekit.ParticipantPermission permission = 11;
  bool has_permission() const;
  void clear_permission() ;
  const ::livekit::ParticipantPermission& permission() const;
  [[nodiscard]] ::livekit::ParticipantPermission* PROTOBUF_NULLABLE release_permission();
  ::livekit::ParticipantPermission* PROTOBUF_NONNULL mutable_permission();
  void set_allocated_permission(::livekit::ParticipantPermission* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_permission(::livekit::ParticipantPermission* PROTOBUF_NULLABLE value);
  ::livekit::ParticipantPermission* PROTOBUF_NULLABLE unsafe_arena_release_permission();

  private:
  const ::livekit::ParticipantPermission& _internal_permission() const;
  ::livekit::ParticipantPermission* PROTOBUF_NONNULL _internal_mutable_permission();

  public:
  // int64 joined_at = 6;
  void clear_joined_at() ;
  ::int64_t joined_at() const;
  void set_joined_at(::int64_t value);

  private:
  ::int64_t _internal_joined_at() const;
  void _internal_set_joined_at(::int64_t value);

  public:
  // .livekit.ParticipantInfo.State state = 3;
  void clear_state() ;
  ::livekit::ParticipantInfo_State state() const;
  void set_state(::livekit::ParticipantInfo_State value);

  private:
  ::livekit::ParticipantInfo_State _internal_state() const;
  void _internal_set_state(::livekit::ParticipantInfo_State value);

  public:
  // uint32 version = 10;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // bool is_publisher = 13;
  void clear_is_publisher() ;
  bool is_publisher() const;
  void set_is_publisher(bool value);

  private:
  bool _internal_is_publisher() const;
  void _internal_set_is_publisher(bool value);

  public:
  // .livekit.ParticipantInfo.Kind kind = 14;
  void clear_kind() ;
  ::livekit::ParticipantInfo_Kind kind() const;
  void set_kind(::livekit::ParticipantInfo_Kind value);

  private:
  ::livekit::ParticipantInfo_Kind _internal_kind() const;
  void _internal_set_kind(::livekit::ParticipantInfo_Kind value);

  public:
  // int64 joined_at_ms = 17;
  void clear_joined_at_ms() ;
  ::int64_t joined_at_ms() const;
  void set_joined_at_ms(::int64_t value);

  private:
  ::int64_t _internal_joined_at_ms() const;
  void _internal_set_joined_at_ms(::int64_t value);

  public:
  // .livekit.DisconnectReason disconnect_reason = 16;
  void clear_disconnect_reason() ;
  ::livekit::DisconnectReason disconnect_reason() const;
  void set_disconnect_reason(::livekit::DisconnectReason value);

  private:
  ::livekit::DisconnectReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::livekit::DisconnectReason value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.ParticipantInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15,
                                   3, 79,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ParticipantInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::livekit::TrackInfo > tracks_;
    ::google::protobuf::internal::MapField<ParticipantInfo_AttributesEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributes_;
    ::google::protobuf::internal::ArenaStringPtr sid_;
    ::google::protobuf::internal::ArenaStringPtr identity_;
    ::google::protobuf::internal::ArenaStringPtr metadata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr region_;
    ::livekit::ParticipantPermission* PROTOBUF_NULLABLE permission_;
    ::int64_t joined_at_;
    int state_;
    ::uint32_t version_;
    bool is_publisher_;
    int kind_;
    ::int64_t joined_at_ms_;
    int disconnect_reason_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ParticipantInfo_class_data_;
// -------------------------------------------------------------------

class DataPacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.DataPacket) */ {
 public:
  inline DataPacket() : DataPacket(nullptr) {}
  ~DataPacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataPacket* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataPacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPacket(::google::protobuf::internal::ConstantInitialized);

  inline DataPacket(const DataPacket& from) : DataPacket(nullptr, from) {}
  inline DataPacket(DataPacket&& from) noexcept
      : DataPacket(nullptr, std::move(from)) {}
  inline DataPacket& operator=(const DataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPacket& operator=(DataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPacket& default_instance() {
    return *reinterpret_cast<const DataPacket*>(
        &_DataPacket_default_instance_);
  }
  enum ValueCase {
    kUser = 2,
    kSpeaker = 3,
    kSipDtmf = 6,
    kTranscription = 7,
    kMetrics = 8,
    kChatMessage = 9,
    kRpcRequest = 10,
    kRpcAck = 11,
    kRpcResponse = 12,
    kStreamHeader = 13,
    kStreamChunk = 14,
    kStreamTrailer = 15,
    VALUE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(DataPacket& a, DataPacket& b) { a.Swap(&b); }
  inline void Swap(DataPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPacket* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPacket* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataPacket& from) { DataPacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataPacket* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.DataPacket"; }

 protected:
  explicit DataPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  DataPacket(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const DataPacket& from);
  DataPacket(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, DataPacket&& from) noexcept
      : DataPacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Kind = DataPacket_Kind;
  static constexpr Kind RELIABLE = DataPacket_Kind_RELIABLE;
  static constexpr Kind LOSSY = DataPacket_Kind_LOSSY;
  static inline bool Kind_IsValid(int value) {
    return DataPacket_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN = DataPacket_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX = DataPacket_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE = DataPacket_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Kind_descriptor() {
    return DataPacket_Kind_descriptor();
  }
  template <typename T>
  static inline const std::string& Kind_Name(T value) {
    return DataPacket_Kind_Name(value);
  }
  static inline bool Kind_Parse(
      absl::string_view name, Kind* PROTOBUF_NONNULL value) {
    return DataPacket_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDestinationIdentitiesFieldNumber = 5,
    kParticipantIdentityFieldNumber = 4,
    kKindFieldNumber = 1,
    kUserFieldNumber = 2,
    kSpeakerFieldNumber = 3,
    kSipDtmfFieldNumber = 6,
    kTranscriptionFieldNumber = 7,
    kMetricsFieldNumber = 8,
    kChatMessageFieldNumber = 9,
    kRpcRequestFieldNumber = 10,
    kRpcAckFieldNumber = 11,
    kRpcResponseFieldNumber = 12,
    kStreamHeaderFieldNumber = 13,
    kStreamChunkFieldNumber = 14,
    kStreamTrailerFieldNumber = 15,
  };
  // repeated string destination_identities = 5;
  int destination_identities_size() const;
  private:
  int _internal_destination_identities_size() const;

  public:
  void clear_destination_identities() ;
  const std::string& destination_identities(int index) const;
  std::string* PROTOBUF_NONNULL mutable_destination_identities(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination_identities(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_destination_identities();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_destination_identities(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& destination_identities() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_destination_identities();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_destination_identities() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_destination_identities();

  public:
  // string participant_identity = 4;
  void clear_participant_identity() ;
  const std::string& participant_identity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_participant_identity(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_participant_identity();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_participant_identity();
  void set_allocated_participant_identity(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_participant_identity() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_participant_identity(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_participant_identity();

  public:
  // .livekit.DataPacket.Kind kind = 1 [deprecated = true];
  [[deprecated]]  void clear_kind() ;
  [[deprecated]] ::livekit::DataPacket_Kind kind() const;
  [[deprecated]] void set_kind(::livekit::DataPacket_Kind value);

  private:
  ::livekit::DataPacket_Kind _internal_kind() const;
  void _internal_set_kind(::livekit::DataPacket_Kind value);

  public:
  // .livekit.UserPacket user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;

  public:
  void clear_user() ;
  const ::livekit::UserPacket& user() const;
  [[nodiscard]] ::livekit::UserPacket* PROTOBUF_NULLABLE release_user();
  ::livekit::UserPacket* PROTOBUF_NONNULL mutable_user();
  void set_allocated_user(::livekit::UserPacket* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_user(::livekit::UserPacket* PROTOBUF_NULLABLE value);
  ::livekit::UserPacket* PROTOBUF_NULLABLE unsafe_arena_release_user();

  private:
  const ::livekit::UserPacket& _internal_user() const;
  ::livekit::UserPacket* PROTOBUF_NONNULL _internal_mutable_user();

  public:
  // .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
  [[deprecated]]  bool has_speaker() const;
  private:
  bool _internal_has_speaker() const;

  public:
  [[deprecated]]  void clear_speaker() ;
  [[deprecated]] const ::livekit::ActiveSpeakerUpdate& speaker() const;
  [[deprecated]] [[nodiscard]] ::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE release_speaker();
  [[deprecated]] ::livekit::ActiveSpeakerUpdate* PROTOBUF_NONNULL mutable_speaker();
  [[deprecated]] void set_allocated_speaker(::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE value);
  [[deprecated]] void unsafe_arena_set_allocated_speaker(::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE value);
  [[deprecated]] ::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE unsafe_arena_release_speaker();

  private:
  const ::livekit::ActiveSpeakerUpdate& _internal_speaker() const;
  ::livekit::ActiveSpeakerUpdate* PROTOBUF_NONNULL _internal_mutable_speaker();

  public:
  // .livekit.SipDTMF sip_dtmf = 6;
  bool has_sip_dtmf() const;
  private:
  bool _internal_has_sip_dtmf() const;

  public:
  void clear_sip_dtmf() ;
  const ::livekit::SipDTMF& sip_dtmf() const;
  [[nodiscard]] ::livekit::SipDTMF* PROTOBUF_NULLABLE release_sip_dtmf();
  ::livekit::SipDTMF* PROTOBUF_NONNULL mutable_sip_dtmf();
  void set_allocated_sip_dtmf(::livekit::SipDTMF* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sip_dtmf(::livekit::SipDTMF* PROTOBUF_NULLABLE value);
  ::livekit::SipDTMF* PROTOBUF_NULLABLE unsafe_arena_release_sip_dtmf();

  private:
  const ::livekit::SipDTMF& _internal_sip_dtmf() const;
  ::livekit::SipDTMF* PROTOBUF_NONNULL _internal_mutable_sip_dtmf();

  public:
  // .livekit.Transcription transcription = 7;
  bool has_transcription() const;
  private:
  bool _internal_has_transcription() const;

  public:
  void clear_transcription() ;
  const ::livekit::Transcription& transcription() const;
  [[nodiscard]] ::livekit::Transcription* PROTOBUF_NULLABLE release_transcription();
  ::livekit::Transcription* PROTOBUF_NONNULL mutable_transcription();
  void set_allocated_transcription(::livekit::Transcription* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_transcription(::livekit::Transcription* PROTOBUF_NULLABLE value);
  ::livekit::Transcription* PROTOBUF_NULLABLE unsafe_arena_release_transcription();

  private:
  const ::livekit::Transcription& _internal_transcription() const;
  ::livekit::Transcription* PROTOBUF_NONNULL _internal_mutable_transcription();

  public:
  // .livekit.MetricsBatch metrics = 8;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;

  public:
  void clear_metrics() ;
  const ::livekit::MetricsBatch& metrics() const;
  [[nodiscard]] ::livekit::MetricsBatch* PROTOBUF_NULLABLE release_metrics();
  ::livekit::MetricsBatch* PROTOBUF_NONNULL mutable_metrics();
  void set_allocated_metrics(::livekit::MetricsBatch* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_metrics(::livekit::MetricsBatch* PROTOBUF_NULLABLE value);
  ::livekit::MetricsBatch* PROTOBUF_NULLABLE unsafe_arena_release_metrics();

  private:
  const ::livekit::MetricsBatch& _internal_metrics() const;
  ::livekit::MetricsBatch* PROTOBUF_NONNULL _internal_mutable_metrics();

  public:
  // .livekit.ChatMessage chat_message = 9;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;

  public:
  void clear_chat_message() ;
  const ::livekit::ChatMessage& chat_message() const;
  [[nodiscard]] ::livekit::ChatMessage* PROTOBUF_NULLABLE release_chat_message();
  ::livekit::ChatMessage* PROTOBUF_NONNULL mutable_chat_message();
  void set_allocated_chat_message(::livekit::ChatMessage* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_chat_message(::livekit::ChatMessage* PROTOBUF_NULLABLE value);
  ::livekit::ChatMessage* PROTOBUF_NULLABLE unsafe_arena_release_chat_message();

  private:
  const ::livekit::ChatMessage& _internal_chat_message() const;
  ::livekit::ChatMessage* PROTOBUF_NONNULL _internal_mutable_chat_message();

  public:
  // .livekit.RpcRequest rpc_request = 10;
  bool has_rpc_request() const;
  private:
  bool _internal_has_rpc_request() const;

  public:
  void clear_rpc_request() ;
  const ::livekit::RpcRequest& rpc_request() const;
  [[nodiscard]] ::livekit::RpcRequest* PROTOBUF_NULLABLE release_rpc_request();
  ::livekit::RpcRequest* PROTOBUF_NONNULL mutable_rpc_request();
  void set_allocated_rpc_request(::livekit::RpcRequest* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rpc_request(::livekit::RpcRequest* PROTOBUF_NULLABLE value);
  ::livekit::RpcRequest* PROTOBUF_NULLABLE unsafe_arena_release_rpc_request();

  private:
  const ::livekit::RpcRequest& _internal_rpc_request() const;
  ::livekit::RpcRequest* PROTOBUF_NONNULL _internal_mutable_rpc_request();

  public:
  // .livekit.RpcAck rpc_ack = 11;
  bool has_rpc_ack() const;
  private:
  bool _internal_has_rpc_ack() const;

  public:
  void clear_rpc_ack() ;
  const ::livekit::RpcAck& rpc_ack() const;
  [[nodiscard]] ::livekit::RpcAck* PROTOBUF_NULLABLE release_rpc_ack();
  ::livekit::RpcAck* PROTOBUF_NONNULL mutable_rpc_ack();
  void set_allocated_rpc_ack(::livekit::RpcAck* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rpc_ack(::livekit::RpcAck* PROTOBUF_NULLABLE value);
  ::livekit::RpcAck* PROTOBUF_NULLABLE unsafe_arena_release_rpc_ack();

  private:
  const ::livekit::RpcAck& _internal_rpc_ack() const;
  ::livekit::RpcAck* PROTOBUF_NONNULL _internal_mutable_rpc_ack();

  public:
  // .livekit.RpcResponse rpc_response = 12;
  bool has_rpc_response() const;
  private:
  bool _internal_has_rpc_response() const;

  public:
  void clear_rpc_response() ;
  const ::livekit::RpcResponse& rpc_response() const;
  [[nodiscard]] ::livekit::RpcResponse* PROTOBUF_NULLABLE release_rpc_response();
  ::livekit::RpcResponse* PROTOBUF_NONNULL mutable_rpc_response();
  void set_allocated_rpc_response(::livekit::RpcResponse* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_rpc_response(::livekit::RpcResponse* PROTOBUF_NULLABLE value);
  ::livekit::RpcResponse* PROTOBUF_NULLABLE unsafe_arena_release_rpc_response();

  private:
  const ::livekit::RpcResponse& _internal_rpc_response() const;
  ::livekit::RpcResponse* PROTOBUF_NONNULL _internal_mutable_rpc_response();

  public:
  // .livekit.DataStream.Header stream_header = 13;
  bool has_stream_header() const;
  private:
  bool _internal_has_stream_header() const;

  public:
  void clear_stream_header() ;
  const ::livekit::DataStream_Header& stream_header() const;
  [[nodiscard]] ::livekit::DataStream_Header* PROTOBUF_NULLABLE release_stream_header();
  ::livekit::DataStream_Header* PROTOBUF_NONNULL mutable_stream_header();
  void set_allocated_stream_header(::livekit::DataStream_Header* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_stream_header(::livekit::DataStream_Header* PROTOBUF_NULLABLE value);
  ::livekit::DataStream_Header* PROTOBUF_NULLABLE unsafe_arena_release_stream_header();

  private:
  const ::livekit::DataStream_Header& _internal_stream_header() const;
  ::livekit::DataStream_Header* PROTOBUF_NONNULL _internal_mutable_stream_header();

  public:
  // .livekit.DataStream.Chunk stream_chunk = 14;
  bool has_stream_chunk() const;
  private:
  bool _internal_has_stream_chunk() const;

  public:
  void clear_stream_chunk() ;
  const ::livekit::DataStream_Chunk& stream_chunk() const;
  [[nodiscard]] ::livekit::DataStream_Chunk* PROTOBUF_NULLABLE release_stream_chunk();
  ::livekit::DataStream_Chunk* PROTOBUF_NONNULL mutable_stream_chunk();
  void set_allocated_stream_chunk(::livekit::DataStream_Chunk* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_stream_chunk(::livekit::DataStream_Chunk* PROTOBUF_NULLABLE value);
  ::livekit::DataStream_Chunk* PROTOBUF_NULLABLE unsafe_arena_release_stream_chunk();

  private:
  const ::livekit::DataStream_Chunk& _internal_stream_chunk() const;
  ::livekit::DataStream_Chunk* PROTOBUF_NONNULL _internal_mutable_stream_chunk();

  public:
  // .livekit.DataStream.Trailer stream_trailer = 15;
  bool has_stream_trailer() const;
  private:
  bool _internal_has_stream_trailer() const;

  public:
  void clear_stream_trailer() ;
  const ::livekit::DataStream_Trailer& stream_trailer() const;
  [[nodiscard]] ::livekit::DataStream_Trailer* PROTOBUF_NULLABLE release_stream_trailer();
  ::livekit::DataStream_Trailer* PROTOBUF_NONNULL mutable_stream_trailer();
  void set_allocated_stream_trailer(::livekit::DataStream_Trailer* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_stream_trailer(::livekit::DataStream_Trailer* PROTOBUF_NULLABLE value);
  ::livekit::DataStream_Trailer* PROTOBUF_NULLABLE unsafe_arena_release_stream_trailer();

  private:
  const ::livekit::DataStream_Trailer& _internal_stream_trailer() const;
  ::livekit::DataStream_Trailer* PROTOBUF_NONNULL _internal_mutable_stream_trailer();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:livekit.DataPacket)
 private:
  class _Internal;
  void set_has_user();
  void set_has_speaker();
  void set_has_sip_dtmf();
  void set_has_transcription();
  void set_has_metrics();
  void set_has_chat_message();
  void set_has_rpc_request();
  void set_has_rpc_ack();
  void set_has_rpc_response();
  void set_has_stream_header();
  void set_has_stream_chunk();
  void set_has_stream_trailer();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 15,
                                   12, 77,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const DataPacket& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> destination_identities_;
    ::google::protobuf::internal::ArenaStringPtr participant_identity_;
    int kind_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE user_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE speaker_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE sip_dtmf_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE transcription_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE metrics_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE chat_message_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE rpc_request_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE rpc_ack_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE rpc_response_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE stream_header_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE stream_chunk_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE stream_trailer_;
    } value_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fmodels_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull DataPacket_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Pagination

// string after_id = 1;
inline void Pagination::clear_after_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pagination::after_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Pagination.after_id)
  return _internal_after_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Pagination::set_after_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.after_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Pagination.after_id)
}
inline std::string* PROTOBUF_NONNULL Pagination::mutable_after_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_after_id();
  // @@protoc_insertion_point(field_mutable:livekit.Pagination.after_id)
  return _s;
}
inline const std::string& Pagination::_internal_after_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.after_id_.Get();
}
inline void Pagination::_internal_set_after_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.after_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Pagination::_internal_mutable_after_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.after_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Pagination::release_after_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Pagination.after_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.after_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.after_id_.Set("", GetArena());
  }
  return released;
}
inline void Pagination::set_allocated_after_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.after_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.after_id_.IsDefault()) {
    _impl_.after_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Pagination.after_id)
}

// int32 limit = 2;
inline void Pagination::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Pagination::limit() const {
  // @@protoc_insertion_point(field_get:livekit.Pagination.limit)
  return _internal_limit();
}
inline void Pagination::set_limit(::int32_t value) {
  _internal_set_limit(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.Pagination.limit)
}
inline ::int32_t Pagination::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void Pagination::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// Room

// string sid = 1;
inline void Room::clear_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Room::sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.sid)
  return _internal_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Room::set_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Room.sid)
}
inline std::string* PROTOBUF_NONNULL Room::mutable_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:livekit.Room.sid)
  return _s;
}
inline const std::string& Room::_internal_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sid_.Get();
}
inline void Room::_internal_set_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Room::_internal_mutable_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Room::release_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Room.sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sid_.Set("", GetArena());
  }
  return released;
}
inline void Room::set_allocated_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Room.sid)
}

// string name = 2;
inline void Room::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Room::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Room::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Room.name)
}
inline std::string* PROTOBUF_NONNULL Room::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.Room.name)
  return _s;
}
inline const std::string& Room::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Room::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Room::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Room::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Room.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Room::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Room.name)
}

// uint32 empty_timeout = 3;
inline void Room::clear_empty_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.empty_timeout_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Room::empty_timeout() const {
  // @@protoc_insertion_point(field_get:livekit.Room.empty_timeout)
  return _internal_empty_timeout();
}
inline void Room::set_empty_timeout(::uint32_t value) {
  _internal_set_empty_timeout(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.Room.empty_timeout)
}
inline ::uint32_t Room::_internal_empty_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.empty_timeout_;
}
inline void Room::_internal_set_empty_timeout(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.empty_timeout_ = value;
}

// uint32 departure_timeout = 14;
inline void Room::clear_departure_timeout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departure_timeout_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Room::departure_timeout() const {
  // @@protoc_insertion_point(field_get:livekit.Room.departure_timeout)
  return _internal_departure_timeout();
}
inline void Room::set_departure_timeout(::uint32_t value) {
  _internal_set_departure_timeout(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:livekit.Room.departure_timeout)
}
inline ::uint32_t Room::_internal_departure_timeout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.departure_timeout_;
}
inline void Room::_internal_set_departure_timeout(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.departure_timeout_ = value;
}

// uint32 max_participants = 4;
inline void Room::clear_max_participants() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_participants_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Room::max_participants() const {
  // @@protoc_insertion_point(field_get:livekit.Room.max_participants)
  return _internal_max_participants();
}
inline void Room::set_max_participants(::uint32_t value) {
  _internal_set_max_participants(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.Room.max_participants)
}
inline ::uint32_t Room::_internal_max_participants() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_participants_;
}
inline void Room::_internal_set_max_participants(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_participants_ = value;
}

// int64 creation_time = 5;
inline void Room::clear_creation_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Room::creation_time() const {
  // @@protoc_insertion_point(field_get:livekit.Room.creation_time)
  return _internal_creation_time();
}
inline void Room::set_creation_time(::int64_t value) {
  _internal_set_creation_time(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.Room.creation_time)
}
inline ::int64_t Room::_internal_creation_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_time_;
}
inline void Room::_internal_set_creation_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_time_ = value;
}

// int64 creation_time_ms = 15;
inline void Room::clear_creation_time_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_time_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Room::creation_time_ms() const {
  // @@protoc_insertion_point(field_get:livekit.Room.creation_time_ms)
  return _internal_creation_time_ms();
}
inline void Room::set_creation_time_ms(::int64_t value) {
  _internal_set_creation_time_ms(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:livekit.Room.creation_time_ms)
}
inline ::int64_t Room::_internal_creation_time_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.creation_time_ms_;
}
inline void Room::_internal_set_creation_time_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.creation_time_ms_ = value;
}

// string turn_password = 6;
inline void Room::clear_turn_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Room::turn_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.turn_password)
  return _internal_turn_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Room::set_turn_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.turn_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Room.turn_password)
}
inline std::string* PROTOBUF_NONNULL Room::mutable_turn_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turn_password();
  // @@protoc_insertion_point(field_mutable:livekit.Room.turn_password)
  return _s;
}
inline const std::string& Room::_internal_turn_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_password_.Get();
}
inline void Room::_internal_set_turn_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.turn_password_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Room::_internal_mutable_turn_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.turn_password_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Room::release_turn_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Room.turn_password)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.turn_password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.turn_password_.Set("", GetArena());
  }
  return released;
}
inline void Room::set_allocated_turn_password(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.turn_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.turn_password_.IsDefault()) {
    _impl_.turn_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Room.turn_password)
}

// repeated .livekit.Codec enabled_codecs = 7;
inline int Room::_internal_enabled_codecs_size() const {
  return _internal_enabled_codecs().size();
}
inline int Room::enabled_codecs_size() const {
  return _internal_enabled_codecs_size();
}
inline void Room::clear_enabled_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_codecs_.Clear();
}
inline ::livekit::Codec* PROTOBUF_NONNULL Room::mutable_enabled_codecs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.Room.enabled_codecs)
  return _internal_mutable_enabled_codecs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL Room::mutable_enabled_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.Room.enabled_codecs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_enabled_codecs();
}
inline const ::livekit::Codec& Room::enabled_codecs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.enabled_codecs)
  return _internal_enabled_codecs().Get(index);
}
inline ::livekit::Codec* PROTOBUF_NONNULL Room::add_enabled_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::Codec* _add = _internal_mutable_enabled_codecs()->Add();
  // @@protoc_insertion_point(field_add:livekit.Room.enabled_codecs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& Room::enabled_codecs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.Room.enabled_codecs)
  return _internal_enabled_codecs();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>&
Room::_internal_enabled_codecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_codecs_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL
Room::_internal_mutable_enabled_codecs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.enabled_codecs_;
}

// string metadata = 8;
inline void Room::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Room::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Room::set_metadata(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Room.metadata)
}
inline std::string* PROTOBUF_NONNULL Room::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.Room.metadata)
  return _s;
}
inline const std::string& Room::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void Room::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Room::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Room::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Room.metadata)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.metadata_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.metadata_.Set("", GetArena());
  }
  return released;
}
inline void Room::set_allocated_metadata(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Room.metadata)
}

// uint32 num_participants = 9;
inline void Room::clear_num_participants() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_participants_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Room::num_participants() const {
  // @@protoc_insertion_point(field_get:livekit.Room.num_participants)
  return _internal_num_participants();
}
inline void Room::set_num_participants(::uint32_t value) {
  _internal_set_num_participants(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.Room.num_participants)
}
inline ::uint32_t Room::_internal_num_participants() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_participants_;
}
inline void Room::_internal_set_num_participants(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_participants_ = value;
}

// uint32 num_publishers = 11;
inline void Room::clear_num_publishers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_publishers_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t Room::num_publishers() const {
  // @@protoc_insertion_point(field_get:livekit.Room.num_publishers)
  return _internal_num_publishers();
}
inline void Room::set_num_publishers(::uint32_t value) {
  _internal_set_num_publishers(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.Room.num_publishers)
}
inline ::uint32_t Room::_internal_num_publishers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_publishers_;
}
inline void Room::_internal_set_num_publishers(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_publishers_ = value;
}

// bool active_recording = 10;
inline void Room::clear_active_recording() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_recording_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Room::active_recording() const {
  // @@protoc_insertion_point(field_get:livekit.Room.active_recording)
  return _internal_active_recording();
}
inline void Room::set_active_recording(bool value) {
  _internal_set_active_recording(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:livekit.Room.active_recording)
}
inline bool Room::_internal_active_recording() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_recording_;
}
inline void Room::_internal_set_active_recording(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_recording_ = value;
}

// .livekit.TimedVersion version = 13;
inline bool Room::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void Room::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::livekit::TimedVersion& Room::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::TimedVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::TimedVersion&>(::livekit::_TimedVersion_default_instance_);
}
inline const ::livekit::TimedVersion& Room::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Room.version)
  return _internal_version();
}
inline void Room::unsafe_arena_set_allocated_version(
    ::livekit::TimedVersion* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.Room.version)
}
inline ::livekit::TimedVersion* PROTOBUF_NULLABLE Room::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::livekit::TimedVersion* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::TimedVersion* PROTOBUF_NULLABLE Room::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Room.version)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::livekit::TimedVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::livekit::TimedVersion* PROTOBUF_NONNULL Room::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::TimedVersion>(GetArena());
    _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(p);
  }
  return _impl_.version_;
}
inline ::livekit::TimedVersion* PROTOBUF_NONNULL Room::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::livekit::TimedVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:livekit.Room.version)
  return _msg;
}
inline void Room::set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.Room.version)
}

// -------------------------------------------------------------------

// Codec

// string mime = 1;
inline void Codec::clear_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Codec::mime() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Codec.mime)
  return _internal_mime();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Codec::set_mime(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mime_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Codec.mime)
}
inline std::string* PROTOBUF_NONNULL Codec::mutable_mime()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime();
  // @@protoc_insertion_point(field_mutable:livekit.Codec.mime)
  return _s;
}
inline const std::string& Codec::_internal_mime() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_.Get();
}
inline void Codec::_internal_set_mime(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mime_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Codec::_internal_mutable_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mime_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Codec::release_mime() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Codec.mime)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mime_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mime_.Set("", GetArena());
  }
  return released;
}
inline void Codec::set_allocated_mime(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mime_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_.IsDefault()) {
    _impl_.mime_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Codec.mime)
}

// string fmtp_line = 2;
inline void Codec::clear_fmtp_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fmtp_line_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Codec::fmtp_line() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Codec.fmtp_line)
  return _internal_fmtp_line();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Codec::set_fmtp_line(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fmtp_line_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Codec.fmtp_line)
}
inline std::string* PROTOBUF_NONNULL Codec::mutable_fmtp_line()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_fmtp_line();
  // @@protoc_insertion_point(field_mutable:livekit.Codec.fmtp_line)
  return _s;
}
inline const std::string& Codec::_internal_fmtp_line() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fmtp_line_.Get();
}
inline void Codec::_internal_set_fmtp_line(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fmtp_line_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Codec::_internal_mutable_fmtp_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fmtp_line_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Codec::release_fmtp_line() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Codec.fmtp_line)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.fmtp_line_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.fmtp_line_.Set("", GetArena());
  }
  return released;
}
inline void Codec::set_allocated_fmtp_line(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fmtp_line_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.fmtp_line_.IsDefault()) {
    _impl_.fmtp_line_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Codec.fmtp_line)
}

// -------------------------------------------------------------------

// PlayoutDelay

// bool enabled = 1;
inline void PlayoutDelay::clear_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PlayoutDelay::enabled() const {
  // @@protoc_insertion_point(field_get:livekit.PlayoutDelay.enabled)
  return _internal_enabled();
}
inline void PlayoutDelay::set_enabled(bool value) {
  _internal_set_enabled(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.PlayoutDelay.enabled)
}
inline bool PlayoutDelay::_internal_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.enabled_;
}
inline void PlayoutDelay::_internal_set_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_ = value;
}

// uint32 min = 2;
inline void PlayoutDelay::clear_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PlayoutDelay::min() const {
  // @@protoc_insertion_point(field_get:livekit.PlayoutDelay.min)
  return _internal_min();
}
inline void PlayoutDelay::set_min(::uint32_t value) {
  _internal_set_min(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.PlayoutDelay.min)
}
inline ::uint32_t PlayoutDelay::_internal_min() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_;
}
inline void PlayoutDelay::_internal_set_min(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_ = value;
}

// uint32 max = 3;
inline void PlayoutDelay::clear_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PlayoutDelay::max() const {
  // @@protoc_insertion_point(field_get:livekit.PlayoutDelay.max)
  return _internal_max();
}
inline void PlayoutDelay::set_max(::uint32_t value) {
  _internal_set_max(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.PlayoutDelay.max)
}
inline ::uint32_t PlayoutDelay::_internal_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_;
}
inline void PlayoutDelay::_internal_set_max(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_ = value;
}

// -------------------------------------------------------------------

// ParticipantPermission

// bool can_subscribe = 1;
inline void ParticipantPermission::clear_can_subscribe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_subscribe_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ParticipantPermission::can_subscribe() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_subscribe)
  return _internal_can_subscribe();
}
inline void ParticipantPermission::set_can_subscribe(bool value) {
  _internal_set_can_subscribe(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_subscribe)
}
inline bool ParticipantPermission::_internal_can_subscribe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_subscribe_;
}
inline void ParticipantPermission::_internal_set_can_subscribe(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_subscribe_ = value;
}

// bool can_publish = 2;
inline void ParticipantPermission::clear_can_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_publish_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ParticipantPermission::can_publish() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_publish)
  return _internal_can_publish();
}
inline void ParticipantPermission::set_can_publish(bool value) {
  _internal_set_can_publish(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_publish)
}
inline bool ParticipantPermission::_internal_can_publish() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_publish_;
}
inline void ParticipantPermission::_internal_set_can_publish(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_publish_ = value;
}

// bool can_publish_data = 3;
inline void ParticipantPermission::clear_can_publish_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_publish_data_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ParticipantPermission::can_publish_data() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_publish_data)
  return _internal_can_publish_data();
}
inline void ParticipantPermission::set_can_publish_data(bool value) {
  _internal_set_can_publish_data(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_publish_data)
}
inline bool ParticipantPermission::_internal_can_publish_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_publish_data_;
}
inline void ParticipantPermission::_internal_set_can_publish_data(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_publish_data_ = value;
}

// repeated .livekit.TrackSource can_publish_sources = 9;
inline int ParticipantPermission::_internal_can_publish_sources_size() const {
  return _internal_can_publish_sources().size();
}
inline int ParticipantPermission::can_publish_sources_size() const {
  return _internal_can_publish_sources_size();
}
inline void ParticipantPermission::clear_can_publish_sources() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_publish_sources_.Clear();
}
inline ::livekit::TrackSource ParticipantPermission::can_publish_sources(int index) const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_publish_sources)
  return static_cast<::livekit::TrackSource>(_internal_can_publish_sources().Get(index));
}
inline void ParticipantPermission::set_can_publish_sources(int index, ::livekit::TrackSource value) {
  _internal_mutable_can_publish_sources()->Set(index, value);
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_publish_sources)
}
inline void ParticipantPermission::add_can_publish_sources(::livekit::TrackSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_can_publish_sources()->Add(value);
  // @@protoc_insertion_point(field_add:livekit.ParticipantPermission.can_publish_sources)
}
inline const ::google::protobuf::RepeatedField<int>& ParticipantPermission::can_publish_sources() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.ParticipantPermission.can_publish_sources)
  return _internal_can_publish_sources();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL ParticipantPermission::mutable_can_publish_sources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.ParticipantPermission.can_publish_sources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_can_publish_sources();
}
inline const ::google::protobuf::RepeatedField<int>& ParticipantPermission::_internal_can_publish_sources()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_publish_sources_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
ParticipantPermission::_internal_mutable_can_publish_sources() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.can_publish_sources_;
}

// bool hidden = 7;
inline void ParticipantPermission::clear_hidden() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ParticipantPermission::hidden() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.hidden)
  return _internal_hidden();
}
inline void ParticipantPermission::set_hidden(bool value) {
  _internal_set_hidden(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.hidden)
}
inline bool ParticipantPermission::_internal_hidden() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hidden_;
}
inline void ParticipantPermission::_internal_set_hidden(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hidden_ = value;
}

// bool recorder = 8 [deprecated = true];
inline void ParticipantPermission::clear_recorder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorder_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ParticipantPermission::recorder() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.recorder)
  return _internal_recorder();
}
inline void ParticipantPermission::set_recorder(bool value) {
  _internal_set_recorder(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.recorder)
}
inline bool ParticipantPermission::_internal_recorder() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recorder_;
}
inline void ParticipantPermission::_internal_set_recorder(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recorder_ = value;
}

// bool can_update_metadata = 10;
inline void ParticipantPermission::clear_can_update_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_update_metadata_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ParticipantPermission::can_update_metadata() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_update_metadata)
  return _internal_can_update_metadata();
}
inline void ParticipantPermission::set_can_update_metadata(bool value) {
  _internal_set_can_update_metadata(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_update_metadata)
}
inline bool ParticipantPermission::_internal_can_update_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_update_metadata_;
}
inline void ParticipantPermission::_internal_set_can_update_metadata(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_update_metadata_ = value;
}

// bool agent = 11 [deprecated = true];
inline void ParticipantPermission::clear_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ParticipantPermission::agent() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.agent)
  return _internal_agent();
}
inline void ParticipantPermission::set_agent(bool value) {
  _internal_set_agent(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.agent)
}
inline bool ParticipantPermission::_internal_agent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.agent_;
}
inline void ParticipantPermission::_internal_set_agent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_ = value;
}

// bool can_subscribe_metrics = 12;
inline void ParticipantPermission::clear_can_subscribe_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_subscribe_metrics_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ParticipantPermission::can_subscribe_metrics() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantPermission.can_subscribe_metrics)
  return _internal_can_subscribe_metrics();
}
inline void ParticipantPermission::set_can_subscribe_metrics(bool value) {
  _internal_set_can_subscribe_metrics(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantPermission.can_subscribe_metrics)
}
inline bool ParticipantPermission::_internal_can_subscribe_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_subscribe_metrics_;
}
inline void ParticipantPermission::_internal_set_can_subscribe_metrics(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_subscribe_metrics_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ParticipantInfo

// string sid = 1;
inline void ParticipantInfo::clear_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParticipantInfo::sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.sid)
  return _internal_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.sid)
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::mutable_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.sid)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sid_.Get();
}
inline void ParticipantInfo::_internal_set_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantInfo::release_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sid_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantInfo::set_allocated_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.sid)
}

// string identity = 2;
inline void ParticipantInfo::clear_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ParticipantInfo::identity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.identity)
  return _internal_identity();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_identity(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.identity)
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::mutable_identity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.identity)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_identity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_.Get();
}
inline void ParticipantInfo::_internal_set_identity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.identity_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantInfo::release_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.identity)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.identity_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.identity_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantInfo::set_allocated_identity(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.identity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_.IsDefault()) {
    _impl_.identity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.identity)
}

// .livekit.ParticipantInfo.State state = 3;
inline void ParticipantInfo::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::livekit::ParticipantInfo_State ParticipantInfo::state() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.state)
  return _internal_state();
}
inline void ParticipantInfo::set_state(::livekit::ParticipantInfo_State value) {
  _internal_set_state(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.state)
}
inline ::livekit::ParticipantInfo_State ParticipantInfo::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ParticipantInfo_State>(_impl_.state_);
}
inline void ParticipantInfo::_internal_set_state(::livekit::ParticipantInfo_State value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// repeated .livekit.TrackInfo tracks = 4;
inline int ParticipantInfo::_internal_tracks_size() const {
  return _internal_tracks().size();
}
inline int ParticipantInfo::tracks_size() const {
  return _internal_tracks_size();
}
inline void ParticipantInfo::clear_tracks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracks_.Clear();
}
inline ::livekit::TrackInfo* PROTOBUF_NONNULL ParticipantInfo::mutable_tracks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.tracks)
  return _internal_mutable_tracks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>* PROTOBUF_NONNULL ParticipantInfo::mutable_tracks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.ParticipantInfo.tracks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tracks();
}
inline const ::livekit::TrackInfo& ParticipantInfo::tracks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.tracks)
  return _internal_tracks().Get(index);
}
inline ::livekit::TrackInfo* PROTOBUF_NONNULL ParticipantInfo::add_tracks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::TrackInfo* _add = _internal_mutable_tracks()->Add();
  // @@protoc_insertion_point(field_add:livekit.ParticipantInfo.tracks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>& ParticipantInfo::tracks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.ParticipantInfo.tracks)
  return _internal_tracks();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>&
ParticipantInfo::_internal_tracks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracks_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::TrackInfo>* PROTOBUF_NONNULL
ParticipantInfo::_internal_mutable_tracks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tracks_;
}

// string metadata = 5;
inline void ParticipantInfo::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ParticipantInfo::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_metadata(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.metadata)
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.metadata)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.Get();
}
inline void ParticipantInfo::_internal_set_metadata(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.metadata_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.metadata_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantInfo::release_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.metadata)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.metadata_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.metadata_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantInfo::set_allocated_metadata(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.metadata_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.metadata_.IsDefault()) {
    _impl_.metadata_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.metadata)
}

// int64 joined_at = 6;
inline void ParticipantInfo::clear_joined_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t ParticipantInfo::joined_at() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.joined_at)
  return _internal_joined_at();
}
inline void ParticipantInfo::set_joined_at(::int64_t value) {
  _internal_set_joined_at(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.joined_at)
}
inline ::int64_t ParticipantInfo::_internal_joined_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joined_at_;
}
inline void ParticipantInfo::_internal_set_joined_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_at_ = value;
}

// int64 joined_at_ms = 17;
inline void ParticipantInfo::clear_joined_at_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_at_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t ParticipantInfo::joined_at_ms() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.joined_at_ms)
  return _internal_joined_at_ms();
}
inline void ParticipantInfo::set_joined_at_ms(::int64_t value) {
  _internal_set_joined_at_ms(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.joined_at_ms)
}
inline ::int64_t ParticipantInfo::_internal_joined_at_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joined_at_ms_;
}
inline void ParticipantInfo::_internal_set_joined_at_ms(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_at_ms_ = value;
}

// string name = 9;
inline void ParticipantInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ParticipantInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.name)
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.name)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ParticipantInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.name)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantInfo::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.name)
}

// uint32 version = 10;
inline void ParticipantInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t ParticipantInfo::version() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.version)
  return _internal_version();
}
inline void ParticipantInfo::set_version(::uint32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.version)
}
inline ::uint32_t ParticipantInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void ParticipantInfo::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// .livekit.ParticipantPermission permission = 11;
inline bool ParticipantInfo::has_permission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permission_ != nullptr);
  return value;
}
inline void ParticipantInfo::clear_permission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permission_ != nullptr) _impl_.permission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::livekit::ParticipantPermission& ParticipantInfo::_internal_permission() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::ParticipantPermission* p = _impl_.permission_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::ParticipantPermission&>(::livekit::_ParticipantPermission_default_instance_);
}
inline const ::livekit::ParticipantPermission& ParticipantInfo::permission() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.permission)
  return _internal_permission();
}
inline void ParticipantInfo::unsafe_arena_set_allocated_permission(
    ::livekit::ParticipantPermission* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permission_);
  }
  _impl_.permission_ = reinterpret_cast<::livekit::ParticipantPermission*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ParticipantInfo.permission)
}
inline ::livekit::ParticipantPermission* PROTOBUF_NULLABLE ParticipantInfo::release_permission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::ParticipantPermission* released = _impl_.permission_;
  _impl_.permission_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::ParticipantPermission* PROTOBUF_NULLABLE ParticipantInfo::unsafe_arena_release_permission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.permission)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::ParticipantPermission* temp = _impl_.permission_;
  _impl_.permission_ = nullptr;
  return temp;
}
inline ::livekit::ParticipantPermission* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_permission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.permission_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::ParticipantPermission>(GetArena());
    _impl_.permission_ = reinterpret_cast<::livekit::ParticipantPermission*>(p);
  }
  return _impl_.permission_;
}
inline ::livekit::ParticipantPermission* PROTOBUF_NONNULL ParticipantInfo::mutable_permission()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::livekit::ParticipantPermission* _msg = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.permission)
  return _msg;
}
inline void ParticipantInfo::set_allocated_permission(::livekit::ParticipantPermission* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permission_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.permission_ = reinterpret_cast<::livekit::ParticipantPermission*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.permission)
}

// string region = 12;
inline void ParticipantInfo::clear_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.region_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ParticipantInfo::region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.region)
  return _internal_region();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantInfo::set_region(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.region_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.region)
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::mutable_region()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantInfo.region)
  return _s;
}
inline const std::string& ParticipantInfo::_internal_region() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.region_.Get();
}
inline void ParticipantInfo::_internal_set_region(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.region_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.region_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantInfo::release_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantInfo.region)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.region_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.region_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantInfo::set_allocated_region(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.region_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantInfo.region)
}

// bool is_publisher = 13;
inline void ParticipantInfo::clear_is_publisher() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_publisher_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ParticipantInfo::is_publisher() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.is_publisher)
  return _internal_is_publisher();
}
inline void ParticipantInfo::set_is_publisher(bool value) {
  _internal_set_is_publisher(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.is_publisher)
}
inline bool ParticipantInfo::_internal_is_publisher() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_publisher_;
}
inline void ParticipantInfo::_internal_set_is_publisher(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_publisher_ = value;
}

// .livekit.ParticipantInfo.Kind kind = 14;
inline void ParticipantInfo::clear_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::livekit::ParticipantInfo_Kind ParticipantInfo::kind() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.kind)
  return _internal_kind();
}
inline void ParticipantInfo::set_kind(::livekit::ParticipantInfo_Kind value) {
  _internal_set_kind(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.kind)
}
inline ::livekit::ParticipantInfo_Kind ParticipantInfo::_internal_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ParticipantInfo_Kind>(_impl_.kind_);
}
inline void ParticipantInfo::_internal_set_kind(::livekit::ParticipantInfo_Kind value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = value;
}

// map<string, string> attributes = 15;
inline int ParticipantInfo::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int ParticipantInfo::attributes_size() const {
  return _internal_attributes_size();
}
inline void ParticipantInfo::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ParticipantInfo::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ParticipantInfo::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:livekit.ParticipantInfo.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL ParticipantInfo::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL ParticipantInfo::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:livekit.ParticipantInfo.attributes)
  return _internal_mutable_attributes();
}

// .livekit.DisconnectReason disconnect_reason = 16;
inline void ParticipantInfo::clear_disconnect_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::livekit::DisconnectReason ParticipantInfo::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:livekit.ParticipantInfo.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void ParticipantInfo::set_disconnect_reason(::livekit::DisconnectReason value) {
  _internal_set_disconnect_reason(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:livekit.ParticipantInfo.disconnect_reason)
}
inline ::livekit::DisconnectReason ParticipantInfo::_internal_disconnect_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::DisconnectReason>(_impl_.disconnect_reason_);
}
inline void ParticipantInfo::_internal_set_disconnect_reason(::livekit::DisconnectReason value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disconnect_reason_ = value;
}

// -------------------------------------------------------------------

// Encryption

// -------------------------------------------------------------------

// SimulcastCodecInfo

// string mime_type = 1;
inline void SimulcastCodecInfo::clear_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimulcastCodecInfo::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SimulcastCodecInfo.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimulcastCodecInfo::set_mime_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.SimulcastCodecInfo.mime_type)
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::mutable_mime_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:livekit.SimulcastCodecInfo.mime_type)
  return _s;
}
inline const std::string& SimulcastCodecInfo::_internal_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_type_.Get();
}
inline void SimulcastCodecInfo::_internal_set_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::_internal_mutable_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SimulcastCodecInfo::release_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.SimulcastCodecInfo.mime_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mime_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  return released;
}
inline void SimulcastCodecInfo::set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mime_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SimulcastCodecInfo.mime_type)
}

// string mid = 2;
inline void SimulcastCodecInfo::clear_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SimulcastCodecInfo::mid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SimulcastCodecInfo.mid)
  return _internal_mid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimulcastCodecInfo::set_mid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.SimulcastCodecInfo.mid)
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::mutable_mid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:livekit.SimulcastCodecInfo.mid)
  return _s;
}
inline const std::string& SimulcastCodecInfo::_internal_mid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mid_.Get();
}
inline void SimulcastCodecInfo::_internal_set_mid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::_internal_mutable_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SimulcastCodecInfo::release_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.SimulcastCodecInfo.mid)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mid_.Set("", GetArena());
  }
  return released;
}
inline void SimulcastCodecInfo::set_allocated_mid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SimulcastCodecInfo.mid)
}

// string cid = 3;
inline void SimulcastCodecInfo::clear_cid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SimulcastCodecInfo::cid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SimulcastCodecInfo.cid)
  return _internal_cid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimulcastCodecInfo::set_cid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.SimulcastCodecInfo.cid)
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::mutable_cid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cid();
  // @@protoc_insertion_point(field_mutable:livekit.SimulcastCodecInfo.cid)
  return _s;
}
inline const std::string& SimulcastCodecInfo::_internal_cid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cid_.Get();
}
inline void SimulcastCodecInfo::_internal_set_cid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SimulcastCodecInfo::_internal_mutable_cid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.cid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SimulcastCodecInfo::release_cid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.SimulcastCodecInfo.cid)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.cid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cid_.Set("", GetArena());
  }
  return released;
}
inline void SimulcastCodecInfo::set_allocated_cid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.cid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cid_.IsDefault()) {
    _impl_.cid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SimulcastCodecInfo.cid)
}

// repeated .livekit.VideoLayer layers = 4;
inline int SimulcastCodecInfo::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int SimulcastCodecInfo::layers_size() const {
  return _internal_layers_size();
}
inline void SimulcastCodecInfo::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::livekit::VideoLayer* PROTOBUF_NONNULL SimulcastCodecInfo::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.SimulcastCodecInfo.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL SimulcastCodecInfo::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.SimulcastCodecInfo.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::livekit::VideoLayer& SimulcastCodecInfo::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SimulcastCodecInfo.layers)
  return _internal_layers().Get(index);
}
inline ::livekit::VideoLayer* PROTOBUF_NONNULL SimulcastCodecInfo::add_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::VideoLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:livekit.SimulcastCodecInfo.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& SimulcastCodecInfo::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.SimulcastCodecInfo.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>&
SimulcastCodecInfo::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL
SimulcastCodecInfo::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

// -------------------------------------------------------------------

// TrackInfo

// string sid = 1;
inline void TrackInfo::clear_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackInfo::sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.sid)
  return _internal_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TrackInfo::set_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.sid)
}
inline std::string* PROTOBUF_NONNULL TrackInfo::mutable_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.sid)
  return _s;
}
inline const std::string& TrackInfo::_internal_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sid_.Get();
}
inline void TrackInfo::_internal_set_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TrackInfo::_internal_mutable_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TrackInfo::release_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sid_.Set("", GetArena());
  }
  return released;
}
inline void TrackInfo::set_allocated_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.sid)
}

// .livekit.TrackType type = 2;
inline void TrackInfo::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::livekit::TrackType TrackInfo::type() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.type)
  return _internal_type();
}
inline void TrackInfo::set_type(::livekit::TrackType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.type)
}
inline ::livekit::TrackType TrackInfo::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::TrackType>(_impl_.type_);
}
inline void TrackInfo::_internal_set_type(::livekit::TrackType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string name = 3;
inline void TrackInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TrackInfo::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.name)
}
inline std::string* PROTOBUF_NONNULL TrackInfo::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.name)
  return _s;
}
inline const std::string& TrackInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void TrackInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TrackInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TrackInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void TrackInfo::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.name)
}

// bool muted = 4;
inline void TrackInfo::clear_muted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muted_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TrackInfo::muted() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.muted)
  return _internal_muted();
}
inline void TrackInfo::set_muted(bool value) {
  _internal_set_muted(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.muted)
}
inline bool TrackInfo::_internal_muted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.muted_;
}
inline void TrackInfo::_internal_set_muted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muted_ = value;
}

// uint32 width = 5;
inline void TrackInfo::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t TrackInfo::width() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.width)
  return _internal_width();
}
inline void TrackInfo::set_width(::uint32_t value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.width)
}
inline ::uint32_t TrackInfo::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void TrackInfo::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 6;
inline void TrackInfo::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t TrackInfo::height() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.height)
  return _internal_height();
}
inline void TrackInfo::set_height(::uint32_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.height)
}
inline ::uint32_t TrackInfo::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void TrackInfo::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// bool simulcast = 7;
inline void TrackInfo::clear_simulcast() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.simulcast_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool TrackInfo::simulcast() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.simulcast)
  return _internal_simulcast();
}
inline void TrackInfo::set_simulcast(bool value) {
  _internal_set_simulcast(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.simulcast)
}
inline bool TrackInfo::_internal_simulcast() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.simulcast_;
}
inline void TrackInfo::_internal_set_simulcast(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.simulcast_ = value;
}

// bool disable_dtx = 8;
inline void TrackInfo::clear_disable_dtx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_dtx_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool TrackInfo::disable_dtx() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.disable_dtx)
  return _internal_disable_dtx();
}
inline void TrackInfo::set_disable_dtx(bool value) {
  _internal_set_disable_dtx(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.disable_dtx)
}
inline bool TrackInfo::_internal_disable_dtx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_dtx_;
}
inline void TrackInfo::_internal_set_disable_dtx(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_dtx_ = value;
}

// .livekit.TrackSource source = 9;
inline void TrackInfo::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::livekit::TrackSource TrackInfo::source() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.source)
  return _internal_source();
}
inline void TrackInfo::set_source(::livekit::TrackSource value) {
  _internal_set_source(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.source)
}
inline ::livekit::TrackSource TrackInfo::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::TrackSource>(_impl_.source_);
}
inline void TrackInfo::_internal_set_source(::livekit::TrackSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_ = value;
}

// repeated .livekit.VideoLayer layers = 10;
inline int TrackInfo::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int TrackInfo::layers_size() const {
  return _internal_layers_size();
}
inline void TrackInfo::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::livekit::VideoLayer* PROTOBUF_NONNULL TrackInfo::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL TrackInfo::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.TrackInfo.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::livekit::VideoLayer& TrackInfo::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.layers)
  return _internal_layers().Get(index);
}
inline ::livekit::VideoLayer* PROTOBUF_NONNULL TrackInfo::add_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::VideoLayer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:livekit.TrackInfo.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>& TrackInfo::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.TrackInfo.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>&
TrackInfo::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::VideoLayer>* PROTOBUF_NONNULL
TrackInfo::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

// string mime_type = 11;
inline void TrackInfo::clear_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrackInfo::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TrackInfo::set_mime_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.mime_type)
}
inline std::string* PROTOBUF_NONNULL TrackInfo::mutable_mime_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.mime_type)
  return _s;
}
inline const std::string& TrackInfo::_internal_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_type_.Get();
}
inline void TrackInfo::_internal_set_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TrackInfo::_internal_mutable_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TrackInfo::release_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.mime_type)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.mime_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  return released;
}
inline void TrackInfo::set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mime_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.mime_type)
}

// string mid = 12;
inline void TrackInfo::clear_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TrackInfo::mid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.mid)
  return _internal_mid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TrackInfo::set_mid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.mid)
}
inline std::string* PROTOBUF_NONNULL TrackInfo::mutable_mid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.mid)
  return _s;
}
inline const std::string& TrackInfo::_internal_mid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mid_.Get();
}
inline void TrackInfo::_internal_set_mid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TrackInfo::_internal_mutable_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.mid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TrackInfo::release_mid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.mid)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.mid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mid_.Set("", GetArena());
  }
  return released;
}
inline void TrackInfo::set_allocated_mid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.mid)
}

// repeated .livekit.SimulcastCodecInfo codecs = 13;
inline int TrackInfo::_internal_codecs_size() const {
  return _internal_codecs().size();
}
inline int TrackInfo::codecs_size() const {
  return _internal_codecs_size();
}
inline void TrackInfo::clear_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codecs_.Clear();
}
inline ::livekit::SimulcastCodecInfo* PROTOBUF_NONNULL TrackInfo::mutable_codecs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.codecs)
  return _internal_mutable_codecs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>* PROTOBUF_NONNULL TrackInfo::mutable_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.TrackInfo.codecs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_codecs();
}
inline const ::livekit::SimulcastCodecInfo& TrackInfo::codecs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.codecs)
  return _internal_codecs().Get(index);
}
inline ::livekit::SimulcastCodecInfo* PROTOBUF_NONNULL TrackInfo::add_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::SimulcastCodecInfo* _add = _internal_mutable_codecs()->Add();
  // @@protoc_insertion_point(field_add:livekit.TrackInfo.codecs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>& TrackInfo::codecs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.TrackInfo.codecs)
  return _internal_codecs();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>&
TrackInfo::_internal_codecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codecs_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::SimulcastCodecInfo>* PROTOBUF_NONNULL
TrackInfo::_internal_mutable_codecs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.codecs_;
}

// bool stereo = 14;
inline void TrackInfo::clear_stereo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stereo_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool TrackInfo::stereo() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.stereo)
  return _internal_stereo();
}
inline void TrackInfo::set_stereo(bool value) {
  _internal_set_stereo(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.stereo)
}
inline bool TrackInfo::_internal_stereo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stereo_;
}
inline void TrackInfo::_internal_set_stereo(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stereo_ = value;
}

// bool disable_red = 15;
inline void TrackInfo::clear_disable_red() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_red_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool TrackInfo::disable_red() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.disable_red)
  return _internal_disable_red();
}
inline void TrackInfo::set_disable_red(bool value) {
  _internal_set_disable_red(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.disable_red)
}
inline bool TrackInfo::_internal_disable_red() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disable_red_;
}
inline void TrackInfo::_internal_set_disable_red(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disable_red_ = value;
}

// .livekit.Encryption.Type encryption = 16;
inline void TrackInfo::clear_encryption() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::livekit::Encryption_Type TrackInfo::encryption() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.encryption)
  return _internal_encryption();
}
inline void TrackInfo::set_encryption(::livekit::Encryption_Type value) {
  _internal_set_encryption(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.encryption)
}
inline ::livekit::Encryption_Type TrackInfo::_internal_encryption() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::Encryption_Type>(_impl_.encryption_);
}
inline void TrackInfo::_internal_set_encryption(::livekit::Encryption_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_ = value;
}

// string stream = 17;
inline void TrackInfo::clear_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TrackInfo::stream() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.stream)
  return _internal_stream();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TrackInfo::set_stream(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stream_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.stream)
}
inline std::string* PROTOBUF_NONNULL TrackInfo::mutable_stream()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.stream)
  return _s;
}
inline const std::string& TrackInfo::_internal_stream() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_.Get();
}
inline void TrackInfo::_internal_set_stream(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stream_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TrackInfo::_internal_mutable_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.stream_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TrackInfo::release_stream() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.stream)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.stream_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.stream_.Set("", GetArena());
  }
  return released;
}
inline void TrackInfo::set_allocated_stream(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.stream_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_.IsDefault()) {
    _impl_.stream_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.stream)
}

// .livekit.TimedVersion version = 18;
inline bool TrackInfo::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void TrackInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::livekit::TimedVersion& TrackInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::TimedVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::TimedVersion&>(::livekit::_TimedVersion_default_instance_);
}
inline const ::livekit::TimedVersion& TrackInfo::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.version)
  return _internal_version();
}
inline void TrackInfo::unsafe_arena_set_allocated_version(
    ::livekit::TimedVersion* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.TrackInfo.version)
}
inline ::livekit::TimedVersion* PROTOBUF_NULLABLE TrackInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::TimedVersion* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::TimedVersion* PROTOBUF_NULLABLE TrackInfo::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TrackInfo.version)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::TimedVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::livekit::TimedVersion* PROTOBUF_NONNULL TrackInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::TimedVersion>(GetArena());
    _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(p);
  }
  return _impl_.version_;
}
inline ::livekit::TimedVersion* PROTOBUF_NONNULL TrackInfo::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::livekit::TimedVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:livekit.TrackInfo.version)
  return _msg;
}
inline void TrackInfo::set_allocated_version(::livekit::TimedVersion* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.version_ = reinterpret_cast<::livekit::TimedVersion*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackInfo.version)
}

// repeated .livekit.AudioTrackFeature audio_features = 19;
inline int TrackInfo::_internal_audio_features_size() const {
  return _internal_audio_features().size();
}
inline int TrackInfo::audio_features_size() const {
  return _internal_audio_features_size();
}
inline void TrackInfo::clear_audio_features() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.audio_features_.Clear();
}
inline ::livekit::AudioTrackFeature TrackInfo::audio_features(int index) const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.audio_features)
  return static_cast<::livekit::AudioTrackFeature>(_internal_audio_features().Get(index));
}
inline void TrackInfo::set_audio_features(int index, ::livekit::AudioTrackFeature value) {
  _internal_mutable_audio_features()->Set(index, value);
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.audio_features)
}
inline void TrackInfo::add_audio_features(::livekit::AudioTrackFeature value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_audio_features()->Add(value);
  // @@protoc_insertion_point(field_add:livekit.TrackInfo.audio_features)
}
inline const ::google::protobuf::RepeatedField<int>& TrackInfo::audio_features() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.TrackInfo.audio_features)
  return _internal_audio_features();
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL TrackInfo::mutable_audio_features()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.TrackInfo.audio_features)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_audio_features();
}
inline const ::google::protobuf::RepeatedField<int>& TrackInfo::_internal_audio_features()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.audio_features_;
}
inline ::google::protobuf::RepeatedField<int>* PROTOBUF_NONNULL
TrackInfo::_internal_mutable_audio_features() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.audio_features_;
}

// .livekit.BackupCodecPolicy backup_codec_policy = 20;
inline void TrackInfo::clear_backup_codec_policy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_codec_policy_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::livekit::BackupCodecPolicy TrackInfo::backup_codec_policy() const {
  // @@protoc_insertion_point(field_get:livekit.TrackInfo.backup_codec_policy)
  return _internal_backup_codec_policy();
}
inline void TrackInfo::set_backup_codec_policy(::livekit::BackupCodecPolicy value) {
  _internal_set_backup_codec_policy(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:livekit.TrackInfo.backup_codec_policy)
}
inline ::livekit::BackupCodecPolicy TrackInfo::_internal_backup_codec_policy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::BackupCodecPolicy>(_impl_.backup_codec_policy_);
}
inline void TrackInfo::_internal_set_backup_codec_policy(::livekit::BackupCodecPolicy value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.backup_codec_policy_ = value;
}

// -------------------------------------------------------------------

// VideoLayer

// .livekit.VideoQuality quality = 1;
inline void VideoLayer::clear_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::livekit::VideoQuality VideoLayer::quality() const {
  // @@protoc_insertion_point(field_get:livekit.VideoLayer.quality)
  return _internal_quality();
}
inline void VideoLayer::set_quality(::livekit::VideoQuality value) {
  _internal_set_quality(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.VideoLayer.quality)
}
inline ::livekit::VideoQuality VideoLayer::_internal_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::VideoQuality>(_impl_.quality_);
}
inline void VideoLayer::_internal_set_quality(::livekit::VideoQuality value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = value;
}

// uint32 width = 2;
inline void VideoLayer::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VideoLayer::width() const {
  // @@protoc_insertion_point(field_get:livekit.VideoLayer.width)
  return _internal_width();
}
inline void VideoLayer::set_width(::uint32_t value) {
  _internal_set_width(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.VideoLayer.width)
}
inline ::uint32_t VideoLayer::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void VideoLayer::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void VideoLayer::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t VideoLayer::height() const {
  // @@protoc_insertion_point(field_get:livekit.VideoLayer.height)
  return _internal_height();
}
inline void VideoLayer::set_height(::uint32_t value) {
  _internal_set_height(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.VideoLayer.height)
}
inline ::uint32_t VideoLayer::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void VideoLayer::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 bitrate = 4;
inline void VideoLayer::clear_bitrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t VideoLayer::bitrate() const {
  // @@protoc_insertion_point(field_get:livekit.VideoLayer.bitrate)
  return _internal_bitrate();
}
inline void VideoLayer::set_bitrate(::uint32_t value) {
  _internal_set_bitrate(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.VideoLayer.bitrate)
}
inline ::uint32_t VideoLayer::_internal_bitrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_;
}
inline void VideoLayer::_internal_set_bitrate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_ = value;
}

// uint32 ssrc = 5;
inline void VideoLayer::clear_ssrc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ssrc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t VideoLayer::ssrc() const {
  // @@protoc_insertion_point(field_get:livekit.VideoLayer.ssrc)
  return _internal_ssrc();
}
inline void VideoLayer::set_ssrc(::uint32_t value) {
  _internal_set_ssrc(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.VideoLayer.ssrc)
}
inline ::uint32_t VideoLayer::_internal_ssrc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ssrc_;
}
inline void VideoLayer::_internal_set_ssrc(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ssrc_ = value;
}

// -------------------------------------------------------------------

// DataPacket

// .livekit.DataPacket.Kind kind = 1 [deprecated = true];
inline void DataPacket::clear_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::livekit::DataPacket_Kind DataPacket::kind() const {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.kind)
  return _internal_kind();
}
inline void DataPacket::set_kind(::livekit::DataPacket_Kind value) {
  _internal_set_kind(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.DataPacket.kind)
}
inline ::livekit::DataPacket_Kind DataPacket::_internal_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::DataPacket_Kind>(_impl_.kind_);
}
inline void DataPacket::_internal_set_kind(::livekit::DataPacket_Kind value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kind_ = value;
}

// string participant_identity = 4;
inline void DataPacket::clear_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataPacket::participant_identity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.participant_identity)
  return _internal_participant_identity();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataPacket::set_participant_identity(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_identity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataPacket.participant_identity)
}
inline std::string* PROTOBUF_NONNULL DataPacket::mutable_participant_identity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.participant_identity)
  return _s;
}
inline const std::string& DataPacket::_internal_participant_identity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_identity_.Get();
}
inline void DataPacket::_internal_set_participant_identity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_identity_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataPacket::_internal_mutable_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.participant_identity_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataPacket::release_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataPacket.participant_identity)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.participant_identity_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.participant_identity_.Set("", GetArena());
  }
  return released;
}
inline void DataPacket::set_allocated_participant_identity(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.participant_identity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataPacket.participant_identity)
}

// repeated string destination_identities = 5;
inline int DataPacket::_internal_destination_identities_size() const {
  return _internal_destination_identities().size();
}
inline int DataPacket::destination_identities_size() const {
  return _internal_destination_identities_size();
}
inline void DataPacket::clear_destination_identities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_identities_.Clear();
}
inline std::string* PROTOBUF_NONNULL DataPacket::add_destination_identities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_destination_identities()->Add();
  // @@protoc_insertion_point(field_add_mutable:livekit.DataPacket.destination_identities)
  return _s;
}
inline const std::string& DataPacket::destination_identities(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.destination_identities)
  return _internal_destination_identities().Get(index);
}
inline std::string* PROTOBUF_NONNULL DataPacket::mutable_destination_identities(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.destination_identities)
  return _internal_mutable_destination_identities()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DataPacket::set_destination_identities(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_destination_identities()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:livekit.DataPacket.destination_identities)
}
template <typename Arg_, typename... Args_>
inline void DataPacket::add_destination_identities(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_destination_identities(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:livekit.DataPacket.destination_identities)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& DataPacket::destination_identities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.DataPacket.destination_identities)
  return _internal_destination_identities();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
DataPacket::mutable_destination_identities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.DataPacket.destination_identities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_destination_identities();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DataPacket::_internal_destination_identities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_identities_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
DataPacket::_internal_mutable_destination_identities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.destination_identities_;
}

// .livekit.UserPacket user = 2;
inline bool DataPacket::has_user() const {
  return value_case() == kUser;
}
inline bool DataPacket::_internal_has_user() const {
  return value_case() == kUser;
}
inline void DataPacket::set_has_user() {
  _impl_._oneof_case_[0] = kUser;
}
inline void DataPacket::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kUser) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.user_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.user_);
    }
    clear_has_value();
  }
}
inline ::livekit::UserPacket* PROTOBUF_NULLABLE DataPacket::release_user() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.user)
  if (value_case() == kUser) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::UserPacket*>(_impl_.value_.user_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::UserPacket& DataPacket::_internal_user() const {
  return value_case() == kUser ? *reinterpret_cast<::livekit::UserPacket*>(_impl_.value_.user_) : reinterpret_cast<::livekit::UserPacket&>(::livekit::_UserPacket_default_instance_);
}
inline const ::livekit::UserPacket& DataPacket::user() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.user)
  return _internal_user();
}
inline ::livekit::UserPacket* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.user)
  if (value_case() == kUser) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::UserPacket*>(_impl_.value_.user_);
    _impl_.value_.user_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_user(
    ::livekit::UserPacket* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_user();
    _impl_.value_.user_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.user)
}
inline ::livekit::UserPacket* PROTOBUF_NONNULL DataPacket::_internal_mutable_user() {
  if (value_case() != kUser) {
    clear_value();
    set_has_user();
    _impl_.value_.user_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::UserPacket>(GetArena()));
  }
  return reinterpret_cast<::livekit::UserPacket*>(_impl_.value_.user_);
}
inline ::livekit::UserPacket* PROTOBUF_NONNULL DataPacket::mutable_user()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::UserPacket* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.user)
  return _msg;
}

// .livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];
inline bool DataPacket::has_speaker() const {
  return value_case() == kSpeaker;
}
inline bool DataPacket::_internal_has_speaker() const {
  return value_case() == kSpeaker;
}
inline void DataPacket::set_has_speaker() {
  _impl_._oneof_case_[0] = kSpeaker;
}
inline void DataPacket::clear_speaker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kSpeaker) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.speaker_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.speaker_);
    }
    clear_has_value();
  }
}
inline ::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE DataPacket::release_speaker() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.speaker)
  if (value_case() == kSpeaker) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::ActiveSpeakerUpdate*>(_impl_.value_.speaker_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.speaker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::ActiveSpeakerUpdate& DataPacket::_internal_speaker() const {
  return value_case() == kSpeaker ? *reinterpret_cast<::livekit::ActiveSpeakerUpdate*>(_impl_.value_.speaker_) : reinterpret_cast<::livekit::ActiveSpeakerUpdate&>(::livekit::_ActiveSpeakerUpdate_default_instance_);
}
inline const ::livekit::ActiveSpeakerUpdate& DataPacket::speaker() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.speaker)
  return _internal_speaker();
}
inline ::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_speaker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.speaker)
  if (value_case() == kSpeaker) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::ActiveSpeakerUpdate*>(_impl_.value_.speaker_);
    _impl_.value_.speaker_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_speaker(
    ::livekit::ActiveSpeakerUpdate* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_speaker();
    _impl_.value_.speaker_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.speaker)
}
inline ::livekit::ActiveSpeakerUpdate* PROTOBUF_NONNULL DataPacket::_internal_mutable_speaker() {
  if (value_case() != kSpeaker) {
    clear_value();
    set_has_speaker();
    _impl_.value_.speaker_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::ActiveSpeakerUpdate>(GetArena()));
  }
  return reinterpret_cast<::livekit::ActiveSpeakerUpdate*>(_impl_.value_.speaker_);
}
inline ::livekit::ActiveSpeakerUpdate* PROTOBUF_NONNULL DataPacket::mutable_speaker()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::ActiveSpeakerUpdate* _msg = _internal_mutable_speaker();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.speaker)
  return _msg;
}

// .livekit.SipDTMF sip_dtmf = 6;
inline bool DataPacket::has_sip_dtmf() const {
  return value_case() == kSipDtmf;
}
inline bool DataPacket::_internal_has_sip_dtmf() const {
  return value_case() == kSipDtmf;
}
inline void DataPacket::set_has_sip_dtmf() {
  _impl_._oneof_case_[0] = kSipDtmf;
}
inline void DataPacket::clear_sip_dtmf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kSipDtmf) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.sip_dtmf_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.sip_dtmf_);
    }
    clear_has_value();
  }
}
inline ::livekit::SipDTMF* PROTOBUF_NULLABLE DataPacket::release_sip_dtmf() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.sip_dtmf)
  if (value_case() == kSipDtmf) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::SipDTMF*>(_impl_.value_.sip_dtmf_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::SipDTMF& DataPacket::_internal_sip_dtmf() const {
  return value_case() == kSipDtmf ? *reinterpret_cast<::livekit::SipDTMF*>(_impl_.value_.sip_dtmf_) : reinterpret_cast<::livekit::SipDTMF&>(::livekit::_SipDTMF_default_instance_);
}
inline const ::livekit::SipDTMF& DataPacket::sip_dtmf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.sip_dtmf)
  return _internal_sip_dtmf();
}
inline ::livekit::SipDTMF* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_sip_dtmf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.sip_dtmf)
  if (value_case() == kSipDtmf) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::SipDTMF*>(_impl_.value_.sip_dtmf_);
    _impl_.value_.sip_dtmf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_sip_dtmf(
    ::livekit::SipDTMF* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_sip_dtmf();
    _impl_.value_.sip_dtmf_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.sip_dtmf)
}
inline ::livekit::SipDTMF* PROTOBUF_NONNULL DataPacket::_internal_mutable_sip_dtmf() {
  if (value_case() != kSipDtmf) {
    clear_value();
    set_has_sip_dtmf();
    _impl_.value_.sip_dtmf_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::SipDTMF>(GetArena()));
  }
  return reinterpret_cast<::livekit::SipDTMF*>(_impl_.value_.sip_dtmf_);
}
inline ::livekit::SipDTMF* PROTOBUF_NONNULL DataPacket::mutable_sip_dtmf()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::SipDTMF* _msg = _internal_mutable_sip_dtmf();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.sip_dtmf)
  return _msg;
}

// .livekit.Transcription transcription = 7;
inline bool DataPacket::has_transcription() const {
  return value_case() == kTranscription;
}
inline bool DataPacket::_internal_has_transcription() const {
  return value_case() == kTranscription;
}
inline void DataPacket::set_has_transcription() {
  _impl_._oneof_case_[0] = kTranscription;
}
inline void DataPacket::clear_transcription() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kTranscription) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.transcription_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.transcription_);
    }
    clear_has_value();
  }
}
inline ::livekit::Transcription* PROTOBUF_NULLABLE DataPacket::release_transcription() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.transcription)
  if (value_case() == kTranscription) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::Transcription*>(_impl_.value_.transcription_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::Transcription& DataPacket::_internal_transcription() const {
  return value_case() == kTranscription ? *reinterpret_cast<::livekit::Transcription*>(_impl_.value_.transcription_) : reinterpret_cast<::livekit::Transcription&>(::livekit::_Transcription_default_instance_);
}
inline const ::livekit::Transcription& DataPacket::transcription() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.transcription)
  return _internal_transcription();
}
inline ::livekit::Transcription* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_transcription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.transcription)
  if (value_case() == kTranscription) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::Transcription*>(_impl_.value_.transcription_);
    _impl_.value_.transcription_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_transcription(
    ::livekit::Transcription* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_transcription();
    _impl_.value_.transcription_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.transcription)
}
inline ::livekit::Transcription* PROTOBUF_NONNULL DataPacket::_internal_mutable_transcription() {
  if (value_case() != kTranscription) {
    clear_value();
    set_has_transcription();
    _impl_.value_.transcription_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::Transcription>(GetArena()));
  }
  return reinterpret_cast<::livekit::Transcription*>(_impl_.value_.transcription_);
}
inline ::livekit::Transcription* PROTOBUF_NONNULL DataPacket::mutable_transcription()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::Transcription* _msg = _internal_mutable_transcription();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.transcription)
  return _msg;
}

// .livekit.MetricsBatch metrics = 8;
inline bool DataPacket::has_metrics() const {
  return value_case() == kMetrics;
}
inline bool DataPacket::_internal_has_metrics() const {
  return value_case() == kMetrics;
}
inline void DataPacket::set_has_metrics() {
  _impl_._oneof_case_[0] = kMetrics;
}
inline ::livekit::MetricsBatch* PROTOBUF_NULLABLE DataPacket::release_metrics() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.metrics)
  if (value_case() == kMetrics) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::MetricsBatch*>(_impl_.value_.metrics_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::MetricsBatch& DataPacket::_internal_metrics() const {
  return value_case() == kMetrics ? *reinterpret_cast<::livekit::MetricsBatch*>(_impl_.value_.metrics_) : reinterpret_cast<::livekit::MetricsBatch&>(::livekit::_MetricsBatch_default_instance_);
}
inline const ::livekit::MetricsBatch& DataPacket::metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.metrics)
  return _internal_metrics();
}
inline ::livekit::MetricsBatch* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.metrics)
  if (value_case() == kMetrics) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::MetricsBatch*>(_impl_.value_.metrics_);
    _impl_.value_.metrics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_metrics(
    ::livekit::MetricsBatch* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_metrics();
    _impl_.value_.metrics_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.metrics)
}
inline ::livekit::MetricsBatch* PROTOBUF_NONNULL DataPacket::_internal_mutable_metrics() {
  if (value_case() != kMetrics) {
    clear_value();
    set_has_metrics();
    _impl_.value_.metrics_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::MetricsBatch>(GetArena()));
  }
  return reinterpret_cast<::livekit::MetricsBatch*>(_impl_.value_.metrics_);
}
inline ::livekit::MetricsBatch* PROTOBUF_NONNULL DataPacket::mutable_metrics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::MetricsBatch* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.metrics)
  return _msg;
}

// .livekit.ChatMessage chat_message = 9;
inline bool DataPacket::has_chat_message() const {
  return value_case() == kChatMessage;
}
inline bool DataPacket::_internal_has_chat_message() const {
  return value_case() == kChatMessage;
}
inline void DataPacket::set_has_chat_message() {
  _impl_._oneof_case_[0] = kChatMessage;
}
inline void DataPacket::clear_chat_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kChatMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.chat_message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.chat_message_);
    }
    clear_has_value();
  }
}
inline ::livekit::ChatMessage* PROTOBUF_NULLABLE DataPacket::release_chat_message() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.chat_message)
  if (value_case() == kChatMessage) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::ChatMessage*>(_impl_.value_.chat_message_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::ChatMessage& DataPacket::_internal_chat_message() const {
  return value_case() == kChatMessage ? *reinterpret_cast<::livekit::ChatMessage*>(_impl_.value_.chat_message_) : reinterpret_cast<::livekit::ChatMessage&>(::livekit::_ChatMessage_default_instance_);
}
inline const ::livekit::ChatMessage& DataPacket::chat_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.chat_message)
  return _internal_chat_message();
}
inline ::livekit::ChatMessage* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.chat_message)
  if (value_case() == kChatMessage) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::ChatMessage*>(_impl_.value_.chat_message_);
    _impl_.value_.chat_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_chat_message(
    ::livekit::ChatMessage* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_chat_message();
    _impl_.value_.chat_message_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.chat_message)
}
inline ::livekit::ChatMessage* PROTOBUF_NONNULL DataPacket::_internal_mutable_chat_message() {
  if (value_case() != kChatMessage) {
    clear_value();
    set_has_chat_message();
    _impl_.value_.chat_message_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::ChatMessage>(GetArena()));
  }
  return reinterpret_cast<::livekit::ChatMessage*>(_impl_.value_.chat_message_);
}
inline ::livekit::ChatMessage* PROTOBUF_NONNULL DataPacket::mutable_chat_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::ChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.chat_message)
  return _msg;
}

// .livekit.RpcRequest rpc_request = 10;
inline bool DataPacket::has_rpc_request() const {
  return value_case() == kRpcRequest;
}
inline bool DataPacket::_internal_has_rpc_request() const {
  return value_case() == kRpcRequest;
}
inline void DataPacket::set_has_rpc_request() {
  _impl_._oneof_case_[0] = kRpcRequest;
}
inline void DataPacket::clear_rpc_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kRpcRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.rpc_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_request_);
    }
    clear_has_value();
  }
}
inline ::livekit::RpcRequest* PROTOBUF_NULLABLE DataPacket::release_rpc_request() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.rpc_request)
  if (value_case() == kRpcRequest) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcRequest*>(_impl_.value_.rpc_request_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.rpc_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::RpcRequest& DataPacket::_internal_rpc_request() const {
  return value_case() == kRpcRequest ? *reinterpret_cast<::livekit::RpcRequest*>(_impl_.value_.rpc_request_) : reinterpret_cast<::livekit::RpcRequest&>(::livekit::_RpcRequest_default_instance_);
}
inline const ::livekit::RpcRequest& DataPacket::rpc_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.rpc_request)
  return _internal_rpc_request();
}
inline ::livekit::RpcRequest* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_rpc_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.rpc_request)
  if (value_case() == kRpcRequest) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcRequest*>(_impl_.value_.rpc_request_);
    _impl_.value_.rpc_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_rpc_request(
    ::livekit::RpcRequest* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_rpc_request();
    _impl_.value_.rpc_request_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.rpc_request)
}
inline ::livekit::RpcRequest* PROTOBUF_NONNULL DataPacket::_internal_mutable_rpc_request() {
  if (value_case() != kRpcRequest) {
    clear_value();
    set_has_rpc_request();
    _impl_.value_.rpc_request_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::RpcRequest>(GetArena()));
  }
  return reinterpret_cast<::livekit::RpcRequest*>(_impl_.value_.rpc_request_);
}
inline ::livekit::RpcRequest* PROTOBUF_NONNULL DataPacket::mutable_rpc_request()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::RpcRequest* _msg = _internal_mutable_rpc_request();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.rpc_request)
  return _msg;
}

// .livekit.RpcAck rpc_ack = 11;
inline bool DataPacket::has_rpc_ack() const {
  return value_case() == kRpcAck;
}
inline bool DataPacket::_internal_has_rpc_ack() const {
  return value_case() == kRpcAck;
}
inline void DataPacket::set_has_rpc_ack() {
  _impl_._oneof_case_[0] = kRpcAck;
}
inline void DataPacket::clear_rpc_ack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kRpcAck) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.rpc_ack_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_ack_);
    }
    clear_has_value();
  }
}
inline ::livekit::RpcAck* PROTOBUF_NULLABLE DataPacket::release_rpc_ack() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.rpc_ack)
  if (value_case() == kRpcAck) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcAck*>(_impl_.value_.rpc_ack_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.rpc_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::RpcAck& DataPacket::_internal_rpc_ack() const {
  return value_case() == kRpcAck ? *reinterpret_cast<::livekit::RpcAck*>(_impl_.value_.rpc_ack_) : reinterpret_cast<::livekit::RpcAck&>(::livekit::_RpcAck_default_instance_);
}
inline const ::livekit::RpcAck& DataPacket::rpc_ack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.rpc_ack)
  return _internal_rpc_ack();
}
inline ::livekit::RpcAck* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_rpc_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.rpc_ack)
  if (value_case() == kRpcAck) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcAck*>(_impl_.value_.rpc_ack_);
    _impl_.value_.rpc_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_rpc_ack(
    ::livekit::RpcAck* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_rpc_ack();
    _impl_.value_.rpc_ack_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.rpc_ack)
}
inline ::livekit::RpcAck* PROTOBUF_NONNULL DataPacket::_internal_mutable_rpc_ack() {
  if (value_case() != kRpcAck) {
    clear_value();
    set_has_rpc_ack();
    _impl_.value_.rpc_ack_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::RpcAck>(GetArena()));
  }
  return reinterpret_cast<::livekit::RpcAck*>(_impl_.value_.rpc_ack_);
}
inline ::livekit::RpcAck* PROTOBUF_NONNULL DataPacket::mutable_rpc_ack()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::RpcAck* _msg = _internal_mutable_rpc_ack();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.rpc_ack)
  return _msg;
}

// .livekit.RpcResponse rpc_response = 12;
inline bool DataPacket::has_rpc_response() const {
  return value_case() == kRpcResponse;
}
inline bool DataPacket::_internal_has_rpc_response() const {
  return value_case() == kRpcResponse;
}
inline void DataPacket::set_has_rpc_response() {
  _impl_._oneof_case_[0] = kRpcResponse;
}
inline void DataPacket::clear_rpc_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kRpcResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.rpc_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.rpc_response_);
    }
    clear_has_value();
  }
}
inline ::livekit::RpcResponse* PROTOBUF_NULLABLE DataPacket::release_rpc_response() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.rpc_response)
  if (value_case() == kRpcResponse) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcResponse*>(_impl_.value_.rpc_response_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.rpc_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::RpcResponse& DataPacket::_internal_rpc_response() const {
  return value_case() == kRpcResponse ? *reinterpret_cast<::livekit::RpcResponse*>(_impl_.value_.rpc_response_) : reinterpret_cast<::livekit::RpcResponse&>(::livekit::_RpcResponse_default_instance_);
}
inline const ::livekit::RpcResponse& DataPacket::rpc_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.rpc_response)
  return _internal_rpc_response();
}
inline ::livekit::RpcResponse* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_rpc_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.rpc_response)
  if (value_case() == kRpcResponse) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::RpcResponse*>(_impl_.value_.rpc_response_);
    _impl_.value_.rpc_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_rpc_response(
    ::livekit::RpcResponse* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_rpc_response();
    _impl_.value_.rpc_response_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.rpc_response)
}
inline ::livekit::RpcResponse* PROTOBUF_NONNULL DataPacket::_internal_mutable_rpc_response() {
  if (value_case() != kRpcResponse) {
    clear_value();
    set_has_rpc_response();
    _impl_.value_.rpc_response_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::RpcResponse>(GetArena()));
  }
  return reinterpret_cast<::livekit::RpcResponse*>(_impl_.value_.rpc_response_);
}
inline ::livekit::RpcResponse* PROTOBUF_NONNULL DataPacket::mutable_rpc_response()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::RpcResponse* _msg = _internal_mutable_rpc_response();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.rpc_response)
  return _msg;
}

// .livekit.DataStream.Header stream_header = 13;
inline bool DataPacket::has_stream_header() const {
  return value_case() == kStreamHeader;
}
inline bool DataPacket::_internal_has_stream_header() const {
  return value_case() == kStreamHeader;
}
inline void DataPacket::set_has_stream_header() {
  _impl_._oneof_case_[0] = kStreamHeader;
}
inline void DataPacket::clear_stream_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStreamHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.stream_header_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_header_);
    }
    clear_has_value();
  }
}
inline ::livekit::DataStream_Header* PROTOBUF_NULLABLE DataPacket::release_stream_header() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.stream_header)
  if (value_case() == kStreamHeader) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Header*>(_impl_.value_.stream_header_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::DataStream_Header& DataPacket::_internal_stream_header() const {
  return value_case() == kStreamHeader ? *reinterpret_cast<::livekit::DataStream_Header*>(_impl_.value_.stream_header_) : reinterpret_cast<::livekit::DataStream_Header&>(::livekit::_DataStream_Header_default_instance_);
}
inline const ::livekit::DataStream_Header& DataPacket::stream_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.stream_header)
  return _internal_stream_header();
}
inline ::livekit::DataStream_Header* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.stream_header)
  if (value_case() == kStreamHeader) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Header*>(_impl_.value_.stream_header_);
    _impl_.value_.stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_stream_header(
    ::livekit::DataStream_Header* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_stream_header();
    _impl_.value_.stream_header_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.stream_header)
}
inline ::livekit::DataStream_Header* PROTOBUF_NONNULL DataPacket::_internal_mutable_stream_header() {
  if (value_case() != kStreamHeader) {
    clear_value();
    set_has_stream_header();
    _impl_.value_.stream_header_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::DataStream_Header>(GetArena()));
  }
  return reinterpret_cast<::livekit::DataStream_Header*>(_impl_.value_.stream_header_);
}
inline ::livekit::DataStream_Header* PROTOBUF_NONNULL DataPacket::mutable_stream_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::DataStream_Header* _msg = _internal_mutable_stream_header();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.stream_header)
  return _msg;
}

// .livekit.DataStream.Chunk stream_chunk = 14;
inline bool DataPacket::has_stream_chunk() const {
  return value_case() == kStreamChunk;
}
inline bool DataPacket::_internal_has_stream_chunk() const {
  return value_case() == kStreamChunk;
}
inline void DataPacket::set_has_stream_chunk() {
  _impl_._oneof_case_[0] = kStreamChunk;
}
inline void DataPacket::clear_stream_chunk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStreamChunk) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.stream_chunk_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_chunk_);
    }
    clear_has_value();
  }
}
inline ::livekit::DataStream_Chunk* PROTOBUF_NULLABLE DataPacket::release_stream_chunk() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.stream_chunk)
  if (value_case() == kStreamChunk) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Chunk*>(_impl_.value_.stream_chunk_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::DataStream_Chunk& DataPacket::_internal_stream_chunk() const {
  return value_case() == kStreamChunk ? *reinterpret_cast<::livekit::DataStream_Chunk*>(_impl_.value_.stream_chunk_) : reinterpret_cast<::livekit::DataStream_Chunk&>(::livekit::_DataStream_Chunk_default_instance_);
}
inline const ::livekit::DataStream_Chunk& DataPacket::stream_chunk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.stream_chunk)
  return _internal_stream_chunk();
}
inline ::livekit::DataStream_Chunk* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_stream_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.stream_chunk)
  if (value_case() == kStreamChunk) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Chunk*>(_impl_.value_.stream_chunk_);
    _impl_.value_.stream_chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_stream_chunk(
    ::livekit::DataStream_Chunk* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_stream_chunk();
    _impl_.value_.stream_chunk_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.stream_chunk)
}
inline ::livekit::DataStream_Chunk* PROTOBUF_NONNULL DataPacket::_internal_mutable_stream_chunk() {
  if (value_case() != kStreamChunk) {
    clear_value();
    set_has_stream_chunk();
    _impl_.value_.stream_chunk_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::DataStream_Chunk>(GetArena()));
  }
  return reinterpret_cast<::livekit::DataStream_Chunk*>(_impl_.value_.stream_chunk_);
}
inline ::livekit::DataStream_Chunk* PROTOBUF_NONNULL DataPacket::mutable_stream_chunk()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::DataStream_Chunk* _msg = _internal_mutable_stream_chunk();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.stream_chunk)
  return _msg;
}

// .livekit.DataStream.Trailer stream_trailer = 15;
inline bool DataPacket::has_stream_trailer() const {
  return value_case() == kStreamTrailer;
}
inline bool DataPacket::_internal_has_stream_trailer() const {
  return value_case() == kStreamTrailer;
}
inline void DataPacket::set_has_stream_trailer() {
  _impl_._oneof_case_[0] = kStreamTrailer;
}
inline void DataPacket::clear_stream_trailer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStreamTrailer) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.stream_trailer_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.stream_trailer_);
    }
    clear_has_value();
  }
}
inline ::livekit::DataStream_Trailer* PROTOBUF_NULLABLE DataPacket::release_stream_trailer() {
  // @@protoc_insertion_point(field_release:livekit.DataPacket.stream_trailer)
  if (value_case() == kStreamTrailer) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Trailer*>(_impl_.value_.stream_trailer_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::DataStream_Trailer& DataPacket::_internal_stream_trailer() const {
  return value_case() == kStreamTrailer ? *reinterpret_cast<::livekit::DataStream_Trailer*>(_impl_.value_.stream_trailer_) : reinterpret_cast<::livekit::DataStream_Trailer&>(::livekit::_DataStream_Trailer_default_instance_);
}
inline const ::livekit::DataStream_Trailer& DataPacket::stream_trailer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataPacket.stream_trailer)
  return _internal_stream_trailer();
}
inline ::livekit::DataStream_Trailer* PROTOBUF_NULLABLE DataPacket::unsafe_arena_release_stream_trailer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataPacket.stream_trailer)
  if (value_case() == kStreamTrailer) {
    clear_has_value();
    auto* temp = reinterpret_cast<::livekit::DataStream_Trailer*>(_impl_.value_.stream_trailer_);
    _impl_.value_.stream_trailer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataPacket::unsafe_arena_set_allocated_stream_trailer(
    ::livekit::DataStream_Trailer* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_stream_trailer();
    _impl_.value_.stream_trailer_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataPacket.stream_trailer)
}
inline ::livekit::DataStream_Trailer* PROTOBUF_NONNULL DataPacket::_internal_mutable_stream_trailer() {
  if (value_case() != kStreamTrailer) {
    clear_value();
    set_has_stream_trailer();
    _impl_.value_.stream_trailer_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::livekit::DataStream_Trailer>(GetArena()));
  }
  return reinterpret_cast<::livekit::DataStream_Trailer*>(_impl_.value_.stream_trailer_);
}
inline ::livekit::DataStream_Trailer* PROTOBUF_NONNULL DataPacket::mutable_stream_trailer()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::DataStream_Trailer* _msg = _internal_mutable_stream_trailer();
  // @@protoc_insertion_point(field_mutable:livekit.DataPacket.stream_trailer)
  return _msg;
}

inline bool DataPacket::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DataPacket::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline DataPacket::ValueCase DataPacket::value_case() const {
  return DataPacket::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActiveSpeakerUpdate

// repeated .livekit.SpeakerInfo speakers = 1;
inline int ActiveSpeakerUpdate::_internal_speakers_size() const {
  return _internal_speakers().size();
}
inline int ActiveSpeakerUpdate::speakers_size() const {
  return _internal_speakers_size();
}
inline void ActiveSpeakerUpdate::clear_speakers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speakers_.Clear();
}
inline ::livekit::SpeakerInfo* PROTOBUF_NONNULL ActiveSpeakerUpdate::mutable_speakers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.ActiveSpeakerUpdate.speakers)
  return _internal_mutable_speakers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>* PROTOBUF_NONNULL ActiveSpeakerUpdate::mutable_speakers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.ActiveSpeakerUpdate.speakers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_speakers();
}
inline const ::livekit::SpeakerInfo& ActiveSpeakerUpdate::speakers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ActiveSpeakerUpdate.speakers)
  return _internal_speakers().Get(index);
}
inline ::livekit::SpeakerInfo* PROTOBUF_NONNULL ActiveSpeakerUpdate::add_speakers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::SpeakerInfo* _add = _internal_mutable_speakers()->Add();
  // @@protoc_insertion_point(field_add:livekit.ActiveSpeakerUpdate.speakers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>& ActiveSpeakerUpdate::speakers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.ActiveSpeakerUpdate.speakers)
  return _internal_speakers();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>&
ActiveSpeakerUpdate::_internal_speakers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.speakers_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::SpeakerInfo>* PROTOBUF_NONNULL
ActiveSpeakerUpdate::_internal_mutable_speakers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.speakers_;
}

// -------------------------------------------------------------------

// SpeakerInfo

// string sid = 1;
inline void SpeakerInfo::clear_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeakerInfo::sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SpeakerInfo.sid)
  return _internal_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SpeakerInfo::set_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.SpeakerInfo.sid)
}
inline std::string* PROTOBUF_NONNULL SpeakerInfo::mutable_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sid();
  // @@protoc_insertion_point(field_mutable:livekit.SpeakerInfo.sid)
  return _s;
}
inline const std::string& SpeakerInfo::_internal_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sid_.Get();
}
inline void SpeakerInfo::_internal_set_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SpeakerInfo::_internal_mutable_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SpeakerInfo::release_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.SpeakerInfo.sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sid_.Set("", GetArena());
  }
  return released;
}
inline void SpeakerInfo::set_allocated_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sid_.IsDefault()) {
    _impl_.sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SpeakerInfo.sid)
}

// float level = 2;
inline void SpeakerInfo::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SpeakerInfo::level() const {
  // @@protoc_insertion_point(field_get:livekit.SpeakerInfo.level)
  return _internal_level();
}
inline void SpeakerInfo::set_level(float value) {
  _internal_set_level(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.SpeakerInfo.level)
}
inline float SpeakerInfo::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void SpeakerInfo::_internal_set_level(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// bool active = 3;
inline void SpeakerInfo::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SpeakerInfo::active() const {
  // @@protoc_insertion_point(field_get:livekit.SpeakerInfo.active)
  return _internal_active();
}
inline void SpeakerInfo::set_active(bool value) {
  _internal_set_active(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.SpeakerInfo.active)
}
inline bool SpeakerInfo::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void SpeakerInfo::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// UserPacket

// string participant_sid = 1 [deprecated = true];
inline void UserPacket::clear_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserPacket::participant_sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.participant_sid)
  return _internal_participant_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_participant_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.participant_sid)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_participant_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_sid();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.participant_sid)
  return _s;
}
inline const std::string& UserPacket::_internal_participant_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_sid_.Get();
}
inline void UserPacket::_internal_set_participant_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.participant_sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.participant_sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.participant_sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.participant_sid_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_participant_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.participant_sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.participant_sid_.IsDefault()) {
    _impl_.participant_sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.participant_sid)
}

// string participant_identity = 5 [deprecated = true];
inline void UserPacket::clear_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserPacket::participant_identity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.participant_identity)
  return _internal_participant_identity();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_participant_identity(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.participant_identity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.participant_identity)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_participant_identity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.participant_identity)
  return _s;
}
inline const std::string& UserPacket::_internal_participant_identity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_identity_.Get();
}
inline void UserPacket::_internal_set_participant_identity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.participant_identity_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.participant_identity_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.participant_identity)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.participant_identity_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.participant_identity_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_participant_identity(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.participant_identity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.participant_identity_.IsDefault()) {
    _impl_.participant_identity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.participant_identity)
}

// bytes payload = 2;
inline void UserPacket::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserPacket::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_payload(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.payload)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_payload()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.payload)
  return _s;
}
inline const std::string& UserPacket::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void UserPacket::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.payload)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.payload_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.payload_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_payload(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.payload)
}

// repeated string destination_sids = 3 [deprecated = true];
inline int UserPacket::_internal_destination_sids_size() const {
  return _internal_destination_sids().size();
}
inline int UserPacket::destination_sids_size() const {
  return _internal_destination_sids_size();
}
inline void UserPacket::clear_destination_sids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_sids_.Clear();
}
inline std::string* PROTOBUF_NONNULL UserPacket::add_destination_sids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_destination_sids()->Add();
  // @@protoc_insertion_point(field_add_mutable:livekit.UserPacket.destination_sids)
  return _s;
}
inline const std::string& UserPacket::destination_sids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.destination_sids)
  return _internal_destination_sids().Get(index);
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_destination_sids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.destination_sids)
  return _internal_mutable_destination_sids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserPacket::set_destination_sids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_destination_sids()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:livekit.UserPacket.destination_sids)
}
template <typename Arg_, typename... Args_>
inline void UserPacket::add_destination_sids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_destination_sids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:livekit.UserPacket.destination_sids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& UserPacket::destination_sids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.UserPacket.destination_sids)
  return _internal_destination_sids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
UserPacket::mutable_destination_sids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.UserPacket.destination_sids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_destination_sids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPacket::_internal_destination_sids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_sids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
UserPacket::_internal_mutable_destination_sids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.destination_sids_;
}

// repeated string destination_identities = 6 [deprecated = true];
inline int UserPacket::_internal_destination_identities_size() const {
  return _internal_destination_identities().size();
}
inline int UserPacket::destination_identities_size() const {
  return _internal_destination_identities_size();
}
inline void UserPacket::clear_destination_identities() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.destination_identities_.Clear();
}
inline std::string* PROTOBUF_NONNULL UserPacket::add_destination_identities()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_destination_identities()->Add();
  // @@protoc_insertion_point(field_add_mutable:livekit.UserPacket.destination_identities)
  return _s;
}
inline const std::string& UserPacket::destination_identities(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.destination_identities)
  return _internal_destination_identities().Get(index);
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_destination_identities(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.destination_identities)
  return _internal_mutable_destination_identities()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserPacket::set_destination_identities(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_destination_identities()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:livekit.UserPacket.destination_identities)
}
template <typename Arg_, typename... Args_>
inline void UserPacket::add_destination_identities(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_destination_identities(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:livekit.UserPacket.destination_identities)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& UserPacket::destination_identities() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.UserPacket.destination_identities)
  return _internal_destination_identities();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
UserPacket::mutable_destination_identities() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.UserPacket.destination_identities)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_destination_identities();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserPacket::_internal_destination_identities() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.destination_identities_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
UserPacket::_internal_mutable_destination_identities() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.destination_identities_;
}

// optional string topic = 4;
inline bool UserPacket::has_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UserPacket::clear_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserPacket::topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_topic(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.topic)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_topic()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.topic)
  return _s;
}
inline const std::string& UserPacket::_internal_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_.Get();
}
inline void UserPacket::_internal_set_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.topic_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.topic_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.topic)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.topic_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.topic_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_topic(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topic_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.topic)
}

// optional string id = 8;
inline bool UserPacket::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void UserPacket::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& UserPacket::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.id)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.id)
  return _s;
}
inline const std::string& UserPacket::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void UserPacket::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.id)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.id)
}

// optional uint64 start_time = 9;
inline bool UserPacket::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void UserPacket::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t UserPacket::start_time() const {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.start_time)
  return _internal_start_time();
}
inline void UserPacket::set_start_time(::uint64_t value) {
  _internal_set_start_time(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.UserPacket.start_time)
}
inline ::uint64_t UserPacket::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void UserPacket::_internal_set_start_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// optional uint64 end_time = 10;
inline bool UserPacket::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void UserPacket::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t UserPacket::end_time() const {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.end_time)
  return _internal_end_time();
}
inline void UserPacket::set_end_time(::uint64_t value) {
  _internal_set_end_time(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.UserPacket.end_time)
}
inline ::uint64_t UserPacket::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_;
}
inline void UserPacket::_internal_set_end_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = value;
}

// bytes nonce = 11;
inline void UserPacket::clear_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nonce_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& UserPacket::nonce() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.UserPacket.nonce)
  return _internal_nonce();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void UserPacket::set_nonce(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nonce_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.UserPacket.nonce)
}
inline std::string* PROTOBUF_NONNULL UserPacket::mutable_nonce()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:livekit.UserPacket.nonce)
  return _s;
}
inline const std::string& UserPacket::_internal_nonce() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nonce_.Get();
}
inline void UserPacket::_internal_set_nonce(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nonce_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL UserPacket::_internal_mutable_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.nonce_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE UserPacket::release_nonce() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.UserPacket.nonce)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.nonce_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.nonce_.Set("", GetArena());
  }
  return released;
}
inline void UserPacket::set_allocated_nonce(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.nonce_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nonce_.IsDefault()) {
    _impl_.nonce_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.UserPacket.nonce)
}

// -------------------------------------------------------------------

// SipDTMF

// uint32 code = 3;
inline void SipDTMF::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SipDTMF::code() const {
  // @@protoc_insertion_point(field_get:livekit.SipDTMF.code)
  return _internal_code();
}
inline void SipDTMF::set_code(::uint32_t value) {
  _internal_set_code(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.SipDTMF.code)
}
inline ::uint32_t SipDTMF::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void SipDTMF::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string digit = 4;
inline void SipDTMF::clear_digit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.digit_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SipDTMF::digit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.SipDTMF.digit)
  return _internal_digit();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SipDTMF::set_digit(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.SipDTMF.digit)
}
inline std::string* PROTOBUF_NONNULL SipDTMF::mutable_digit()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_digit();
  // @@protoc_insertion_point(field_mutable:livekit.SipDTMF.digit)
  return _s;
}
inline const std::string& SipDTMF::_internal_digit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.digit_.Get();
}
inline void SipDTMF::_internal_set_digit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.digit_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL SipDTMF::_internal_mutable_digit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.digit_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE SipDTMF::release_digit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.SipDTMF.digit)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.digit_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.digit_.Set("", GetArena());
  }
  return released;
}
inline void SipDTMF::set_allocated_digit(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.digit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.digit_.IsDefault()) {
    _impl_.digit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SipDTMF.digit)
}

// -------------------------------------------------------------------

// Transcription

// string transcribed_participant_identity = 2;
inline void Transcription::clear_transcribed_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transcribed_participant_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transcription::transcribed_participant_identity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Transcription.transcribed_participant_identity)
  return _internal_transcribed_participant_identity();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Transcription::set_transcribed_participant_identity(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transcribed_participant_identity_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Transcription.transcribed_participant_identity)
}
inline std::string* PROTOBUF_NONNULL Transcription::mutable_transcribed_participant_identity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_transcribed_participant_identity();
  // @@protoc_insertion_point(field_mutable:livekit.Transcription.transcribed_participant_identity)
  return _s;
}
inline const std::string& Transcription::_internal_transcribed_participant_identity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transcribed_participant_identity_.Get();
}
inline void Transcription::_internal_set_transcribed_participant_identity(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.transcribed_participant_identity_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Transcription::_internal_mutable_transcribed_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.transcribed_participant_identity_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Transcription::release_transcribed_participant_identity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Transcription.transcribed_participant_identity)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.transcribed_participant_identity_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.transcribed_participant_identity_.Set("", GetArena());
  }
  return released;
}
inline void Transcription::set_allocated_transcribed_participant_identity(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transcribed_participant_identity_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.transcribed_participant_identity_.IsDefault()) {
    _impl_.transcribed_participant_identity_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Transcription.transcribed_participant_identity)
}

// string track_id = 3;
inline void Transcription::clear_track_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transcription::track_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Transcription.track_id)
  return _internal_track_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Transcription::set_track_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.track_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.Transcription.track_id)
}
inline std::string* PROTOBUF_NONNULL Transcription::mutable_track_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_track_id();
  // @@protoc_insertion_point(field_mutable:livekit.Transcription.track_id)
  return _s;
}
inline const std::string& Transcription::_internal_track_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.track_id_.Get();
}
inline void Transcription::_internal_set_track_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.track_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL Transcription::_internal_mutable_track_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.track_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE Transcription::release_track_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.Transcription.track_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.track_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.track_id_.Set("", GetArena());
  }
  return released;
}
inline void Transcription::set_allocated_track_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.track_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.track_id_.IsDefault()) {
    _impl_.track_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.Transcription.track_id)
}

// repeated .livekit.TranscriptionSegment segments = 4;
inline int Transcription::_internal_segments_size() const {
  return _internal_segments().size();
}
inline int Transcription::segments_size() const {
  return _internal_segments_size();
}
inline void Transcription::clear_segments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segments_.Clear();
}
inline ::livekit::TranscriptionSegment* PROTOBUF_NONNULL Transcription::mutable_segments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.Transcription.segments)
  return _internal_mutable_segments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>* PROTOBUF_NONNULL Transcription::mutable_segments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.Transcription.segments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_segments();
}
inline const ::livekit::TranscriptionSegment& Transcription::segments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.Transcription.segments)
  return _internal_segments().Get(index);
}
inline ::livekit::TranscriptionSegment* PROTOBUF_NONNULL Transcription::add_segments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::TranscriptionSegment* _add = _internal_mutable_segments()->Add();
  // @@protoc_insertion_point(field_add:livekit.Transcription.segments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>& Transcription::segments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.Transcription.segments)
  return _internal_segments();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>&
Transcription::_internal_segments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segments_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::TranscriptionSegment>* PROTOBUF_NONNULL
Transcription::_internal_mutable_segments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.segments_;
}

// -------------------------------------------------------------------

// TranscriptionSegment

// string id = 1;
inline void TranscriptionSegment::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TranscriptionSegment::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TranscriptionSegment::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.id)
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.TranscriptionSegment.id)
  return _s;
}
inline const std::string& TranscriptionSegment::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void TranscriptionSegment::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TranscriptionSegment::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TranscriptionSegment.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void TranscriptionSegment::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TranscriptionSegment.id)
}

// string text = 2;
inline void TranscriptionSegment::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TranscriptionSegment::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TranscriptionSegment::set_text(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.text)
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::mutable_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:livekit.TranscriptionSegment.text)
  return _s;
}
inline const std::string& TranscriptionSegment::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void TranscriptionSegment::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TranscriptionSegment::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TranscriptionSegment.text)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.text_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.text_.Set("", GetArena());
  }
  return released;
}
inline void TranscriptionSegment::set_allocated_text(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TranscriptionSegment.text)
}

// uint64 start_time = 3;
inline void TranscriptionSegment::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t TranscriptionSegment::start_time() const {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.start_time)
  return _internal_start_time();
}
inline void TranscriptionSegment::set_start_time(::uint64_t value) {
  _internal_set_start_time(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.start_time)
}
inline ::uint64_t TranscriptionSegment::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void TranscriptionSegment::_internal_set_start_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// uint64 end_time = 4;
inline void TranscriptionSegment::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t TranscriptionSegment::end_time() const {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.end_time)
  return _internal_end_time();
}
inline void TranscriptionSegment::set_end_time(::uint64_t value) {
  _internal_set_end_time(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.end_time)
}
inline ::uint64_t TranscriptionSegment::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_;
}
inline void TranscriptionSegment::_internal_set_end_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = value;
}

// bool final = 5;
inline void TranscriptionSegment::clear_final() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TranscriptionSegment::final() const {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.final)
  return _internal_final();
}
inline void TranscriptionSegment::set_final(bool value) {
  _internal_set_final(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.final)
}
inline bool TranscriptionSegment::_internal_final() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.final_;
}
inline void TranscriptionSegment::_internal_set_final(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_ = value;
}

// string language = 6;
inline void TranscriptionSegment::clear_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TranscriptionSegment::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.TranscriptionSegment.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TranscriptionSegment::set_language(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.TranscriptionSegment.language)
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::mutable_language()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:livekit.TranscriptionSegment.language)
  return _s;
}
inline const std::string& TranscriptionSegment::_internal_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_.Get();
}
inline void TranscriptionSegment::_internal_set_language(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.language_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL TranscriptionSegment::_internal_mutable_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE TranscriptionSegment::release_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.TranscriptionSegment.language)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.language_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.language_.Set("", GetArena());
  }
  return released;
}
inline void TranscriptionSegment::set_allocated_language(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.language_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TranscriptionSegment.language)
}

// -------------------------------------------------------------------

// ChatMessage

// string id = 1;
inline void ChatMessage::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatMessage::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ChatMessage::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.id)
}
inline std::string* PROTOBUF_NONNULL ChatMessage::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.ChatMessage.id)
  return _s;
}
inline const std::string& ChatMessage::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ChatMessage::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ChatMessage::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ChatMessage::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ChatMessage.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void ChatMessage::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ChatMessage.id)
}

// int64 timestamp = 2;
inline void ChatMessage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.timestamp)
}
inline ::int64_t ChatMessage::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void ChatMessage::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// optional int64 edit_timestamp = 3;
inline bool ChatMessage::has_edit_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ChatMessage::clear_edit_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edit_timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t ChatMessage::edit_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.edit_timestamp)
  return _internal_edit_timestamp();
}
inline void ChatMessage::set_edit_timestamp(::int64_t value) {
  _internal_set_edit_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.edit_timestamp)
}
inline ::int64_t ChatMessage::_internal_edit_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.edit_timestamp_;
}
inline void ChatMessage::_internal_set_edit_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edit_timestamp_ = value;
}

// string message = 4;
inline void ChatMessage::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ChatMessage::set_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.message)
}
inline std::string* PROTOBUF_NONNULL ChatMessage::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:livekit.ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ChatMessage::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ChatMessage::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ChatMessage.message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_.Set("", GetArena());
  }
  return released;
}
inline void ChatMessage::set_allocated_message(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ChatMessage.message)
}

// bool deleted = 5;
inline void ChatMessage::clear_deleted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deleted_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ChatMessage::deleted() const {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.deleted)
  return _internal_deleted();
}
inline void ChatMessage::set_deleted(bool value) {
  _internal_set_deleted(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.deleted)
}
inline bool ChatMessage::_internal_deleted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.deleted_;
}
inline void ChatMessage::_internal_set_deleted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.deleted_ = value;
}

// bool generated = 6;
inline void ChatMessage::clear_generated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChatMessage::generated() const {
  // @@protoc_insertion_point(field_get:livekit.ChatMessage.generated)
  return _internal_generated();
}
inline void ChatMessage::set_generated(bool value) {
  _internal_set_generated(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.ChatMessage.generated)
}
inline bool ChatMessage::_internal_generated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_;
}
inline void ChatMessage::_internal_set_generated(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_ = value;
}

// -------------------------------------------------------------------

// RpcRequest

// string id = 1;
inline void RpcRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcRequest::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcRequest.id)
}
inline std::string* PROTOBUF_NONNULL RpcRequest::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.RpcRequest.id)
  return _s;
}
inline const std::string& RpcRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void RpcRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcRequest.id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void RpcRequest::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcRequest.id)
}

// string method = 2;
inline void RpcRequest::clear_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcRequest::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcRequest.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcRequest::set_method(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcRequest.method)
}
inline std::string* PROTOBUF_NONNULL RpcRequest::mutable_method()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:livekit.RpcRequest.method)
  return _s;
}
inline const std::string& RpcRequest::_internal_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.method_.Get();
}
inline void RpcRequest::_internal_set_method(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcRequest::_internal_mutable_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcRequest::release_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcRequest.method)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.method_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.method_.Set("", GetArena());
  }
  return released;
}
inline void RpcRequest::set_allocated_method(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.method_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcRequest.method)
}

// string payload = 3;
inline void RpcRequest::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcRequest::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcRequest.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcRequest::set_payload(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcRequest.payload)
}
inline std::string* PROTOBUF_NONNULL RpcRequest::mutable_payload()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.RpcRequest.payload)
  return _s;
}
inline const std::string& RpcRequest::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void RpcRequest::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcRequest::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcRequest::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcRequest.payload)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.payload_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.payload_.Set("", GetArena());
  }
  return released;
}
inline void RpcRequest::set_allocated_payload(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcRequest.payload)
}

// uint32 response_timeout_ms = 4;
inline void RpcRequest::clear_response_timeout_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timeout_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t RpcRequest::response_timeout_ms() const {
  // @@protoc_insertion_point(field_get:livekit.RpcRequest.response_timeout_ms)
  return _internal_response_timeout_ms();
}
inline void RpcRequest::set_response_timeout_ms(::uint32_t value) {
  _internal_set_response_timeout_ms(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RpcRequest.response_timeout_ms)
}
inline ::uint32_t RpcRequest::_internal_response_timeout_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_timeout_ms_;
}
inline void RpcRequest::_internal_set_response_timeout_ms(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_timeout_ms_ = value;
}

// uint32 version = 5;
inline void RpcRequest::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t RpcRequest::version() const {
  // @@protoc_insertion_point(field_get:livekit.RpcRequest.version)
  return _internal_version();
}
inline void RpcRequest::set_version(::uint32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RpcRequest.version)
}
inline ::uint32_t RpcRequest::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void RpcRequest::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// -------------------------------------------------------------------

// RpcAck

// string request_id = 1;
inline void RpcAck::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcAck::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcAck.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcAck::set_request_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcAck.request_id)
}
inline std::string* PROTOBUF_NONNULL RpcAck::mutable_request_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:livekit.RpcAck.request_id)
  return _s;
}
inline const std::string& RpcAck::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void RpcAck::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcAck::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcAck::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcAck.request_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.request_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.request_id_.Set("", GetArena());
  }
  return released;
}
inline void RpcAck::set_allocated_request_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcAck.request_id)
}

// -------------------------------------------------------------------

// RpcResponse

// string request_id = 1;
inline void RpcResponse::clear_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcResponse::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcResponse.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcResponse::set_request_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcResponse.request_id)
}
inline std::string* PROTOBUF_NONNULL RpcResponse::mutable_request_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:livekit.RpcResponse.request_id)
  return _s;
}
inline const std::string& RpcResponse::_internal_request_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_id_.Get();
}
inline void RpcResponse::_internal_set_request_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcResponse::_internal_mutable_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcResponse::release_request_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcResponse.request_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.request_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.request_id_.Set("", GetArena());
  }
  return released;
}
inline void RpcResponse::set_allocated_request_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_id_.IsDefault()) {
    _impl_.request_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcResponse.request_id)
}

// string payload = 2;
inline bool RpcResponse::has_payload() const {
  return value_case() == kPayload;
}
inline void RpcResponse::set_has_payload() {
  _impl_._oneof_case_[0] = kPayload;
}
inline void RpcResponse::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kPayload) {
    _impl_.value_.payload_.Destroy();
    clear_has_value();
  }
}
inline const std::string& RpcResponse::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcResponse.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcResponse::set_payload(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kPayload) {
    clear_value();

    set_has_payload();
    _impl_.value_.payload_.InitDefault();
  }
  _impl_.value_.payload_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcResponse.payload)
}
inline std::string* PROTOBUF_NONNULL RpcResponse::mutable_payload()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:livekit.RpcResponse.payload)
  return _s;
}
inline const std::string& RpcResponse::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kPayload) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.payload_.Get();
}
inline void RpcResponse::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kPayload) {
    clear_value();

    set_has_payload();
    _impl_.value_.payload_.InitDefault();
  }
  _impl_.value_.payload_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcResponse::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kPayload) {
    clear_value();

    set_has_payload();
    _impl_.value_.payload_.InitDefault();
  }
  return _impl_.value_.payload_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcResponse::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcResponse.payload)
  if (value_case() != kPayload) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.payload_.Release();
}
inline void RpcResponse::set_allocated_payload(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_payload();
    _impl_.value_.payload_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcResponse.payload)
}

// .livekit.RpcError error = 3;
inline bool RpcResponse::has_error() const {
  return value_case() == kError;
}
inline bool RpcResponse::_internal_has_error() const {
  return value_case() == kError;
}
inline void RpcResponse::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void RpcResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.error_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.error_);
    }
    clear_has_value();
  }
}
inline ::livekit::RpcError* PROTOBUF_NULLABLE RpcResponse::release_error() {
  // @@protoc_insertion_point(field_release:livekit.RpcResponse.error)
  if (value_case() == kError) {
    clear_has_value();
    auto* temp = _impl_.value_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::RpcError& RpcResponse::_internal_error() const {
  return value_case() == kError ? *_impl_.value_.error_ : reinterpret_cast<::livekit::RpcError&>(::livekit::_RpcError_default_instance_);
}
inline const ::livekit::RpcError& RpcResponse::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcResponse.error)
  return _internal_error();
}
inline ::livekit::RpcError* PROTOBUF_NULLABLE RpcResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.RpcResponse.error)
  if (value_case() == kError) {
    clear_has_value();
    auto* temp = _impl_.value_.error_;
    _impl_.value_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RpcResponse::unsafe_arena_set_allocated_error(
    ::livekit::RpcError* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_error();
    _impl_.value_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RpcResponse.error)
}
inline ::livekit::RpcError* PROTOBUF_NONNULL RpcResponse::_internal_mutable_error() {
  if (value_case() != kError) {
    clear_value();
    set_has_error();
    _impl_.value_.error_ = 
        ::google::protobuf::Message::DefaultConstruct<::livekit::RpcError>(GetArena());
  }
  return _impl_.value_.error_;
}
inline ::livekit::RpcError* PROTOBUF_NONNULL RpcResponse::mutable_error()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::RpcError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:livekit.RpcResponse.error)
  return _msg;
}

inline bool RpcResponse::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void RpcResponse::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline RpcResponse::ValueCase RpcResponse::value_case() const {
  return RpcResponse::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RpcError

// uint32 code = 1;
inline void RpcError::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t RpcError::code() const {
  // @@protoc_insertion_point(field_get:livekit.RpcError.code)
  return _internal_code();
}
inline void RpcError::set_code(::uint32_t value) {
  _internal_set_code(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RpcError.code)
}
inline ::uint32_t RpcError::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void RpcError::_internal_set_code(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string message = 2;
inline void RpcError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcError::set_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcError.message)
}
inline std::string* PROTOBUF_NONNULL RpcError::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:livekit.RpcError.message)
  return _s;
}
inline const std::string& RpcError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RpcError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcError.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.message_.Set("", GetArena());
  }
  return released;
}
inline void RpcError::set_allocated_message(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcError.message)
}

// string data = 3;
inline void RpcError::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcError::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RpcError.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void RpcError::set_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.RpcError.data)
}
inline std::string* PROTOBUF_NONNULL RpcError::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:livekit.RpcError.data)
  return _s;
}
inline const std::string& RpcError::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.Get();
}
inline void RpcError::_internal_set_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL RpcError::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE RpcError::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RpcError.data)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.data_.Set("", GetArena());
  }
  return released;
}
inline void RpcError::set_allocated_data(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RpcError.data)
}

// -------------------------------------------------------------------

// ParticipantTracks

// string participant_sid = 1;
inline void ParticipantTracks::clear_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_sid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParticipantTracks::participant_sid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantTracks.participant_sid)
  return _internal_participant_sid();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ParticipantTracks::set_participant_sid(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_sid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ParticipantTracks.participant_sid)
}
inline std::string* PROTOBUF_NONNULL ParticipantTracks::mutable_participant_sid()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_participant_sid();
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantTracks.participant_sid)
  return _s;
}
inline const std::string& ParticipantTracks::_internal_participant_sid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.participant_sid_.Get();
}
inline void ParticipantTracks::_internal_set_participant_sid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.participant_sid_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ParticipantTracks::_internal_mutable_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.participant_sid_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ParticipantTracks::release_participant_sid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ParticipantTracks.participant_sid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.participant_sid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.participant_sid_.Set("", GetArena());
  }
  return released;
}
inline void ParticipantTracks::set_allocated_participant_sid(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.participant_sid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.participant_sid_.IsDefault()) {
    _impl_.participant_sid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantTracks.participant_sid)
}

// repeated string track_sids = 2;
inline int ParticipantTracks::_internal_track_sids_size() const {
  return _internal_track_sids().size();
}
inline int ParticipantTracks::track_sids_size() const {
  return _internal_track_sids_size();
}
inline void ParticipantTracks::clear_track_sids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.track_sids_.Clear();
}
inline std::string* PROTOBUF_NONNULL ParticipantTracks::add_track_sids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_track_sids()->Add();
  // @@protoc_insertion_point(field_add_mutable:livekit.ParticipantTracks.track_sids)
  return _s;
}
inline const std::string& ParticipantTracks::track_sids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ParticipantTracks.track_sids)
  return _internal_track_sids().Get(index);
}
inline std::string* PROTOBUF_NONNULL ParticipantTracks::mutable_track_sids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.ParticipantTracks.track_sids)
  return _internal_mutable_track_sids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ParticipantTracks::set_track_sids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_track_sids()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:livekit.ParticipantTracks.track_sids)
}
template <typename Arg_, typename... Args_>
inline void ParticipantTracks::add_track_sids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_track_sids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:livekit.ParticipantTracks.track_sids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& ParticipantTracks::track_sids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.ParticipantTracks.track_sids)
  return _internal_track_sids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
ParticipantTracks::mutable_track_sids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.ParticipantTracks.track_sids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_track_sids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ParticipantTracks::_internal_track_sids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.track_sids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
ParticipantTracks::_internal_mutable_track_sids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.track_sids_;
}

// -------------------------------------------------------------------

// ServerInfo

// .livekit.ServerInfo.Edition edition = 1;
inline void ServerInfo::clear_edition() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edition_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::livekit::ServerInfo_Edition ServerInfo::edition() const {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.edition)
  return _internal_edition();
}
inline void ServerInfo::set_edition(::livekit::ServerInfo_Edition value) {
  _internal_set_edition(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.edition)
}
inline ::livekit::ServerInfo_Edition ServerInfo::_internal_edition() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ServerInfo_Edition>(_impl_.edition_);
}
inline void ServerInfo::_internal_set_edition(::livekit::ServerInfo_Edition value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.edition_ = value;
}

// string version = 2;
inline void ServerInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ServerInfo::set_version(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.version)
}
inline std::string* PROTOBUF_NONNULL ServerInfo::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:livekit.ServerInfo.version)
  return _s;
}
inline const std::string& ServerInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void ServerInfo::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ServerInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ServerInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ServerInfo.version)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.version_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.version_.Set("", GetArena());
  }
  return released;
}
inline void ServerInfo::set_allocated_version(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerInfo.version)
}

// int32 protocol = 3;
inline void ServerInfo::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t ServerInfo::protocol() const {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.protocol)
  return _internal_protocol();
}
inline void ServerInfo::set_protocol(::int32_t value) {
  _internal_set_protocol(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.protocol)
}
inline ::int32_t ServerInfo::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_;
}
inline void ServerInfo::_internal_set_protocol(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = value;
}

// string region = 4;
inline void ServerInfo::clear_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.region_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerInfo::region() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.region)
  return _internal_region();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ServerInfo::set_region(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.region)
}
inline std::string* PROTOBUF_NONNULL ServerInfo::mutable_region()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:livekit.ServerInfo.region)
  return _s;
}
inline const std::string& ServerInfo::_internal_region() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.region_.Get();
}
inline void ServerInfo::_internal_set_region(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ServerInfo::_internal_mutable_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.region_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ServerInfo::release_region() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ServerInfo.region)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.region_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.region_.Set("", GetArena());
  }
  return released;
}
inline void ServerInfo::set_allocated_region(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.region_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerInfo.region)
}

// string node_id = 5;
inline void ServerInfo::clear_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ServerInfo::node_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.node_id)
  return _internal_node_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ServerInfo::set_node_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.node_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.node_id)
}
inline std::string* PROTOBUF_NONNULL ServerInfo::mutable_node_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:livekit.ServerInfo.node_id)
  return _s;
}
inline const std::string& ServerInfo::_internal_node_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_id_.Get();
}
inline void ServerInfo::_internal_set_node_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.node_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ServerInfo::_internal_mutable_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.node_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ServerInfo::release_node_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ServerInfo.node_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.node_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.node_id_.Set("", GetArena());
  }
  return released;
}
inline void ServerInfo::set_allocated_node_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.node_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_id_.IsDefault()) {
    _impl_.node_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerInfo.node_id)
}

// string debug_info = 6;
inline void ServerInfo::clear_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.debug_info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ServerInfo::debug_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.debug_info)
  return _internal_debug_info();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ServerInfo::set_debug_info(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.debug_info)
}
inline std::string* PROTOBUF_NONNULL ServerInfo::mutable_debug_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_debug_info();
  // @@protoc_insertion_point(field_mutable:livekit.ServerInfo.debug_info)
  return _s;
}
inline const std::string& ServerInfo::_internal_debug_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.debug_info_.Get();
}
inline void ServerInfo::_internal_set_debug_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ServerInfo::_internal_mutable_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.debug_info_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ServerInfo::release_debug_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ServerInfo.debug_info)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.debug_info_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.debug_info_.Set("", GetArena());
  }
  return released;
}
inline void ServerInfo::set_allocated_debug_info(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.debug_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.debug_info_.IsDefault()) {
    _impl_.debug_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ServerInfo.debug_info)
}

// int32 agent_protocol = 7;
inline void ServerInfo::clear_agent_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t ServerInfo::agent_protocol() const {
  // @@protoc_insertion_point(field_get:livekit.ServerInfo.agent_protocol)
  return _internal_agent_protocol();
}
inline void ServerInfo::set_agent_protocol(::int32_t value) {
  _internal_set_agent_protocol(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.ServerInfo.agent_protocol)
}
inline ::int32_t ServerInfo::_internal_agent_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.agent_protocol_;
}
inline void ServerInfo::_internal_set_agent_protocol(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.agent_protocol_ = value;
}

// -------------------------------------------------------------------

// ClientInfo

// .livekit.ClientInfo.SDK sdk = 1;
inline void ClientInfo::clear_sdk() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdk_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::livekit::ClientInfo_SDK ClientInfo::sdk() const {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.sdk)
  return _internal_sdk();
}
inline void ClientInfo::set_sdk(::livekit::ClientInfo_SDK value) {
  _internal_set_sdk(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.sdk)
}
inline ::livekit::ClientInfo_SDK ClientInfo::_internal_sdk() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ClientInfo_SDK>(_impl_.sdk_);
}
inline void ClientInfo::_internal_set_sdk(::livekit::ClientInfo_SDK value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdk_ = value;
}

// string version = 2;
inline void ClientInfo::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_version(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.version)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.version)
  return _s;
}
inline const std::string& ClientInfo::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_.Get();
}
inline void ClientInfo::_internal_set_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.version)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.version_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.version_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_version(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.version)
}

// int32 protocol = 3;
inline void ClientInfo::clear_protocol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t ClientInfo::protocol() const {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.protocol)
  return _internal_protocol();
}
inline void ClientInfo::set_protocol(::int32_t value) {
  _internal_set_protocol(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.protocol)
}
inline ::int32_t ClientInfo::_internal_protocol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_;
}
inline void ClientInfo::_internal_set_protocol(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_ = value;
}

// string os = 4;
inline void ClientInfo::clear_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientInfo::os() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.os)
  return _internal_os();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_os(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.os_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.os)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_os()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.os)
  return _s;
}
inline const std::string& ClientInfo::_internal_os() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.os_.Get();
}
inline void ClientInfo::_internal_set_os(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.os_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.os_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_os() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.os)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.os_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.os_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_os(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.os_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.os_.IsDefault()) {
    _impl_.os_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.os)
}

// string os_version = 5;
inline void ClientInfo::clear_os_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.os_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientInfo::os_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.os_version)
  return _internal_os_version();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_os_version(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.os_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.os_version)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_os_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_os_version();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.os_version)
  return _s;
}
inline const std::string& ClientInfo::_internal_os_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.os_version_.Get();
}
inline void ClientInfo::_internal_set_os_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.os_version_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_os_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.os_version_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_os_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.os_version)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.os_version_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.os_version_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_os_version(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.os_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.os_version_.IsDefault()) {
    _impl_.os_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.os_version)
}

// string device_model = 6;
inline void ClientInfo::clear_device_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ClientInfo::device_model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.device_model)
  return _internal_device_model();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_device_model(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.device_model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.device_model)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_device_model()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_model();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.device_model)
  return _s;
}
inline const std::string& ClientInfo::_internal_device_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_model_.Get();
}
inline void ClientInfo::_internal_set_device_model(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.device_model_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_device_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.device_model_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_device_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.device_model)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.device_model_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.device_model_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_device_model(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.device_model_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_model_.IsDefault()) {
    _impl_.device_model_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.device_model)
}

// string browser = 7;
inline void ClientInfo::clear_browser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.browser_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ClientInfo::browser() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.browser)
  return _internal_browser();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_browser(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.browser_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.browser)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_browser()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_browser();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.browser)
  return _s;
}
inline const std::string& ClientInfo::_internal_browser() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.browser_.Get();
}
inline void ClientInfo::_internal_set_browser(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.browser_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_browser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.browser_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_browser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.browser)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.browser_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.browser_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_browser(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.browser_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.browser_.IsDefault()) {
    _impl_.browser_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.browser)
}

// string browser_version = 8;
inline void ClientInfo::clear_browser_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.browser_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ClientInfo::browser_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.browser_version)
  return _internal_browser_version();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_browser_version(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.browser_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.browser_version)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_browser_version()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_browser_version();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.browser_version)
  return _s;
}
inline const std::string& ClientInfo::_internal_browser_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.browser_version_.Get();
}
inline void ClientInfo::_internal_set_browser_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.browser_version_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_browser_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.browser_version_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_browser_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.browser_version)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.browser_version_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.browser_version_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_browser_version(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.browser_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.browser_version_.IsDefault()) {
    _impl_.browser_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.browser_version)
}

// string address = 9;
inline void ClientInfo::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ClientInfo::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_address(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.address)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_address()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.address)
  return _s;
}
inline const std::string& ClientInfo::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void ClientInfo::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.address_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.address)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.address_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.address_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_address(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.address)
}

// string network = 10;
inline void ClientInfo::clear_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ClientInfo::network() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.network)
  return _internal_network();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_network(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.network_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.network)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_network()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.network)
  return _s;
}
inline const std::string& ClientInfo::_internal_network() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_.Get();
}
inline void ClientInfo::_internal_set_network(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.network_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.network_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_network() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.network)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.network_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.network_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_network(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.network_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_.IsDefault()) {
    _impl_.network_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.network)
}

// string other_sdks = 11;
inline void ClientInfo::clear_other_sdks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_sdks_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ClientInfo::other_sdks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientInfo.other_sdks)
  return _internal_other_sdks();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ClientInfo::set_other_sdks(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.other_sdks_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.ClientInfo.other_sdks)
}
inline std::string* PROTOBUF_NONNULL ClientInfo::mutable_other_sdks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_other_sdks();
  // @@protoc_insertion_point(field_mutable:livekit.ClientInfo.other_sdks)
  return _s;
}
inline const std::string& ClientInfo::_internal_other_sdks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.other_sdks_.Get();
}
inline void ClientInfo::_internal_set_other_sdks(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.other_sdks_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ClientInfo::_internal_mutable_other_sdks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.other_sdks_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ClientInfo::release_other_sdks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientInfo.other_sdks)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.other_sdks_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.other_sdks_.Set("", GetArena());
  }
  return released;
}
inline void ClientInfo::set_allocated_other_sdks(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.other_sdks_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.other_sdks_.IsDefault()) {
    _impl_.other_sdks_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientInfo.other_sdks)
}

// -------------------------------------------------------------------

// ClientConfiguration

// .livekit.VideoConfiguration video = 1;
inline bool ClientConfiguration::has_video() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.video_ != nullptr);
  return value;
}
inline void ClientConfiguration::clear_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.video_ != nullptr) _impl_.video_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::VideoConfiguration& ClientConfiguration::_internal_video() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::VideoConfiguration* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::VideoConfiguration&>(::livekit::_VideoConfiguration_default_instance_);
}
inline const ::livekit::VideoConfiguration& ClientConfiguration::video() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientConfiguration.video)
  return _internal_video();
}
inline void ClientConfiguration::unsafe_arena_set_allocated_video(
    ::livekit::VideoConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = reinterpret_cast<::livekit::VideoConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ClientConfiguration.video)
}
inline ::livekit::VideoConfiguration* PROTOBUF_NULLABLE ClientConfiguration::release_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::VideoConfiguration* released = _impl_.video_;
  _impl_.video_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NULLABLE ClientConfiguration::unsafe_arena_release_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientConfiguration.video)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::VideoConfiguration* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NONNULL ClientConfiguration::_internal_mutable_video() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.video_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::VideoConfiguration>(GetArena());
    _impl_.video_ = reinterpret_cast<::livekit::VideoConfiguration*>(p);
  }
  return _impl_.video_;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NONNULL ClientConfiguration::mutable_video()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::livekit::VideoConfiguration* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:livekit.ClientConfiguration.video)
  return _msg;
}
inline void ClientConfiguration::set_allocated_video(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.video_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.video_ = reinterpret_cast<::livekit::VideoConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientConfiguration.video)
}

// .livekit.VideoConfiguration screen = 2;
inline bool ClientConfiguration::has_screen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.screen_ != nullptr);
  return value;
}
inline void ClientConfiguration::clear_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.screen_ != nullptr) _impl_.screen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::livekit::VideoConfiguration& ClientConfiguration::_internal_screen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::VideoConfiguration* p = _impl_.screen_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::VideoConfiguration&>(::livekit::_VideoConfiguration_default_instance_);
}
inline const ::livekit::VideoConfiguration& ClientConfiguration::screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientConfiguration.screen)
  return _internal_screen();
}
inline void ClientConfiguration::unsafe_arena_set_allocated_screen(
    ::livekit::VideoConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.screen_);
  }
  _impl_.screen_ = reinterpret_cast<::livekit::VideoConfiguration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ClientConfiguration.screen)
}
inline ::livekit::VideoConfiguration* PROTOBUF_NULLABLE ClientConfiguration::release_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::VideoConfiguration* released = _impl_.screen_;
  _impl_.screen_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NULLABLE ClientConfiguration::unsafe_arena_release_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientConfiguration.screen)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::livekit::VideoConfiguration* temp = _impl_.screen_;
  _impl_.screen_ = nullptr;
  return temp;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NONNULL ClientConfiguration::_internal_mutable_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.screen_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::VideoConfiguration>(GetArena());
    _impl_.screen_ = reinterpret_cast<::livekit::VideoConfiguration*>(p);
  }
  return _impl_.screen_;
}
inline ::livekit::VideoConfiguration* PROTOBUF_NONNULL ClientConfiguration::mutable_screen()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::livekit::VideoConfiguration* _msg = _internal_mutable_screen();
  // @@protoc_insertion_point(field_mutable:livekit.ClientConfiguration.screen)
  return _msg;
}
inline void ClientConfiguration::set_allocated_screen(::livekit::VideoConfiguration* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.screen_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.screen_ = reinterpret_cast<::livekit::VideoConfiguration*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientConfiguration.screen)
}

// .livekit.ClientConfigSetting resume_connection = 3;
inline void ClientConfiguration::clear_resume_connection() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resume_connection_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::livekit::ClientConfigSetting ClientConfiguration::resume_connection() const {
  // @@protoc_insertion_point(field_get:livekit.ClientConfiguration.resume_connection)
  return _internal_resume_connection();
}
inline void ClientConfiguration::set_resume_connection(::livekit::ClientConfigSetting value) {
  _internal_set_resume_connection(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.ClientConfiguration.resume_connection)
}
inline ::livekit::ClientConfigSetting ClientConfiguration::_internal_resume_connection() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ClientConfigSetting>(_impl_.resume_connection_);
}
inline void ClientConfiguration::_internal_set_resume_connection(::livekit::ClientConfigSetting value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.resume_connection_ = value;
}

// .livekit.DisabledCodecs disabled_codecs = 4;
inline bool ClientConfiguration::has_disabled_codecs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.disabled_codecs_ != nullptr);
  return value;
}
inline void ClientConfiguration::clear_disabled_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disabled_codecs_ != nullptr) _impl_.disabled_codecs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::livekit::DisabledCodecs& ClientConfiguration::_internal_disabled_codecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::DisabledCodecs* p = _impl_.disabled_codecs_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::DisabledCodecs&>(::livekit::_DisabledCodecs_default_instance_);
}
inline const ::livekit::DisabledCodecs& ClientConfiguration::disabled_codecs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.ClientConfiguration.disabled_codecs)
  return _internal_disabled_codecs();
}
inline void ClientConfiguration::unsafe_arena_set_allocated_disabled_codecs(
    ::livekit::DisabledCodecs* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disabled_codecs_);
  }
  _impl_.disabled_codecs_ = reinterpret_cast<::livekit::DisabledCodecs*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.ClientConfiguration.disabled_codecs)
}
inline ::livekit::DisabledCodecs* PROTOBUF_NULLABLE ClientConfiguration::release_disabled_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::DisabledCodecs* released = _impl_.disabled_codecs_;
  _impl_.disabled_codecs_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::DisabledCodecs* PROTOBUF_NULLABLE ClientConfiguration::unsafe_arena_release_disabled_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.ClientConfiguration.disabled_codecs)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::DisabledCodecs* temp = _impl_.disabled_codecs_;
  _impl_.disabled_codecs_ = nullptr;
  return temp;
}
inline ::livekit::DisabledCodecs* PROTOBUF_NONNULL ClientConfiguration::_internal_mutable_disabled_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disabled_codecs_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::DisabledCodecs>(GetArena());
    _impl_.disabled_codecs_ = reinterpret_cast<::livekit::DisabledCodecs*>(p);
  }
  return _impl_.disabled_codecs_;
}
inline ::livekit::DisabledCodecs* PROTOBUF_NONNULL ClientConfiguration::mutable_disabled_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::livekit::DisabledCodecs* _msg = _internal_mutable_disabled_codecs();
  // @@protoc_insertion_point(field_mutable:livekit.ClientConfiguration.disabled_codecs)
  return _msg;
}
inline void ClientConfiguration::set_allocated_disabled_codecs(::livekit::DisabledCodecs* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disabled_codecs_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.disabled_codecs_ = reinterpret_cast<::livekit::DisabledCodecs*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.ClientConfiguration.disabled_codecs)
}

// .livekit.ClientConfigSetting force_relay = 5;
inline void ClientConfiguration::clear_force_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_relay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::livekit::ClientConfigSetting ClientConfiguration::force_relay() const {
  // @@protoc_insertion_point(field_get:livekit.ClientConfiguration.force_relay)
  return _internal_force_relay();
}
inline void ClientConfiguration::set_force_relay(::livekit::ClientConfigSetting value) {
  _internal_set_force_relay(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.ClientConfiguration.force_relay)
}
inline ::livekit::ClientConfigSetting ClientConfiguration::_internal_force_relay() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ClientConfigSetting>(_impl_.force_relay_);
}
inline void ClientConfiguration::_internal_set_force_relay(::livekit::ClientConfigSetting value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_relay_ = value;
}

// -------------------------------------------------------------------

// VideoConfiguration

// .livekit.ClientConfigSetting hardware_encoder = 1;
inline void VideoConfiguration::clear_hardware_encoder() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hardware_encoder_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::livekit::ClientConfigSetting VideoConfiguration::hardware_encoder() const {
  // @@protoc_insertion_point(field_get:livekit.VideoConfiguration.hardware_encoder)
  return _internal_hardware_encoder();
}
inline void VideoConfiguration::set_hardware_encoder(::livekit::ClientConfigSetting value) {
  _internal_set_hardware_encoder(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.VideoConfiguration.hardware_encoder)
}
inline ::livekit::ClientConfigSetting VideoConfiguration::_internal_hardware_encoder() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::ClientConfigSetting>(_impl_.hardware_encoder_);
}
inline void VideoConfiguration::_internal_set_hardware_encoder(::livekit::ClientConfigSetting value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hardware_encoder_ = value;
}

// -------------------------------------------------------------------

// DisabledCodecs

// repeated .livekit.Codec codecs = 1;
inline int DisabledCodecs::_internal_codecs_size() const {
  return _internal_codecs().size();
}
inline int DisabledCodecs::codecs_size() const {
  return _internal_codecs_size();
}
inline void DisabledCodecs::clear_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.codecs_.Clear();
}
inline ::livekit::Codec* PROTOBUF_NONNULL DisabledCodecs::mutable_codecs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.DisabledCodecs.codecs)
  return _internal_mutable_codecs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL DisabledCodecs::mutable_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.DisabledCodecs.codecs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_codecs();
}
inline const ::livekit::Codec& DisabledCodecs::codecs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DisabledCodecs.codecs)
  return _internal_codecs().Get(index);
}
inline ::livekit::Codec* PROTOBUF_NONNULL DisabledCodecs::add_codecs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::Codec* _add = _internal_mutable_codecs()->Add();
  // @@protoc_insertion_point(field_add:livekit.DisabledCodecs.codecs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& DisabledCodecs::codecs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.DisabledCodecs.codecs)
  return _internal_codecs();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>&
DisabledCodecs::_internal_codecs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.codecs_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL
DisabledCodecs::_internal_mutable_codecs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.codecs_;
}

// repeated .livekit.Codec publish = 2;
inline int DisabledCodecs::_internal_publish_size() const {
  return _internal_publish().size();
}
inline int DisabledCodecs::publish_size() const {
  return _internal_publish_size();
}
inline void DisabledCodecs::clear_publish() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publish_.Clear();
}
inline ::livekit::Codec* PROTOBUF_NONNULL DisabledCodecs::mutable_publish(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.DisabledCodecs.publish)
  return _internal_mutable_publish()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL DisabledCodecs::mutable_publish()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.DisabledCodecs.publish)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_publish();
}
inline const ::livekit::Codec& DisabledCodecs::publish(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DisabledCodecs.publish)
  return _internal_publish().Get(index);
}
inline ::livekit::Codec* PROTOBUF_NONNULL DisabledCodecs::add_publish()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::Codec* _add = _internal_mutable_publish()->Add();
  // @@protoc_insertion_point(field_add:livekit.DisabledCodecs.publish)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>& DisabledCodecs::publish() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.DisabledCodecs.publish)
  return _internal_publish();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::Codec>&
DisabledCodecs::_internal_publish() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.publish_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::Codec>* PROTOBUF_NONNULL
DisabledCodecs::_internal_mutable_publish() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.publish_;
}

// -------------------------------------------------------------------

// RTPDrift

// .google.protobuf.Timestamp start_time = 1;
inline bool RTPDrift::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPDrift::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPDrift::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.start_time)
  return _internal_start_time();
}
inline void RTPDrift::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPDrift.start_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPDrift::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPDrift::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPDrift.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPDrift::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPDrift::mutable_start_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:livekit.RTPDrift.start_time)
  return _msg;
}
inline void RTPDrift::set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPDrift.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool RTPDrift::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPDrift::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPDrift::end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.end_time)
  return _internal_end_time();
}
inline void RTPDrift::unsafe_arena_set_allocated_end_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPDrift.end_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPDrift::release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPDrift::unsafe_arena_release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPDrift.end_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPDrift::_internal_mutable_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPDrift::mutable_end_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:livekit.RTPDrift.end_time)
  return _msg;
}
inline void RTPDrift::set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPDrift.end_time)
}

// double duration = 3;
inline void RTPDrift::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RTPDrift::duration() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.duration)
  return _internal_duration();
}
inline void RTPDrift::set_duration(double value) {
  _internal_set_duration(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.duration)
}
inline double RTPDrift::_internal_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_;
}
inline void RTPDrift::_internal_set_duration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = value;
}

// uint64 start_timestamp = 4;
inline void RTPDrift::clear_start_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t RTPDrift::start_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.start_timestamp)
  return _internal_start_timestamp();
}
inline void RTPDrift::set_start_timestamp(::uint64_t value) {
  _internal_set_start_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.start_timestamp)
}
inline ::uint64_t RTPDrift::_internal_start_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_timestamp_;
}
inline void RTPDrift::_internal_set_start_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_timestamp_ = value;
}

// uint64 end_timestamp = 5;
inline void RTPDrift::clear_end_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t RTPDrift::end_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.end_timestamp)
  return _internal_end_timestamp();
}
inline void RTPDrift::set_end_timestamp(::uint64_t value) {
  _internal_set_end_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.end_timestamp)
}
inline ::uint64_t RTPDrift::_internal_end_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_timestamp_;
}
inline void RTPDrift::_internal_set_end_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_timestamp_ = value;
}

// uint64 rtp_clock_ticks = 6;
inline void RTPDrift::clear_rtp_clock_ticks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_clock_ticks_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t RTPDrift::rtp_clock_ticks() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.rtp_clock_ticks)
  return _internal_rtp_clock_ticks();
}
inline void RTPDrift::set_rtp_clock_ticks(::uint64_t value) {
  _internal_set_rtp_clock_ticks(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.rtp_clock_ticks)
}
inline ::uint64_t RTPDrift::_internal_rtp_clock_ticks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtp_clock_ticks_;
}
inline void RTPDrift::_internal_set_rtp_clock_ticks(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_clock_ticks_ = value;
}

// int64 drift_samples = 7;
inline void RTPDrift::clear_drift_samples() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drift_samples_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t RTPDrift::drift_samples() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.drift_samples)
  return _internal_drift_samples();
}
inline void RTPDrift::set_drift_samples(::int64_t value) {
  _internal_set_drift_samples(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.drift_samples)
}
inline ::int64_t RTPDrift::_internal_drift_samples() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drift_samples_;
}
inline void RTPDrift::_internal_set_drift_samples(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drift_samples_ = value;
}

// double drift_ms = 8;
inline void RTPDrift::clear_drift_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drift_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double RTPDrift::drift_ms() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.drift_ms)
  return _internal_drift_ms();
}
inline void RTPDrift::set_drift_ms(double value) {
  _internal_set_drift_ms(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.drift_ms)
}
inline double RTPDrift::_internal_drift_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drift_ms_;
}
inline void RTPDrift::_internal_set_drift_ms(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drift_ms_ = value;
}

// double clock_rate = 9;
inline void RTPDrift::clear_clock_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double RTPDrift::clock_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPDrift.clock_rate)
  return _internal_clock_rate();
}
inline void RTPDrift::set_clock_rate(double value) {
  _internal_set_clock_rate(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.RTPDrift.clock_rate)
}
inline double RTPDrift::_internal_clock_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clock_rate_;
}
inline void RTPDrift::_internal_set_clock_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clock_rate_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RTPStats

// .google.protobuf.Timestamp start_time = 1;
inline bool RTPStats::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.start_time)
  return _internal_start_time();
}
inline void RTPStats::unsafe_arena_set_allocated_start_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.start_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_start_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.start_time)
  return _msg;
}
inline void RTPStats::set_allocated_start_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool RTPStats::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.end_time)
  return _internal_end_time();
}
inline void RTPStats::unsafe_arena_set_allocated_end_time(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.end_time)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.end_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_end_time()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.end_time)
  return _msg;
}
inline void RTPStats::set_allocated_end_time(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.end_time)
}

// double duration = 3;
inline void RTPStats::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double RTPStats::duration() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.duration)
  return _internal_duration();
}
inline void RTPStats::set_duration(double value) {
  _internal_set_duration(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.duration)
}
inline double RTPStats::_internal_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_;
}
inline void RTPStats::_internal_set_duration(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_ = value;
}

// uint32 packets = 4;
inline void RTPStats::clear_packets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t RTPStats::packets() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packets)
  return _internal_packets();
}
inline void RTPStats::set_packets(::uint32_t value) {
  _internal_set_packets(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packets)
}
inline ::uint32_t RTPStats::_internal_packets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_;
}
inline void RTPStats::_internal_set_packets(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_ = value;
}

// double packet_rate = 5;
inline void RTPStats::clear_packet_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double RTPStats::packet_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_rate)
  return _internal_packet_rate();
}
inline void RTPStats::set_packet_rate(double value) {
  _internal_set_packet_rate(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packet_rate)
}
inline double RTPStats::_internal_packet_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_rate_;
}
inline void RTPStats::_internal_set_packet_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_rate_ = value;
}

// uint64 bytes = 6;
inline void RTPStats::clear_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t RTPStats::bytes() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bytes)
  return _internal_bytes();
}
inline void RTPStats::set_bytes(::uint64_t value) {
  _internal_set_bytes(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bytes)
}
inline ::uint64_t RTPStats::_internal_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_;
}
inline void RTPStats::_internal_set_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_ = value;
}

// uint64 header_bytes = 39;
inline void RTPStats::clear_header_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::uint64_t RTPStats::header_bytes() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.header_bytes)
  return _internal_header_bytes();
}
inline void RTPStats::set_header_bytes(::uint64_t value) {
  _internal_set_header_bytes(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.header_bytes)
}
inline ::uint64_t RTPStats::_internal_header_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_bytes_;
}
inline void RTPStats::_internal_set_header_bytes(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_ = value;
}

// double bitrate = 7;
inline void RTPStats::clear_bitrate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double RTPStats::bitrate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bitrate)
  return _internal_bitrate();
}
inline void RTPStats::set_bitrate(double value) {
  _internal_set_bitrate(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bitrate)
}
inline double RTPStats::_internal_bitrate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_;
}
inline void RTPStats::_internal_set_bitrate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_ = value;
}

// uint32 packets_lost = 8;
inline void RTPStats::clear_packets_lost() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_lost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t RTPStats::packets_lost() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packets_lost)
  return _internal_packets_lost();
}
inline void RTPStats::set_packets_lost(::uint32_t value) {
  _internal_set_packets_lost(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packets_lost)
}
inline ::uint32_t RTPStats::_internal_packets_lost() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_lost_;
}
inline void RTPStats::_internal_set_packets_lost(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_lost_ = value;
}

// double packet_loss_rate = 9;
inline void RTPStats::clear_packet_loss_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double RTPStats::packet_loss_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_loss_rate)
  return _internal_packet_loss_rate();
}
inline void RTPStats::set_packet_loss_rate(double value) {
  _internal_set_packet_loss_rate(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packet_loss_rate)
}
inline double RTPStats::_internal_packet_loss_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_loss_rate_;
}
inline void RTPStats::_internal_set_packet_loss_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_rate_ = value;
}

// float packet_loss_percentage = 10;
inline void RTPStats::clear_packet_loss_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_percentage_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float RTPStats::packet_loss_percentage() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_loss_percentage)
  return _internal_packet_loss_percentage();
}
inline void RTPStats::set_packet_loss_percentage(float value) {
  _internal_set_packet_loss_percentage(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packet_loss_percentage)
}
inline float RTPStats::_internal_packet_loss_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_loss_percentage_;
}
inline void RTPStats::_internal_set_packet_loss_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_percentage_ = value;
}

// uint32 packets_duplicate = 11;
inline void RTPStats::clear_packets_duplicate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_duplicate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t RTPStats::packets_duplicate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packets_duplicate)
  return _internal_packets_duplicate();
}
inline void RTPStats::set_packets_duplicate(::uint32_t value) {
  _internal_set_packets_duplicate(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packets_duplicate)
}
inline ::uint32_t RTPStats::_internal_packets_duplicate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_duplicate_;
}
inline void RTPStats::_internal_set_packets_duplicate(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_duplicate_ = value;
}

// double packet_duplicate_rate = 12;
inline void RTPStats::clear_packet_duplicate_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_duplicate_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double RTPStats::packet_duplicate_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_duplicate_rate)
  return _internal_packet_duplicate_rate();
}
inline void RTPStats::set_packet_duplicate_rate(double value) {
  _internal_set_packet_duplicate_rate(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packet_duplicate_rate)
}
inline double RTPStats::_internal_packet_duplicate_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_duplicate_rate_;
}
inline void RTPStats::_internal_set_packet_duplicate_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_duplicate_rate_ = value;
}

// uint64 bytes_duplicate = 13;
inline void RTPStats::clear_bytes_duplicate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_duplicate_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint64_t RTPStats::bytes_duplicate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bytes_duplicate)
  return _internal_bytes_duplicate();
}
inline void RTPStats::set_bytes_duplicate(::uint64_t value) {
  _internal_set_bytes_duplicate(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bytes_duplicate)
}
inline ::uint64_t RTPStats::_internal_bytes_duplicate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_duplicate_;
}
inline void RTPStats::_internal_set_bytes_duplicate(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_duplicate_ = value;
}

// uint64 header_bytes_duplicate = 40;
inline void RTPStats::clear_header_bytes_duplicate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_duplicate_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::uint64_t RTPStats::header_bytes_duplicate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.header_bytes_duplicate)
  return _internal_header_bytes_duplicate();
}
inline void RTPStats::set_header_bytes_duplicate(::uint64_t value) {
  _internal_set_header_bytes_duplicate(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.header_bytes_duplicate)
}
inline ::uint64_t RTPStats::_internal_header_bytes_duplicate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_bytes_duplicate_;
}
inline void RTPStats::_internal_set_header_bytes_duplicate(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_duplicate_ = value;
}

// double bitrate_duplicate = 14;
inline void RTPStats::clear_bitrate_duplicate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_duplicate_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double RTPStats::bitrate_duplicate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bitrate_duplicate)
  return _internal_bitrate_duplicate();
}
inline void RTPStats::set_bitrate_duplicate(double value) {
  _internal_set_bitrate_duplicate(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bitrate_duplicate)
}
inline double RTPStats::_internal_bitrate_duplicate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_duplicate_;
}
inline void RTPStats::_internal_set_bitrate_duplicate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_duplicate_ = value;
}

// uint32 packets_padding = 15;
inline void RTPStats::clear_packets_padding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_padding_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t RTPStats::packets_padding() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packets_padding)
  return _internal_packets_padding();
}
inline void RTPStats::set_packets_padding(::uint32_t value) {
  _internal_set_packets_padding(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packets_padding)
}
inline ::uint32_t RTPStats::_internal_packets_padding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_padding_;
}
inline void RTPStats::_internal_set_packets_padding(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_padding_ = value;
}

// double packet_padding_rate = 16;
inline void RTPStats::clear_packet_padding_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_padding_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double RTPStats::packet_padding_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_padding_rate)
  return _internal_packet_padding_rate();
}
inline void RTPStats::set_packet_padding_rate(double value) {
  _internal_set_packet_padding_rate(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packet_padding_rate)
}
inline double RTPStats::_internal_packet_padding_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_padding_rate_;
}
inline void RTPStats::_internal_set_packet_padding_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_padding_rate_ = value;
}

// uint64 bytes_padding = 17;
inline void RTPStats::clear_bytes_padding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_padding_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::uint64_t RTPStats::bytes_padding() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bytes_padding)
  return _internal_bytes_padding();
}
inline void RTPStats::set_bytes_padding(::uint64_t value) {
  _internal_set_bytes_padding(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bytes_padding)
}
inline ::uint64_t RTPStats::_internal_bytes_padding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytes_padding_;
}
inline void RTPStats::_internal_set_bytes_padding(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytes_padding_ = value;
}

// uint64 header_bytes_padding = 41;
inline void RTPStats::clear_header_bytes_padding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_padding_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::uint64_t RTPStats::header_bytes_padding() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.header_bytes_padding)
  return _internal_header_bytes_padding();
}
inline void RTPStats::set_header_bytes_padding(::uint64_t value) {
  _internal_set_header_bytes_padding(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.header_bytes_padding)
}
inline ::uint64_t RTPStats::_internal_header_bytes_padding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.header_bytes_padding_;
}
inline void RTPStats::_internal_set_header_bytes_padding(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.header_bytes_padding_ = value;
}

// double bitrate_padding = 18;
inline void RTPStats::clear_bitrate_padding() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_padding_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double RTPStats::bitrate_padding() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.bitrate_padding)
  return _internal_bitrate_padding();
}
inline void RTPStats::set_bitrate_padding(double value) {
  _internal_set_bitrate_padding(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.bitrate_padding)
}
inline double RTPStats::_internal_bitrate_padding() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bitrate_padding_;
}
inline void RTPStats::_internal_set_bitrate_padding(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bitrate_padding_ = value;
}

// uint32 packets_out_of_order = 19;
inline void RTPStats::clear_packets_out_of_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_out_of_order_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint32_t RTPStats::packets_out_of_order() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packets_out_of_order)
  return _internal_packets_out_of_order();
}
inline void RTPStats::set_packets_out_of_order(::uint32_t value) {
  _internal_set_packets_out_of_order(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.packets_out_of_order)
}
inline ::uint32_t RTPStats::_internal_packets_out_of_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_out_of_order_;
}
inline void RTPStats::_internal_set_packets_out_of_order(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_out_of_order_ = value;
}

// uint32 frames = 20;
inline void RTPStats::clear_frames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frames_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::uint32_t RTPStats::frames() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.frames)
  return _internal_frames();
}
inline void RTPStats::set_frames(::uint32_t value) {
  _internal_set_frames(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.frames)
}
inline ::uint32_t RTPStats::_internal_frames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frames_;
}
inline void RTPStats::_internal_set_frames(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frames_ = value;
}

// double frame_rate = 21;
inline void RTPStats::clear_frame_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double RTPStats::frame_rate() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.frame_rate)
  return _internal_frame_rate();
}
inline void RTPStats::set_frame_rate(double value) {
  _internal_set_frame_rate(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.frame_rate)
}
inline double RTPStats::_internal_frame_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_rate_;
}
inline void RTPStats::_internal_set_frame_rate(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_rate_ = value;
}

// double jitter_current = 22;
inline void RTPStats::clear_jitter_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_current_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double RTPStats::jitter_current() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.jitter_current)
  return _internal_jitter_current();
}
inline void RTPStats::set_jitter_current(double value) {
  _internal_set_jitter_current(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.jitter_current)
}
inline double RTPStats::_internal_jitter_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jitter_current_;
}
inline void RTPStats::_internal_set_jitter_current(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_current_ = value;
}

// double jitter_max = 23;
inline void RTPStats::clear_jitter_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_max_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline double RTPStats::jitter_max() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.jitter_max)
  return _internal_jitter_max();
}
inline void RTPStats::set_jitter_max(double value) {
  _internal_set_jitter_max(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.jitter_max)
}
inline double RTPStats::_internal_jitter_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jitter_max_;
}
inline void RTPStats::_internal_set_jitter_max(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jitter_max_ = value;
}

// map<int32, uint32> gap_histogram = 24;
inline int RTPStats::_internal_gap_histogram_size() const {
  return _internal_gap_histogram().size();
}
inline int RTPStats::gap_histogram_size() const {
  return _internal_gap_histogram_size();
}
inline void RTPStats::clear_gap_histogram() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gap_histogram_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::uint32_t>& RTPStats::_internal_gap_histogram() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gap_histogram_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::uint32_t>& RTPStats::gap_histogram() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:livekit.RTPStats.gap_histogram)
  return _internal_gap_histogram();
}
inline ::google::protobuf::Map<::int32_t, ::uint32_t>* PROTOBUF_NONNULL RTPStats::_internal_mutable_gap_histogram() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gap_histogram_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::uint32_t>* PROTOBUF_NONNULL RTPStats::mutable_gap_histogram()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:livekit.RTPStats.gap_histogram)
  return _internal_mutable_gap_histogram();
}

// uint32 nacks = 25;
inline void RTPStats::clear_nacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nacks_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint32_t RTPStats::nacks() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.nacks)
  return _internal_nacks();
}
inline void RTPStats::set_nacks(::uint32_t value) {
  _internal_set_nacks(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.nacks)
}
inline ::uint32_t RTPStats::_internal_nacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nacks_;
}
inline void RTPStats::_internal_set_nacks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nacks_ = value;
}

// uint32 nack_acks = 37;
inline void RTPStats::clear_nack_acks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_acks_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::uint32_t RTPStats::nack_acks() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.nack_acks)
  return _internal_nack_acks();
}
inline void RTPStats::set_nack_acks(::uint32_t value) {
  _internal_set_nack_acks(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.nack_acks)
}
inline ::uint32_t RTPStats::_internal_nack_acks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nack_acks_;
}
inline void RTPStats::_internal_set_nack_acks(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_acks_ = value;
}

// uint32 nack_misses = 26;
inline void RTPStats::clear_nack_misses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_misses_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::uint32_t RTPStats::nack_misses() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.nack_misses)
  return _internal_nack_misses();
}
inline void RTPStats::set_nack_misses(::uint32_t value) {
  _internal_set_nack_misses(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.nack_misses)
}
inline ::uint32_t RTPStats::_internal_nack_misses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nack_misses_;
}
inline void RTPStats::_internal_set_nack_misses(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_misses_ = value;
}

// uint32 nack_repeated = 38;
inline void RTPStats::clear_nack_repeated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_repeated_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::uint32_t RTPStats::nack_repeated() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.nack_repeated)
  return _internal_nack_repeated();
}
inline void RTPStats::set_nack_repeated(::uint32_t value) {
  _internal_set_nack_repeated(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.nack_repeated)
}
inline ::uint32_t RTPStats::_internal_nack_repeated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nack_repeated_;
}
inline void RTPStats::_internal_set_nack_repeated(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nack_repeated_ = value;
}

// uint32 plis = 27;
inline void RTPStats::clear_plis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plis_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::uint32_t RTPStats::plis() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.plis)
  return _internal_plis();
}
inline void RTPStats::set_plis(::uint32_t value) {
  _internal_set_plis(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.plis)
}
inline ::uint32_t RTPStats::_internal_plis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.plis_;
}
inline void RTPStats::_internal_set_plis(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.plis_ = value;
}

// .google.protobuf.Timestamp last_pli = 28;
inline bool RTPStats::has_last_pli() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_pli_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_last_pli() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_pli_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::last_pli() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.last_pli)
  return _internal_last_pli();
}
inline void RTPStats::unsafe_arena_set_allocated_last_pli(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_pli_);
  }
  _impl_.last_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.last_pli)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_last_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.last_pli_;
  _impl_.last_pli_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_last_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.last_pli)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.last_pli_;
  _impl_.last_pli_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_last_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_pli_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_pli_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_last_pli()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_pli();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.last_pli)
  return _msg;
}
inline void RTPStats::set_allocated_last_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_pli_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.last_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.last_pli)
}

// uint32 firs = 29;
inline void RTPStats::clear_firs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.firs_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::uint32_t RTPStats::firs() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.firs)
  return _internal_firs();
}
inline void RTPStats::set_firs(::uint32_t value) {
  _internal_set_firs(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.firs)
}
inline ::uint32_t RTPStats::_internal_firs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.firs_;
}
inline void RTPStats::_internal_set_firs(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.firs_ = value;
}

// .google.protobuf.Timestamp last_fir = 30;
inline bool RTPStats::has_last_fir() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_fir_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_last_fir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_fir_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::last_fir() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.last_fir)
  return _internal_last_fir();
}
inline void RTPStats::unsafe_arena_set_allocated_last_fir(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_fir_);
  }
  _impl_.last_fir_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.last_fir)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_last_fir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.last_fir_;
  _impl_.last_fir_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_last_fir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.last_fir)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.last_fir_;
  _impl_.last_fir_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_last_fir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_fir_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_fir_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_fir_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_last_fir()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_fir();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.last_fir)
  return _msg;
}
inline void RTPStats::set_allocated_last_fir(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_fir_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.last_fir_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.last_fir)
}

// uint32 rtt_current = 31;
inline void RTPStats::clear_rtt_current() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_current_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::uint32_t RTPStats::rtt_current() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.rtt_current)
  return _internal_rtt_current();
}
inline void RTPStats::set_rtt_current(::uint32_t value) {
  _internal_set_rtt_current(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.rtt_current)
}
inline ::uint32_t RTPStats::_internal_rtt_current() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtt_current_;
}
inline void RTPStats::_internal_set_rtt_current(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_current_ = value;
}

// uint32 rtt_max = 32;
inline void RTPStats::clear_rtt_max() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_max_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline ::uint32_t RTPStats::rtt_max() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.rtt_max)
  return _internal_rtt_max();
}
inline void RTPStats::set_rtt_max(::uint32_t value) {
  _internal_set_rtt_max(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.rtt_max)
}
inline ::uint32_t RTPStats::_internal_rtt_max() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtt_max_;
}
inline void RTPStats::_internal_set_rtt_max(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtt_max_ = value;
}

// uint32 key_frames = 33;
inline void RTPStats::clear_key_frames() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_frames_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::uint32_t RTPStats::key_frames() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.key_frames)
  return _internal_key_frames();
}
inline void RTPStats::set_key_frames(::uint32_t value) {
  _internal_set_key_frames(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.key_frames)
}
inline ::uint32_t RTPStats::_internal_key_frames() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_frames_;
}
inline void RTPStats::_internal_set_key_frames(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_frames_ = value;
}

// .google.protobuf.Timestamp last_key_frame = 34;
inline bool RTPStats::has_last_key_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_key_frame_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_last_key_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_key_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::last_key_frame() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.last_key_frame)
  return _internal_last_key_frame();
}
inline void RTPStats::unsafe_arena_set_allocated_last_key_frame(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_key_frame_);
  }
  _impl_.last_key_frame_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.last_key_frame)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_last_key_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.last_key_frame_;
  _impl_.last_key_frame_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_last_key_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.last_key_frame)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.last_key_frame_;
  _impl_.last_key_frame_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_last_key_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_key_frame_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_key_frame_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_key_frame_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_last_key_frame()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_key_frame();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.last_key_frame)
  return _msg;
}
inline void RTPStats::set_allocated_last_key_frame(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_key_frame_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.last_key_frame_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.last_key_frame)
}

// uint32 layer_lock_plis = 35;
inline void RTPStats::clear_layer_lock_plis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_lock_plis_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::uint32_t RTPStats::layer_lock_plis() const {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.layer_lock_plis)
  return _internal_layer_lock_plis();
}
inline void RTPStats::set_layer_lock_plis(::uint32_t value) {
  _internal_set_layer_lock_plis(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.RTPStats.layer_lock_plis)
}
inline ::uint32_t RTPStats::_internal_layer_lock_plis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layer_lock_plis_;
}
inline void RTPStats::_internal_set_layer_lock_plis(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layer_lock_plis_ = value;
}

// .google.protobuf.Timestamp last_layer_lock_pli = 36;
inline bool RTPStats::has_last_layer_lock_pli() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_layer_lock_pli_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RTPStats::_internal_last_layer_lock_pli() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_layer_lock_pli_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RTPStats::last_layer_lock_pli() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.last_layer_lock_pli)
  return _internal_last_layer_lock_pli();
}
inline void RTPStats::unsafe_arena_set_allocated_last_layer_lock_pli(
    ::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_layer_lock_pli_);
  }
  _impl_.last_layer_lock_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.last_layer_lock_pli)
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::release_last_layer_lock_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.last_layer_lock_pli_;
  _impl_.last_layer_lock_pli_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_last_layer_lock_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.last_layer_lock_pli)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.last_layer_lock_pli_;
  _impl_.last_layer_lock_pli_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::_internal_mutable_last_layer_lock_pli() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_layer_lock_pli_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_layer_lock_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_layer_lock_pli_;
}
inline ::google::protobuf::Timestamp* PROTOBUF_NONNULL RTPStats::mutable_last_layer_lock_pli()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_layer_lock_pli();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.last_layer_lock_pli)
  return _msg;
}
inline void RTPStats::set_allocated_last_layer_lock_pli(::google::protobuf::Timestamp* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_layer_lock_pli_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.last_layer_lock_pli_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.last_layer_lock_pli)
}

// .livekit.RTPDrift packet_drift = 44;
inline bool RTPStats::has_packet_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_drift_ != nullptr);
  return value;
}
inline void RTPStats::clear_packet_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.packet_drift_ != nullptr) _impl_.packet_drift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::livekit::RTPDrift& RTPStats::_internal_packet_drift() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::RTPDrift* p = _impl_.packet_drift_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RTPDrift&>(::livekit::_RTPDrift_default_instance_);
}
inline const ::livekit::RTPDrift& RTPStats::packet_drift() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.packet_drift)
  return _internal_packet_drift();
}
inline void RTPStats::unsafe_arena_set_allocated_packet_drift(
    ::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packet_drift_);
  }
  _impl_.packet_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.packet_drift)
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::release_packet_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::livekit::RTPDrift* released = _impl_.packet_drift_;
  _impl_.packet_drift_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_packet_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.packet_drift)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::livekit::RTPDrift* temp = _impl_.packet_drift_;
  _impl_.packet_drift_ = nullptr;
  return temp;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::_internal_mutable_packet_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.packet_drift_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::RTPDrift>(GetArena());
    _impl_.packet_drift_ = reinterpret_cast<::livekit::RTPDrift*>(p);
  }
  return _impl_.packet_drift_;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::mutable_packet_drift()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::livekit::RTPDrift* _msg = _internal_mutable_packet_drift();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.packet_drift)
  return _msg;
}
inline void RTPStats::set_allocated_packet_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.packet_drift_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.packet_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.packet_drift)
}

// .livekit.RTPDrift ntp_report_drift = 45;
inline bool RTPStats::has_ntp_report_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ntp_report_drift_ != nullptr);
  return value;
}
inline void RTPStats::clear_ntp_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ntp_report_drift_ != nullptr) _impl_.ntp_report_drift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::livekit::RTPDrift& RTPStats::_internal_ntp_report_drift() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::RTPDrift* p = _impl_.ntp_report_drift_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RTPDrift&>(::livekit::_RTPDrift_default_instance_);
}
inline const ::livekit::RTPDrift& RTPStats::ntp_report_drift() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.ntp_report_drift)
  return _internal_ntp_report_drift();
}
inline void RTPStats::unsafe_arena_set_allocated_ntp_report_drift(
    ::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ntp_report_drift_);
  }
  _impl_.ntp_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.ntp_report_drift)
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::release_ntp_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::livekit::RTPDrift* released = _impl_.ntp_report_drift_;
  _impl_.ntp_report_drift_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_ntp_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.ntp_report_drift)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::livekit::RTPDrift* temp = _impl_.ntp_report_drift_;
  _impl_.ntp_report_drift_ = nullptr;
  return temp;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::_internal_mutable_ntp_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ntp_report_drift_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::RTPDrift>(GetArena());
    _impl_.ntp_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(p);
  }
  return _impl_.ntp_report_drift_;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::mutable_ntp_report_drift()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::livekit::RTPDrift* _msg = _internal_mutable_ntp_report_drift();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.ntp_report_drift)
  return _msg;
}
inline void RTPStats::set_allocated_ntp_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ntp_report_drift_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.ntp_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.ntp_report_drift)
}

// .livekit.RTPDrift rebased_report_drift = 46;
inline bool RTPStats::has_rebased_report_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rebased_report_drift_ != nullptr);
  return value;
}
inline void RTPStats::clear_rebased_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rebased_report_drift_ != nullptr) _impl_.rebased_report_drift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::livekit::RTPDrift& RTPStats::_internal_rebased_report_drift() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::RTPDrift* p = _impl_.rebased_report_drift_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RTPDrift&>(::livekit::_RTPDrift_default_instance_);
}
inline const ::livekit::RTPDrift& RTPStats::rebased_report_drift() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.rebased_report_drift)
  return _internal_rebased_report_drift();
}
inline void RTPStats::unsafe_arena_set_allocated_rebased_report_drift(
    ::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rebased_report_drift_);
  }
  _impl_.rebased_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.rebased_report_drift)
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::release_rebased_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::livekit::RTPDrift* released = _impl_.rebased_report_drift_;
  _impl_.rebased_report_drift_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_rebased_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.rebased_report_drift)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::livekit::RTPDrift* temp = _impl_.rebased_report_drift_;
  _impl_.rebased_report_drift_ = nullptr;
  return temp;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::_internal_mutable_rebased_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rebased_report_drift_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::RTPDrift>(GetArena());
    _impl_.rebased_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(p);
  }
  return _impl_.rebased_report_drift_;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::mutable_rebased_report_drift()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::livekit::RTPDrift* _msg = _internal_mutable_rebased_report_drift();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.rebased_report_drift)
  return _msg;
}
inline void RTPStats::set_allocated_rebased_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rebased_report_drift_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.rebased_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.rebased_report_drift)
}

// .livekit.RTPDrift received_report_drift = 47;
inline bool RTPStats::has_received_report_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.received_report_drift_ != nullptr);
  return value;
}
inline void RTPStats::clear_received_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.received_report_drift_ != nullptr) _impl_.received_report_drift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::livekit::RTPDrift& RTPStats::_internal_received_report_drift() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::RTPDrift* p = _impl_.received_report_drift_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RTPDrift&>(::livekit::_RTPDrift_default_instance_);
}
inline const ::livekit::RTPDrift& RTPStats::received_report_drift() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPStats.received_report_drift)
  return _internal_received_report_drift();
}
inline void RTPStats::unsafe_arena_set_allocated_received_report_drift(
    ::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.received_report_drift_);
  }
  _impl_.received_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPStats.received_report_drift)
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::release_received_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::livekit::RTPDrift* released = _impl_.received_report_drift_;
  _impl_.received_report_drift_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::RTPDrift* PROTOBUF_NULLABLE RTPStats::unsafe_arena_release_received_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPStats.received_report_drift)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::livekit::RTPDrift* temp = _impl_.received_report_drift_;
  _impl_.received_report_drift_ = nullptr;
  return temp;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::_internal_mutable_received_report_drift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.received_report_drift_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::RTPDrift>(GetArena());
    _impl_.received_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(p);
  }
  return _impl_.received_report_drift_;
}
inline ::livekit::RTPDrift* PROTOBUF_NONNULL RTPStats::mutable_received_report_drift()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::livekit::RTPDrift* _msg = _internal_mutable_received_report_drift();
  // @@protoc_insertion_point(field_mutable:livekit.RTPStats.received_report_drift)
  return _msg;
}
inline void RTPStats::set_allocated_received_report_drift(::livekit::RTPDrift* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.received_report_drift_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.received_report_drift_ = reinterpret_cast<::livekit::RTPDrift*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPStats.received_report_drift)
}

// -------------------------------------------------------------------

// RTCPSenderReportState

// uint32 rtp_timestamp = 1;
inline void RTCPSenderReportState::clear_rtp_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t RTCPSenderReportState::rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.rtp_timestamp)
  return _internal_rtp_timestamp();
}
inline void RTCPSenderReportState::set_rtp_timestamp(::uint32_t value) {
  _internal_set_rtp_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.rtp_timestamp)
}
inline ::uint32_t RTCPSenderReportState::_internal_rtp_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtp_timestamp_;
}
inline void RTCPSenderReportState::_internal_set_rtp_timestamp(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_timestamp_ = value;
}

// uint64 rtp_timestamp_ext = 2;
inline void RTCPSenderReportState::clear_rtp_timestamp_ext() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_timestamp_ext_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t RTCPSenderReportState::rtp_timestamp_ext() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.rtp_timestamp_ext)
  return _internal_rtp_timestamp_ext();
}
inline void RTCPSenderReportState::set_rtp_timestamp_ext(::uint64_t value) {
  _internal_set_rtp_timestamp_ext(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.rtp_timestamp_ext)
}
inline ::uint64_t RTCPSenderReportState::_internal_rtp_timestamp_ext() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rtp_timestamp_ext_;
}
inline void RTCPSenderReportState::_internal_set_rtp_timestamp_ext(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rtp_timestamp_ext_ = value;
}

// uint64 ntp_timestamp = 3;
inline void RTCPSenderReportState::clear_ntp_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ntp_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t RTCPSenderReportState::ntp_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.ntp_timestamp)
  return _internal_ntp_timestamp();
}
inline void RTCPSenderReportState::set_ntp_timestamp(::uint64_t value) {
  _internal_set_ntp_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.ntp_timestamp)
}
inline ::uint64_t RTCPSenderReportState::_internal_ntp_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ntp_timestamp_;
}
inline void RTCPSenderReportState::_internal_set_ntp_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ntp_timestamp_ = value;
}

// int64 at = 4;
inline void RTCPSenderReportState::clear_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t RTCPSenderReportState::at() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.at)
  return _internal_at();
}
inline void RTCPSenderReportState::set_at(::int64_t value) {
  _internal_set_at(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.at)
}
inline ::int64_t RTCPSenderReportState::_internal_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.at_;
}
inline void RTCPSenderReportState::_internal_set_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_ = value;
}

// int64 at_adjusted = 5;
inline void RTCPSenderReportState::clear_at_adjusted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_adjusted_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t RTCPSenderReportState::at_adjusted() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.at_adjusted)
  return _internal_at_adjusted();
}
inline void RTCPSenderReportState::set_at_adjusted(::int64_t value) {
  _internal_set_at_adjusted(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.at_adjusted)
}
inline ::int64_t RTCPSenderReportState::_internal_at_adjusted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.at_adjusted_;
}
inline void RTCPSenderReportState::_internal_set_at_adjusted(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.at_adjusted_ = value;
}

// uint32 packets = 6;
inline void RTCPSenderReportState::clear_packets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t RTCPSenderReportState::packets() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.packets)
  return _internal_packets();
}
inline void RTCPSenderReportState::set_packets(::uint32_t value) {
  _internal_set_packets(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.packets)
}
inline ::uint32_t RTCPSenderReportState::_internal_packets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packets_;
}
inline void RTCPSenderReportState::_internal_set_packets(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packets_ = value;
}

// uint64 octets = 7;
inline void RTCPSenderReportState::clear_octets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.octets_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t RTCPSenderReportState::octets() const {
  // @@protoc_insertion_point(field_get:livekit.RTCPSenderReportState.octets)
  return _internal_octets();
}
inline void RTCPSenderReportState::set_octets(::uint64_t value) {
  _internal_set_octets(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.RTCPSenderReportState.octets)
}
inline ::uint64_t RTCPSenderReportState::_internal_octets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.octets_;
}
inline void RTCPSenderReportState::_internal_set_octets(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.octets_ = value;
}

// -------------------------------------------------------------------

// RTPForwarderState

// bool started = 1;
inline void RTPForwarderState::clear_started() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool RTPForwarderState::started() const {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.started)
  return _internal_started();
}
inline void RTPForwarderState::set_started(bool value) {
  _internal_set_started(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.RTPForwarderState.started)
}
inline bool RTPForwarderState::_internal_started() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.started_;
}
inline void RTPForwarderState::_internal_set_started(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.started_ = value;
}

// int32 reference_layer_spatial = 2;
inline void RTPForwarderState::clear_reference_layer_spatial() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_layer_spatial_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t RTPForwarderState::reference_layer_spatial() const {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.reference_layer_spatial)
  return _internal_reference_layer_spatial();
}
inline void RTPForwarderState::set_reference_layer_spatial(::int32_t value) {
  _internal_set_reference_layer_spatial(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RTPForwarderState.reference_layer_spatial)
}
inline ::int32_t RTPForwarderState::_internal_reference_layer_spatial() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reference_layer_spatial_;
}
inline void RTPForwarderState::_internal_set_reference_layer_spatial(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reference_layer_spatial_ = value;
}

// int64 pre_start_time = 3;
inline void RTPForwarderState::clear_pre_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pre_start_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t RTPForwarderState::pre_start_time() const {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.pre_start_time)
  return _internal_pre_start_time();
}
inline void RTPForwarderState::set_pre_start_time(::int64_t value) {
  _internal_set_pre_start_time(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RTPForwarderState.pre_start_time)
}
inline ::int64_t RTPForwarderState::_internal_pre_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pre_start_time_;
}
inline void RTPForwarderState::_internal_set_pre_start_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pre_start_time_ = value;
}

// uint64 ext_first_timestamp = 4;
inline void RTPForwarderState::clear_ext_first_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_first_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t RTPForwarderState::ext_first_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.ext_first_timestamp)
  return _internal_ext_first_timestamp();
}
inline void RTPForwarderState::set_ext_first_timestamp(::uint64_t value) {
  _internal_set_ext_first_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RTPForwarderState.ext_first_timestamp)
}
inline ::uint64_t RTPForwarderState::_internal_ext_first_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_first_timestamp_;
}
inline void RTPForwarderState::_internal_set_ext_first_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_first_timestamp_ = value;
}

// uint64 dummy_start_timestamp_offset = 5;
inline void RTPForwarderState::clear_dummy_start_timestamp_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dummy_start_timestamp_offset_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t RTPForwarderState::dummy_start_timestamp_offset() const {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.dummy_start_timestamp_offset)
  return _internal_dummy_start_timestamp_offset();
}
inline void RTPForwarderState::set_dummy_start_timestamp_offset(::uint64_t value) {
  _internal_set_dummy_start_timestamp_offset(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.RTPForwarderState.dummy_start_timestamp_offset)
}
inline ::uint64_t RTPForwarderState::_internal_dummy_start_timestamp_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dummy_start_timestamp_offset_;
}
inline void RTPForwarderState::_internal_set_dummy_start_timestamp_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dummy_start_timestamp_offset_ = value;
}

// .livekit.RTPMungerState rtp_munger = 6;
inline bool RTPForwarderState::has_rtp_munger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rtp_munger_ != nullptr);
  return value;
}
inline void RTPForwarderState::clear_rtp_munger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rtp_munger_ != nullptr) _impl_.rtp_munger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::livekit::RTPMungerState& RTPForwarderState::_internal_rtp_munger() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::RTPMungerState* p = _impl_.rtp_munger_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::RTPMungerState&>(::livekit::_RTPMungerState_default_instance_);
}
inline const ::livekit::RTPMungerState& RTPForwarderState::rtp_munger() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.rtp_munger)
  return _internal_rtp_munger();
}
inline void RTPForwarderState::unsafe_arena_set_allocated_rtp_munger(
    ::livekit::RTPMungerState* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rtp_munger_);
  }
  _impl_.rtp_munger_ = reinterpret_cast<::livekit::RTPMungerState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPForwarderState.rtp_munger)
}
inline ::livekit::RTPMungerState* PROTOBUF_NULLABLE RTPForwarderState::release_rtp_munger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::RTPMungerState* released = _impl_.rtp_munger_;
  _impl_.rtp_munger_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::RTPMungerState* PROTOBUF_NULLABLE RTPForwarderState::unsafe_arena_release_rtp_munger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.RTPForwarderState.rtp_munger)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::livekit::RTPMungerState* temp = _impl_.rtp_munger_;
  _impl_.rtp_munger_ = nullptr;
  return temp;
}
inline ::livekit::RTPMungerState* PROTOBUF_NONNULL RTPForwarderState::_internal_mutable_rtp_munger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rtp_munger_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::RTPMungerState>(GetArena());
    _impl_.rtp_munger_ = reinterpret_cast<::livekit::RTPMungerState*>(p);
  }
  return _impl_.rtp_munger_;
}
inline ::livekit::RTPMungerState* PROTOBUF_NONNULL RTPForwarderState::mutable_rtp_munger()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::livekit::RTPMungerState* _msg = _internal_mutable_rtp_munger();
  // @@protoc_insertion_point(field_mutable:livekit.RTPForwarderState.rtp_munger)
  return _msg;
}
inline void RTPForwarderState::set_allocated_rtp_munger(::livekit::RTPMungerState* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rtp_munger_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.rtp_munger_ = reinterpret_cast<::livekit::RTPMungerState*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.RTPForwarderState.rtp_munger)
}

// .livekit.VP8MungerState vp8_munger = 7;
inline bool RTPForwarderState::has_vp8_munger() const {
  return codec_munger_case() == kVp8Munger;
}
inline bool RTPForwarderState::_internal_has_vp8_munger() const {
  return codec_munger_case() == kVp8Munger;
}
inline void RTPForwarderState::set_has_vp8_munger() {
  _impl_._oneof_case_[0] = kVp8Munger;
}
inline void RTPForwarderState::clear_vp8_munger() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (codec_munger_case() == kVp8Munger) {
    if (GetArena() == nullptr) {
      delete _impl_.codec_munger_.vp8_munger_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.codec_munger_.vp8_munger_);
    }
    clear_has_codec_munger();
  }
}
inline ::livekit::VP8MungerState* PROTOBUF_NULLABLE RTPForwarderState::release_vp8_munger() {
  // @@protoc_insertion_point(field_release:livekit.RTPForwarderState.vp8_munger)
  if (codec_munger_case() == kVp8Munger) {
    clear_has_codec_munger();
    auto* temp = _impl_.codec_munger_.vp8_munger_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.codec_munger_.vp8_munger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::VP8MungerState& RTPForwarderState::_internal_vp8_munger() const {
  return codec_munger_case() == kVp8Munger ? *_impl_.codec_munger_.vp8_munger_ : reinterpret_cast<::livekit::VP8MungerState&>(::livekit::_VP8MungerState_default_instance_);
}
inline const ::livekit::VP8MungerState& RTPForwarderState::vp8_munger() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.vp8_munger)
  return _internal_vp8_munger();
}
inline ::livekit::VP8MungerState* PROTOBUF_NULLABLE RTPForwarderState::unsafe_arena_release_vp8_munger() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.RTPForwarderState.vp8_munger)
  if (codec_munger_case() == kVp8Munger) {
    clear_has_codec_munger();
    auto* temp = _impl_.codec_munger_.vp8_munger_;
    _impl_.codec_munger_.vp8_munger_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RTPForwarderState::unsafe_arena_set_allocated_vp8_munger(
    ::livekit::VP8MungerState* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_codec_munger();
  if (value) {
    set_has_vp8_munger();
    _impl_.codec_munger_.vp8_munger_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.RTPForwarderState.vp8_munger)
}
inline ::livekit::VP8MungerState* PROTOBUF_NONNULL RTPForwarderState::_internal_mutable_vp8_munger() {
  if (codec_munger_case() != kVp8Munger) {
    clear_codec_munger();
    set_has_vp8_munger();
    _impl_.codec_munger_.vp8_munger_ = 
        ::google::protobuf::Message::DefaultConstruct<::livekit::VP8MungerState>(GetArena());
  }
  return _impl_.codec_munger_.vp8_munger_;
}
inline ::livekit::VP8MungerState* PROTOBUF_NONNULL RTPForwarderState::mutable_vp8_munger()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::VP8MungerState* _msg = _internal_mutable_vp8_munger();
  // @@protoc_insertion_point(field_mutable:livekit.RTPForwarderState.vp8_munger)
  return _msg;
}

// repeated .livekit.RTCPSenderReportState sender_report_state = 8;
inline int RTPForwarderState::_internal_sender_report_state_size() const {
  return _internal_sender_report_state().size();
}
inline int RTPForwarderState::sender_report_state_size() const {
  return _internal_sender_report_state_size();
}
inline void RTPForwarderState::clear_sender_report_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_report_state_.Clear();
}
inline ::livekit::RTCPSenderReportState* PROTOBUF_NONNULL RTPForwarderState::mutable_sender_report_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.RTPForwarderState.sender_report_state)
  return _internal_mutable_sender_report_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>* PROTOBUF_NONNULL RTPForwarderState::mutable_sender_report_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.RTPForwarderState.sender_report_state)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sender_report_state();
}
inline const ::livekit::RTCPSenderReportState& RTPForwarderState::sender_report_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.RTPForwarderState.sender_report_state)
  return _internal_sender_report_state().Get(index);
}
inline ::livekit::RTCPSenderReportState* PROTOBUF_NONNULL RTPForwarderState::add_sender_report_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::livekit::RTCPSenderReportState* _add = _internal_mutable_sender_report_state()->Add();
  // @@protoc_insertion_point(field_add:livekit.RTPForwarderState.sender_report_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>& RTPForwarderState::sender_report_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.RTPForwarderState.sender_report_state)
  return _internal_sender_report_state();
}
inline const ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>&
RTPForwarderState::_internal_sender_report_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_report_state_;
}
inline ::google::protobuf::RepeatedPtrField<::livekit::RTCPSenderReportState>* PROTOBUF_NONNULL
RTPForwarderState::_internal_mutable_sender_report_state() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sender_report_state_;
}

inline bool RTPForwarderState::has_codec_munger() const {
  return codec_munger_case() != CODEC_MUNGER_NOT_SET;
}
inline void RTPForwarderState::clear_has_codec_munger() {
  _impl_._oneof_case_[0] = CODEC_MUNGER_NOT_SET;
}
inline RTPForwarderState::CodecMungerCase RTPForwarderState::codec_munger_case() const {
  return RTPForwarderState::CodecMungerCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RTPMungerState

// uint64 ext_last_sequence_number = 1;
inline void RTPMungerState::clear_ext_last_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_sequence_number_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t RTPMungerState::ext_last_sequence_number() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.ext_last_sequence_number)
  return _internal_ext_last_sequence_number();
}
inline void RTPMungerState::set_ext_last_sequence_number(::uint64_t value) {
  _internal_set_ext_last_sequence_number(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.ext_last_sequence_number)
}
inline ::uint64_t RTPMungerState::_internal_ext_last_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_last_sequence_number_;
}
inline void RTPMungerState::_internal_set_ext_last_sequence_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_sequence_number_ = value;
}

// uint64 ext_second_last_sequence_number = 2;
inline void RTPMungerState::clear_ext_second_last_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_second_last_sequence_number_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t RTPMungerState::ext_second_last_sequence_number() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.ext_second_last_sequence_number)
  return _internal_ext_second_last_sequence_number();
}
inline void RTPMungerState::set_ext_second_last_sequence_number(::uint64_t value) {
  _internal_set_ext_second_last_sequence_number(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.ext_second_last_sequence_number)
}
inline ::uint64_t RTPMungerState::_internal_ext_second_last_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_second_last_sequence_number_;
}
inline void RTPMungerState::_internal_set_ext_second_last_sequence_number(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_second_last_sequence_number_ = value;
}

// uint64 ext_last_timestamp = 3;
inline void RTPMungerState::clear_ext_last_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t RTPMungerState::ext_last_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.ext_last_timestamp)
  return _internal_ext_last_timestamp();
}
inline void RTPMungerState::set_ext_last_timestamp(::uint64_t value) {
  _internal_set_ext_last_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.ext_last_timestamp)
}
inline ::uint64_t RTPMungerState::_internal_ext_last_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_last_timestamp_;
}
inline void RTPMungerState::_internal_set_ext_last_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_timestamp_ = value;
}

// uint64 ext_second_last_timestamp = 4;
inline void RTPMungerState::clear_ext_second_last_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_second_last_timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t RTPMungerState::ext_second_last_timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.ext_second_last_timestamp)
  return _internal_ext_second_last_timestamp();
}
inline void RTPMungerState::set_ext_second_last_timestamp(::uint64_t value) {
  _internal_set_ext_second_last_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.ext_second_last_timestamp)
}
inline ::uint64_t RTPMungerState::_internal_ext_second_last_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_second_last_timestamp_;
}
inline void RTPMungerState::_internal_set_ext_second_last_timestamp(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_second_last_timestamp_ = value;
}

// bool last_marker = 5;
inline void RTPMungerState::clear_last_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_marker_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RTPMungerState::last_marker() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.last_marker)
  return _internal_last_marker();
}
inline void RTPMungerState::set_last_marker(bool value) {
  _internal_set_last_marker(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.last_marker)
}
inline bool RTPMungerState::_internal_last_marker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_marker_;
}
inline void RTPMungerState::_internal_set_last_marker(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_marker_ = value;
}

// bool second_last_marker = 6;
inline void RTPMungerState::clear_second_last_marker() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.second_last_marker_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RTPMungerState::second_last_marker() const {
  // @@protoc_insertion_point(field_get:livekit.RTPMungerState.second_last_marker)
  return _internal_second_last_marker();
}
inline void RTPMungerState::set_second_last_marker(bool value) {
  _internal_set_second_last_marker(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.RTPMungerState.second_last_marker)
}
inline bool RTPMungerState::_internal_second_last_marker() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.second_last_marker_;
}
inline void RTPMungerState::_internal_set_second_last_marker(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.second_last_marker_ = value;
}

// -------------------------------------------------------------------

// VP8MungerState

// int32 ext_last_picture_id = 1;
inline void VP8MungerState::clear_ext_last_picture_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_picture_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t VP8MungerState::ext_last_picture_id() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.ext_last_picture_id)
  return _internal_ext_last_picture_id();
}
inline void VP8MungerState::set_ext_last_picture_id(::int32_t value) {
  _internal_set_ext_last_picture_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.ext_last_picture_id)
}
inline ::int32_t VP8MungerState::_internal_ext_last_picture_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ext_last_picture_id_;
}
inline void VP8MungerState::_internal_set_ext_last_picture_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ext_last_picture_id_ = value;
}

// bool picture_id_used = 2;
inline void VP8MungerState::clear_picture_id_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_id_used_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool VP8MungerState::picture_id_used() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.picture_id_used)
  return _internal_picture_id_used();
}
inline void VP8MungerState::set_picture_id_used(bool value) {
  _internal_set_picture_id_used(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.picture_id_used)
}
inline bool VP8MungerState::_internal_picture_id_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.picture_id_used_;
}
inline void VP8MungerState::_internal_set_picture_id_used(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_id_used_ = value;
}

// uint32 last_tl0_pic_idx = 3;
inline void VP8MungerState::clear_last_tl0_pic_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_tl0_pic_idx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t VP8MungerState::last_tl0_pic_idx() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.last_tl0_pic_idx)
  return _internal_last_tl0_pic_idx();
}
inline void VP8MungerState::set_last_tl0_pic_idx(::uint32_t value) {
  _internal_set_last_tl0_pic_idx(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.last_tl0_pic_idx)
}
inline ::uint32_t VP8MungerState::_internal_last_tl0_pic_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_tl0_pic_idx_;
}
inline void VP8MungerState::_internal_set_last_tl0_pic_idx(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_tl0_pic_idx_ = value;
}

// bool tl0_pic_idx_used = 4;
inline void VP8MungerState::clear_tl0_pic_idx_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tl0_pic_idx_used_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool VP8MungerState::tl0_pic_idx_used() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.tl0_pic_idx_used)
  return _internal_tl0_pic_idx_used();
}
inline void VP8MungerState::set_tl0_pic_idx_used(bool value) {
  _internal_set_tl0_pic_idx_used(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.tl0_pic_idx_used)
}
inline bool VP8MungerState::_internal_tl0_pic_idx_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tl0_pic_idx_used_;
}
inline void VP8MungerState::_internal_set_tl0_pic_idx_used(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tl0_pic_idx_used_ = value;
}

// bool tid_used = 5;
inline void VP8MungerState::clear_tid_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tid_used_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool VP8MungerState::tid_used() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.tid_used)
  return _internal_tid_used();
}
inline void VP8MungerState::set_tid_used(bool value) {
  _internal_set_tid_used(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.tid_used)
}
inline bool VP8MungerState::_internal_tid_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tid_used_;
}
inline void VP8MungerState::_internal_set_tid_used(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tid_used_ = value;
}

// uint32 last_key_idx = 6;
inline void VP8MungerState::clear_last_key_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_key_idx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t VP8MungerState::last_key_idx() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.last_key_idx)
  return _internal_last_key_idx();
}
inline void VP8MungerState::set_last_key_idx(::uint32_t value) {
  _internal_set_last_key_idx(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.last_key_idx)
}
inline ::uint32_t VP8MungerState::_internal_last_key_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_key_idx_;
}
inline void VP8MungerState::_internal_set_last_key_idx(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_key_idx_ = value;
}

// bool key_idx_used = 7;
inline void VP8MungerState::clear_key_idx_used() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_idx_used_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool VP8MungerState::key_idx_used() const {
  // @@protoc_insertion_point(field_get:livekit.VP8MungerState.key_idx_used)
  return _internal_key_idx_used();
}
inline void VP8MungerState::set_key_idx_used(bool value) {
  _internal_set_key_idx_used(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.VP8MungerState.key_idx_used)
}
inline bool VP8MungerState::_internal_key_idx_used() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_idx_used_;
}
inline void VP8MungerState::_internal_set_key_idx_used(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_idx_used_ = value;
}

// -------------------------------------------------------------------

// TimedVersion

// int64 unix_micro = 1;
inline void TimedVersion::clear_unix_micro() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unix_micro_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TimedVersion::unix_micro() const {
  // @@protoc_insertion_point(field_get:livekit.TimedVersion.unix_micro)
  return _internal_unix_micro();
}
inline void TimedVersion::set_unix_micro(::int64_t value) {
  _internal_set_unix_micro(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:livekit.TimedVersion.unix_micro)
}
inline ::int64_t TimedVersion::_internal_unix_micro() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unix_micro_;
}
inline void TimedVersion::_internal_set_unix_micro(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unix_micro_ = value;
}

// int32 ticks = 2;
inline void TimedVersion::clear_ticks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ticks_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TimedVersion::ticks() const {
  // @@protoc_insertion_point(field_get:livekit.TimedVersion.ticks)
  return _internal_ticks();
}
inline void TimedVersion::set_ticks(::int32_t value) {
  _internal_set_ticks(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.TimedVersion.ticks)
}
inline ::int32_t TimedVersion::_internal_ticks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ticks_;
}
inline void TimedVersion::_internal_set_ticks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ticks_ = value;
}

// -------------------------------------------------------------------

// DataStream_TextHeader

// .livekit.DataStream.OperationType operation_type = 1;
inline void DataStream_TextHeader::clear_operation_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::livekit::DataStream_OperationType DataStream_TextHeader::operation_type() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.TextHeader.operation_type)
  return _internal_operation_type();
}
inline void DataStream_TextHeader::set_operation_type(::livekit::DataStream_OperationType value) {
  _internal_set_operation_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.TextHeader.operation_type)
}
inline ::livekit::DataStream_OperationType DataStream_TextHeader::_internal_operation_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::DataStream_OperationType>(_impl_.operation_type_);
}
inline void DataStream_TextHeader::_internal_set_operation_type(::livekit::DataStream_OperationType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operation_type_ = value;
}

// int32 version = 2;
inline void DataStream_TextHeader::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t DataStream_TextHeader::version() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.TextHeader.version)
  return _internal_version();
}
inline void DataStream_TextHeader::set_version(::int32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.TextHeader.version)
}
inline ::int32_t DataStream_TextHeader::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void DataStream_TextHeader::_internal_set_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// string reply_to_stream_id = 3;
inline void DataStream_TextHeader::clear_reply_to_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_stream_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataStream_TextHeader::reply_to_stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.TextHeader.reply_to_stream_id)
  return _internal_reply_to_stream_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_TextHeader::set_reply_to_stream_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reply_to_stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.TextHeader.reply_to_stream_id)
}
inline std::string* PROTOBUF_NONNULL DataStream_TextHeader::mutable_reply_to_stream_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reply_to_stream_id();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.TextHeader.reply_to_stream_id)
  return _s;
}
inline const std::string& DataStream_TextHeader::_internal_reply_to_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_to_stream_id_.Get();
}
inline void DataStream_TextHeader::_internal_set_reply_to_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reply_to_stream_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_TextHeader::_internal_mutable_reply_to_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reply_to_stream_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_TextHeader::release_reply_to_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.TextHeader.reply_to_stream_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.reply_to_stream_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.reply_to_stream_id_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_TextHeader::set_allocated_reply_to_stream_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reply_to_stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_to_stream_id_.IsDefault()) {
    _impl_.reply_to_stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.TextHeader.reply_to_stream_id)
}

// repeated string attached_stream_ids = 4;
inline int DataStream_TextHeader::_internal_attached_stream_ids_size() const {
  return _internal_attached_stream_ids().size();
}
inline int DataStream_TextHeader::attached_stream_ids_size() const {
  return _internal_attached_stream_ids_size();
}
inline void DataStream_TextHeader::clear_attached_stream_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attached_stream_ids_.Clear();
}
inline std::string* PROTOBUF_NONNULL DataStream_TextHeader::add_attached_stream_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_attached_stream_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:livekit.DataStream.TextHeader.attached_stream_ids)
  return _s;
}
inline const std::string& DataStream_TextHeader::attached_stream_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.TextHeader.attached_stream_ids)
  return _internal_attached_stream_ids().Get(index);
}
inline std::string* PROTOBUF_NONNULL DataStream_TextHeader::mutable_attached_stream_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.TextHeader.attached_stream_ids)
  return _internal_mutable_attached_stream_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void DataStream_TextHeader::set_attached_stream_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_attached_stream_ids()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:livekit.DataStream.TextHeader.attached_stream_ids)
}
template <typename Arg_, typename... Args_>
inline void DataStream_TextHeader::add_attached_stream_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_attached_stream_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:livekit.DataStream.TextHeader.attached_stream_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& DataStream_TextHeader::attached_stream_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:livekit.DataStream.TextHeader.attached_stream_ids)
  return _internal_attached_stream_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
DataStream_TextHeader::mutable_attached_stream_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:livekit.DataStream.TextHeader.attached_stream_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attached_stream_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DataStream_TextHeader::_internal_attached_stream_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attached_stream_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
DataStream_TextHeader::_internal_mutable_attached_stream_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attached_stream_ids_;
}

// bool generated = 5;
inline void DataStream_TextHeader::clear_generated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool DataStream_TextHeader::generated() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.TextHeader.generated)
  return _internal_generated();
}
inline void DataStream_TextHeader::set_generated(bool value) {
  _internal_set_generated(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.TextHeader.generated)
}
inline bool DataStream_TextHeader::_internal_generated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generated_;
}
inline void DataStream_TextHeader::_internal_set_generated(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generated_ = value;
}

// -------------------------------------------------------------------

// DataStream_ByteHeader

// string name = 1;
inline void DataStream_ByteHeader::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataStream_ByteHeader::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.ByteHeader.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_ByteHeader::set_name(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.ByteHeader.name)
}
inline std::string* PROTOBUF_NONNULL DataStream_ByteHeader::mutable_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.ByteHeader.name)
  return _s;
}
inline const std::string& DataStream_ByteHeader::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DataStream_ByteHeader::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_ByteHeader::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_ByteHeader::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.ByteHeader.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_ByteHeader::set_allocated_name(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.ByteHeader.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataStream_Header

// string stream_id = 1;
inline void DataStream_Header::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataStream_Header::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Header::set_stream_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.stream_id)
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::mutable_stream_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Header.stream_id)
  return _s;
}
inline const std::string& DataStream_Header::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void DataStream_Header::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Header::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Header.stream_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stream_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Header::set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.stream_id)
}

// int64 timestamp = 2;
inline void DataStream_Header::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t DataStream_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.timestamp)
  return _internal_timestamp();
}
inline void DataStream_Header::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.timestamp)
}
inline ::int64_t DataStream_Header::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void DataStream_Header::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// string topic = 3;
inline void DataStream_Header::clear_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataStream_Header::topic() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Header::set_topic(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.topic)
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::mutable_topic()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Header.topic)
  return _s;
}
inline const std::string& DataStream_Header::_internal_topic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.topic_.Get();
}
inline void DataStream_Header::_internal_set_topic(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.topic_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.topic_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Header::release_topic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Header.topic)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.topic_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.topic_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Header::set_allocated_topic(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.topic_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.topic)
}

// string mime_type = 4;
inline void DataStream_Header::clear_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mime_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DataStream_Header::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Header::set_mime_type(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.mime_type)
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::mutable_mime_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Header.mime_type)
  return _s;
}
inline const std::string& DataStream_Header::_internal_mime_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mime_type_.Get();
}
inline void DataStream_Header::_internal_set_mime_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Header::release_mime_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Header.mime_type)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.mime_type_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Header::set_allocated_mime_type(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mime_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mime_type_.IsDefault()) {
    _impl_.mime_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Header.mime_type)
}

// optional uint64 total_length = 5;
inline bool DataStream_Header::has_total_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DataStream_Header::clear_total_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_length_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t DataStream_Header::total_length() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.total_length)
  return _internal_total_length();
}
inline void DataStream_Header::set_total_length(::uint64_t value) {
  _internal_set_total_length(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.total_length)
}
inline ::uint64_t DataStream_Header::_internal_total_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_length_;
}
inline void DataStream_Header::_internal_set_total_length(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_length_ = value;
}

// .livekit.Encryption.Type encryption_type = 7;
inline void DataStream_Header::clear_encryption_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::livekit::Encryption_Type DataStream_Header::encryption_type() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.encryption_type)
  return _internal_encryption_type();
}
inline void DataStream_Header::set_encryption_type(::livekit::Encryption_Type value) {
  _internal_set_encryption_type(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.Header.encryption_type)
}
inline ::livekit::Encryption_Type DataStream_Header::_internal_encryption_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::livekit::Encryption_Type>(_impl_.encryption_type_);
}
inline void DataStream_Header::_internal_set_encryption_type(::livekit::Encryption_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.encryption_type_ = value;
}

// map<string, string> attributes = 8;
inline int DataStream_Header::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int DataStream_Header::attributes_size() const {
  return _internal_attributes_size();
}
inline void DataStream_Header::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataStream_Header::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataStream_Header::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:livekit.DataStream.Header.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL DataStream_Header::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:livekit.DataStream.Header.attributes)
  return _internal_mutable_attributes();
}

// .livekit.DataStream.TextHeader text_header = 9;
inline bool DataStream_Header::has_text_header() const {
  return content_header_case() == kTextHeader;
}
inline bool DataStream_Header::_internal_has_text_header() const {
  return content_header_case() == kTextHeader;
}
inline void DataStream_Header::set_has_text_header() {
  _impl_._oneof_case_[0] = kTextHeader;
}
inline void DataStream_Header::clear_text_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_header_case() == kTextHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.content_header_.text_header_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.content_header_.text_header_);
    }
    clear_has_content_header();
  }
}
inline ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE DataStream_Header::release_text_header() {
  // @@protoc_insertion_point(field_release:livekit.DataStream.Header.text_header)
  if (content_header_case() == kTextHeader) {
    clear_has_content_header();
    auto* temp = _impl_.content_header_.text_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_header_.text_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::DataStream_TextHeader& DataStream_Header::_internal_text_header() const {
  return content_header_case() == kTextHeader ? *_impl_.content_header_.text_header_ : reinterpret_cast<::livekit::DataStream_TextHeader&>(::livekit::_DataStream_TextHeader_default_instance_);
}
inline const ::livekit::DataStream_TextHeader& DataStream_Header::text_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.text_header)
  return _internal_text_header();
}
inline ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE DataStream_Header::unsafe_arena_release_text_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataStream.Header.text_header)
  if (content_header_case() == kTextHeader) {
    clear_has_content_header();
    auto* temp = _impl_.content_header_.text_header_;
    _impl_.content_header_.text_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataStream_Header::unsafe_arena_set_allocated_text_header(
    ::livekit::DataStream_TextHeader* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_content_header();
  if (value) {
    set_has_text_header();
    _impl_.content_header_.text_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataStream.Header.text_header)
}
inline ::livekit::DataStream_TextHeader* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_text_header() {
  if (content_header_case() != kTextHeader) {
    clear_content_header();
    set_has_text_header();
    _impl_.content_header_.text_header_ = 
        ::google::protobuf::Message::DefaultConstruct<::livekit::DataStream_TextHeader>(GetArena());
  }
  return _impl_.content_header_.text_header_;
}
inline ::livekit::DataStream_TextHeader* PROTOBUF_NONNULL DataStream_Header::mutable_text_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::DataStream_TextHeader* _msg = _internal_mutable_text_header();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Header.text_header)
  return _msg;
}

// .livekit.DataStream.ByteHeader byte_header = 10;
inline bool DataStream_Header::has_byte_header() const {
  return content_header_case() == kByteHeader;
}
inline bool DataStream_Header::_internal_has_byte_header() const {
  return content_header_case() == kByteHeader;
}
inline void DataStream_Header::set_has_byte_header() {
  _impl_._oneof_case_[0] = kByteHeader;
}
inline void DataStream_Header::clear_byte_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (content_header_case() == kByteHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.content_header_.byte_header_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.content_header_.byte_header_);
    }
    clear_has_content_header();
  }
}
inline ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE DataStream_Header::release_byte_header() {
  // @@protoc_insertion_point(field_release:livekit.DataStream.Header.byte_header)
  if (content_header_case() == kByteHeader) {
    clear_has_content_header();
    auto* temp = _impl_.content_header_.byte_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_header_.byte_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::livekit::DataStream_ByteHeader& DataStream_Header::_internal_byte_header() const {
  return content_header_case() == kByteHeader ? *_impl_.content_header_.byte_header_ : reinterpret_cast<::livekit::DataStream_ByteHeader&>(::livekit::_DataStream_ByteHeader_default_instance_);
}
inline const ::livekit::DataStream_ByteHeader& DataStream_Header::byte_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Header.byte_header)
  return _internal_byte_header();
}
inline ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE DataStream_Header::unsafe_arena_release_byte_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:livekit.DataStream.Header.byte_header)
  if (content_header_case() == kByteHeader) {
    clear_has_content_header();
    auto* temp = _impl_.content_header_.byte_header_;
    _impl_.content_header_.byte_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataStream_Header::unsafe_arena_set_allocated_byte_header(
    ::livekit::DataStream_ByteHeader* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_content_header();
  if (value) {
    set_has_byte_header();
    _impl_.content_header_.byte_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.DataStream.Header.byte_header)
}
inline ::livekit::DataStream_ByteHeader* PROTOBUF_NONNULL DataStream_Header::_internal_mutable_byte_header() {
  if (content_header_case() != kByteHeader) {
    clear_content_header();
    set_has_byte_header();
    _impl_.content_header_.byte_header_ = 
        ::google::protobuf::Message::DefaultConstruct<::livekit::DataStream_ByteHeader>(GetArena());
  }
  return _impl_.content_header_.byte_header_;
}
inline ::livekit::DataStream_ByteHeader* PROTOBUF_NONNULL DataStream_Header::mutable_byte_header()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::livekit::DataStream_ByteHeader* _msg = _internal_mutable_byte_header();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Header.byte_header)
  return _msg;
}

inline bool DataStream_Header::has_content_header() const {
  return content_header_case() != CONTENT_HEADER_NOT_SET;
}
inline void DataStream_Header::clear_has_content_header() {
  _impl_._oneof_case_[0] = CONTENT_HEADER_NOT_SET;
}
inline DataStream_Header::ContentHeaderCase DataStream_Header::content_header_case() const {
  return DataStream_Header::ContentHeaderCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataStream_Chunk

// string stream_id = 1;
inline void DataStream_Chunk::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataStream_Chunk::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Chunk.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Chunk::set_stream_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Chunk.stream_id)
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::mutable_stream_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Chunk.stream_id)
  return _s;
}
inline const std::string& DataStream_Chunk::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void DataStream_Chunk::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Chunk::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Chunk.stream_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stream_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Chunk::set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Chunk.stream_id)
}

// uint64 chunk_index = 2;
inline void DataStream_Chunk::clear_chunk_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t DataStream_Chunk::chunk_index() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Chunk.chunk_index)
  return _internal_chunk_index();
}
inline void DataStream_Chunk::set_chunk_index(::uint64_t value) {
  _internal_set_chunk_index(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.Chunk.chunk_index)
}
inline ::uint64_t DataStream_Chunk::_internal_chunk_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chunk_index_;
}
inline void DataStream_Chunk::_internal_set_chunk_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chunk_index_ = value;
}

// bytes content = 3;
inline void DataStream_Chunk::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataStream_Chunk::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Chunk.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Chunk::set_content(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Chunk.content)
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::mutable_content()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Chunk.content)
  return _s;
}
inline const std::string& DataStream_Chunk::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void DataStream_Chunk::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Chunk::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Chunk.content)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.content_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.content_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Chunk::set_allocated_content(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Chunk.content)
}

// int32 version = 4;
inline void DataStream_Chunk::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t DataStream_Chunk::version() const {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Chunk.version)
  return _internal_version();
}
inline void DataStream_Chunk::set_version(::int32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:livekit.DataStream.Chunk.version)
}
inline ::int32_t DataStream_Chunk::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void DataStream_Chunk::_internal_set_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// optional bytes iv = 5;
inline bool DataStream_Chunk::has_iv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DataStream_Chunk::clear_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.iv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DataStream_Chunk::iv() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Chunk.iv)
  return _internal_iv();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Chunk::set_iv(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.iv_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Chunk.iv)
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::mutable_iv()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Chunk.iv)
  return _s;
}
inline const std::string& DataStream_Chunk::_internal_iv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.iv_.Get();
}
inline void DataStream_Chunk::_internal_set_iv(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.iv_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Chunk::_internal_mutable_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.iv_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Chunk::release_iv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Chunk.iv)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.iv_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.iv_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Chunk::set_allocated_iv(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.iv_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Chunk.iv)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataStream_Trailer

// string stream_id = 1;
inline void DataStream_Trailer::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataStream_Trailer::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Trailer.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Trailer::set_stream_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Trailer.stream_id)
}
inline std::string* PROTOBUF_NONNULL DataStream_Trailer::mutable_stream_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Trailer.stream_id)
  return _s;
}
inline const std::string& DataStream_Trailer::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void DataStream_Trailer::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Trailer::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Trailer::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Trailer.stream_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stream_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Trailer::set_allocated_stream_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Trailer.stream_id)
}

// string reason = 2;
inline void DataStream_Trailer::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataStream_Trailer::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.DataStream.Trailer.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void DataStream_Trailer::set_reason(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.DataStream.Trailer.reason)
}
inline std::string* PROTOBUF_NONNULL DataStream_Trailer::mutable_reason()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:livekit.DataStream.Trailer.reason)
  return _s;
}
inline const std::string& DataStream_Trailer::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void DataStream_Trailer::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL DataStream_Trailer::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE DataStream_Trailer::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.DataStream.Trailer.reason)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.reason_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.reason_.Set("", GetArena());
  }
  return released;
}
inline void DataStream_Trailer::set_allocated_reason(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DataStream.Trailer.reason)
}

// map<string, string> attributes = 3;
inline int DataStream_Trailer::_internal_attributes_size() const {
  return _internal_attributes().size();
}
inline int DataStream_Trailer::attributes_size() const {
  return _internal_attributes_size();
}
inline void DataStream_Trailer::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataStream_Trailer::_internal_attributes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& DataStream_Trailer::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:livekit.DataStream.Trailer.attributes)
  return _internal_attributes();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL DataStream_Trailer::_internal_mutable_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL DataStream_Trailer::mutable_attributes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:livekit.DataStream.Trailer.attributes)
  return _internal_mutable_attributes();
}

// -------------------------------------------------------------------

// DataStream

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::livekit::ParticipantInfo_State> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ParticipantInfo_State>() {
  return ::livekit::ParticipantInfo_State_descriptor();
}
template <>
struct is_proto_enum<::livekit::ParticipantInfo_Kind> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ParticipantInfo_Kind>() {
  return ::livekit::ParticipantInfo_Kind_descriptor();
}
template <>
struct is_proto_enum<::livekit::Encryption_Type> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::Encryption_Type>() {
  return ::livekit::Encryption_Type_descriptor();
}
template <>
struct is_proto_enum<::livekit::DataPacket_Kind> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::DataPacket_Kind>() {
  return ::livekit::DataPacket_Kind_descriptor();
}
template <>
struct is_proto_enum<::livekit::ServerInfo_Edition> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ServerInfo_Edition>() {
  return ::livekit::ServerInfo_Edition_descriptor();
}
template <>
struct is_proto_enum<::livekit::ClientInfo_SDK> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ClientInfo_SDK>() {
  return ::livekit::ClientInfo_SDK_descriptor();
}
template <>
struct is_proto_enum<::livekit::DataStream_OperationType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::DataStream_OperationType>() {
  return ::livekit::DataStream_OperationType_descriptor();
}
template <>
struct is_proto_enum<::livekit::AudioCodec> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::AudioCodec>() {
  return ::livekit::AudioCodec_descriptor();
}
template <>
struct is_proto_enum<::livekit::VideoCodec> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::VideoCodec>() {
  return ::livekit::VideoCodec_descriptor();
}
template <>
struct is_proto_enum<::livekit::ImageCodec> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ImageCodec>() {
  return ::livekit::ImageCodec_descriptor();
}
template <>
struct is_proto_enum<::livekit::BackupCodecPolicy> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::BackupCodecPolicy>() {
  return ::livekit::BackupCodecPolicy_descriptor();
}
template <>
struct is_proto_enum<::livekit::TrackType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::TrackType>() {
  return ::livekit::TrackType_descriptor();
}
template <>
struct is_proto_enum<::livekit::TrackSource> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::TrackSource>() {
  return ::livekit::TrackSource_descriptor();
}
template <>
struct is_proto_enum<::livekit::VideoQuality> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::VideoQuality>() {
  return ::livekit::VideoQuality_descriptor();
}
template <>
struct is_proto_enum<::livekit::ConnectionQuality> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ConnectionQuality>() {
  return ::livekit::ConnectionQuality_descriptor();
}
template <>
struct is_proto_enum<::livekit::ClientConfigSetting> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ClientConfigSetting>() {
  return ::livekit::ClientConfigSetting_descriptor();
}
template <>
struct is_proto_enum<::livekit::DisconnectReason> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::DisconnectReason>() {
  return ::livekit::DisconnectReason_descriptor();
}
template <>
struct is_proto_enum<::livekit::ReconnectReason> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::ReconnectReason>() {
  return ::livekit::ReconnectReason_descriptor();
}
template <>
struct is_proto_enum<::livekit::SubscriptionError> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::SubscriptionError>() {
  return ::livekit::SubscriptionError_descriptor();
}
template <>
struct is_proto_enum<::livekit::AudioTrackFeature> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::livekit::AudioTrackFeature>() {
  return ::livekit::AudioTrackFeature_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // livekit_5fmodels_2eproto_2epb_2eh
