// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_metrics.proto
// Protobuf C++ Version: 6.30.1

#include "livekit_metrics.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace livekit {

inline constexpr MetricSample::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        normalized_timestamp_{nullptr},
        timestamp_ms_{::int64_t{0}},
        value_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MetricSample::MetricSample(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MetricSample_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MetricSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricSampleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricSampleDefaultTypeInternal() {}
  union {
    MetricSample _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricSampleDefaultTypeInternal _MetricSample_default_instance_;

inline constexpr EventMetric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        normalized_start_timestamp_{nullptr},
        normalized_end_timestamp_{nullptr},
        label_{0u},
        participant_identity_{0u},
        start_timestamp_ms_{::int64_t{0}},
        end_timestamp_ms_{::int64_t{0}},
        track_sid_{0u},
        rid_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR EventMetric::EventMetric(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EventMetric_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EventMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventMetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventMetricDefaultTypeInternal() {}
  union {
    EventMetric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventMetricDefaultTypeInternal _EventMetric_default_instance_;

inline constexpr TimeSeriesMetric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        samples_{},
        label_{0u},
        participant_identity_{0u},
        track_sid_{0u},
        rid_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TimeSeriesMetric::TimeSeriesMetric(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TimeSeriesMetric_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TimeSeriesMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeSeriesMetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeSeriesMetricDefaultTypeInternal() {}
  union {
    TimeSeriesMetric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeSeriesMetricDefaultTypeInternal _TimeSeriesMetric_default_instance_;

inline constexpr MetricsBatch::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        str_data_{},
        time_series_{},
        events_{},
        normalized_timestamp_{nullptr},
        timestamp_ms_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR MetricsBatch::MetricsBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MetricsBatch_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MetricsBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsBatchDefaultTypeInternal() {}
  union {
    MetricsBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsBatchDefaultTypeInternal _MetricsBatch_default_instance_;
}  // namespace livekit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_livekit_5fmetrics_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_livekit_5fmetrics_2eproto = nullptr;
const ::uint32_t
    TableStruct_livekit_5fmetrics_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.timestamp_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.normalized_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.str_data_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.time_series_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricsBatch, _impl_.events_),
        1,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.samples_),
        PROTOBUF_FIELD_OFFSET(::livekit::TimeSeriesMetric, _impl_.rid_),
        0,
        1,
        2,
        ~0u,
        3,
        PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.timestamp_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.normalized_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::MetricSample, _impl_.value_),
        1,
        0,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.start_timestamp_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.end_timestamp_ms_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.normalized_start_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.normalized_end_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::EventMetric, _impl_.rid_),
        3,
        4,
        7,
        5,
        6,
        1,
        2,
        0,
        8,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::livekit::MetricsBatch)},
        {18, 31, -1, sizeof(::livekit::TimeSeriesMetric)},
        {36, 47, -1, sizeof(::livekit::MetricSample)},
        {50, 67, -1, sizeof(::livekit::EventMetric)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::livekit::_MetricsBatch_default_instance_._instance,
    &::livekit::_TimeSeriesMetric_default_instance_._instance,
    &::livekit::_MetricSample_default_instance_._instance,
    &::livekit::_EventMetric_default_instance_._instance,
};
const char descriptor_table_protodef_livekit_5fmetrics_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025livekit_metrics.proto\022\007livekit\032\037google"
    "/protobuf/timestamp.proto\"\306\001\n\014MetricsBat"
    "ch\022\024\n\014timestamp_ms\030\001 \001(\003\0228\n\024normalized_t"
    "imestamp\030\002 \001(\0132\032.google.protobuf.Timesta"
    "mp\022\020\n\010str_data\030\003 \003(\t\022.\n\013time_series\030\004 \003("
    "\0132\031.livekit.TimeSeriesMetric\022$\n\006events\030\005"
    " \003(\0132\024.livekit.EventMetric\"\207\001\n\020TimeSerie"
    "sMetric\022\r\n\005label\030\001 \001(\r\022\034\n\024participant_id"
    "entity\030\002 \001(\r\022\021\n\ttrack_sid\030\003 \001(\r\022&\n\007sampl"
    "es\030\004 \003(\0132\025.livekit.MetricSample\022\013\n\003rid\030\005"
    " \001(\r\"m\n\014MetricSample\022\024\n\014timestamp_ms\030\001 \001"
    "(\003\0228\n\024normalized_timestamp\030\002 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022\r\n\005value\030\003 \001(\002\"\334\002\n\013"
    "EventMetric\022\r\n\005label\030\001 \001(\r\022\034\n\024participan"
    "t_identity\030\002 \001(\r\022\021\n\ttrack_sid\030\003 \001(\r\022\032\n\022s"
    "tart_timestamp_ms\030\004 \001(\003\022\035\n\020end_timestamp"
    "_ms\030\005 \001(\003H\000\210\001\001\022>\n\032normalized_start_times"
    "tamp\030\006 \001(\0132\032.google.protobuf.Timestamp\022A"
    "\n\030normalized_end_timestamp\030\007 \001(\0132\032.googl"
    "e.protobuf.TimestampH\001\210\001\001\022\020\n\010metadata\030\010 "
    "\001(\t\022\013\n\003rid\030\t \001(\rB\023\n\021_end_timestamp_msB\033\n"
    "\031_normalized_end_timestamp*\201\007\n\013MetricLab"
    "el\022\023\n\017AGENTS_LLM_TTFT\020\000\022\023\n\017AGENTS_STT_TT"
    "FT\020\001\022\023\n\017AGENTS_TTS_TTFB\020\002\022(\n$CLIENT_VIDE"
    "O_SUBSCRIBER_FREEZE_COUNT\020\003\0221\n-CLIENT_VI"
    "DEO_SUBSCRIBER_TOTAL_FREEZE_DURATION\020\004\022\'"
    "\n#CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT\020\005\022"
    "1\n-CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_"
    "DURATION\020\006\022-\n)CLIENT_AUDIO_SUBSCRIBER_CO"
    "NCEALED_SAMPLES\020\007\0224\n0CLIENT_AUDIO_SUBSCR"
    "IBER_SILENT_CONCEALED_SAMPLES\020\010\022.\n*CLIEN"
    "T_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS\020\t\022"
    ".\n*CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_"
    "COUNT\020\n\0227\n3CLIENT_AUDIO_SUBSCRIBER_TOTAL"
    "_INTERRUPTION_DURATION\020\013\022)\n%CLIENT_SUBSC"
    "RIBER_JITTER_BUFFER_DELAY\020\014\0221\n-CLIENT_SU"
    "BSCRIBER_JITTER_BUFFER_EMITTED_COUNT\020\r\022@"
    "\n<CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITAT"
    "ION_DURATION_BANDWIDTH\020\016\022:\n6CLIENT_VIDEO"
    "_PUBLISHER_QUALITY_LIMITATION_DURATION_C"
    "PU\020\017\022<\n8CLIENT_VIDEO_PUBLISHER_QUALITY_L"
    "IMITATION_DURATION_OTHER\020\020\022\021\n\rPUBLISHER_"
    "RTT\020\021\022\023\n\017SERVER_MESH_RTT\020\022\022\022\n\016SUBSCRIBER"
    "_RTT\020\023\022&\n!METRIC_LABEL_PREDEFINED_MAX_VA"
    "LUE\020\200 BFZ#github.com/livekit/protocol/li"
    "vekit\252\002\rLiveKit.Proto\352\002\016LiveKit::Protob\006"
    "proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_livekit_5fmetrics_2eproto_deps[1] = {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_livekit_5fmetrics_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_livekit_5fmetrics_2eproto = {
    false,
    false,
    1846,
    descriptor_table_protodef_livekit_5fmetrics_2eproto,
    "livekit_metrics.proto",
    &descriptor_table_livekit_5fmetrics_2eproto_once,
    descriptor_table_livekit_5fmetrics_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_livekit_5fmetrics_2eproto::offsets,
    file_level_enum_descriptors_livekit_5fmetrics_2eproto,
    file_level_service_descriptors_livekit_5fmetrics_2eproto,
};
namespace livekit {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL MetricLabel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fmetrics_2eproto);
  return file_level_enum_descriptors_livekit_5fmetrics_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MetricLabel_internal_data_[] = {
    1310720u, 65536u, 4096u, };
// ===================================================================

class MetricsBatch::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MetricsBatch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_._has_bits_);
};

void MetricsBatch::clear_normalized_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normalized_timestamp_ != nullptr) _impl_.normalized_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MetricsBatch::MetricsBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MetricsBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.MetricsBatch)
}
PROTOBUF_NDEBUG_INLINE MetricsBatch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::MetricsBatch& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        str_data_{visibility, arena, from.str_data_},
        time_series_{visibility, arena, from.time_series_},
        events_{visibility, arena, from.events_} {}

MetricsBatch::MetricsBatch(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MetricsBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MetricsBatch_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MetricsBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.normalized_timestamp_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_timestamp_)
                : nullptr;
  _impl_.timestamp_ms_ = from._impl_.timestamp_ms_;

  // @@protoc_insertion_point(copy_constructor:livekit.MetricsBatch)
}
PROTOBUF_NDEBUG_INLINE MetricsBatch::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        str_data_{visibility, arena},
        time_series_{visibility, arena},
        events_{visibility, arena} {}

inline void MetricsBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, normalized_timestamp_),
           0,
           offsetof(Impl_, timestamp_ms_) -
               offsetof(Impl_, normalized_timestamp_) +
               sizeof(Impl_::timestamp_ms_));
}
MetricsBatch::~MetricsBatch() {
  // @@protoc_insertion_point(destructor:livekit.MetricsBatch)
  SharedDtor(*this);
}
inline void MetricsBatch::SharedDtor(MessageLite& self) {
  MetricsBatch& this_ = static_cast<MetricsBatch&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.normalized_timestamp_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MetricsBatch::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MetricsBatch(arena);
}
constexpr auto MetricsBatch::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.str_data_) +
          decltype(MetricsBatch::_impl_.str_data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.time_series_) +
          decltype(MetricsBatch::_impl_.time_series_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.events_) +
          decltype(MetricsBatch::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MetricsBatch), alignof(MetricsBatch), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MetricsBatch::PlacementNew_,
                                 sizeof(MetricsBatch),
                                 alignof(MetricsBatch));
  }
}
constexpr auto MetricsBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MetricsBatch_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MetricsBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MetricsBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MetricsBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MetricsBatch>(), &MetricsBatch::ByteSizeLong,
              &MetricsBatch::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_._cached_size_),
          false,
      },
      &MetricsBatch::kDescriptorMethods,
      &descriptor_table_livekit_5fmetrics_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MetricsBatch_class_data_ =
            MetricsBatch::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MetricsBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MetricsBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MetricsBatch_class_data_.tc_table);
  return MetricsBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 37, 2>
MetricsBatch::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MetricsBatch_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::MetricsBatch>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 timestamp_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MetricsBatch, _impl_.timestamp_ms_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.timestamp_ms_)}},
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.normalized_timestamp_)}},
    // repeated string str_data = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.str_data_)}},
    // repeated .livekit.TimeSeriesMetric time_series = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.time_series_)}},
    // repeated .livekit.EventMetric events = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.events_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 timestamp_ms = 1;
    {PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.timestamp_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.normalized_timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string str_data = 3;
    {PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.str_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .livekit.TimeSeriesMetric time_series = 4;
    {PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.time_series_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EventMetric events = 5;
    {PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.events_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::livekit::TimeSeriesMetric>()},
      {::_pbi::TcParser::GetTable<::livekit::EventMetric>()},
  }},
  {{
    "\24\0\0\10\0\0\0\0"
    "livekit.MetricsBatch"
    "str_data"
  }},
};
PROTOBUF_NOINLINE void MetricsBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MetricsBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_data_.Clear();
  _impl_.time_series_.Clear();
  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.normalized_timestamp_ != nullptr);
    _impl_.normalized_timestamp_->Clear();
  }
  _impl_.timestamp_ms_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MetricsBatch::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MetricsBatch& this_ = static_cast<const MetricsBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MetricsBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MetricsBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MetricsBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 timestamp_ms = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_timestamp_ms() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_timestamp_ms(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.normalized_timestamp_, this_._impl_.normalized_timestamp_->GetCachedSize(), target,
        stream);
  }

  // repeated string str_data = 3;
  for (int i = 0, n = this_._internal_str_data_size(); i < n; ++i) {
    const auto& s = this_._internal_str_data().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.MetricsBatch.str_data");
    target = stream->WriteString(3, s, target);
  }

  // repeated .livekit.TimeSeriesMetric time_series = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_time_series_size());
       i < n; i++) {
    const auto& repfield = this_._internal_time_series().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.EventMetric events = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_events_size());
       i < n; i++) {
    const auto& repfield = this_._internal_events().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MetricsBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MetricsBatch::ByteSizeLong(const MessageLite& base) {
  const MetricsBatch& this_ = static_cast<const MetricsBatch&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MetricsBatch::ByteSizeLong() const {
  const MetricsBatch& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.MetricsBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string str_data = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_str_data().size());
      for (int i = 0, n = this_._internal_str_data().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_str_data().Get(i));
      }
    }
    // repeated .livekit.TimeSeriesMetric time_series = 4;
    {
      total_size += 1UL * this_._internal_time_series_size();
      for (const auto& msg : this_._internal_time_series()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.EventMetric events = 5;
    {
      total_size += 1UL * this_._internal_events_size();
      for (const auto& msg : this_._internal_events()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.normalized_timestamp_);
    }
    // int64 timestamp_ms = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_timestamp_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MetricsBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MetricsBatch*>(&to_msg);
  auto& from = static_cast<const MetricsBatch&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MetricsBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_str_data()->MergeFrom(from._internal_str_data());
  _this->_internal_mutable_time_series()->MergeFrom(
      from._internal_time_series());
  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.normalized_timestamp_ != nullptr);
      if (_this->_impl_.normalized_timestamp_ == nullptr) {
        _this->_impl_.normalized_timestamp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_timestamp_);
      } else {
        _this->_impl_.normalized_timestamp_->MergeFrom(*from._impl_.normalized_timestamp_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_timestamp_ms() != 0) {
        _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsBatch::CopyFrom(const MetricsBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MetricsBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MetricsBatch::InternalSwap(MetricsBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.str_data_.InternalSwap(&other->_impl_.str_data_);
  _impl_.time_series_.InternalSwap(&other->_impl_.time_series_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.timestamp_ms_)
      + sizeof(MetricsBatch::_impl_.timestamp_ms_)
      - PROTOBUF_FIELD_OFFSET(MetricsBatch, _impl_.normalized_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_timestamp_));
}

::google::protobuf::Metadata MetricsBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TimeSeriesMetric::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TimeSeriesMetric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_._has_bits_);
};

TimeSeriesMetric::TimeSeriesMetric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimeSeriesMetric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TimeSeriesMetric)
}
PROTOBUF_NDEBUG_INLINE TimeSeriesMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TimeSeriesMetric& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        samples_{visibility, arena, from.samples_} {}

TimeSeriesMetric::TimeSeriesMetric(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TimeSeriesMetric& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TimeSeriesMetric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TimeSeriesMetric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, label_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, label_),
           offsetof(Impl_, rid_) -
               offsetof(Impl_, label_) +
               sizeof(Impl_::rid_));

  // @@protoc_insertion_point(copy_constructor:livekit.TimeSeriesMetric)
}
PROTOBUF_NDEBUG_INLINE TimeSeriesMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        samples_{visibility, arena} {}

inline void TimeSeriesMetric::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, label_),
           0,
           offsetof(Impl_, rid_) -
               offsetof(Impl_, label_) +
               sizeof(Impl_::rid_));
}
TimeSeriesMetric::~TimeSeriesMetric() {
  // @@protoc_insertion_point(destructor:livekit.TimeSeriesMetric)
  SharedDtor(*this);
}
inline void TimeSeriesMetric::SharedDtor(MessageLite& self) {
  TimeSeriesMetric& this_ = static_cast<TimeSeriesMetric&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TimeSeriesMetric::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TimeSeriesMetric(arena);
}
constexpr auto TimeSeriesMetric::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.samples_) +
          decltype(TimeSeriesMetric::_impl_.samples_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TimeSeriesMetric), alignof(TimeSeriesMetric), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TimeSeriesMetric::PlacementNew_,
                                 sizeof(TimeSeriesMetric),
                                 alignof(TimeSeriesMetric));
  }
}
constexpr auto TimeSeriesMetric::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TimeSeriesMetric_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TimeSeriesMetric::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TimeSeriesMetric>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TimeSeriesMetric::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TimeSeriesMetric>(), &TimeSeriesMetric::ByteSizeLong,
              &TimeSeriesMetric::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_._cached_size_),
          false,
      },
      &TimeSeriesMetric::kDescriptorMethods,
      &descriptor_table_livekit_5fmetrics_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TimeSeriesMetric_class_data_ =
            TimeSeriesMetric::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TimeSeriesMetric::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TimeSeriesMetric_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TimeSeriesMetric_class_data_.tc_table);
  return TimeSeriesMetric_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2>
TimeSeriesMetric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TimeSeriesMetric_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TimeSeriesMetric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 label = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeSeriesMetric, _impl_.label_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.label_)}},
    // uint32 participant_identity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeSeriesMetric, _impl_.participant_identity_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.participant_identity_)}},
    // uint32 track_sid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeSeriesMetric, _impl_.track_sid_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.track_sid_)}},
    // repeated .livekit.MetricSample samples = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.samples_)}},
    // uint32 rid = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TimeSeriesMetric, _impl_.rid_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.rid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 label = 1;
    {PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.label_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 participant_identity = 2;
    {PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.participant_identity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 track_sid = 3;
    {PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.track_sid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .livekit.MetricSample samples = 4;
    {PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.samples_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 rid = 5;
    {PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.rid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::MetricSample>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void TimeSeriesMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TimeSeriesMetric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.samples_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.label_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rid_) -
        reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.rid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TimeSeriesMetric::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TimeSeriesMetric& this_ = static_cast<const TimeSeriesMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TimeSeriesMetric::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TimeSeriesMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TimeSeriesMetric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 label = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_label() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_label(), target);
    }
  }

  // uint32 participant_identity = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_participant_identity() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_participant_identity(), target);
    }
  }

  // uint32 track_sid = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_track_sid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_track_sid(), target);
    }
  }

  // repeated .livekit.MetricSample samples = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_samples_size());
       i < n; i++) {
    const auto& repfield = this_._internal_samples().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // uint32 rid = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_rid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_rid(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TimeSeriesMetric)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TimeSeriesMetric::ByteSizeLong(const MessageLite& base) {
  const TimeSeriesMetric& this_ = static_cast<const TimeSeriesMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TimeSeriesMetric::ByteSizeLong() const {
  const TimeSeriesMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TimeSeriesMetric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.MetricSample samples = 4;
    {
      total_size += 1UL * this_._internal_samples_size();
      for (const auto& msg : this_._internal_samples()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // uint32 label = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_label() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_label());
      }
    }
    // uint32 participant_identity = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_participant_identity() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_participant_identity());
      }
    }
    // uint32 track_sid = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_track_sid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_track_sid());
      }
    }
    // uint32 rid = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_rid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_rid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TimeSeriesMetric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TimeSeriesMetric*>(&to_msg);
  auto& from = static_cast<const TimeSeriesMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TimeSeriesMetric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_samples()->MergeFrom(
      from._internal_samples());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_label() != 0) {
        _this->_impl_.label_ = from._impl_.label_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_participant_identity() != 0) {
        _this->_impl_.participant_identity_ = from._impl_.participant_identity_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_track_sid() != 0) {
        _this->_impl_.track_sid_ = from._impl_.track_sid_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_rid() != 0) {
        _this->_impl_.rid_ = from._impl_.rid_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TimeSeriesMetric::CopyFrom(const TimeSeriesMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TimeSeriesMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TimeSeriesMetric::InternalSwap(TimeSeriesMetric* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.samples_.InternalSwap(&other->_impl_.samples_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.rid_)
      + sizeof(TimeSeriesMetric::_impl_.rid_)
      - PROTOBUF_FIELD_OFFSET(TimeSeriesMetric, _impl_.label_)>(
          reinterpret_cast<char*>(&_impl_.label_),
          reinterpret_cast<char*>(&other->_impl_.label_));
}

::google::protobuf::Metadata TimeSeriesMetric::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MetricSample::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MetricSample>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MetricSample, _impl_._has_bits_);
};

void MetricSample::clear_normalized_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normalized_timestamp_ != nullptr) _impl_.normalized_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MetricSample::MetricSample(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MetricSample_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.MetricSample)
}
PROTOBUF_NDEBUG_INLINE MetricSample::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::MetricSample& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MetricSample::MetricSample(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MetricSample& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MetricSample_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MetricSample* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.normalized_timestamp_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_ms_),
           offsetof(Impl_, value_) -
               offsetof(Impl_, timestamp_ms_) +
               sizeof(Impl_::value_));

  // @@protoc_insertion_point(copy_constructor:livekit.MetricSample)
}
PROTOBUF_NDEBUG_INLINE MetricSample::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void MetricSample::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, normalized_timestamp_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, normalized_timestamp_) +
               sizeof(Impl_::value_));
}
MetricSample::~MetricSample() {
  // @@protoc_insertion_point(destructor:livekit.MetricSample)
  SharedDtor(*this);
}
inline void MetricSample::SharedDtor(MessageLite& self) {
  MetricSample& this_ = static_cast<MetricSample&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.normalized_timestamp_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MetricSample::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MetricSample(arena);
}
constexpr auto MetricSample::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MetricSample),
                                            alignof(MetricSample));
}
constexpr auto MetricSample::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MetricSample_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MetricSample::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MetricSample>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MetricSample::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MetricSample>(), &MetricSample::ByteSizeLong,
              &MetricSample::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MetricSample, _impl_._cached_size_),
          false,
      },
      &MetricSample::kDescriptorMethods,
      &descriptor_table_livekit_5fmetrics_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MetricSample_class_data_ =
            MetricSample::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MetricSample::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MetricSample_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MetricSample_class_data_.tc_table);
  return MetricSample_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
MetricSample::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MetricSample, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MetricSample_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::MetricSample>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 timestamp_ms = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MetricSample, _impl_.timestamp_ms_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.timestamp_ms_)}},
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.normalized_timestamp_)}},
    // float value = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 timestamp_ms = 1;
    {PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.timestamp_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.normalized_timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float value = 3;
    {PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.value_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MetricSample::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MetricSample)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.normalized_timestamp_ != nullptr);
    _impl_.normalized_timestamp_->Clear();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.timestamp_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MetricSample::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MetricSample& this_ = static_cast<const MetricSample&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MetricSample::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MetricSample& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MetricSample)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 timestamp_ms = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_timestamp_ms() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_timestamp_ms(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp normalized_timestamp = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.normalized_timestamp_, this_._impl_.normalized_timestamp_->GetCachedSize(), target,
        stream);
  }

  // float value = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_value()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_value(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MetricSample)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MetricSample::ByteSizeLong(const MessageLite& base) {
  const MetricSample& this_ = static_cast<const MetricSample&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MetricSample::ByteSizeLong() const {
  const MetricSample& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.MetricSample)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .google.protobuf.Timestamp normalized_timestamp = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.normalized_timestamp_);
    }
    // int64 timestamp_ms = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_timestamp_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp_ms());
      }
    }
    // float value = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_value()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MetricSample::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MetricSample*>(&to_msg);
  auto& from = static_cast<const MetricSample&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MetricSample)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.normalized_timestamp_ != nullptr);
      if (_this->_impl_.normalized_timestamp_ == nullptr) {
        _this->_impl_.normalized_timestamp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_timestamp_);
      } else {
        _this->_impl_.normalized_timestamp_->MergeFrom(*from._impl_.normalized_timestamp_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_timestamp_ms() != 0) {
        _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_value()) != 0) {
        _this->_impl_.value_ = from._impl_.value_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MetricSample::CopyFrom(const MetricSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MetricSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MetricSample::InternalSwap(MetricSample* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.value_)
      + sizeof(MetricSample::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MetricSample, _impl_.normalized_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_timestamp_));
}

::google::protobuf::Metadata MetricSample::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EventMetric::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EventMetric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EventMetric, _impl_._has_bits_);
};

void EventMetric::clear_normalized_start_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normalized_start_timestamp_ != nullptr) _impl_.normalized_start_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void EventMetric::clear_normalized_end_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.normalized_end_timestamp_ != nullptr) _impl_.normalized_end_timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
EventMetric::EventMetric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EventMetric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.EventMetric)
}
PROTOBUF_NDEBUG_INLINE EventMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::EventMetric& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metadata_(arena, from.metadata_) {}

EventMetric::EventMetric(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EventMetric& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EventMetric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EventMetric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.normalized_start_timestamp_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_start_timestamp_)
                : nullptr;
  _impl_.normalized_end_timestamp_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_end_timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, label_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, label_),
           offsetof(Impl_, rid_) -
               offsetof(Impl_, label_) +
               sizeof(Impl_::rid_));

  // @@protoc_insertion_point(copy_constructor:livekit.EventMetric)
}
PROTOBUF_NDEBUG_INLINE EventMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        metadata_(arena) {}

inline void EventMetric::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, normalized_start_timestamp_),
           0,
           offsetof(Impl_, rid_) -
               offsetof(Impl_, normalized_start_timestamp_) +
               sizeof(Impl_::rid_));
}
EventMetric::~EventMetric() {
  // @@protoc_insertion_point(destructor:livekit.EventMetric)
  SharedDtor(*this);
}
inline void EventMetric::SharedDtor(MessageLite& self) {
  EventMetric& this_ = static_cast<EventMetric&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.metadata_.Destroy();
  delete this_._impl_.normalized_start_timestamp_;
  delete this_._impl_.normalized_end_timestamp_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EventMetric::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EventMetric(arena);
}
constexpr auto EventMetric::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EventMetric),
                                            alignof(EventMetric));
}
constexpr auto EventMetric::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EventMetric_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EventMetric::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EventMetric>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EventMetric::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EventMetric>(), &EventMetric::ByteSizeLong,
              &EventMetric::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EventMetric, _impl_._cached_size_),
          false,
      },
      &EventMetric::kDescriptorMethods,
      &descriptor_table_livekit_5fmetrics_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        EventMetric_class_data_ =
            EventMetric::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL EventMetric::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EventMetric_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EventMetric_class_data_.tc_table);
  return EventMetric_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 44, 2>
EventMetric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EventMetric, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EventMetric_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::EventMetric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 label = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventMetric, _impl_.label_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.label_)}},
    // uint32 participant_identity = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventMetric, _impl_.participant_identity_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.participant_identity_)}},
    // uint32 track_sid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventMetric, _impl_.track_sid_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.track_sid_)}},
    // int64 start_timestamp_ms = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EventMetric, _impl_.start_timestamp_ms_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.start_timestamp_ms_)}},
    // optional int64 end_timestamp_ms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EventMetric, _impl_.end_timestamp_ms_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.end_timestamp_ms_)}},
    // .google.protobuf.Timestamp normalized_start_timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_start_timestamp_)}},
    // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 1, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_end_timestamp_)}},
    // string metadata = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.metadata_)}},
    // uint32 rid = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EventMetric, _impl_.rid_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.rid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 label = 1;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.label_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 participant_identity = 2;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.participant_identity_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 track_sid = 3;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.track_sid_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // int64 start_timestamp_ms = 4;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.start_timestamp_ms_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // optional int64 end_timestamp_ms = 5;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.end_timestamp_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .google.protobuf.Timestamp normalized_start_timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_start_timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_end_timestamp_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string metadata = 8;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.metadata_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 rid = 9;
    {PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.rid_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\23\0\0\0\0\0\0\0\10\0\0\0\0\0\0\0"
    "livekit.EventMetric"
    "metadata"
  }},
};
PROTOBUF_NOINLINE void EventMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EventMetric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.normalized_start_timestamp_ != nullptr);
      _impl_.normalized_start_timestamp_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.normalized_end_timestamp_ != nullptr);
      _impl_.normalized_end_timestamp_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.label_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.track_sid_) -
        reinterpret_cast<char*>(&_impl_.label_)) + sizeof(_impl_.track_sid_));
  }
  _impl_.rid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EventMetric::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EventMetric& this_ = static_cast<const EventMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EventMetric::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EventMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EventMetric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 label = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_label() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_label(), target);
    }
  }

  // uint32 participant_identity = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_participant_identity() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_participant_identity(), target);
    }
  }

  // uint32 track_sid = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_track_sid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_track_sid(), target);
    }
  }

  // int64 start_timestamp_ms = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_start_timestamp_ms() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_start_timestamp_ms(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int64 end_timestamp_ms = 5;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
            stream, this_._internal_end_timestamp_ms(), target);
  }

  // .google.protobuf.Timestamp normalized_start_timestamp = 6;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.normalized_start_timestamp_, this_._impl_.normalized_start_timestamp_->GetCachedSize(), target,
        stream);
  }

  // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.normalized_end_timestamp_, this_._impl_.normalized_end_timestamp_->GetCachedSize(), target,
        stream);
  }

  // string metadata = 8;
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_metadata().empty()) {
      const std::string& _s = this_._internal_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EventMetric.metadata");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // uint32 rid = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (this_._internal_rid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          9, this_._internal_rid(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EventMetric)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EventMetric::ByteSizeLong(const MessageLite& base) {
  const EventMetric& this_ = static_cast<const EventMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EventMetric::ByteSizeLong() const {
  const EventMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.EventMetric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string metadata = 8;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_metadata());
      }
    }
    // .google.protobuf.Timestamp normalized_start_timestamp = 6;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.normalized_start_timestamp_);
    }
    // optional .google.protobuf.Timestamp normalized_end_timestamp = 7;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.normalized_end_timestamp_);
    }
    // uint32 label = 1;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_label() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_label());
      }
    }
    // uint32 participant_identity = 2;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_participant_identity() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_participant_identity());
      }
    }
    // int64 start_timestamp_ms = 4;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_start_timestamp_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_start_timestamp_ms());
      }
    }
    // optional int64 end_timestamp_ms = 5;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_end_timestamp_ms());
    }
    // uint32 track_sid = 3;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_track_sid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_track_sid());
      }
    }
  }
   {
    // uint32 rid = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_rid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_rid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EventMetric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EventMetric*>(&to_msg);
  auto& from = static_cast<const EventMetric&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EventMetric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_metadata().empty()) {
        _this->_internal_set_metadata(from._internal_metadata());
      } else {
        if (_this->_impl_.metadata_.IsDefault()) {
          _this->_internal_set_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.normalized_start_timestamp_ != nullptr);
      if (_this->_impl_.normalized_start_timestamp_ == nullptr) {
        _this->_impl_.normalized_start_timestamp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_start_timestamp_);
      } else {
        _this->_impl_.normalized_start_timestamp_->MergeFrom(*from._impl_.normalized_start_timestamp_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.normalized_end_timestamp_ != nullptr);
      if (_this->_impl_.normalized_end_timestamp_ == nullptr) {
        _this->_impl_.normalized_end_timestamp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.normalized_end_timestamp_);
      } else {
        _this->_impl_.normalized_end_timestamp_->MergeFrom(*from._impl_.normalized_end_timestamp_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_label() != 0) {
        _this->_impl_.label_ = from._impl_.label_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_participant_identity() != 0) {
        _this->_impl_.participant_identity_ = from._impl_.participant_identity_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_start_timestamp_ms() != 0) {
        _this->_impl_.start_timestamp_ms_ = from._impl_.start_timestamp_ms_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.end_timestamp_ms_ = from._impl_.end_timestamp_ms_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_track_sid() != 0) {
        _this->_impl_.track_sid_ = from._impl_.track_sid_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (from._internal_rid() != 0) {
      _this->_impl_.rid_ = from._impl_.rid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EventMetric::CopyFrom(const EventMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EventMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EventMetric::InternalSwap(EventMetric* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, &other->_impl_.metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.rid_)
      + sizeof(EventMetric::_impl_.rid_)
      - PROTOBUF_FIELD_OFFSET(EventMetric, _impl_.normalized_start_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.normalized_start_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.normalized_start_timestamp_));
}

::google::protobuf::Metadata EventMetric::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_livekit_5fmetrics_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
