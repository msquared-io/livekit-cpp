// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_rtc.proto
// Protobuf C++ Version: 6.30.1

#include "livekit_rtc.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace livekit {

inline constexpr UpdateTrackSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sids_{},
        disabled_{false},
        quality_{static_cast< ::livekit::VideoQuality >(0)},
        width_{0u},
        height_{0u},
        fps_{0u},
        priority_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateTrackSettings::UpdateTrackSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateTrackSettings_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateTrackSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateTrackSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateTrackSettingsDefaultTypeInternal() {}
  union {
    UpdateTrackSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateTrackSettingsDefaultTypeInternal _UpdateTrackSettings_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : UpdateParticipantMetadata_AttributesEntry_DoNotUse::MapEntry(UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : UpdateParticipantMetadata_AttributesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdateParticipantMetadata_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantMetadata_AttributesEntry_DoNotUseDefaultTypeInternal _UpdateParticipantMetadata_AttributesEntry_DoNotUse_default_instance_;

inline constexpr UpdateLocalVideoTrack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        width_{0u},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateLocalVideoTrack::UpdateLocalVideoTrack(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateLocalVideoTrack_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateLocalVideoTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLocalVideoTrackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLocalVideoTrackDefaultTypeInternal() {}
  union {
    UpdateLocalVideoTrack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLocalVideoTrackDefaultTypeInternal _UpdateLocalVideoTrack_default_instance_;

inline constexpr UpdateLocalAudioTrack::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        features_{},
        _features_cached_byte_size_{0},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR UpdateLocalAudioTrack::UpdateLocalAudioTrack(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateLocalAudioTrack_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateLocalAudioTrackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLocalAudioTrackDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLocalAudioTrackDefaultTypeInternal() {}
  union {
    UpdateLocalAudioTrack _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLocalAudioTrackDefaultTypeInternal _UpdateLocalAudioTrack_default_instance_;

inline constexpr TrickleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        candidateinit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_{static_cast< ::livekit::SignalTarget >(0)},
        final_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TrickleRequest::TrickleRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrickleRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrickleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrickleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrickleRequestDefaultTypeInternal() {}
  union {
    TrickleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrickleRequestDefaultTypeInternal _TrickleRequest_default_instance_;

inline constexpr TrackUnpublishedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR TrackUnpublishedResponse::TrackUnpublishedResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackUnpublishedResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackUnpublishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackUnpublishedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackUnpublishedResponseDefaultTypeInternal() {}
  union {
    TrackUnpublishedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackUnpublishedResponseDefaultTypeInternal _TrackUnpublishedResponse_default_instance_;

inline constexpr TrackSubscribed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR TrackSubscribed::TrackSubscribed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackSubscribed_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackSubscribedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackSubscribedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackSubscribedDefaultTypeInternal() {}
  union {
    TrackSubscribed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackSubscribedDefaultTypeInternal _TrackSubscribed_default_instance_;

inline constexpr TrackPermission::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sids_{},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        all_tracks_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TrackPermission::TrackPermission(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackPermission_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPermissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPermissionDefaultTypeInternal() {}
  union {
    TrackPermission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPermissionDefaultTypeInternal _TrackPermission_default_instance_;

inline constexpr SubscriptionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        err_{static_cast< ::livekit::SubscriptionError >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR SubscriptionResponse::SubscriptionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscriptionResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionResponseDefaultTypeInternal() {}
  union {
    SubscriptionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;

inline constexpr SubscriptionPermissionUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        allowed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscriptionPermissionUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscriptionPermissionUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionPermissionUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionPermissionUpdateDefaultTypeInternal() {}
  union {
    SubscriptionPermissionUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionPermissionUpdateDefaultTypeInternal _SubscriptionPermissionUpdate_default_instance_;

inline constexpr SubscribedQuality::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        quality_{static_cast< ::livekit::VideoQuality >(0)},
        enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SubscribedQuality::SubscribedQuality(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscribedQuality_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscribedQualityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedQualityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedQualityDefaultTypeInternal() {}
  union {
    SubscribedQuality _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedQualityDefaultTypeInternal _SubscribedQuality_default_instance_;

inline constexpr StreamStateInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        state_{static_cast< ::livekit::StreamState >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR StreamStateInfo::StreamStateInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamStateInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStateInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStateInfoDefaultTypeInternal() {}
  union {
    StreamStateInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStateInfoDefaultTypeInternal _StreamStateInfo_default_instance_;

inline constexpr SimulcastCodec::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SimulcastCodec::SimulcastCodec(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SimulcastCodec_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimulcastCodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulcastCodecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulcastCodecDefaultTypeInternal() {}
  union {
    SimulcastCodec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulcastCodecDefaultTypeInternal _SimulcastCodec_default_instance_;

inline constexpr SimulateScenario::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : scenario_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SimulateScenario::SimulateScenario(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SimulateScenario_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SimulateScenarioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulateScenarioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulateScenarioDefaultTypeInternal() {}
  union {
    SimulateScenario _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulateScenarioDefaultTypeInternal _SimulateScenario_default_instance_;

inline constexpr SessionDescription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sdp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SessionDescription::SessionDescription(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SessionDescription_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SessionDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDescriptionDefaultTypeInternal() {}
  union {
    SessionDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDescriptionDefaultTypeInternal _SessionDescription_default_instance_;

inline constexpr RequestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_id_{0u},
        reason_{static_cast< ::livekit::RequestResponse_Reason >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR RequestResponse::RequestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RequestResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestResponseDefaultTypeInternal() {}
  union {
    RequestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestResponseDefaultTypeInternal _RequestResponse_default_instance_;

inline constexpr RegionInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        distance_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR RegionInfo::RegionInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RegionInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RegionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionInfoDefaultTypeInternal() {}
  union {
    RegionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;

inline constexpr Pong::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        last_ping_timestamp_{::int64_t{0}},
        timestamp_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Pong::Pong(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Pong_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PongDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PongDefaultTypeInternal() {}
  union {
    Pong _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PongDefaultTypeInternal _Pong_default_instance_;

inline constexpr Ping::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_{::int64_t{0}},
        rtt_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR Ping::Ping(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Ping_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;

inline constexpr MuteTrackRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        muted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MuteTrackRequest::MuteTrackRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MuteTrackRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MuteTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteTrackRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteTrackRequestDefaultTypeInternal() {}
  union {
    MuteTrackRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteTrackRequestDefaultTypeInternal _MuteTrackRequest_default_instance_;

inline constexpr ICEServer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        urls_{},
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        credential_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ICEServer::ICEServer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ICEServer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ICEServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ICEServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ICEServerDefaultTypeInternal() {}
  union {
    ICEServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ICEServerDefaultTypeInternal _ICEServer_default_instance_;

inline constexpr DataChannelInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0u},
        target_{static_cast< ::livekit::SignalTarget >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR DataChannelInfo::DataChannelInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DataChannelInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataChannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataChannelInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataChannelInfoDefaultTypeInternal() {}
  union {
    DataChannelInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataChannelInfoDefaultTypeInternal _DataChannelInfo_default_instance_;

inline constexpr ConnectionQualityInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        participant_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_{static_cast< ::livekit::ConnectionQuality >(0)},
        score_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectionQualityInfo::ConnectionQualityInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConnectionQualityInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConnectionQualityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionQualityInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionQualityInfoDefaultTypeInternal() {}
  union {
    ConnectionQualityInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionQualityInfoDefaultTypeInternal _ConnectionQualityInfo_default_instance_;

inline constexpr UpdateVideoLayers::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layers_{},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR UpdateVideoLayers::UpdateVideoLayers(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateVideoLayers_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateVideoLayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateVideoLayersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateVideoLayersDefaultTypeInternal() {}
  union {
    UpdateVideoLayers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateVideoLayersDefaultTypeInternal _UpdateVideoLayers_default_instance_;

inline constexpr UpdateSubscription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_sids_{},
        participant_tracks_{},
        subscribe_{false} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateSubscription::UpdateSubscription(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateSubscription_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSubscriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSubscriptionDefaultTypeInternal() {}
  union {
    UpdateSubscription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSubscriptionDefaultTypeInternal _UpdateSubscription_default_instance_;

inline constexpr UpdateParticipantMetadata::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateParticipantMetadata::UpdateParticipantMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateParticipantMetadata_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateParticipantMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateParticipantMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateParticipantMetadataDefaultTypeInternal() {}
  union {
    UpdateParticipantMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateParticipantMetadataDefaultTypeInternal _UpdateParticipantMetadata_default_instance_;

inline constexpr SubscriptionPermission::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        track_permissions_{},
        all_participants_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SubscriptionPermission::SubscriptionPermission(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscriptionPermission_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscriptionPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionPermissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionPermissionDefaultTypeInternal() {}
  union {
    SubscriptionPermission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionPermissionDefaultTypeInternal _SubscriptionPermission_default_instance_;

inline constexpr SubscribedCodec::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        qualities_{},
        codec_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SubscribedCodec::SubscribedCodec(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscribedCodec_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscribedCodecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedCodecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedCodecDefaultTypeInternal() {}
  union {
    SubscribedCodec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedCodecDefaultTypeInternal _SubscribedCodec_default_instance_;

inline constexpr StreamStateUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_states_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamStateUpdate::StreamStateUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamStateUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamStateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamStateUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamStateUpdateDefaultTypeInternal() {}
  union {
    StreamStateUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamStateUpdateDefaultTypeInternal _StreamStateUpdate_default_instance_;

inline constexpr SpeakersChanged::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : speakers_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SpeakersChanged::SpeakersChanged(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SpeakersChanged_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpeakersChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakersChangedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakersChangedDefaultTypeInternal() {}
  union {
    SpeakersChanged _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakersChangedDefaultTypeInternal _SpeakersChanged_default_instance_;

inline constexpr RegionSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : regions_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegionSettings::RegionSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RegionSettings_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RegionSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionSettingsDefaultTypeInternal() {}
  union {
    RegionSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionSettingsDefaultTypeInternal _RegionSettings_default_instance_;

inline constexpr ConnectionQualityUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : updates_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectionQualityUpdate::ConnectionQualityUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ConnectionQualityUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConnectionQualityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionQualityUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionQualityUpdateDefaultTypeInternal() {}
  union {
    ConnectionQualityUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionQualityUpdateDefaultTypeInternal _ConnectionQualityUpdate_default_instance_;

inline constexpr AddTrackRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layers_{},
        simulcast_codecs_{},
        cid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::livekit::TrackType >(0)},
        width_{0u},
        height_{0u},
        source_{static_cast< ::livekit::TrackSource >(0)},
        muted_{false},
        disable_dtx_{false},
        stereo_{false},
        disable_red_{false},
        encryption_{static_cast< ::livekit::Encryption_Type >(0)},
        backup_codec_policy_{static_cast< ::livekit::BackupCodecPolicy >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AddTrackRequest::AddTrackRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AddTrackRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddTrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTrackRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTrackRequestDefaultTypeInternal() {}
  union {
    AddTrackRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTrackRequestDefaultTypeInternal _AddTrackRequest_default_instance_;

inline constexpr SubscribedQualityUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subscribed_qualities_{},
        subscribed_codecs_{},
        track_sid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR SubscribedQualityUpdate::SubscribedQualityUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SubscribedQualityUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SubscribedQualityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribedQualityUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribedQualityUpdateDefaultTypeInternal() {}
  union {
    SubscribedQualityUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribedQualityUpdateDefaultTypeInternal _SubscribedQualityUpdate_default_instance_;

inline constexpr RoomUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR RoomUpdate::RoomUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoomUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomUpdateDefaultTypeInternal() {}
  union {
    RoomUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomUpdateDefaultTypeInternal _RoomUpdate_default_instance_;

inline constexpr LeaveRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        regions_{nullptr},
        can_reconnect_{false},
        reason_{static_cast< ::livekit::DisconnectReason >(0)},
        action_{static_cast< ::livekit::LeaveRequest_Action >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LeaveRequest::LeaveRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(LeaveRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LeaveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveRequestDefaultTypeInternal() {}
  union {
    LeaveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveRequestDefaultTypeInternal _LeaveRequest_default_instance_;

inline constexpr TrackPublishedResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        track_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrackPublishedResponse::TrackPublishedResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackPublishedResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackPublishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackPublishedResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackPublishedResponseDefaultTypeInternal() {}
  union {
    TrackPublishedResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackPublishedResponseDefaultTypeInternal _TrackPublishedResponse_default_instance_;

inline constexpr ReconnectResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ice_servers_{},
        client_configuration_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ReconnectResponse::ReconnectResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ReconnectResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReconnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectResponseDefaultTypeInternal() {}
  union {
    ReconnectResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectResponseDefaultTypeInternal _ReconnectResponse_default_instance_;

inline constexpr SyncState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        publish_tracks_{},
        data_channels_{},
        track_sids_disabled_{},
        answer_{nullptr},
        subscription_{nullptr},
        offer_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SyncState::SyncState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SyncState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SyncStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncStateDefaultTypeInternal() {}
  union {
    SyncState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncStateDefaultTypeInternal _SyncState_default_instance_;

inline constexpr ParticipantUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : participants_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ParticipantUpdate::ParticipantUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ParticipantUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParticipantUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantUpdateDefaultTypeInternal() {}
  union {
    ParticipantUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantUpdateDefaultTypeInternal _ParticipantUpdate_default_instance_;

inline constexpr JoinResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        other_participants_{},
        ice_servers_{},
        enabled_publish_codecs_{},
        server_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alternative_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        server_region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sif_trailer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_{nullptr},
        participant_{nullptr},
        client_configuration_{nullptr},
        server_info_{nullptr},
        ping_timeout_{0},
        subscriber_primary_{false},
        fast_publish_{false},
        ping_interval_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JoinResponse::JoinResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(JoinResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinResponseDefaultTypeInternal() {}
  union {
    JoinResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinResponseDefaultTypeInternal _JoinResponse_default_instance_;

inline constexpr SignalResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SignalResponse::SignalResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SignalResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalResponseDefaultTypeInternal() {}
  union {
    SignalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalResponseDefaultTypeInternal _SignalResponse_default_instance_;

inline constexpr SignalRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SignalRequest::SignalRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SignalRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SignalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalRequestDefaultTypeInternal() {}
  union {
    SignalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalRequestDefaultTypeInternal _SignalRequest_default_instance_;
}  // namespace livekit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_livekit_5frtc_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_livekit_5frtc_2eproto = nullptr;
const ::uint32_t
    TableStruct_livekit_5frtc_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _impl_.codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::SimulcastCodec, _impl_.cid_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.cid_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.muted_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.disable_dtx_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.layers_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.simulcast_codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.stereo_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.disable_red_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.encryption_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.stream_),
        PROTOBUF_FIELD_OFFSET(::livekit::AddTrackRequest, _impl_.backup_codec_policy_),
        0,
        1,
        4,
        5,
        6,
        8,
        9,
        7,
        ~0u,
        ~0u,
        2,
        10,
        11,
        12,
        3,
        13,
        PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.candidateinit_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrickleRequest, _impl_.final_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _impl_.sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::MuteTrackRequest, _impl_.muted_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.room_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.participant_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.other_participants_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_version_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ice_servers_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.subscriber_primary_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.alternative_url_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.client_configuration_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_region_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ping_timeout_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.ping_interval_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.server_info_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.sif_trailer_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.enabled_publish_codecs_),
        PROTOBUF_FIELD_OFFSET(::livekit::JoinResponse, _impl_.fast_publish_),
        4,
        5,
        ~0u,
        0,
        ~0u,
        9,
        1,
        6,
        2,
        8,
        11,
        7,
        3,
        ~0u,
        10,
        PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _impl_.ice_servers_),
        PROTOBUF_FIELD_OFFSET(::livekit::ReconnectResponse, _impl_.client_configuration_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _impl_.cid_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPublishedResponse, _impl_.track_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackUnpublishedResponse, _impl_.track_sid_),
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::livekit::SessionDescription, _impl_.sdp_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantUpdate, _impl_.participants_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.track_sids_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.subscribe_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateSubscription, _impl_.participant_tracks_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.track_sids_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.disabled_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.fps_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateTrackSettings, _impl_.priority_),
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalAudioTrack, _impl_.features_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLocalVideoTrack, _impl_.height_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.can_reconnect_),
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::livekit::LeaveRequest, _impl_.regions_),
        1,
        2,
        3,
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateVideoLayers, _impl_.layers_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateParticipantMetadata, _impl_.request_id_),
        0,
        1,
        ~0u,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.urls_),
        PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::livekit::ICEServer, _impl_.credential_),
        ~0u,
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SpeakersChanged, _impl_.speakers_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RoomUpdate, _impl_.room_),
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityInfo, _impl_.score_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ConnectionQualityUpdate, _impl_.updates_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateInfo, _impl_.state_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StreamStateUpdate, _impl_.stream_states_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _impl_.quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQuality, _impl_.enabled_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _impl_.codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedCodec, _impl_.qualities_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.subscribed_qualities_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscribedQualityUpdate, _impl_.subscribed_codecs_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.all_tracks_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.track_sids_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackPermission, _impl_.participant_identity_),
        0,
        2,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _impl_.all_participants_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermission, _impl_.track_permissions_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.participant_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionPermissionUpdate, _impl_.allowed_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.answer_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.subscription_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.publish_tracks_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.data_channels_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.offer_),
        PROTOBUF_FIELD_OFFSET(::livekit::SyncState, _impl_.track_sids_disabled_),
        0,
        1,
        ~0u,
        ~0u,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::livekit::DataChannelInfo, _impl_.target_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _impl_.scenario_),
        PROTOBUF_FIELD_OFFSET(::livekit::Ping, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Ping, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Ping, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::Ping, _impl_.rtt_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::Pong, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::Pong, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::Pong, _impl_.last_ping_timestamp_),
        PROTOBUF_FIELD_OFFSET(::livekit::Pong, _impl_.timestamp_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::RegionSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RegionSettings, _impl_.regions_),
        PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::RegionInfo, _impl_.distance_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _impl_.track_sid_),
        PROTOBUF_FIELD_OFFSET(::livekit::SubscriptionResponse, _impl_.err_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.request_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::livekit::RequestResponse, _impl_.message_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackSubscribed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackSubscribed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackSubscribed, _impl_.track_sid_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::livekit::SignalRequest)},
        {26, -1, -1, sizeof(::livekit::SignalResponse)},
        {57, 67, -1, sizeof(::livekit::SimulcastCodec)},
        {69, 93, -1, sizeof(::livekit::AddTrackRequest)},
        {109, 120, -1, sizeof(::livekit::TrickleRequest)},
        {123, 133, -1, sizeof(::livekit::MuteTrackRequest)},
        {135, 158, -1, sizeof(::livekit::JoinResponse)},
        {173, 183, -1, sizeof(::livekit::ReconnectResponse)},
        {185, 195, -1, sizeof(::livekit::TrackPublishedResponse)},
        {197, 206, -1, sizeof(::livekit::TrackUnpublishedResponse)},
        {207, 217, -1, sizeof(::livekit::SessionDescription)},
        {219, -1, -1, sizeof(::livekit::ParticipantUpdate)},
        {228, 239, -1, sizeof(::livekit::UpdateSubscription)},
        {242, 257, -1, sizeof(::livekit::UpdateTrackSettings)},
        {264, 274, -1, sizeof(::livekit::UpdateLocalAudioTrack)},
        {276, 287, -1, sizeof(::livekit::UpdateLocalVideoTrack)},
        {290, 302, -1, sizeof(::livekit::LeaveRequest)},
        {306, 316, -1, sizeof(::livekit::UpdateVideoLayers)},
        {318, 328, -1, sizeof(::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse)},
        {330, 342, -1, sizeof(::livekit::UpdateParticipantMetadata)},
        {346, 357, -1, sizeof(::livekit::ICEServer)},
        {360, -1, -1, sizeof(::livekit::SpeakersChanged)},
        {369, 378, -1, sizeof(::livekit::RoomUpdate)},
        {379, 390, -1, sizeof(::livekit::ConnectionQualityInfo)},
        {393, -1, -1, sizeof(::livekit::ConnectionQualityUpdate)},
        {402, 413, -1, sizeof(::livekit::StreamStateInfo)},
        {416, -1, -1, sizeof(::livekit::StreamStateUpdate)},
        {425, 435, -1, sizeof(::livekit::SubscribedQuality)},
        {437, 447, -1, sizeof(::livekit::SubscribedCodec)},
        {449, 460, -1, sizeof(::livekit::SubscribedQualityUpdate)},
        {463, 475, -1, sizeof(::livekit::TrackPermission)},
        {479, 489, -1, sizeof(::livekit::SubscriptionPermission)},
        {491, 502, -1, sizeof(::livekit::SubscriptionPermissionUpdate)},
        {505, 519, -1, sizeof(::livekit::SyncState)},
        {525, 536, -1, sizeof(::livekit::DataChannelInfo)},
        {539, -1, -1, sizeof(::livekit::SimulateScenario)},
        {557, 567, -1, sizeof(::livekit::Ping)},
        {569, 579, -1, sizeof(::livekit::Pong)},
        {581, -1, -1, sizeof(::livekit::RegionSettings)},
        {590, 601, -1, sizeof(::livekit::RegionInfo)},
        {604, 614, -1, sizeof(::livekit::SubscriptionResponse)},
        {616, 627, -1, sizeof(::livekit::RequestResponse)},
        {630, 639, -1, sizeof(::livekit::TrackSubscribed)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::livekit::_SignalRequest_default_instance_._instance,
    &::livekit::_SignalResponse_default_instance_._instance,
    &::livekit::_SimulcastCodec_default_instance_._instance,
    &::livekit::_AddTrackRequest_default_instance_._instance,
    &::livekit::_TrickleRequest_default_instance_._instance,
    &::livekit::_MuteTrackRequest_default_instance_._instance,
    &::livekit::_JoinResponse_default_instance_._instance,
    &::livekit::_ReconnectResponse_default_instance_._instance,
    &::livekit::_TrackPublishedResponse_default_instance_._instance,
    &::livekit::_TrackUnpublishedResponse_default_instance_._instance,
    &::livekit::_SessionDescription_default_instance_._instance,
    &::livekit::_ParticipantUpdate_default_instance_._instance,
    &::livekit::_UpdateSubscription_default_instance_._instance,
    &::livekit::_UpdateTrackSettings_default_instance_._instance,
    &::livekit::_UpdateLocalAudioTrack_default_instance_._instance,
    &::livekit::_UpdateLocalVideoTrack_default_instance_._instance,
    &::livekit::_LeaveRequest_default_instance_._instance,
    &::livekit::_UpdateVideoLayers_default_instance_._instance,
    &::livekit::_UpdateParticipantMetadata_AttributesEntry_DoNotUse_default_instance_._instance,
    &::livekit::_UpdateParticipantMetadata_default_instance_._instance,
    &::livekit::_ICEServer_default_instance_._instance,
    &::livekit::_SpeakersChanged_default_instance_._instance,
    &::livekit::_RoomUpdate_default_instance_._instance,
    &::livekit::_ConnectionQualityInfo_default_instance_._instance,
    &::livekit::_ConnectionQualityUpdate_default_instance_._instance,
    &::livekit::_StreamStateInfo_default_instance_._instance,
    &::livekit::_StreamStateUpdate_default_instance_._instance,
    &::livekit::_SubscribedQuality_default_instance_._instance,
    &::livekit::_SubscribedCodec_default_instance_._instance,
    &::livekit::_SubscribedQualityUpdate_default_instance_._instance,
    &::livekit::_TrackPermission_default_instance_._instance,
    &::livekit::_SubscriptionPermission_default_instance_._instance,
    &::livekit::_SubscriptionPermissionUpdate_default_instance_._instance,
    &::livekit::_SyncState_default_instance_._instance,
    &::livekit::_DataChannelInfo_default_instance_._instance,
    &::livekit::_SimulateScenario_default_instance_._instance,
    &::livekit::_Ping_default_instance_._instance,
    &::livekit::_Pong_default_instance_._instance,
    &::livekit::_RegionSettings_default_instance_._instance,
    &::livekit::_RegionInfo_default_instance_._instance,
    &::livekit::_SubscriptionResponse_default_instance_._instance,
    &::livekit::_RequestResponse_default_instance_._instance,
    &::livekit::_TrackSubscribed_default_instance_._instance,
};
const char descriptor_table_protodef_livekit_5frtc_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021livekit_rtc.proto\022\007livekit\032\024livekit_mo"
    "dels.proto\"\325\006\n\rSignalRequest\022,\n\005offer\030\001 "
    "\001(\0132\033.livekit.SessionDescriptionH\000\022-\n\006an"
    "swer\030\002 \001(\0132\033.livekit.SessionDescriptionH"
    "\000\022*\n\007trickle\030\003 \001(\0132\027.livekit.TrickleRequ"
    "estH\000\022-\n\tadd_track\030\004 \001(\0132\030.livekit.AddTr"
    "ackRequestH\000\022)\n\004mute\030\005 \001(\0132\031.livekit.Mut"
    "eTrackRequestH\000\0223\n\014subscription\030\006 \001(\0132\033."
    "livekit.UpdateSubscriptionH\000\0225\n\rtrack_se"
    "tting\030\007 \001(\0132\034.livekit.UpdateTrackSetting"
    "sH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveReques"
    "tH\000\0227\n\rupdate_layers\030\n \001(\0132\032.livekit.Upd"
    "ateVideoLayersB\002\030\001H\000\022B\n\027subscription_per"
    "mission\030\013 \001(\0132\037.livekit.SubscriptionPerm"
    "issionH\000\022(\n\nsync_state\030\014 \001(\0132\022.livekit.S"
    "yncStateH\000\022-\n\010simulate\030\r \001(\0132\031.livekit.S"
    "imulateScenarioH\000\022\016\n\004ping\030\016 \001(\003H\000\022=\n\017upd"
    "ate_metadata\030\017 \001(\0132\".livekit.UpdateParti"
    "cipantMetadataH\000\022!\n\010ping_req\030\020 \001(\0132\r.liv"
    "ekit.PingH\000\022<\n\022update_audio_track\030\021 \001(\0132"
    "\036.livekit.UpdateLocalAudioTrackH\000\022<\n\022upd"
    "ate_video_track\030\022 \001(\0132\036.livekit.UpdateLo"
    "calVideoTrackH\000B\t\n\007message\"\347\010\n\016SignalRes"
    "ponse\022%\n\004join\030\001 \001(\0132\025.livekit.JoinRespon"
    "seH\000\022-\n\006answer\030\002 \001(\0132\033.livekit.SessionDe"
    "scriptionH\000\022,\n\005offer\030\003 \001(\0132\033.livekit.Ses"
    "sionDescriptionH\000\022*\n\007trickle\030\004 \001(\0132\027.liv"
    "ekit.TrickleRequestH\000\022,\n\006update\030\005 \001(\0132\032."
    "livekit.ParticipantUpdateH\000\022:\n\017track_pub"
    "lished\030\006 \001(\0132\037.livekit.TrackPublishedRes"
    "ponseH\000\022&\n\005leave\030\010 \001(\0132\025.livekit.LeaveRe"
    "questH\000\022)\n\004mute\030\t \001(\0132\031.livekit.MuteTrac"
    "kRequestH\000\0224\n\020speakers_changed\030\n \001(\0132\030.l"
    "ivekit.SpeakersChangedH\000\022*\n\013room_update\030"
    "\013 \001(\0132\023.livekit.RoomUpdateH\000\022>\n\022connecti"
    "on_quality\030\014 \001(\0132 .livekit.ConnectionQua"
    "lityUpdateH\000\0229\n\023stream_state_update\030\r \001("
    "\0132\032.livekit.StreamStateUpdateH\000\022E\n\031subsc"
    "ribed_quality_update\030\016 \001(\0132 .livekit.Sub"
    "scribedQualityUpdateH\000\022O\n\036subscription_p"
    "ermission_update\030\017 \001(\0132%.livekit.Subscri"
    "ptionPermissionUpdateH\000\022\027\n\rrefresh_token"
    "\030\020 \001(\tH\000\022>\n\021track_unpublished\030\021 \001(\0132!.li"
    "vekit.TrackUnpublishedResponseH\000\022\016\n\004pong"
    "\030\022 \001(\003H\000\022/\n\treconnect\030\023 \001(\0132\032.livekit.Re"
    "connectResponseH\000\022\"\n\tpong_resp\030\024 \001(\0132\r.l"
    "ivekit.PongH\000\022>\n\025subscription_response\030\025"
    " \001(\0132\035.livekit.SubscriptionResponseH\000\0224\n"
    "\020request_response\030\026 \001(\0132\030.livekit.Reques"
    "tResponseH\000\0224\n\020track_subscribed\030\027 \001(\0132\030."
    "livekit.TrackSubscribedH\000B\t\n\007message\",\n\016"
    "SimulcastCodec\022\r\n\005codec\030\001 \001(\t\022\013\n\003cid\030\002 \001"
    "(\t\"\270\003\n\017AddTrackRequest\022\013\n\003cid\030\001 \001(\t\022\014\n\004n"
    "ame\030\002 \001(\t\022 \n\004type\030\003 \001(\0162\022.livekit.TrackT"
    "ype\022\r\n\005width\030\004 \001(\r\022\016\n\006height\030\005 \001(\r\022\r\n\005mu"
    "ted\030\006 \001(\010\022\023\n\013disable_dtx\030\007 \001(\010\022$\n\006source"
    "\030\010 \001(\0162\024.livekit.TrackSource\022#\n\006layers\030\t"
    " \003(\0132\023.livekit.VideoLayer\0221\n\020simulcast_c"
    "odecs\030\n \003(\0132\027.livekit.SimulcastCodec\022\013\n\003"
    "sid\030\013 \001(\t\022\016\n\006stereo\030\014 \001(\010\022\023\n\013disable_red"
    "\030\r \001(\010\022,\n\nencryption\030\016 \001(\0162\030.livekit.Enc"
    "ryption.Type\022\016\n\006stream\030\017 \001(\t\0227\n\023backup_c"
    "odec_policy\030\020 \001(\0162\032.livekit.BackupCodecP"
    "olicy\"]\n\016TrickleRequest\022\025\n\rcandidateInit"
    "\030\001 \001(\t\022%\n\006target\030\002 \001(\0162\025.livekit.SignalT"
    "arget\022\r\n\005final\030\003 \001(\010\".\n\020MuteTrackRequest"
    "\022\013\n\003sid\030\001 \001(\t\022\r\n\005muted\030\002 \001(\010\"\213\004\n\014JoinRes"
    "ponse\022\033\n\004room\030\001 \001(\0132\r.livekit.Room\022-\n\013pa"
    "rticipant\030\002 \001(\0132\030.livekit.ParticipantInf"
    "o\0224\n\022other_participants\030\003 \003(\0132\030.livekit."
    "ParticipantInfo\022\026\n\016server_version\030\004 \001(\t\022"
    "\'\n\013ice_servers\030\005 \003(\0132\022.livekit.ICEServer"
    "\022\032\n\022subscriber_primary\030\006 \001(\010\022\027\n\017alternat"
    "ive_url\030\007 \001(\t\022:\n\024client_configuration\030\010 "
    "\001(\0132\034.livekit.ClientConfiguration\022\025\n\rser"
    "ver_region\030\t \001(\t\022\024\n\014ping_timeout\030\n \001(\005\022\025"
    "\n\rping_interval\030\013 \001(\005\022(\n\013server_info\030\014 \001"
    "(\0132\023.livekit.ServerInfo\022\023\n\013sif_trailer\030\r"
    " \001(\014\022.\n\026enabled_publish_codecs\030\016 \003(\0132\016.l"
    "ivekit.Codec\022\024\n\014fast_publish\030\017 \001(\010\"x\n\021Re"
    "connectResponse\022\'\n\013ice_servers\030\001 \003(\0132\022.l"
    "ivekit.ICEServer\022:\n\024client_configuration"
    "\030\002 \001(\0132\034.livekit.ClientConfiguration\"H\n\026"
    "TrackPublishedResponse\022\013\n\003cid\030\001 \001(\t\022!\n\005t"
    "rack\030\002 \001(\0132\022.livekit.TrackInfo\"-\n\030TrackU"
    "npublishedResponse\022\021\n\ttrack_sid\030\001 \001(\t\"/\n"
    "\022SessionDescription\022\014\n\004type\030\001 \001(\t\022\013\n\003sdp"
    "\030\002 \001(\t\"C\n\021ParticipantUpdate\022.\n\014participa"
    "nts\030\001 \003(\0132\030.livekit.ParticipantInfo\"s\n\022U"
    "pdateSubscription\022\022\n\ntrack_sids\030\001 \003(\t\022\021\n"
    "\tsubscribe\030\002 \001(\010\0226\n\022participant_tracks\030\003"
    " \003(\0132\032.livekit.ParticipantTracks\"\241\001\n\023Upd"
    "ateTrackSettings\022\022\n\ntrack_sids\030\001 \003(\t\022\020\n\010"
    "disabled\030\003 \001(\010\022&\n\007quality\030\004 \001(\0162\025.liveki"
    "t.VideoQuality\022\r\n\005width\030\005 \001(\r\022\016\n\006height\030"
    "\006 \001(\r\022\013\n\003fps\030\007 \001(\r\022\020\n\010priority\030\010 \001(\r\"X\n\025"
    "UpdateLocalAudioTrack\022\021\n\ttrack_sid\030\001 \001(\t"
    "\022,\n\010features\030\002 \003(\0162\032.livekit.AudioTrackF"
    "eature\"I\n\025UpdateLocalVideoTrack\022\021\n\ttrack"
    "_sid\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001("
    "\r\"\335\001\n\014LeaveRequest\022\025\n\rcan_reconnect\030\001 \001("
    "\010\022)\n\006reason\030\002 \001(\0162\031.livekit.DisconnectRe"
    "ason\022,\n\006action\030\003 \001(\0162\034.livekit.LeaveRequ"
    "est.Action\022(\n\007regions\030\004 \001(\0132\027.livekit.Re"
    "gionSettings\"3\n\006Action\022\016\n\nDISCONNECT\020\000\022\n"
    "\n\006RESUME\020\001\022\r\n\tRECONNECT\020\002\"O\n\021UpdateVideo"
    "Layers\022\021\n\ttrack_sid\030\001 \001(\t\022#\n\006layers\030\002 \003("
    "\0132\023.livekit.VideoLayer:\002\030\001\"\312\001\n\031UpdatePar"
    "ticipantMetadata\022\020\n\010metadata\030\001 \001(\t\022\014\n\004na"
    "me\030\002 \001(\t\022F\n\nattributes\030\003 \003(\01322.livekit.U"
    "pdateParticipantMetadata.AttributesEntry"
    "\022\022\n\nrequest_id\030\004 \001(\r\0321\n\017AttributesEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\?\n\tICESe"
    "rver\022\014\n\004urls\030\001 \003(\t\022\020\n\010username\030\002 \001(\t\022\022\n\n"
    "credential\030\003 \001(\t\"9\n\017SpeakersChanged\022&\n\010s"
    "peakers\030\001 \003(\0132\024.livekit.SpeakerInfo\")\n\nR"
    "oomUpdate\022\033\n\004room\030\001 \001(\0132\r.livekit.Room\"l"
    "\n\025ConnectionQualityInfo\022\027\n\017participant_s"
    "id\030\001 \001(\t\022+\n\007quality\030\002 \001(\0162\032.livekit.Conn"
    "ectionQuality\022\r\n\005score\030\003 \001(\002\"J\n\027Connecti"
    "onQualityUpdate\022/\n\007updates\030\001 \003(\0132\036.livek"
    "it.ConnectionQualityInfo\"b\n\017StreamStateI"
    "nfo\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrack_si"
    "d\030\002 \001(\t\022#\n\005state\030\003 \001(\0162\024.livekit.StreamS"
    "tate\"D\n\021StreamStateUpdate\022/\n\rstream_stat"
    "es\030\001 \003(\0132\030.livekit.StreamStateInfo\"L\n\021Su"
    "bscribedQuality\022&\n\007quality\030\001 \001(\0162\025.livek"
    "it.VideoQuality\022\017\n\007enabled\030\002 \001(\010\"O\n\017Subs"
    "cribedCodec\022\r\n\005codec\030\001 \001(\t\022-\n\tqualities\030"
    "\002 \003(\0132\032.livekit.SubscribedQuality\"\233\001\n\027Su"
    "bscribedQualityUpdate\022\021\n\ttrack_sid\030\001 \001(\t"
    "\0228\n\024subscribed_qualities\030\002 \003(\0132\032.livekit"
    ".SubscribedQuality\0223\n\021subscribed_codecs\030"
    "\003 \003(\0132\030.livekit.SubscribedCodec\"p\n\017Track"
    "Permission\022\027\n\017participant_sid\030\001 \001(\t\022\022\n\na"
    "ll_tracks\030\002 \001(\010\022\022\n\ntrack_sids\030\003 \003(\t\022\034\n\024p"
    "articipant_identity\030\004 \001(\t\"g\n\026Subscriptio"
    "nPermission\022\030\n\020all_participants\030\001 \001(\010\0223\n"
    "\021track_permissions\030\002 \003(\0132\030.livekit.Track"
    "Permission\"[\n\034SubscriptionPermissionUpda"
    "te\022\027\n\017participant_sid\030\001 \001(\t\022\021\n\ttrack_sid"
    "\030\002 \001(\t\022\017\n\007allowed\030\003 \001(\010\"\236\002\n\tSyncState\022+\n"
    "\006answer\030\001 \001(\0132\033.livekit.SessionDescripti"
    "on\0221\n\014subscription\030\002 \001(\0132\033.livekit.Updat"
    "eSubscription\0227\n\016publish_tracks\030\003 \003(\0132\037."
    "livekit.TrackPublishedResponse\022/\n\rdata_c"
    "hannels\030\004 \003(\0132\030.livekit.DataChannelInfo\022"
    "*\n\005offer\030\005 \001(\0132\033.livekit.SessionDescript"
    "ion\022\033\n\023track_sids_disabled\030\006 \003(\t\"S\n\017Data"
    "ChannelInfo\022\r\n\005label\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022%"
    "\n\006target\030\003 \001(\0162\025.livekit.SignalTarget\"\340\002"
    "\n\020SimulateScenario\022\030\n\016speaker_update\030\001 \001"
    "(\005H\000\022\026\n\014node_failure\030\002 \001(\010H\000\022\023\n\tmigratio"
    "n\030\003 \001(\010H\000\022\026\n\014server_leave\030\004 \001(\010H\000\022\?\n\031swi"
    "tch_candidate_protocol\030\005 \001(\0162\032.livekit.C"
    "andidateProtocolH\000\022\036\n\024subscriber_bandwid"
    "th\030\006 \001(\003H\000\022%\n\033disconnect_signal_on_resum"
    "e\030\007 \001(\010H\000\0221\n\'disconnect_signal_on_resume"
    "_no_messages\030\010 \001(\010H\000\022&\n\034leave_request_fu"
    "ll_reconnect\030\t \001(\010H\000B\n\n\010scenario\"&\n\004Ping"
    "\022\021\n\ttimestamp\030\001 \001(\003\022\013\n\003rtt\030\002 \001(\003\"6\n\004Pong"
    "\022\033\n\023last_ping_timestamp\030\001 \001(\003\022\021\n\ttimesta"
    "mp\030\002 \001(\003\"6\n\016RegionSettings\022$\n\007regions\030\001 "
    "\003(\0132\023.livekit.RegionInfo\";\n\nRegionInfo\022\016"
    "\n\006region\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\020\n\010distance\030"
    "\003 \001(\003\"R\n\024SubscriptionResponse\022\021\n\ttrack_s"
    "id\030\001 \001(\t\022\'\n\003err\030\002 \001(\0162\032.livekit.Subscrip"
    "tionError\"\255\001\n\017RequestResponse\022\022\n\nrequest"
    "_id\030\001 \001(\r\022/\n\006reason\030\002 \001(\0162\037.livekit.Requ"
    "estResponse.Reason\022\017\n\007message\030\003 \001(\t\"D\n\006R"
    "eason\022\006\n\002OK\020\000\022\r\n\tNOT_FOUND\020\001\022\017\n\013NOT_ALLO"
    "WED\020\002\022\022\n\016LIMIT_EXCEEDED\020\003\"$\n\017TrackSubscr"
    "ibed\022\021\n\ttrack_sid\030\001 \001(\t*-\n\014SignalTarget\022"
    "\r\n\tPUBLISHER\020\000\022\016\n\nSUBSCRIBER\020\001*%\n\013Stream"
    "State\022\n\n\006ACTIVE\020\000\022\n\n\006PAUSED\020\001*.\n\021Candida"
    "teProtocol\022\007\n\003UDP\020\000\022\007\n\003TCP\020\001\022\007\n\003TLS\020\002BFZ"
    "#github.com/livekit/protocol/livekit\252\002\rL"
    "iveKit.Proto\352\002\016LiveKit::Protob\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_livekit_5frtc_2eproto_deps[1] = {
        &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::absl::once_flag descriptor_table_livekit_5frtc_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_livekit_5frtc_2eproto = {
    false,
    false,
    7117,
    descriptor_table_protodef_livekit_5frtc_2eproto,
    "livekit_rtc.proto",
    &descriptor_table_livekit_5frtc_2eproto_once,
    descriptor_table_livekit_5frtc_2eproto_deps,
    1,
    43,
    schemas,
    file_default_instances,
    TableStruct_livekit_5frtc_2eproto::offsets,
    file_level_enum_descriptors_livekit_5frtc_2eproto,
    file_level_service_descriptors_livekit_5frtc_2eproto,
};
namespace livekit {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL LeaveRequest_Action_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t LeaveRequest_Action_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL RequestResponse_Reason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t RequestResponse_Reason_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SignalTarget_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SignalTarget_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL StreamState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t StreamState_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CandidateProtocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5frtc_2eproto);
  return file_level_enum_descriptors_livekit_5frtc_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t CandidateProtocol_internal_data_[] = {
    196608u, 0u, };
// ===================================================================

class SignalRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::SignalRequest, _impl_._oneof_case_);
};

void SignalRequest::set_allocated_offer(::livekit::SessionDescription* PROTOBUF_NULLABLE offer) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (offer) {
    ::google::protobuf::Arena* submessage_arena = offer->GetArena();
    if (message_arena != submessage_arena) {
      offer = ::google::protobuf::internal::GetOwnedMessage(message_arena, offer, submessage_arena);
    }
    set_has_offer();
    _impl_.message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.offer)
}
void SignalRequest::set_allocated_answer(::livekit::SessionDescription* PROTOBUF_NULLABLE answer) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (answer) {
    ::google::protobuf::Arena* submessage_arena = answer->GetArena();
    if (message_arena != submessage_arena) {
      answer = ::google::protobuf::internal::GetOwnedMessage(message_arena, answer, submessage_arena);
    }
    set_has_answer();
    _impl_.message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.answer)
}
void SignalRequest::set_allocated_trickle(::livekit::TrickleRequest* PROTOBUF_NULLABLE trickle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (trickle) {
    ::google::protobuf::Arena* submessage_arena = trickle->GetArena();
    if (message_arena != submessage_arena) {
      trickle = ::google::protobuf::internal::GetOwnedMessage(message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    _impl_.message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.trickle)
}
void SignalRequest::set_allocated_add_track(::livekit::AddTrackRequest* PROTOBUF_NULLABLE add_track) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (add_track) {
    ::google::protobuf::Arena* submessage_arena = add_track->GetArena();
    if (message_arena != submessage_arena) {
      add_track = ::google::protobuf::internal::GetOwnedMessage(message_arena, add_track, submessage_arena);
    }
    set_has_add_track();
    _impl_.message_.add_track_ = add_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.add_track)
}
void SignalRequest::set_allocated_mute(::livekit::MuteTrackRequest* PROTOBUF_NULLABLE mute) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (mute) {
    ::google::protobuf::Arena* submessage_arena = mute->GetArena();
    if (message_arena != submessage_arena) {
      mute = ::google::protobuf::internal::GetOwnedMessage(message_arena, mute, submessage_arena);
    }
    set_has_mute();
    _impl_.message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.mute)
}
void SignalRequest::set_allocated_subscription(::livekit::UpdateSubscription* PROTOBUF_NULLABLE subscription) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (subscription) {
    ::google::protobuf::Arena* submessage_arena = subscription->GetArena();
    if (message_arena != submessage_arena) {
      subscription = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscription, submessage_arena);
    }
    set_has_subscription();
    _impl_.message_.subscription_ = subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription)
}
void SignalRequest::set_allocated_track_setting(::livekit::UpdateTrackSettings* PROTOBUF_NULLABLE track_setting) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (track_setting) {
    ::google::protobuf::Arena* submessage_arena = track_setting->GetArena();
    if (message_arena != submessage_arena) {
      track_setting = ::google::protobuf::internal::GetOwnedMessage(message_arena, track_setting, submessage_arena);
    }
    set_has_track_setting();
    _impl_.message_.track_setting_ = track_setting;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.track_setting)
}
void SignalRequest::set_allocated_leave(::livekit::LeaveRequest* PROTOBUF_NULLABLE leave) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (leave) {
    ::google::protobuf::Arena* submessage_arena = leave->GetArena();
    if (message_arena != submessage_arena) {
      leave = ::google::protobuf::internal::GetOwnedMessage(message_arena, leave, submessage_arena);
    }
    set_has_leave();
    _impl_.message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.leave)
}
void SignalRequest::set_allocated_update_layers(::livekit::UpdateVideoLayers* PROTOBUF_NULLABLE update_layers) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (update_layers) {
    ::google::protobuf::Arena* submessage_arena = update_layers->GetArena();
    if (message_arena != submessage_arena) {
      update_layers = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_layers, submessage_arena);
    }
    set_has_update_layers();
    _impl_.message_.update_layers_ = update_layers;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_layers)
}
void SignalRequest::set_allocated_subscription_permission(::livekit::SubscriptionPermission* PROTOBUF_NULLABLE subscription_permission) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (subscription_permission) {
    ::google::protobuf::Arena* submessage_arena = subscription_permission->GetArena();
    if (message_arena != submessage_arena) {
      subscription_permission = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscription_permission, submessage_arena);
    }
    set_has_subscription_permission();
    _impl_.message_.subscription_permission_ = subscription_permission;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.subscription_permission)
}
void SignalRequest::set_allocated_sync_state(::livekit::SyncState* PROTOBUF_NULLABLE sync_state) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (sync_state) {
    ::google::protobuf::Arena* submessage_arena = sync_state->GetArena();
    if (message_arena != submessage_arena) {
      sync_state = ::google::protobuf::internal::GetOwnedMessage(message_arena, sync_state, submessage_arena);
    }
    set_has_sync_state();
    _impl_.message_.sync_state_ = sync_state;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.sync_state)
}
void SignalRequest::set_allocated_simulate(::livekit::SimulateScenario* PROTOBUF_NULLABLE simulate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (simulate) {
    ::google::protobuf::Arena* submessage_arena = simulate->GetArena();
    if (message_arena != submessage_arena) {
      simulate = ::google::protobuf::internal::GetOwnedMessage(message_arena, simulate, submessage_arena);
    }
    set_has_simulate();
    _impl_.message_.simulate_ = simulate;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.simulate)
}
void SignalRequest::set_allocated_update_metadata(::livekit::UpdateParticipantMetadata* PROTOBUF_NULLABLE update_metadata) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (update_metadata) {
    ::google::protobuf::Arena* submessage_arena = update_metadata->GetArena();
    if (message_arena != submessage_arena) {
      update_metadata = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_metadata, submessage_arena);
    }
    set_has_update_metadata();
    _impl_.message_.update_metadata_ = update_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_metadata)
}
void SignalRequest::set_allocated_ping_req(::livekit::Ping* PROTOBUF_NULLABLE ping_req) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (ping_req) {
    ::google::protobuf::Arena* submessage_arena = ping_req->GetArena();
    if (message_arena != submessage_arena) {
      ping_req = ::google::protobuf::internal::GetOwnedMessage(message_arena, ping_req, submessage_arena);
    }
    set_has_ping_req();
    _impl_.message_.ping_req_ = ping_req;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.ping_req)
}
void SignalRequest::set_allocated_update_audio_track(::livekit::UpdateLocalAudioTrack* PROTOBUF_NULLABLE update_audio_track) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (update_audio_track) {
    ::google::protobuf::Arena* submessage_arena = update_audio_track->GetArena();
    if (message_arena != submessage_arena) {
      update_audio_track = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_audio_track, submessage_arena);
    }
    set_has_update_audio_track();
    _impl_.message_.update_audio_track_ = update_audio_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_audio_track)
}
void SignalRequest::set_allocated_update_video_track(::livekit::UpdateLocalVideoTrack* PROTOBUF_NULLABLE update_video_track) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (update_video_track) {
    ::google::protobuf::Arena* submessage_arena = update_video_track->GetArena();
    if (message_arena != submessage_arena) {
      update_video_track = ::google::protobuf::internal::GetOwnedMessage(message_arena, update_video_track, submessage_arena);
    }
    set_has_update_video_track();
    _impl_.message_.update_video_track_ = update_video_track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalRequest.update_video_track)
}
SignalRequest::SignalRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SignalRequest)
}
PROTOBUF_NDEBUG_INLINE SignalRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SignalRequest& from_msg)
      : message_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

SignalRequest::SignalRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SignalRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignalRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (message_case()) {
    case MESSAGE_NOT_SET:
      break;
      case kOffer:
        _impl_.message_.offer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.offer_);
        break;
      case kAnswer:
        _impl_.message_.answer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.answer_);
        break;
      case kTrickle:
        _impl_.message_.trickle_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.trickle_);
        break;
      case kAddTrack:
        _impl_.message_.add_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.add_track_);
        break;
      case kMute:
        _impl_.message_.mute_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.mute_);
        break;
      case kSubscription:
        _impl_.message_.subscription_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_);
        break;
      case kTrackSetting:
        _impl_.message_.track_setting_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_setting_);
        break;
      case kLeave:
        _impl_.message_.leave_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.leave_);
        break;
      case kUpdateLayers:
        _impl_.message_.update_layers_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_layers_);
        break;
      case kSubscriptionPermission:
        _impl_.message_.subscription_permission_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_permission_);
        break;
      case kSyncState:
        _impl_.message_.sync_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.sync_state_);
        break;
      case kSimulate:
        _impl_.message_.simulate_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.simulate_);
        break;
      case kPing:
        _impl_.message_.ping_ = from._impl_.message_.ping_;
        break;
      case kUpdateMetadata:
        _impl_.message_.update_metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_metadata_);
        break;
      case kPingReq:
        _impl_.message_.ping_req_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.ping_req_);
        break;
      case kUpdateAudioTrack:
        _impl_.message_.update_audio_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_audio_track_);
        break;
      case kUpdateVideoTrack:
        _impl_.message_.update_video_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_video_track_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.SignalRequest)
}
PROTOBUF_NDEBUG_INLINE SignalRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void SignalRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SignalRequest::~SignalRequest() {
  // @@protoc_insertion_point(destructor:livekit.SignalRequest)
  SharedDtor(*this);
}
inline void SignalRequest::SharedDtor(MessageLite& self) {
  SignalRequest& this_ = static_cast<SignalRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_message()) {
    this_.clear_message();
  }
  this_._impl_.~Impl_();
}

void SignalRequest::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (message_case()) {
    case kOffer: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.offer_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.offer_);
      }
      break;
    }
    case kAnswer: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.answer_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.answer_);
      }
      break;
    }
    case kTrickle: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.trickle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.trickle_);
      }
      break;
    }
    case kAddTrack: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.add_track_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.add_track_);
      }
      break;
    }
    case kMute: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.mute_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.mute_);
      }
      break;
    }
    case kSubscription: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.subscription_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.subscription_);
      }
      break;
    }
    case kTrackSetting: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.track_setting_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.track_setting_);
      }
      break;
    }
    case kLeave: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.leave_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.leave_);
      }
      break;
    }
    case kUpdateLayers: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.update_layers_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.update_layers_);
      }
      break;
    }
    case kSubscriptionPermission: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.subscription_permission_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.subscription_permission_);
      }
      break;
    }
    case kSyncState: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.sync_state_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.sync_state_);
      }
      break;
    }
    case kSimulate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.simulate_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.simulate_);
      }
      break;
    }
    case kPing: {
      // No need to clear
      break;
    }
    case kUpdateMetadata: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.update_metadata_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.update_metadata_);
      }
      break;
    }
    case kPingReq: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.ping_req_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.ping_req_);
      }
      break;
    }
    case kUpdateAudioTrack: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.update_audio_track_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.update_audio_track_);
      }
      break;
    }
    case kUpdateVideoTrack: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.update_video_track_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.update_video_track_);
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


inline void* PROTOBUF_NONNULL SignalRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SignalRequest(arena);
}
constexpr auto SignalRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignalRequest),
                                            alignof(SignalRequest));
}
constexpr auto SignalRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SignalRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SignalRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SignalRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SignalRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SignalRequest>(), &SignalRequest::ByteSizeLong,
              &SignalRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_._cached_size_),
          false,
      },
      &SignalRequest::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SignalRequest_class_data_ =
            SignalRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SignalRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SignalRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SignalRequest_class_data_.tc_table);
  return SignalRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 17, 16, 0, 2>
SignalRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    18, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705408,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    16,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SignalRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SignalRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.SessionDescription offer = 1;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.offer_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SessionDescription answer = 2;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.answer_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrickleRequest trickle = 3;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.trickle_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AddTrackRequest add_track = 4;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.add_track_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.MuteTrackRequest mute = 5;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.mute_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateSubscription subscription = 6;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.subscription_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateTrackSettings track_setting = 7;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.track_setting_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.LeaveRequest leave = 8;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.leave_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.update_layers_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SubscriptionPermission subscription_permission = 11;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.subscription_permission_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SyncState sync_state = 12;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.sync_state_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SimulateScenario simulate = 13;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.simulate_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 ping = 14;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.ping_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // .livekit.UpdateParticipantMetadata update_metadata = 15;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.update_metadata_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.Ping ping_req = 16;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.ping_req_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateLocalAudioTrack update_audio_track = 17;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.update_audio_track_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateLocalVideoTrack update_video_track = 18;
    {PROTOBUF_FIELD_OFFSET(SignalRequest, _impl_.message_.update_video_track_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
      {::_pbi::TcParser::GetTable<::livekit::TrickleRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::AddTrackRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::MuteTrackRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateSubscription>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateTrackSettings>()},
      {::_pbi::TcParser::GetTable<::livekit::LeaveRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateVideoLayers>()},
      {::_pbi::TcParser::GetTable<::livekit::SubscriptionPermission>()},
      {::_pbi::TcParser::GetTable<::livekit::SyncState>()},
      {::_pbi::TcParser::GetTable<::livekit::SimulateScenario>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateParticipantMetadata>()},
      {::_pbi::TcParser::GetTable<::livekit::Ping>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateLocalAudioTrack>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateLocalVideoTrack>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SignalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SignalRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SignalRequest& this_ = static_cast<const SignalRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SignalRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SignalRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.message_case()) {
    case kOffer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.message_.offer_, this_._impl_.message_.offer_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAnswer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.message_.answer_, this_._impl_.message_.answer_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrickle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.message_.trickle_, this_._impl_.message_.trickle_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAddTrack: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.message_.add_track_, this_._impl_.message_.add_track_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMute: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.message_.mute_, this_._impl_.message_.mute_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSubscription: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.message_.subscription_, this_._impl_.message_.subscription_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrackSetting: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.message_.track_setting_, this_._impl_.message_.track_setting_->GetCachedSize(), target,
          stream);
      break;
    }
    case kLeave: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.message_.leave_, this_._impl_.message_.leave_->GetCachedSize(), target,
          stream);
      break;
    }
    case kUpdateLayers: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.message_.update_layers_, this_._impl_.message_.update_layers_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSubscriptionPermission: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *this_._impl_.message_.subscription_permission_, this_._impl_.message_.subscription_permission_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSyncState: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, *this_._impl_.message_.sync_state_, this_._impl_.message_.sync_state_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSimulate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, *this_._impl_.message_.simulate_, this_._impl_.message_.simulate_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPing: {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<14>(
              stream, this_._internal_ping(), target);
      break;
    }
    case kUpdateMetadata: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          15, *this_._impl_.message_.update_metadata_, this_._impl_.message_.update_metadata_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPingReq: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          16, *this_._impl_.message_.ping_req_, this_._impl_.message_.ping_req_->GetCachedSize(), target,
          stream);
      break;
    }
    case kUpdateAudioTrack: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          17, *this_._impl_.message_.update_audio_track_, this_._impl_.message_.update_audio_track_->GetCachedSize(), target,
          stream);
      break;
    }
    case kUpdateVideoTrack: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          18, *this_._impl_.message_.update_video_track_, this_._impl_.message_.update_video_track_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SignalRequest::ByteSizeLong(const MessageLite& base) {
  const SignalRequest& this_ = static_cast<const SignalRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SignalRequest::ByteSizeLong() const {
  const SignalRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SignalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.message_case()) {
    // .livekit.SessionDescription offer = 1;
    case kOffer: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.offer_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.answer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 3;
    case kTrickle: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.trickle_);
      break;
    }
    // .livekit.AddTrackRequest add_track = 4;
    case kAddTrack: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.add_track_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 5;
    case kMute: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.mute_);
      break;
    }
    // .livekit.UpdateSubscription subscription = 6;
    case kSubscription: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.subscription_);
      break;
    }
    // .livekit.UpdateTrackSettings track_setting = 7;
    case kTrackSetting: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.track_setting_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.leave_);
      break;
    }
    // .livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];
    case kUpdateLayers: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.update_layers_);
      break;
    }
    // .livekit.SubscriptionPermission subscription_permission = 11;
    case kSubscriptionPermission: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.subscription_permission_);
      break;
    }
    // .livekit.SyncState sync_state = 12;
    case kSyncState: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.sync_state_);
      break;
    }
    // .livekit.SimulateScenario simulate = 13;
    case kSimulate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.simulate_);
      break;
    }
    // int64 ping = 14;
    case kPing: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_ping());
      break;
    }
    // .livekit.UpdateParticipantMetadata update_metadata = 15;
    case kUpdateMetadata: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.update_metadata_);
      break;
    }
    // .livekit.Ping ping_req = 16;
    case kPingReq: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.ping_req_);
      break;
    }
    // .livekit.UpdateLocalAudioTrack update_audio_track = 17;
    case kUpdateAudioTrack: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.update_audio_track_);
      break;
    }
    // .livekit.UpdateLocalVideoTrack update_video_track = 18;
    case kUpdateVideoTrack: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.update_video_track_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SignalRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignalRequest*>(&to_msg);
  auto& from = static_cast<const SignalRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_message();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kOffer: {
        if (oneof_needs_init) {
          _this->_impl_.message_.offer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.offer_);
        } else {
          _this->_impl_.message_.offer_->MergeFrom(*from._impl_.message_.offer_);
        }
        break;
      }
      case kAnswer: {
        if (oneof_needs_init) {
          _this->_impl_.message_.answer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.answer_);
        } else {
          _this->_impl_.message_.answer_->MergeFrom(*from._impl_.message_.answer_);
        }
        break;
      }
      case kTrickle: {
        if (oneof_needs_init) {
          _this->_impl_.message_.trickle_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.trickle_);
        } else {
          _this->_impl_.message_.trickle_->MergeFrom(*from._impl_.message_.trickle_);
        }
        break;
      }
      case kAddTrack: {
        if (oneof_needs_init) {
          _this->_impl_.message_.add_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.add_track_);
        } else {
          _this->_impl_.message_.add_track_->MergeFrom(*from._impl_.message_.add_track_);
        }
        break;
      }
      case kMute: {
        if (oneof_needs_init) {
          _this->_impl_.message_.mute_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.mute_);
        } else {
          _this->_impl_.message_.mute_->MergeFrom(*from._impl_.message_.mute_);
        }
        break;
      }
      case kSubscription: {
        if (oneof_needs_init) {
          _this->_impl_.message_.subscription_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_);
        } else {
          _this->_impl_.message_.subscription_->MergeFrom(*from._impl_.message_.subscription_);
        }
        break;
      }
      case kTrackSetting: {
        if (oneof_needs_init) {
          _this->_impl_.message_.track_setting_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_setting_);
        } else {
          _this->_impl_.message_.track_setting_->MergeFrom(*from._impl_.message_.track_setting_);
        }
        break;
      }
      case kLeave: {
        if (oneof_needs_init) {
          _this->_impl_.message_.leave_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.leave_);
        } else {
          _this->_impl_.message_.leave_->MergeFrom(*from._impl_.message_.leave_);
        }
        break;
      }
      case kUpdateLayers: {
        if (oneof_needs_init) {
          _this->_impl_.message_.update_layers_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_layers_);
        } else {
          _this->_impl_.message_.update_layers_->MergeFrom(*from._impl_.message_.update_layers_);
        }
        break;
      }
      case kSubscriptionPermission: {
        if (oneof_needs_init) {
          _this->_impl_.message_.subscription_permission_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_permission_);
        } else {
          _this->_impl_.message_.subscription_permission_->MergeFrom(*from._impl_.message_.subscription_permission_);
        }
        break;
      }
      case kSyncState: {
        if (oneof_needs_init) {
          _this->_impl_.message_.sync_state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.sync_state_);
        } else {
          _this->_impl_.message_.sync_state_->MergeFrom(*from._impl_.message_.sync_state_);
        }
        break;
      }
      case kSimulate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.simulate_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.simulate_);
        } else {
          _this->_impl_.message_.simulate_->MergeFrom(*from._impl_.message_.simulate_);
        }
        break;
      }
      case kPing: {
        _this->_impl_.message_.ping_ = from._impl_.message_.ping_;
        break;
      }
      case kUpdateMetadata: {
        if (oneof_needs_init) {
          _this->_impl_.message_.update_metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_metadata_);
        } else {
          _this->_impl_.message_.update_metadata_->MergeFrom(*from._impl_.message_.update_metadata_);
        }
        break;
      }
      case kPingReq: {
        if (oneof_needs_init) {
          _this->_impl_.message_.ping_req_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.ping_req_);
        } else {
          _this->_impl_.message_.ping_req_->MergeFrom(*from._impl_.message_.ping_req_);
        }
        break;
      }
      case kUpdateAudioTrack: {
        if (oneof_needs_init) {
          _this->_impl_.message_.update_audio_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_audio_track_);
        } else {
          _this->_impl_.message_.update_audio_track_->MergeFrom(*from._impl_.message_.update_audio_track_);
        }
        break;
      }
      case kUpdateVideoTrack: {
        if (oneof_needs_init) {
          _this->_impl_.message_.update_video_track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_video_track_);
        } else {
          _this->_impl_.message_.update_video_track_->MergeFrom(*from._impl_.message_.update_video_track_);
        }
        break;
      }
      case MESSAGE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignalRequest::CopyFrom(const SignalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignalRequest::InternalSwap(SignalRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SignalRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SignalResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::SignalResponse, _impl_._oneof_case_);
};

void SignalResponse::set_allocated_join(::livekit::JoinResponse* PROTOBUF_NULLABLE join) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (join) {
    ::google::protobuf::Arena* submessage_arena = join->GetArena();
    if (message_arena != submessage_arena) {
      join = ::google::protobuf::internal::GetOwnedMessage(message_arena, join, submessage_arena);
    }
    set_has_join();
    _impl_.message_.join_ = join;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.join)
}
void SignalResponse::set_allocated_answer(::livekit::SessionDescription* PROTOBUF_NULLABLE answer) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (answer) {
    ::google::protobuf::Arena* submessage_arena = answer->GetArena();
    if (message_arena != submessage_arena) {
      answer = ::google::protobuf::internal::GetOwnedMessage(message_arena, answer, submessage_arena);
    }
    set_has_answer();
    _impl_.message_.answer_ = answer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.answer)
}
void SignalResponse::set_allocated_offer(::livekit::SessionDescription* PROTOBUF_NULLABLE offer) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (offer) {
    ::google::protobuf::Arena* submessage_arena = offer->GetArena();
    if (message_arena != submessage_arena) {
      offer = ::google::protobuf::internal::GetOwnedMessage(message_arena, offer, submessage_arena);
    }
    set_has_offer();
    _impl_.message_.offer_ = offer;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.offer)
}
void SignalResponse::set_allocated_trickle(::livekit::TrickleRequest* PROTOBUF_NULLABLE trickle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (trickle) {
    ::google::protobuf::Arena* submessage_arena = trickle->GetArena();
    if (message_arena != submessage_arena) {
      trickle = ::google::protobuf::internal::GetOwnedMessage(message_arena, trickle, submessage_arena);
    }
    set_has_trickle();
    _impl_.message_.trickle_ = trickle;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.trickle)
}
void SignalResponse::set_allocated_update(::livekit::ParticipantUpdate* PROTOBUF_NULLABLE update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (update) {
    ::google::protobuf::Arena* submessage_arena = update->GetArena();
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.message_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.update)
}
void SignalResponse::set_allocated_track_published(::livekit::TrackPublishedResponse* PROTOBUF_NULLABLE track_published) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (track_published) {
    ::google::protobuf::Arena* submessage_arena = track_published->GetArena();
    if (message_arena != submessage_arena) {
      track_published = ::google::protobuf::internal::GetOwnedMessage(message_arena, track_published, submessage_arena);
    }
    set_has_track_published();
    _impl_.message_.track_published_ = track_published;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_published)
}
void SignalResponse::set_allocated_leave(::livekit::LeaveRequest* PROTOBUF_NULLABLE leave) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (leave) {
    ::google::protobuf::Arena* submessage_arena = leave->GetArena();
    if (message_arena != submessage_arena) {
      leave = ::google::protobuf::internal::GetOwnedMessage(message_arena, leave, submessage_arena);
    }
    set_has_leave();
    _impl_.message_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.leave)
}
void SignalResponse::set_allocated_mute(::livekit::MuteTrackRequest* PROTOBUF_NULLABLE mute) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (mute) {
    ::google::protobuf::Arena* submessage_arena = mute->GetArena();
    if (message_arena != submessage_arena) {
      mute = ::google::protobuf::internal::GetOwnedMessage(message_arena, mute, submessage_arena);
    }
    set_has_mute();
    _impl_.message_.mute_ = mute;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.mute)
}
void SignalResponse::set_allocated_speakers_changed(::livekit::SpeakersChanged* PROTOBUF_NULLABLE speakers_changed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (speakers_changed) {
    ::google::protobuf::Arena* submessage_arena = speakers_changed->GetArena();
    if (message_arena != submessage_arena) {
      speakers_changed = ::google::protobuf::internal::GetOwnedMessage(message_arena, speakers_changed, submessage_arena);
    }
    set_has_speakers_changed();
    _impl_.message_.speakers_changed_ = speakers_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.speakers_changed)
}
void SignalResponse::set_allocated_room_update(::livekit::RoomUpdate* PROTOBUF_NULLABLE room_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (room_update) {
    ::google::protobuf::Arena* submessage_arena = room_update->GetArena();
    if (message_arena != submessage_arena) {
      room_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, room_update, submessage_arena);
    }
    set_has_room_update();
    _impl_.message_.room_update_ = room_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.room_update)
}
void SignalResponse::set_allocated_connection_quality(::livekit::ConnectionQualityUpdate* PROTOBUF_NULLABLE connection_quality) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (connection_quality) {
    ::google::protobuf::Arena* submessage_arena = connection_quality->GetArena();
    if (message_arena != submessage_arena) {
      connection_quality = ::google::protobuf::internal::GetOwnedMessage(message_arena, connection_quality, submessage_arena);
    }
    set_has_connection_quality();
    _impl_.message_.connection_quality_ = connection_quality;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.connection_quality)
}
void SignalResponse::set_allocated_stream_state_update(::livekit::StreamStateUpdate* PROTOBUF_NULLABLE stream_state_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (stream_state_update) {
    ::google::protobuf::Arena* submessage_arena = stream_state_update->GetArena();
    if (message_arena != submessage_arena) {
      stream_state_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream_state_update, submessage_arena);
    }
    set_has_stream_state_update();
    _impl_.message_.stream_state_update_ = stream_state_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.stream_state_update)
}
void SignalResponse::set_allocated_subscribed_quality_update(::livekit::SubscribedQualityUpdate* PROTOBUF_NULLABLE subscribed_quality_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (subscribed_quality_update) {
    ::google::protobuf::Arena* submessage_arena = subscribed_quality_update->GetArena();
    if (message_arena != submessage_arena) {
      subscribed_quality_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscribed_quality_update, submessage_arena);
    }
    set_has_subscribed_quality_update();
    _impl_.message_.subscribed_quality_update_ = subscribed_quality_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscribed_quality_update)
}
void SignalResponse::set_allocated_subscription_permission_update(::livekit::SubscriptionPermissionUpdate* PROTOBUF_NULLABLE subscription_permission_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (subscription_permission_update) {
    ::google::protobuf::Arena* submessage_arena = subscription_permission_update->GetArena();
    if (message_arena != submessage_arena) {
      subscription_permission_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscription_permission_update, submessage_arena);
    }
    set_has_subscription_permission_update();
    _impl_.message_.subscription_permission_update_ = subscription_permission_update;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscription_permission_update)
}
void SignalResponse::set_allocated_track_unpublished(::livekit::TrackUnpublishedResponse* PROTOBUF_NULLABLE track_unpublished) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (track_unpublished) {
    ::google::protobuf::Arena* submessage_arena = track_unpublished->GetArena();
    if (message_arena != submessage_arena) {
      track_unpublished = ::google::protobuf::internal::GetOwnedMessage(message_arena, track_unpublished, submessage_arena);
    }
    set_has_track_unpublished();
    _impl_.message_.track_unpublished_ = track_unpublished;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_unpublished)
}
void SignalResponse::set_allocated_reconnect(::livekit::ReconnectResponse* PROTOBUF_NULLABLE reconnect) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (reconnect) {
    ::google::protobuf::Arena* submessage_arena = reconnect->GetArena();
    if (message_arena != submessage_arena) {
      reconnect = ::google::protobuf::internal::GetOwnedMessage(message_arena, reconnect, submessage_arena);
    }
    set_has_reconnect();
    _impl_.message_.reconnect_ = reconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.reconnect)
}
void SignalResponse::set_allocated_pong_resp(::livekit::Pong* PROTOBUF_NULLABLE pong_resp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (pong_resp) {
    ::google::protobuf::Arena* submessage_arena = pong_resp->GetArena();
    if (message_arena != submessage_arena) {
      pong_resp = ::google::protobuf::internal::GetOwnedMessage(message_arena, pong_resp, submessage_arena);
    }
    set_has_pong_resp();
    _impl_.message_.pong_resp_ = pong_resp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.pong_resp)
}
void SignalResponse::set_allocated_subscription_response(::livekit::SubscriptionResponse* PROTOBUF_NULLABLE subscription_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (subscription_response) {
    ::google::protobuf::Arena* submessage_arena = subscription_response->GetArena();
    if (message_arena != submessage_arena) {
      subscription_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, subscription_response, submessage_arena);
    }
    set_has_subscription_response();
    _impl_.message_.subscription_response_ = subscription_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.subscription_response)
}
void SignalResponse::set_allocated_request_response(::livekit::RequestResponse* PROTOBUF_NULLABLE request_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (request_response) {
    ::google::protobuf::Arena* submessage_arena = request_response->GetArena();
    if (message_arena != submessage_arena) {
      request_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, request_response, submessage_arena);
    }
    set_has_request_response();
    _impl_.message_.request_response_ = request_response;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.request_response)
}
void SignalResponse::set_allocated_track_subscribed(::livekit::TrackSubscribed* PROTOBUF_NULLABLE track_subscribed) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_message();
  if (track_subscribed) {
    ::google::protobuf::Arena* submessage_arena = track_subscribed->GetArena();
    if (message_arena != submessage_arena) {
      track_subscribed = ::google::protobuf::internal::GetOwnedMessage(message_arena, track_subscribed, submessage_arena);
    }
    set_has_track_subscribed();
    _impl_.message_.track_subscribed_ = track_subscribed;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SignalResponse.track_subscribed)
}
SignalResponse::SignalResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SignalResponse)
}
PROTOBUF_NDEBUG_INLINE SignalResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SignalResponse& from_msg)
      : message_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

SignalResponse::SignalResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SignalResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SignalResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SignalResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (message_case()) {
    case MESSAGE_NOT_SET:
      break;
      case kJoin:
        _impl_.message_.join_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.join_);
        break;
      case kAnswer:
        _impl_.message_.answer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.answer_);
        break;
      case kOffer:
        _impl_.message_.offer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.offer_);
        break;
      case kTrickle:
        _impl_.message_.trickle_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.trickle_);
        break;
      case kUpdate:
        _impl_.message_.update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_);
        break;
      case kTrackPublished:
        _impl_.message_.track_published_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_published_);
        break;
      case kLeave:
        _impl_.message_.leave_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.leave_);
        break;
      case kMute:
        _impl_.message_.mute_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.mute_);
        break;
      case kSpeakersChanged:
        _impl_.message_.speakers_changed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.speakers_changed_);
        break;
      case kRoomUpdate:
        _impl_.message_.room_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.room_update_);
        break;
      case kConnectionQuality:
        _impl_.message_.connection_quality_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.connection_quality_);
        break;
      case kStreamStateUpdate:
        _impl_.message_.stream_state_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.stream_state_update_);
        break;
      case kSubscribedQualityUpdate:
        _impl_.message_.subscribed_quality_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscribed_quality_update_);
        break;
      case kSubscriptionPermissionUpdate:
        _impl_.message_.subscription_permission_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_permission_update_);
        break;
      case kRefreshToken:
        new (&_impl_.message_.refresh_token_) decltype(_impl_.message_.refresh_token_){arena, from._impl_.message_.refresh_token_};
        break;
      case kTrackUnpublished:
        _impl_.message_.track_unpublished_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_unpublished_);
        break;
      case kPong:
        _impl_.message_.pong_ = from._impl_.message_.pong_;
        break;
      case kReconnect:
        _impl_.message_.reconnect_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.reconnect_);
        break;
      case kPongResp:
        _impl_.message_.pong_resp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.pong_resp_);
        break;
      case kSubscriptionResponse:
        _impl_.message_.subscription_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_response_);
        break;
      case kRequestResponse:
        _impl_.message_.request_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.request_response_);
        break;
      case kTrackSubscribed:
        _impl_.message_.track_subscribed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_subscribed_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.SignalResponse)
}
PROTOBUF_NDEBUG_INLINE SignalResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : message_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void SignalResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SignalResponse::~SignalResponse() {
  // @@protoc_insertion_point(destructor:livekit.SignalResponse)
  SharedDtor(*this);
}
inline void SignalResponse::SharedDtor(MessageLite& self) {
  SignalResponse& this_ = static_cast<SignalResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_message()) {
    this_.clear_message();
  }
  this_._impl_.~Impl_();
}

void SignalResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SignalResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (message_case()) {
    case kJoin: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.join_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.join_);
      }
      break;
    }
    case kAnswer: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.answer_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.answer_);
      }
      break;
    }
    case kOffer: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.offer_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.offer_);
      }
      break;
    }
    case kTrickle: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.trickle_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.trickle_);
      }
      break;
    }
    case kUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.update_);
      }
      break;
    }
    case kTrackPublished: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.track_published_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.track_published_);
      }
      break;
    }
    case kLeave: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.leave_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.leave_);
      }
      break;
    }
    case kMute: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.mute_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.mute_);
      }
      break;
    }
    case kSpeakersChanged: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.speakers_changed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.speakers_changed_);
      }
      break;
    }
    case kRoomUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.room_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.room_update_);
      }
      break;
    }
    case kConnectionQuality: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.connection_quality_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.connection_quality_);
      }
      break;
    }
    case kStreamStateUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.stream_state_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.stream_state_update_);
      }
      break;
    }
    case kSubscribedQualityUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.subscribed_quality_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.subscribed_quality_update_);
      }
      break;
    }
    case kSubscriptionPermissionUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.subscription_permission_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.subscription_permission_update_);
      }
      break;
    }
    case kRefreshToken: {
      _impl_.message_.refresh_token_.Destroy();
      break;
    }
    case kTrackUnpublished: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.track_unpublished_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.track_unpublished_);
      }
      break;
    }
    case kPong: {
      // No need to clear
      break;
    }
    case kReconnect: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.reconnect_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.reconnect_);
      }
      break;
    }
    case kPongResp: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.pong_resp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.pong_resp_);
      }
      break;
    }
    case kSubscriptionResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.subscription_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.subscription_response_);
      }
      break;
    }
    case kRequestResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.request_response_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.request_response_);
      }
      break;
    }
    case kTrackSubscribed: {
      if (GetArena() == nullptr) {
        delete _impl_.message_.track_subscribed_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.message_.track_subscribed_);
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


inline void* PROTOBUF_NONNULL SignalResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SignalResponse(arena);
}
constexpr auto SignalResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SignalResponse),
                                            alignof(SignalResponse));
}
constexpr auto SignalResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SignalResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SignalResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SignalResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SignalResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SignalResponse>(), &SignalResponse::ByteSizeLong,
              &SignalResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_._cached_size_),
          false,
      },
      &SignalResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SignalResponse_class_data_ =
            SignalResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SignalResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SignalResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SignalResponse_class_data_.tc_table);
  return SignalResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 22, 20, 60, 2>
SignalResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578752,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    20,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SignalResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SignalResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.JoinResponse join = 1;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.join_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SessionDescription answer = 2;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.answer_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SessionDescription offer = 3;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.offer_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrickleRequest trickle = 4;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.trickle_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ParticipantUpdate update = 5;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.update_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrackPublishedResponse track_published = 6;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.track_published_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.LeaveRequest leave = 8;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.leave_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.MuteTrackRequest mute = 9;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.mute_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SpeakersChanged speakers_changed = 10;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.speakers_changed_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RoomUpdate room_update = 11;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.room_update_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ConnectionQualityUpdate connection_quality = 12;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.connection_quality_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.StreamStateUpdate stream_state_update = 13;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.stream_state_update_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.subscribed_quality_update_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.subscription_permission_update_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string refresh_token = 16;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.refresh_token_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackUnpublishedResponse track_unpublished = 17;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.track_unpublished_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 pong = 18;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.pong_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // .livekit.ReconnectResponse reconnect = 19;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.reconnect_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.Pong pong_resp = 20;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.pong_resp_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SubscriptionResponse subscription_response = 21;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.subscription_response_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.RequestResponse request_response = 22;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.request_response_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrackSubscribed track_subscribed = 23;
    {PROTOBUF_FIELD_OFFSET(SignalResponse, _impl_.message_.track_subscribed_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::JoinResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
      {::_pbi::TcParser::GetTable<::livekit::TrickleRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::ParticipantUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackPublishedResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::LeaveRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::MuteTrackRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::SpeakersChanged>()},
      {::_pbi::TcParser::GetTable<::livekit::RoomUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::ConnectionQualityUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamStateUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::SubscribedQualityUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::SubscriptionPermissionUpdate>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackUnpublishedResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::ReconnectResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::Pong>()},
      {::_pbi::TcParser::GetTable<::livekit::SubscriptionResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::RequestResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackSubscribed>()},
  }},
  {{
    "\26\0\0\0\0\0\0\0\0\0\0\0\0\0\0\15\0\0\0\0\0\0\0\0"
    "livekit.SignalResponse"
    "refresh_token"
  }},
};
PROTOBUF_NOINLINE void SignalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SignalResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SignalResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SignalResponse& this_ = static_cast<const SignalResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SignalResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SignalResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SignalResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.message_case()) {
    case kJoin: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *this_._impl_.message_.join_, this_._impl_.message_.join_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAnswer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.message_.answer_, this_._impl_.message_.answer_->GetCachedSize(), target,
          stream);
      break;
    }
    case kOffer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.message_.offer_, this_._impl_.message_.offer_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrickle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.message_.trickle_, this_._impl_.message_.trickle_->GetCachedSize(), target,
          stream);
      break;
    }
    case kUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.message_.update_, this_._impl_.message_.update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrackPublished: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.message_.track_published_, this_._impl_.message_.track_published_->GetCachedSize(), target,
          stream);
      break;
    }
    case kLeave: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.message_.leave_, this_._impl_.message_.leave_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMute: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.message_.mute_, this_._impl_.message_.mute_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSpeakersChanged: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.message_.speakers_changed_, this_._impl_.message_.speakers_changed_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRoomUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *this_._impl_.message_.room_update_, this_._impl_.message_.room_update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kConnectionQuality: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, *this_._impl_.message_.connection_quality_, this_._impl_.message_.connection_quality_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStreamStateUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          13, *this_._impl_.message_.stream_state_update_, this_._impl_.message_.stream_state_update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSubscribedQualityUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          14, *this_._impl_.message_.subscribed_quality_update_, this_._impl_.message_.subscribed_quality_update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSubscriptionPermissionUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          15, *this_._impl_.message_.subscription_permission_update_, this_._impl_.message_.subscription_permission_update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRefreshToken: {
      const std::string& _s = this_._internal_refresh_token();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SignalResponse.refresh_token");
      target = stream->WriteStringMaybeAliased(16, _s, target);
      break;
    }
    case kTrackUnpublished: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          17, *this_._impl_.message_.track_unpublished_, this_._impl_.message_.track_unpublished_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPong: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          18, this_._internal_pong(), target);
      break;
    }
    case kReconnect: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          19, *this_._impl_.message_.reconnect_, this_._impl_.message_.reconnect_->GetCachedSize(), target,
          stream);
      break;
    }
    case kPongResp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, *this_._impl_.message_.pong_resp_, this_._impl_.message_.pong_resp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSubscriptionResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, *this_._impl_.message_.subscription_response_, this_._impl_.message_.subscription_response_->GetCachedSize(), target,
          stream);
      break;
    }
    case kRequestResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          22, *this_._impl_.message_.request_response_, this_._impl_.message_.request_response_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrackSubscribed: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          23, *this_._impl_.message_.track_subscribed_, this_._impl_.message_.track_subscribed_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SignalResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SignalResponse::ByteSizeLong(const MessageLite& base) {
  const SignalResponse& this_ = static_cast<const SignalResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SignalResponse::ByteSizeLong() const {
  const SignalResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SignalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.message_case()) {
    // .livekit.JoinResponse join = 1;
    case kJoin: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.join_);
      break;
    }
    // .livekit.SessionDescription answer = 2;
    case kAnswer: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.answer_);
      break;
    }
    // .livekit.SessionDescription offer = 3;
    case kOffer: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.offer_);
      break;
    }
    // .livekit.TrickleRequest trickle = 4;
    case kTrickle: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.trickle_);
      break;
    }
    // .livekit.ParticipantUpdate update = 5;
    case kUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.update_);
      break;
    }
    // .livekit.TrackPublishedResponse track_published = 6;
    case kTrackPublished: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.track_published_);
      break;
    }
    // .livekit.LeaveRequest leave = 8;
    case kLeave: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.leave_);
      break;
    }
    // .livekit.MuteTrackRequest mute = 9;
    case kMute: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.mute_);
      break;
    }
    // .livekit.SpeakersChanged speakers_changed = 10;
    case kSpeakersChanged: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.speakers_changed_);
      break;
    }
    // .livekit.RoomUpdate room_update = 11;
    case kRoomUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.room_update_);
      break;
    }
    // .livekit.ConnectionQualityUpdate connection_quality = 12;
    case kConnectionQuality: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.connection_quality_);
      break;
    }
    // .livekit.StreamStateUpdate stream_state_update = 13;
    case kStreamStateUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.stream_state_update_);
      break;
    }
    // .livekit.SubscribedQualityUpdate subscribed_quality_update = 14;
    case kSubscribedQualityUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.subscribed_quality_update_);
      break;
    }
    // .livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;
    case kSubscriptionPermissionUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.subscription_permission_update_);
      break;
    }
    // string refresh_token = 16;
    case kRefreshToken: {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_refresh_token());
      break;
    }
    // .livekit.TrackUnpublishedResponse track_unpublished = 17;
    case kTrackUnpublished: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.track_unpublished_);
      break;
    }
    // int64 pong = 18;
    case kPong: {
      total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                      this_._internal_pong());
      break;
    }
    // .livekit.ReconnectResponse reconnect = 19;
    case kReconnect: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.reconnect_);
      break;
    }
    // .livekit.Pong pong_resp = 20;
    case kPongResp: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.pong_resp_);
      break;
    }
    // .livekit.SubscriptionResponse subscription_response = 21;
    case kSubscriptionResponse: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.subscription_response_);
      break;
    }
    // .livekit.RequestResponse request_response = 22;
    case kRequestResponse: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.request_response_);
      break;
    }
    // .livekit.TrackSubscribed track_subscribed = 23;
    case kTrackSubscribed: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_.track_subscribed_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SignalResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SignalResponse*>(&to_msg);
  auto& from = static_cast<const SignalResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SignalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_message();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kJoin: {
        if (oneof_needs_init) {
          _this->_impl_.message_.join_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.join_);
        } else {
          _this->_impl_.message_.join_->MergeFrom(*from._impl_.message_.join_);
        }
        break;
      }
      case kAnswer: {
        if (oneof_needs_init) {
          _this->_impl_.message_.answer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.answer_);
        } else {
          _this->_impl_.message_.answer_->MergeFrom(*from._impl_.message_.answer_);
        }
        break;
      }
      case kOffer: {
        if (oneof_needs_init) {
          _this->_impl_.message_.offer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.offer_);
        } else {
          _this->_impl_.message_.offer_->MergeFrom(*from._impl_.message_.offer_);
        }
        break;
      }
      case kTrickle: {
        if (oneof_needs_init) {
          _this->_impl_.message_.trickle_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.trickle_);
        } else {
          _this->_impl_.message_.trickle_->MergeFrom(*from._impl_.message_.trickle_);
        }
        break;
      }
      case kUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.update_);
        } else {
          _this->_impl_.message_.update_->MergeFrom(*from._impl_.message_.update_);
        }
        break;
      }
      case kTrackPublished: {
        if (oneof_needs_init) {
          _this->_impl_.message_.track_published_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_published_);
        } else {
          _this->_impl_.message_.track_published_->MergeFrom(*from._impl_.message_.track_published_);
        }
        break;
      }
      case kLeave: {
        if (oneof_needs_init) {
          _this->_impl_.message_.leave_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.leave_);
        } else {
          _this->_impl_.message_.leave_->MergeFrom(*from._impl_.message_.leave_);
        }
        break;
      }
      case kMute: {
        if (oneof_needs_init) {
          _this->_impl_.message_.mute_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.mute_);
        } else {
          _this->_impl_.message_.mute_->MergeFrom(*from._impl_.message_.mute_);
        }
        break;
      }
      case kSpeakersChanged: {
        if (oneof_needs_init) {
          _this->_impl_.message_.speakers_changed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.speakers_changed_);
        } else {
          _this->_impl_.message_.speakers_changed_->MergeFrom(*from._impl_.message_.speakers_changed_);
        }
        break;
      }
      case kRoomUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.room_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.room_update_);
        } else {
          _this->_impl_.message_.room_update_->MergeFrom(*from._impl_.message_.room_update_);
        }
        break;
      }
      case kConnectionQuality: {
        if (oneof_needs_init) {
          _this->_impl_.message_.connection_quality_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.connection_quality_);
        } else {
          _this->_impl_.message_.connection_quality_->MergeFrom(*from._impl_.message_.connection_quality_);
        }
        break;
      }
      case kStreamStateUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.stream_state_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.stream_state_update_);
        } else {
          _this->_impl_.message_.stream_state_update_->MergeFrom(*from._impl_.message_.stream_state_update_);
        }
        break;
      }
      case kSubscribedQualityUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.subscribed_quality_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscribed_quality_update_);
        } else {
          _this->_impl_.message_.subscribed_quality_update_->MergeFrom(*from._impl_.message_.subscribed_quality_update_);
        }
        break;
      }
      case kSubscriptionPermissionUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.message_.subscription_permission_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_permission_update_);
        } else {
          _this->_impl_.message_.subscription_permission_update_->MergeFrom(*from._impl_.message_.subscription_permission_update_);
        }
        break;
      }
      case kRefreshToken: {
        if (oneof_needs_init) {
          _this->_impl_.message_.refresh_token_.InitDefault();
        }
        _this->_impl_.message_.refresh_token_.Set(from._internal_refresh_token(), arena);
        break;
      }
      case kTrackUnpublished: {
        if (oneof_needs_init) {
          _this->_impl_.message_.track_unpublished_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_unpublished_);
        } else {
          _this->_impl_.message_.track_unpublished_->MergeFrom(*from._impl_.message_.track_unpublished_);
        }
        break;
      }
      case kPong: {
        _this->_impl_.message_.pong_ = from._impl_.message_.pong_;
        break;
      }
      case kReconnect: {
        if (oneof_needs_init) {
          _this->_impl_.message_.reconnect_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.reconnect_);
        } else {
          _this->_impl_.message_.reconnect_->MergeFrom(*from._impl_.message_.reconnect_);
        }
        break;
      }
      case kPongResp: {
        if (oneof_needs_init) {
          _this->_impl_.message_.pong_resp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.pong_resp_);
        } else {
          _this->_impl_.message_.pong_resp_->MergeFrom(*from._impl_.message_.pong_resp_);
        }
        break;
      }
      case kSubscriptionResponse: {
        if (oneof_needs_init) {
          _this->_impl_.message_.subscription_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.subscription_response_);
        } else {
          _this->_impl_.message_.subscription_response_->MergeFrom(*from._impl_.message_.subscription_response_);
        }
        break;
      }
      case kRequestResponse: {
        if (oneof_needs_init) {
          _this->_impl_.message_.request_response_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.request_response_);
        } else {
          _this->_impl_.message_.request_response_->MergeFrom(*from._impl_.message_.request_response_);
        }
        break;
      }
      case kTrackSubscribed: {
        if (oneof_needs_init) {
          _this->_impl_.message_.track_subscribed_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.message_.track_subscribed_);
        } else {
          _this->_impl_.message_.track_subscribed_->MergeFrom(*from._impl_.message_.track_subscribed_);
        }
        break;
      }
      case MESSAGE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SignalResponse::CopyFrom(const SignalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SignalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SignalResponse::InternalSwap(SignalResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SignalResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimulcastCodec::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SimulcastCodec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_._has_bits_);
};

SimulcastCodec::SimulcastCodec(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulcastCodec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulcastCodec)
}
PROTOBUF_NDEBUG_INLINE SimulcastCodec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SimulcastCodec& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        codec_(arena, from.codec_),
        cid_(arena, from.cid_) {}

SimulcastCodec::SimulcastCodec(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SimulcastCodec& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulcastCodec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SimulcastCodec* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SimulcastCodec)
}
PROTOBUF_NDEBUG_INLINE SimulcastCodec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        codec_(arena),
        cid_(arena) {}

inline void SimulcastCodec::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SimulcastCodec::~SimulcastCodec() {
  // @@protoc_insertion_point(destructor:livekit.SimulcastCodec)
  SharedDtor(*this);
}
inline void SimulcastCodec::SharedDtor(MessageLite& self) {
  SimulcastCodec& this_ = static_cast<SimulcastCodec&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.codec_.Destroy();
  this_._impl_.cid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SimulcastCodec::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SimulcastCodec(arena);
}
constexpr auto SimulcastCodec::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SimulcastCodec),
                                            alignof(SimulcastCodec));
}
constexpr auto SimulcastCodec::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SimulcastCodec_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SimulcastCodec::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SimulcastCodec>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SimulcastCodec::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SimulcastCodec>(), &SimulcastCodec::ByteSizeLong,
              &SimulcastCodec::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_._cached_size_),
          false,
      },
      &SimulcastCodec::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SimulcastCodec_class_data_ =
            SimulcastCodec::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SimulcastCodec::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SimulcastCodec_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SimulcastCodec_class_data_.tc_table);
  return SimulcastCodec_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2>
SimulcastCodec::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SimulcastCodec_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SimulcastCodec>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string cid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_.cid_)}},
    // string codec = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_.codec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string codec = 1;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_.codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cid = 2;
    {PROTOBUF_FIELD_OFFSET(SimulcastCodec, _impl_.cid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\5\3\0\0\0\0\0"
    "livekit.SimulcastCodec"
    "codec"
    "cid"
  }},
};
PROTOBUF_NOINLINE void SimulcastCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulcastCodec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.codec_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.cid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SimulcastCodec::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SimulcastCodec& this_ = static_cast<const SimulcastCodec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SimulcastCodec::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SimulcastCodec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulcastCodec)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string codec = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_codec().empty()) {
      const std::string& _s = this_._internal_codec();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SimulcastCodec.codec");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string cid = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_cid().empty()) {
      const std::string& _s = this_._internal_cid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SimulcastCodec.cid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulcastCodec)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SimulcastCodec::ByteSizeLong(const MessageLite& base) {
  const SimulcastCodec& this_ = static_cast<const SimulcastCodec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SimulcastCodec::ByteSizeLong() const {
  const SimulcastCodec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SimulcastCodec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string codec = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_codec().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_codec());
      }
    }
    // string cid = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_cid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SimulcastCodec::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimulcastCodec*>(&to_msg);
  auto& from = static_cast<const SimulcastCodec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulcastCodec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_codec().empty()) {
        _this->_internal_set_codec(from._internal_codec());
      } else {
        if (_this->_impl_.codec_.IsDefault()) {
          _this->_internal_set_codec("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_cid().empty()) {
        _this->_internal_set_cid(from._internal_cid());
      } else {
        if (_this->_impl_.cid_.IsDefault()) {
          _this->_internal_set_cid("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimulcastCodec::CopyFrom(const SimulcastCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulcastCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimulcastCodec::InternalSwap(SimulcastCodec* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_, &other->_impl_.codec_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cid_, &other->_impl_.cid_, arena);
}

::google::protobuf::Metadata SimulcastCodec::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddTrackRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddTrackRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_._has_bits_);
};

void AddTrackRequest::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
AddTrackRequest::AddTrackRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AddTrackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.AddTrackRequest)
}
PROTOBUF_NDEBUG_INLINE AddTrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::AddTrackRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layers_{visibility, arena, from.layers_},
        simulcast_codecs_{visibility, arena, from.simulcast_codecs_},
        cid_(arena, from.cid_),
        name_(arena, from.name_),
        sid_(arena, from.sid_),
        stream_(arena, from.stream_) {}

AddTrackRequest::AddTrackRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AddTrackRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AddTrackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddTrackRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, backup_codec_policy_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::backup_codec_policy_));

  // @@protoc_insertion_point(copy_constructor:livekit.AddTrackRequest)
}
PROTOBUF_NDEBUG_INLINE AddTrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        layers_{visibility, arena},
        simulcast_codecs_{visibility, arena},
        cid_(arena),
        name_(arena),
        sid_(arena),
        stream_(arena) {}

inline void AddTrackRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, backup_codec_policy_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::backup_codec_policy_));
}
AddTrackRequest::~AddTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.AddTrackRequest)
  SharedDtor(*this);
}
inline void AddTrackRequest::SharedDtor(MessageLite& self) {
  AddTrackRequest& this_ = static_cast<AddTrackRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.sid_.Destroy();
  this_._impl_.stream_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AddTrackRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AddTrackRequest(arena);
}
constexpr auto AddTrackRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.layers_) +
          decltype(AddTrackRequest::_impl_.layers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.simulcast_codecs_) +
          decltype(AddTrackRequest::_impl_.simulcast_codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AddTrackRequest), alignof(AddTrackRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AddTrackRequest::PlacementNew_,
                                 sizeof(AddTrackRequest),
                                 alignof(AddTrackRequest));
  }
}
constexpr auto AddTrackRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AddTrackRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AddTrackRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AddTrackRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AddTrackRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AddTrackRequest>(), &AddTrackRequest::ByteSizeLong,
              &AddTrackRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_._cached_size_),
          false,
      },
      &AddTrackRequest::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AddTrackRequest_class_data_ =
            AddTrackRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AddTrackRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AddTrackRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AddTrackRequest_class_data_.tc_table);
  return AddTrackRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 2, 64, 2>
AddTrackRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AddTrackRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::AddTrackRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.BackupCodecPolicy backup_codec_policy = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 13, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.backup_codec_policy_)}},
    // string cid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.cid_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.name_)}},
    // .livekit.TrackType type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrackRequest, _impl_.type_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.type_)}},
    // uint32 width = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrackRequest, _impl_.width_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.width_)}},
    // uint32 height = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrackRequest, _impl_.height_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.height_)}},
    // bool muted = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddTrackRequest, _impl_.muted_), 8>(),
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.muted_)}},
    // bool disable_dtx = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddTrackRequest, _impl_.disable_dtx_), 9>(),
     {56, 9, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.disable_dtx_)}},
    // .livekit.TrackSource source = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrackRequest, _impl_.source_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.source_)}},
    // repeated .livekit.VideoLayer layers = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.layers_)}},
    // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 1, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.simulcast_codecs_)}},
    // string sid = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.sid_)}},
    // bool stereo = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddTrackRequest, _impl_.stereo_), 10>(),
     {96, 10, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.stereo_)}},
    // bool disable_red = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AddTrackRequest, _impl_.disable_red_), 11>(),
     {104, 11, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.disable_red_)}},
    // .livekit.Encryption.Type encryption = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddTrackRequest, _impl_.encryption_), 12>(),
     {112, 12, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.encryption_)}},
    // string stream = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 3, 0, PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.stream_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string cid = 1;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.cid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackType type = 3;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.type_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 width = 4;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.width_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 5;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.height_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool muted = 6;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.muted_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool disable_dtx = 7;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.disable_dtx_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.TrackSource source = 8;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.source_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // repeated .livekit.VideoLayer layers = 9;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.layers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.simulcast_codecs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string sid = 11;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.sid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool stereo = 12;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.stereo_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool disable_red = 13;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.disable_red_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.Encryption.Type encryption = 14;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.encryption_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string stream = 15;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.stream_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.BackupCodecPolicy backup_codec_policy = 16;
    {PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.backup_codec_policy_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoLayer>()},
      {::_pbi::TcParser::GetTable<::livekit::SimulcastCodec>()},
  }},
  {{
    "\27\3\4\0\0\0\0\0\0\0\0\3\0\0\0\6\0\0\0\0\0\0\0\0"
    "livekit.AddTrackRequest"
    "cid"
    "name"
    "sid"
    "stream"
  }},
};
PROTOBUF_NOINLINE void AddTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AddTrackRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  _impl_.simulcast_codecs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.cid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.stream_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.source_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.source_));
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    ::memset(&_impl_.muted_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.backup_codec_policy_) -
        reinterpret_cast<char*>(&_impl_.muted_)) + sizeof(_impl_.backup_codec_policy_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AddTrackRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AddTrackRequest& this_ = static_cast<const AddTrackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AddTrackRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AddTrackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AddTrackRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string cid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_cid().empty()) {
      const std::string& _s = this_._internal_cid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AddTrackRequest.cid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AddTrackRequest.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .livekit.TrackType type = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_type(), target);
    }
  }

  // uint32 width = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_width(), target);
    }
  }

  // uint32 height = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_height(), target);
    }
  }

  // bool muted = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_muted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_muted(), target);
    }
  }

  // bool disable_dtx = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_disable_dtx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_disable_dtx(), target);
    }
  }

  // .livekit.TrackSource source = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_source() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_source(), target);
    }
  }

  // repeated .livekit.VideoLayer layers = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_layers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_simulcast_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_simulcast_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string sid = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AddTrackRequest.sid");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  // bool stereo = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_stereo() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_stereo(), target);
    }
  }

  // bool disable_red = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_disable_red() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          13, this_._internal_disable_red(), target);
    }
  }

  // .livekit.Encryption.Type encryption = 14;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_encryption() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          14, this_._internal_encryption(), target);
    }
  }

  // string stream = 15;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_stream().empty()) {
      const std::string& _s = this_._internal_stream();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AddTrackRequest.stream");
      target = stream->WriteStringMaybeAliased(15, _s, target);
    }
  }

  // .livekit.BackupCodecPolicy backup_codec_policy = 16;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (this_._internal_backup_codec_policy() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          16, this_._internal_backup_codec_policy(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AddTrackRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AddTrackRequest::ByteSizeLong(const MessageLite& base) {
  const AddTrackRequest& this_ = static_cast<const AddTrackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AddTrackRequest::ByteSizeLong() const {
  const AddTrackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.AddTrackRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.VideoLayer layers = 9;
    {
      total_size += 1UL * this_._internal_layers_size();
      for (const auto& msg : this_._internal_layers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SimulcastCodec simulcast_codecs = 10;
    {
      total_size += 1UL * this_._internal_simulcast_codecs_size();
      for (const auto& msg : this_._internal_simulcast_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string cid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_cid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cid());
      }
    }
    // string name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string sid = 11;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // string stream = 15;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_stream().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream());
      }
    }
    // .livekit.TrackType type = 3;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
      }
    }
    // uint32 width = 4;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
    // uint32 height = 5;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
    // .livekit.TrackSource source = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_source() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_source());
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    // bool muted = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_muted() != 0) {
        total_size += 2;
      }
    }
    // bool disable_dtx = 7;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_disable_dtx() != 0) {
        total_size += 2;
      }
    }
    // bool stereo = 12;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_stereo() != 0) {
        total_size += 2;
      }
    }
    // bool disable_red = 13;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_disable_red() != 0) {
        total_size += 2;
      }
    }
    // .livekit.Encryption.Type encryption = 14;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_encryption() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_encryption());
      }
    }
    // .livekit.BackupCodecPolicy backup_codec_policy = 16;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_backup_codec_policy() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_backup_codec_policy());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AddTrackRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddTrackRequest*>(&to_msg);
  auto& from = static_cast<const AddTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AddTrackRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  _this->_internal_mutable_simulcast_codecs()->MergeFrom(
      from._internal_simulcast_codecs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_cid().empty()) {
        _this->_internal_set_cid(from._internal_cid());
      } else {
        if (_this->_impl_.cid_.IsDefault()) {
          _this->_internal_set_cid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_stream().empty()) {
        _this->_internal_set_stream(from._internal_stream());
      } else {
        if (_this->_impl_.stream_.IsDefault()) {
          _this->_internal_set_stream("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_type() != 0) {
        _this->_impl_.type_ = from._impl_.type_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_source() != 0) {
        _this->_impl_.source_ = from._impl_.source_;
      }
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_muted() != 0) {
        _this->_impl_.muted_ = from._impl_.muted_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_disable_dtx() != 0) {
        _this->_impl_.disable_dtx_ = from._impl_.disable_dtx_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_stereo() != 0) {
        _this->_impl_.stereo_ = from._impl_.stereo_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_disable_red() != 0) {
        _this->_impl_.disable_red_ = from._impl_.disable_red_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_encryption() != 0) {
        _this->_impl_.encryption_ = from._impl_.encryption_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_backup_codec_policy() != 0) {
        _this->_impl_.backup_codec_policy_ = from._impl_.backup_codec_policy_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddTrackRequest::CopyFrom(const AddTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AddTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddTrackRequest::InternalSwap(AddTrackRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  _impl_.simulcast_codecs_.InternalSwap(&other->_impl_.simulcast_codecs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cid_, &other->_impl_.cid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_, &other->_impl_.stream_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.backup_codec_policy_)
      + sizeof(AddTrackRequest::_impl_.backup_codec_policy_)
      - PROTOBUF_FIELD_OFFSET(AddTrackRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata AddTrackRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrickleRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrickleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_._has_bits_);
};

TrickleRequest::TrickleRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrickleRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrickleRequest)
}
PROTOBUF_NDEBUG_INLINE TrickleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrickleRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        candidateinit_(arena, from.candidateinit_) {}

TrickleRequest::TrickleRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrickleRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrickleRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrickleRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, target_),
           offsetof(Impl_, final_) -
               offsetof(Impl_, target_) +
               sizeof(Impl_::final_));

  // @@protoc_insertion_point(copy_constructor:livekit.TrickleRequest)
}
PROTOBUF_NDEBUG_INLINE TrickleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        candidateinit_(arena) {}

inline void TrickleRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_),
           0,
           offsetof(Impl_, final_) -
               offsetof(Impl_, target_) +
               sizeof(Impl_::final_));
}
TrickleRequest::~TrickleRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrickleRequest)
  SharedDtor(*this);
}
inline void TrickleRequest::SharedDtor(MessageLite& self) {
  TrickleRequest& this_ = static_cast<TrickleRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.candidateinit_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrickleRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrickleRequest(arena);
}
constexpr auto TrickleRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TrickleRequest),
                                            alignof(TrickleRequest));
}
constexpr auto TrickleRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrickleRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrickleRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrickleRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrickleRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrickleRequest>(), &TrickleRequest::ByteSizeLong,
              &TrickleRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_._cached_size_),
          false,
      },
      &TrickleRequest::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrickleRequest_class_data_ =
            TrickleRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrickleRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrickleRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrickleRequest_class_data_.tc_table);
  return TrickleRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 44, 2>
TrickleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TrickleRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrickleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string candidateInit = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.candidateinit_)}},
    // .livekit.SignalTarget target = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TrickleRequest, _impl_.target_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.target_)}},
    // bool final = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrickleRequest, _impl_.final_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.final_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string candidateInit = 1;
    {PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.candidateinit_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.SignalTarget target = 2;
    {PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.target_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool final = 3;
    {PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.final_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\26\15\0\0\0\0\0\0"
    "livekit.TrickleRequest"
    "candidateInit"
  }},
};
PROTOBUF_NOINLINE void TrickleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrickleRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.candidateinit_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.target_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.final_) -
        reinterpret_cast<char*>(&_impl_.target_)) + sizeof(_impl_.final_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrickleRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrickleRequest& this_ = static_cast<const TrickleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrickleRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrickleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrickleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string candidateInit = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_candidateinit().empty()) {
      const std::string& _s = this_._internal_candidateinit();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrickleRequest.candidateInit");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.SignalTarget target = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_target() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_target(), target);
    }
  }

  // bool final = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_final() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_final(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrickleRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrickleRequest::ByteSizeLong(const MessageLite& base) {
  const TrickleRequest& this_ = static_cast<const TrickleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrickleRequest::ByteSizeLong() const {
  const TrickleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrickleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string candidateInit = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_candidateinit().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_candidateinit());
      }
    }
    // .livekit.SignalTarget target = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_target() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_target());
      }
    }
    // bool final = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_final() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrickleRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrickleRequest*>(&to_msg);
  auto& from = static_cast<const TrickleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrickleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_candidateinit().empty()) {
        _this->_internal_set_candidateinit(from._internal_candidateinit());
      } else {
        if (_this->_impl_.candidateinit_.IsDefault()) {
          _this->_internal_set_candidateinit("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_target() != 0) {
        _this->_impl_.target_ = from._impl_.target_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_final() != 0) {
        _this->_impl_.final_ = from._impl_.final_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrickleRequest::CopyFrom(const TrickleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrickleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrickleRequest::InternalSwap(TrickleRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.candidateinit_, &other->_impl_.candidateinit_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.final_)
      + sizeof(TrickleRequest::_impl_.final_)
      - PROTOBUF_FIELD_OFFSET(TrickleRequest, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata TrickleRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MuteTrackRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MuteTrackRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_._has_bits_);
};

MuteTrackRequest::MuteTrackRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MuteTrackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.MuteTrackRequest)
}
PROTOBUF_NDEBUG_INLINE MuteTrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::MuteTrackRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sid_(arena, from.sid_) {}

MuteTrackRequest::MuteTrackRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MuteTrackRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MuteTrackRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MuteTrackRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.muted_ = from._impl_.muted_;

  // @@protoc_insertion_point(copy_constructor:livekit.MuteTrackRequest)
}
PROTOBUF_NDEBUG_INLINE MuteTrackRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        sid_(arena) {}

inline void MuteTrackRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.muted_ = {};
}
MuteTrackRequest::~MuteTrackRequest() {
  // @@protoc_insertion_point(destructor:livekit.MuteTrackRequest)
  SharedDtor(*this);
}
inline void MuteTrackRequest::SharedDtor(MessageLite& self) {
  MuteTrackRequest& this_ = static_cast<MuteTrackRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MuteTrackRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MuteTrackRequest(arena);
}
constexpr auto MuteTrackRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MuteTrackRequest),
                                            alignof(MuteTrackRequest));
}
constexpr auto MuteTrackRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MuteTrackRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MuteTrackRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MuteTrackRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MuteTrackRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MuteTrackRequest>(), &MuteTrackRequest::ByteSizeLong,
              &MuteTrackRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_._cached_size_),
          false,
      },
      &MuteTrackRequest::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MuteTrackRequest_class_data_ =
            MuteTrackRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MuteTrackRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MuteTrackRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MuteTrackRequest_class_data_.tc_table);
  return MuteTrackRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 36, 2>
MuteTrackRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MuteTrackRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::MuteTrackRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool muted = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MuteTrackRequest, _impl_.muted_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_.muted_)}},
    // string sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_.sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string sid = 1;
    {PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_.sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool muted = 2;
    {PROTOBUF_FIELD_OFFSET(MuteTrackRequest, _impl_.muted_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\30\3\0\0\0\0\0\0"
    "livekit.MuteTrackRequest"
    "sid"
  }},
};
PROTOBUF_NOINLINE void MuteTrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.MuteTrackRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.sid_.ClearNonDefaultToEmpty();
  }
  _impl_.muted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MuteTrackRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MuteTrackRequest& this_ = static_cast<const MuteTrackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MuteTrackRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MuteTrackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.MuteTrackRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_sid().empty()) {
      const std::string& _s = this_._internal_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.MuteTrackRequest.sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // bool muted = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_muted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_muted(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.MuteTrackRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MuteTrackRequest::ByteSizeLong(const MessageLite& base) {
  const MuteTrackRequest& this_ = static_cast<const MuteTrackRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MuteTrackRequest::ByteSizeLong() const {
  const MuteTrackRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.MuteTrackRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sid());
      }
    }
    // bool muted = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_muted() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MuteTrackRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MuteTrackRequest*>(&to_msg);
  auto& from = static_cast<const MuteTrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.MuteTrackRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_sid().empty()) {
        _this->_internal_set_sid(from._internal_sid());
      } else {
        if (_this->_impl_.sid_.IsDefault()) {
          _this->_internal_set_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_muted() != 0) {
        _this->_impl_.muted_ = from._impl_.muted_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MuteTrackRequest::CopyFrom(const MuteTrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.MuteTrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MuteTrackRequest::InternalSwap(MuteTrackRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sid_, &other->_impl_.sid_, arena);
  swap(_impl_.muted_, other->_impl_.muted_);
}

::google::protobuf::Metadata MuteTrackRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class JoinResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<JoinResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_._has_bits_);
};

void JoinResponse::clear_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ != nullptr) _impl_.room_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void JoinResponse::clear_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.participant_ != nullptr) _impl_.participant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void JoinResponse::clear_other_participants() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.other_participants_.Clear();
}
void JoinResponse::clear_client_configuration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.client_configuration_ != nullptr) _impl_.client_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void JoinResponse::clear_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_info_ != nullptr) _impl_.server_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void JoinResponse::clear_enabled_publish_codecs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.enabled_publish_codecs_.Clear();
}
JoinResponse::JoinResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, JoinResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.JoinResponse)
}
PROTOBUF_NDEBUG_INLINE JoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::JoinResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        other_participants_{visibility, arena, from.other_participants_},
        ice_servers_{visibility, arena, from.ice_servers_},
        enabled_publish_codecs_{visibility, arena, from.enabled_publish_codecs_},
        server_version_(arena, from.server_version_),
        alternative_url_(arena, from.alternative_url_),
        server_region_(arena, from.server_region_),
        sif_trailer_(arena, from.sif_trailer_) {}

JoinResponse::JoinResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const JoinResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, JoinResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JoinResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.room_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_)
                : nullptr;
  _impl_.participant_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.participant_)
                : nullptr;
  _impl_.client_configuration_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.client_configuration_)
                : nullptr;
  _impl_.server_info_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.server_info_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ping_timeout_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ping_timeout_),
           offsetof(Impl_, ping_interval_) -
               offsetof(Impl_, ping_timeout_) +
               sizeof(Impl_::ping_interval_));

  // @@protoc_insertion_point(copy_constructor:livekit.JoinResponse)
}
PROTOBUF_NDEBUG_INLINE JoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        other_participants_{visibility, arena},
        ice_servers_{visibility, arena},
        enabled_publish_codecs_{visibility, arena},
        server_version_(arena),
        alternative_url_(arena),
        server_region_(arena),
        sif_trailer_(arena) {}

inline void JoinResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_),
           0,
           offsetof(Impl_, ping_interval_) -
               offsetof(Impl_, room_) +
               sizeof(Impl_::ping_interval_));
}
JoinResponse::~JoinResponse() {
  // @@protoc_insertion_point(destructor:livekit.JoinResponse)
  SharedDtor(*this);
}
inline void JoinResponse::SharedDtor(MessageLite& self) {
  JoinResponse& this_ = static_cast<JoinResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.server_version_.Destroy();
  this_._impl_.alternative_url_.Destroy();
  this_._impl_.server_region_.Destroy();
  this_._impl_.sif_trailer_.Destroy();
  delete this_._impl_.room_;
  delete this_._impl_.participant_;
  delete this_._impl_.client_configuration_;
  delete this_._impl_.server_info_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL JoinResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) JoinResponse(arena);
}
constexpr auto JoinResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.other_participants_) +
          decltype(JoinResponse::_impl_.other_participants_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ice_servers_) +
          decltype(JoinResponse::_impl_.ice_servers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.enabled_publish_codecs_) +
          decltype(JoinResponse::_impl_.enabled_publish_codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(JoinResponse), alignof(JoinResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&JoinResponse::PlacementNew_,
                                 sizeof(JoinResponse),
                                 alignof(JoinResponse));
  }
}
constexpr auto JoinResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_JoinResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &JoinResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<JoinResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &JoinResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<JoinResponse>(), &JoinResponse::ByteSizeLong,
              &JoinResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_._cached_size_),
          false,
      },
      &JoinResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        JoinResponse_class_data_ =
            JoinResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL JoinResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&JoinResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(JoinResponse_class_data_.tc_table);
  return JoinResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 7, 79, 2>
JoinResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    JoinResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::JoinResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.Room room = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 4, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.room_)}},
    // .livekit.ParticipantInfo participant = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 5, 1, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.participant_)}},
    // repeated .livekit.ParticipantInfo other_participants = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.other_participants_)}},
    // string server_version = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_version_)}},
    // repeated .livekit.ICEServer ice_servers = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ice_servers_)}},
    // bool subscriber_primary = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JoinResponse, _impl_.subscriber_primary_), 9>(),
     {48, 9, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.subscriber_primary_)}},
    // string alternative_url = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.alternative_url_)}},
    // .livekit.ClientConfiguration client_configuration = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 4, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.client_configuration_)}},
    // string server_region = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_region_)}},
    // int32 ping_timeout = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JoinResponse, _impl_.ping_timeout_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_timeout_)}},
    // int32 ping_interval = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JoinResponse, _impl_.ping_interval_), 11>(),
     {88, 11, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_interval_)}},
    // .livekit.ServerInfo server_info = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 7, 5, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_info_)}},
    // bytes sif_trailer = 13;
    {::_pbi::TcParser::FastBS1,
     {106, 3, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.sif_trailer_)}},
    // repeated .livekit.Codec enabled_publish_codecs = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 6, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.enabled_publish_codecs_)}},
    // bool fast_publish = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JoinResponse, _impl_.fast_publish_), 10>(),
     {120, 10, 0, PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.fast_publish_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.Room room = 1;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.room_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ParticipantInfo participant = 2;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.participant_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.ParticipantInfo other_participants = 3;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.other_participants_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string server_version = 4;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.ICEServer ice_servers = 5;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ice_servers_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool subscriber_primary = 6;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.subscriber_primary_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string alternative_url = 7;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.alternative_url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ClientConfiguration client_configuration = 8;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.client_configuration_), _Internal::kHasBitsOffset + 6, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string server_region = 9;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_region_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 ping_timeout = 10;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_timeout_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 ping_interval = 11;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_interval_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .livekit.ServerInfo server_info = 12;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.server_info_), _Internal::kHasBitsOffset + 7, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes sif_trailer = 13;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.sif_trailer_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .livekit.Codec enabled_publish_codecs = 14;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.enabled_publish_codecs_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool fast_publish = 15;
    {PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.fast_publish_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::Room>()},
      {::_pbi::TcParser::GetTable<::livekit::ParticipantInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::ParticipantInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::ICEServer>()},
      {::_pbi::TcParser::GetTable<::livekit::ClientConfiguration>()},
      {::_pbi::TcParser::GetTable<::livekit::ServerInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::Codec>()},
  }},
  {{
    "\24\0\0\0\16\0\0\17\0\15\0\0\0\0\0\0"
    "livekit.JoinResponse"
    "server_version"
    "alternative_url"
    "server_region"
  }},
};
PROTOBUF_NOINLINE void JoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.JoinResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_participants_.Clear();
  _impl_.ice_servers_.Clear();
  _impl_.enabled_publish_codecs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.server_version_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.alternative_url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.server_region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.sif_trailer_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.room_ != nullptr);
      _impl_.room_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.participant_ != nullptr);
      _impl_.participant_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.client_configuration_ != nullptr);
      _impl_.client_configuration_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.server_info_ != nullptr);
      _impl_.server_info_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    ::memset(&_impl_.ping_timeout_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ping_interval_) -
        reinterpret_cast<char*>(&_impl_.ping_timeout_)) + sizeof(_impl_.ping_interval_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL JoinResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const JoinResponse& this_ = static_cast<const JoinResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL JoinResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const JoinResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.JoinResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.Room room = 1;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.room_, this_._impl_.room_->GetCachedSize(), target,
        stream);
  }

  // .livekit.ParticipantInfo participant = 2;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.participant_, this_._impl_.participant_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.ParticipantInfo other_participants = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_other_participants_size());
       i < n; i++) {
    const auto& repfield = this_._internal_other_participants().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string server_version = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!this_._internal_server_version().empty()) {
      const std::string& _s = this_._internal_server_version();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.JoinResponse.server_version");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // repeated .livekit.ICEServer ice_servers = 5;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_ice_servers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_ice_servers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            5, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool subscriber_primary = 6;
  if ((cached_has_bits & 0x00000200u) != 0) {
    if (this_._internal_subscriber_primary() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_subscriber_primary(), target);
    }
  }

  // string alternative_url = 7;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_alternative_url().empty()) {
      const std::string& _s = this_._internal_alternative_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.JoinResponse.alternative_url");
      target = stream->WriteStringMaybeAliased(7, _s, target);
    }
  }

  // .livekit.ClientConfiguration client_configuration = 8;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.client_configuration_, this_._impl_.client_configuration_->GetCachedSize(), target,
        stream);
  }

  // string server_region = 9;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_server_region().empty()) {
      const std::string& _s = this_._internal_server_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.JoinResponse.server_region");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // int32 ping_timeout = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (this_._internal_ping_timeout() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
              stream, this_._internal_ping_timeout(), target);
    }
  }

  // int32 ping_interval = 11;
  if ((cached_has_bits & 0x00000800u) != 0) {
    if (this_._internal_ping_interval() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
              stream, this_._internal_ping_interval(), target);
    }
  }

  // .livekit.ServerInfo server_info = 12;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.server_info_, this_._impl_.server_info_->GetCachedSize(), target,
        stream);
  }

  // bytes sif_trailer = 13;
  if ((cached_has_bits & 0x00000008u) != 0) {
    if (!this_._internal_sif_trailer().empty()) {
      const std::string& _s = this_._internal_sif_trailer();
      target = stream->WriteBytesMaybeAliased(13, _s, target);
    }
  }

  // repeated .livekit.Codec enabled_publish_codecs = 14;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_enabled_publish_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_enabled_publish_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            14, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool fast_publish = 15;
  if ((cached_has_bits & 0x00000400u) != 0) {
    if (this_._internal_fast_publish() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          15, this_._internal_fast_publish(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.JoinResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t JoinResponse::ByteSizeLong(const MessageLite& base) {
  const JoinResponse& this_ = static_cast<const JoinResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t JoinResponse::ByteSizeLong() const {
  const JoinResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.JoinResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.ParticipantInfo other_participants = 3;
    {
      total_size += 1UL * this_._internal_other_participants_size();
      for (const auto& msg : this_._internal_other_participants()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ICEServer ice_servers = 5;
    {
      total_size += 1UL * this_._internal_ice_servers_size();
      for (const auto& msg : this_._internal_ice_servers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.Codec enabled_publish_codecs = 14;
    {
      total_size += 1UL * this_._internal_enabled_publish_codecs_size();
      for (const auto& msg : this_._internal_enabled_publish_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string server_version = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_server_version().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_server_version());
      }
    }
    // string alternative_url = 7;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_alternative_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_alternative_url());
      }
    }
    // string server_region = 9;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_server_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_server_region());
      }
    }
    // bytes sif_trailer = 13;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_sif_trailer().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                        this_._internal_sif_trailer());
      }
    }
    // .livekit.Room room = 1;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.room_);
    }
    // .livekit.ParticipantInfo participant = 2;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.participant_);
    }
    // .livekit.ClientConfiguration client_configuration = 8;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.client_configuration_);
    }
    // .livekit.ServerInfo server_info = 12;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.server_info_);
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    // int32 ping_timeout = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_ping_timeout() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ping_timeout());
      }
    }
    // bool subscriber_primary = 6;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_subscriber_primary() != 0) {
        total_size += 2;
      }
    }
    // bool fast_publish = 15;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_fast_publish() != 0) {
        total_size += 2;
      }
    }
    // int32 ping_interval = 11;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_ping_interval() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_ping_interval());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void JoinResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JoinResponse*>(&to_msg);
  auto& from = static_cast<const JoinResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.JoinResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_other_participants()->MergeFrom(
      from._internal_other_participants());
  _this->_internal_mutable_ice_servers()->MergeFrom(
      from._internal_ice_servers());
  _this->_internal_mutable_enabled_publish_codecs()->MergeFrom(
      from._internal_enabled_publish_codecs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_server_version().empty()) {
        _this->_internal_set_server_version(from._internal_server_version());
      } else {
        if (_this->_impl_.server_version_.IsDefault()) {
          _this->_internal_set_server_version("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_alternative_url().empty()) {
        _this->_internal_set_alternative_url(from._internal_alternative_url());
      } else {
        if (_this->_impl_.alternative_url_.IsDefault()) {
          _this->_internal_set_alternative_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_server_region().empty()) {
        _this->_internal_set_server_region(from._internal_server_region());
      } else {
        if (_this->_impl_.server_region_.IsDefault()) {
          _this->_internal_set_server_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_sif_trailer().empty()) {
        _this->_internal_set_sif_trailer(from._internal_sif_trailer());
      } else {
        if (_this->_impl_.sif_trailer_.IsDefault()) {
          _this->_internal_set_sif_trailer("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.room_ != nullptr);
      if (_this->_impl_.room_ == nullptr) {
        _this->_impl_.room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_);
      } else {
        _this->_impl_.room_->MergeFrom(*from._impl_.room_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.participant_ != nullptr);
      if (_this->_impl_.participant_ == nullptr) {
        _this->_impl_.participant_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.participant_);
      } else {
        _this->_impl_.participant_->MergeFrom(*from._impl_.participant_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.client_configuration_ != nullptr);
      if (_this->_impl_.client_configuration_ == nullptr) {
        _this->_impl_.client_configuration_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.client_configuration_);
      } else {
        _this->_impl_.client_configuration_->MergeFrom(*from._impl_.client_configuration_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.server_info_ != nullptr);
      if (_this->_impl_.server_info_ == nullptr) {
        _this->_impl_.server_info_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.server_info_);
      } else {
        _this->_impl_.server_info_->MergeFrom(*from._impl_.server_info_);
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_ping_timeout() != 0) {
        _this->_impl_.ping_timeout_ = from._impl_.ping_timeout_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_subscriber_primary() != 0) {
        _this->_impl_.subscriber_primary_ = from._impl_.subscriber_primary_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_fast_publish() != 0) {
        _this->_impl_.fast_publish_ = from._impl_.fast_publish_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_ping_interval() != 0) {
        _this->_impl_.ping_interval_ = from._impl_.ping_interval_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JoinResponse::CopyFrom(const JoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.JoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JoinResponse::InternalSwap(JoinResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.other_participants_.InternalSwap(&other->_impl_.other_participants_);
  _impl_.ice_servers_.InternalSwap(&other->_impl_.ice_servers_);
  _impl_.enabled_publish_codecs_.InternalSwap(&other->_impl_.enabled_publish_codecs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_version_, &other->_impl_.server_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alternative_url_, &other->_impl_.alternative_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_region_, &other->_impl_.server_region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sif_trailer_, &other->_impl_.sif_trailer_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.ping_interval_)
      + sizeof(JoinResponse::_impl_.ping_interval_)
      - PROTOBUF_FIELD_OFFSET(JoinResponse, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::google::protobuf::Metadata JoinResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReconnectResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReconnectResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_._has_bits_);
};

void ReconnectResponse::clear_client_configuration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.client_configuration_ != nullptr) _impl_.client_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReconnectResponse::ReconnectResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReconnectResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ReconnectResponse)
}
PROTOBUF_NDEBUG_INLINE ReconnectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ReconnectResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ice_servers_{visibility, arena, from.ice_servers_} {}

ReconnectResponse::ReconnectResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ReconnectResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ReconnectResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReconnectResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.client_configuration_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.client_configuration_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:livekit.ReconnectResponse)
}
PROTOBUF_NDEBUG_INLINE ReconnectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ice_servers_{visibility, arena} {}

inline void ReconnectResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.client_configuration_ = {};
}
ReconnectResponse::~ReconnectResponse() {
  // @@protoc_insertion_point(destructor:livekit.ReconnectResponse)
  SharedDtor(*this);
}
inline void ReconnectResponse::SharedDtor(MessageLite& self) {
  ReconnectResponse& this_ = static_cast<ReconnectResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.client_configuration_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ReconnectResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ReconnectResponse(arena);
}
constexpr auto ReconnectResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_.ice_servers_) +
          decltype(ReconnectResponse::_impl_.ice_servers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReconnectResponse), alignof(ReconnectResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReconnectResponse::PlacementNew_,
                                 sizeof(ReconnectResponse),
                                 alignof(ReconnectResponse));
  }
}
constexpr auto ReconnectResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ReconnectResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ReconnectResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ReconnectResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ReconnectResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ReconnectResponse>(), &ReconnectResponse::ByteSizeLong,
              &ReconnectResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_._cached_size_),
          false,
      },
      &ReconnectResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ReconnectResponse_class_data_ =
            ReconnectResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ReconnectResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ReconnectResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ReconnectResponse_class_data_.tc_table);
  return ReconnectResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
ReconnectResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ReconnectResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ReconnectResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.ClientConfiguration client_configuration = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_.client_configuration_)}},
    // repeated .livekit.ICEServer ice_servers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_.ice_servers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.ICEServer ice_servers = 1;
    {PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_.ice_servers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.ClientConfiguration client_configuration = 2;
    {PROTOBUF_FIELD_OFFSET(ReconnectResponse, _impl_.client_configuration_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ICEServer>()},
      {::_pbi::TcParser::GetTable<::livekit::ClientConfiguration>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ReconnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ReconnectResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ice_servers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.client_configuration_ != nullptr);
    _impl_.client_configuration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ReconnectResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ReconnectResponse& this_ = static_cast<const ReconnectResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ReconnectResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ReconnectResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ReconnectResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.ICEServer ice_servers = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_ice_servers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_ice_servers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.ClientConfiguration client_configuration = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.client_configuration_, this_._impl_.client_configuration_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ReconnectResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ReconnectResponse::ByteSizeLong(const MessageLite& base) {
  const ReconnectResponse& this_ = static_cast<const ReconnectResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ReconnectResponse::ByteSizeLong() const {
  const ReconnectResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ReconnectResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.ICEServer ice_servers = 1;
    {
      total_size += 1UL * this_._internal_ice_servers_size();
      for (const auto& msg : this_._internal_ice_servers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // .livekit.ClientConfiguration client_configuration = 2;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.client_configuration_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ReconnectResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReconnectResponse*>(&to_msg);
  auto& from = static_cast<const ReconnectResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ReconnectResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ice_servers()->MergeFrom(
      from._internal_ice_servers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.client_configuration_ != nullptr);
    if (_this->_impl_.client_configuration_ == nullptr) {
      _this->_impl_.client_configuration_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.client_configuration_);
    } else {
      _this->_impl_.client_configuration_->MergeFrom(*from._impl_.client_configuration_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReconnectResponse::CopyFrom(const ReconnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ReconnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReconnectResponse::InternalSwap(ReconnectResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ice_servers_.InternalSwap(&other->_impl_.ice_servers_);
  swap(_impl_.client_configuration_, other->_impl_.client_configuration_);
}

::google::protobuf::Metadata ReconnectResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackPublishedResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackPublishedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_._has_bits_);
};

void TrackPublishedResponse::clear_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.track_ != nullptr) _impl_.track_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrackPublishedResponse::TrackPublishedResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackPublishedResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPublishedResponse)
}
PROTOBUF_NDEBUG_INLINE TrackPublishedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackPublishedResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cid_(arena, from.cid_) {}

TrackPublishedResponse::TrackPublishedResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackPublishedResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackPublishedResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackPublishedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.track_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.track_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:livekit.TrackPublishedResponse)
}
PROTOBUF_NDEBUG_INLINE TrackPublishedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        cid_(arena) {}

inline void TrackPublishedResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.track_ = {};
}
TrackPublishedResponse::~TrackPublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackPublishedResponse)
  SharedDtor(*this);
}
inline void TrackPublishedResponse::SharedDtor(MessageLite& self) {
  TrackPublishedResponse& this_ = static_cast<TrackPublishedResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.cid_.Destroy();
  delete this_._impl_.track_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrackPublishedResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackPublishedResponse(arena);
}
constexpr auto TrackPublishedResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TrackPublishedResponse),
                                            alignof(TrackPublishedResponse));
}
constexpr auto TrackPublishedResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackPublishedResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackPublishedResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackPublishedResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackPublishedResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackPublishedResponse>(), &TrackPublishedResponse::ByteSizeLong,
              &TrackPublishedResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_._cached_size_),
          false,
      },
      &TrackPublishedResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackPublishedResponse_class_data_ =
            TrackPublishedResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackPublishedResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackPublishedResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackPublishedResponse_class_data_.tc_table);
  return TrackPublishedResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 42, 2>
TrackPublishedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrackPublishedResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackPublishedResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.TrackInfo track = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_.track_)}},
    // string cid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_.cid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string cid = 1;
    {PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_.cid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackInfo track = 2;
    {PROTOBUF_FIELD_OFFSET(TrackPublishedResponse, _impl_.track_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::TrackInfo>()},
  }},
  {{
    "\36\3\0\0\0\0\0\0"
    "livekit.TrackPublishedResponse"
    "cid"
  }},
};
PROTOBUF_NOINLINE void TrackPublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPublishedResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.cid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.track_ != nullptr);
      _impl_.track_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackPublishedResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackPublishedResponse& this_ = static_cast<const TrackPublishedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackPublishedResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackPublishedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPublishedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string cid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_cid().empty()) {
      const std::string& _s = this_._internal_cid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackPublishedResponse.cid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.TrackInfo track = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.track_, this_._impl_.track_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPublishedResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackPublishedResponse::ByteSizeLong(const MessageLite& base) {
  const TrackPublishedResponse& this_ = static_cast<const TrackPublishedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackPublishedResponse::ByteSizeLong() const {
  const TrackPublishedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackPublishedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string cid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_cid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_cid());
      }
    }
    // .livekit.TrackInfo track = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.track_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackPublishedResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackPublishedResponse*>(&to_msg);
  auto& from = static_cast<const TrackPublishedResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPublishedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_cid().empty()) {
        _this->_internal_set_cid(from._internal_cid());
      } else {
        if (_this->_impl_.cid_.IsDefault()) {
          _this->_internal_set_cid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.track_ != nullptr);
      if (_this->_impl_.track_ == nullptr) {
        _this->_impl_.track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.track_);
      } else {
        _this->_impl_.track_->MergeFrom(*from._impl_.track_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPublishedResponse::CopyFrom(const TrackPublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackPublishedResponse::InternalSwap(TrackPublishedResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cid_, &other->_impl_.cid_, arena);
  swap(_impl_.track_, other->_impl_.track_);
}

::google::protobuf::Metadata TrackPublishedResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackUnpublishedResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackUnpublishedResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackUnpublishedResponse, _impl_._has_bits_);
};

TrackUnpublishedResponse::TrackUnpublishedResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackUnpublishedResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackUnpublishedResponse)
}
PROTOBUF_NDEBUG_INLINE TrackUnpublishedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackUnpublishedResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sid_(arena, from.track_sid_) {}

TrackUnpublishedResponse::TrackUnpublishedResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackUnpublishedResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackUnpublishedResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackUnpublishedResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.TrackUnpublishedResponse)
}
PROTOBUF_NDEBUG_INLINE TrackUnpublishedResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sid_(arena) {}

inline void TrackUnpublishedResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrackUnpublishedResponse::~TrackUnpublishedResponse() {
  // @@protoc_insertion_point(destructor:livekit.TrackUnpublishedResponse)
  SharedDtor(*this);
}
inline void TrackUnpublishedResponse::SharedDtor(MessageLite& self) {
  TrackUnpublishedResponse& this_ = static_cast<TrackUnpublishedResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrackUnpublishedResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackUnpublishedResponse(arena);
}
constexpr auto TrackUnpublishedResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TrackUnpublishedResponse),
                                            alignof(TrackUnpublishedResponse));
}
constexpr auto TrackUnpublishedResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackUnpublishedResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackUnpublishedResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackUnpublishedResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackUnpublishedResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackUnpublishedResponse>(), &TrackUnpublishedResponse::ByteSizeLong,
              &TrackUnpublishedResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackUnpublishedResponse, _impl_._cached_size_),
          false,
      },
      &TrackUnpublishedResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackUnpublishedResponse_class_data_ =
            TrackUnpublishedResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackUnpublishedResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackUnpublishedResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackUnpublishedResponse_class_data_.tc_table);
  return TrackUnpublishedResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 50, 2>
TrackUnpublishedResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackUnpublishedResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TrackUnpublishedResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackUnpublishedResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackUnpublishedResponse, _impl_.track_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(TrackUnpublishedResponse, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\11\0\0\0\0\0\0"
    "livekit.TrackUnpublishedResponse"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void TrackUnpublishedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackUnpublishedResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackUnpublishedResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackUnpublishedResponse& this_ = static_cast<const TrackUnpublishedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackUnpublishedResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackUnpublishedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackUnpublishedResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackUnpublishedResponse.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackUnpublishedResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackUnpublishedResponse::ByteSizeLong(const MessageLite& base) {
  const TrackUnpublishedResponse& this_ = static_cast<const TrackUnpublishedResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackUnpublishedResponse::ByteSizeLong() const {
  const TrackUnpublishedResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackUnpublishedResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string track_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackUnpublishedResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackUnpublishedResponse*>(&to_msg);
  auto& from = static_cast<const TrackUnpublishedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackUnpublishedResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_track_sid().empty()) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    } else {
      if (_this->_impl_.track_sid_.IsDefault()) {
        _this->_internal_set_track_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackUnpublishedResponse::CopyFrom(const TrackUnpublishedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackUnpublishedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackUnpublishedResponse::InternalSwap(TrackUnpublishedResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
}

::google::protobuf::Metadata TrackUnpublishedResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SessionDescription::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SessionDescription>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_._has_bits_);
};

SessionDescription::SessionDescription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SessionDescription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SessionDescription)
}
PROTOBUF_NDEBUG_INLINE SessionDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SessionDescription& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_(arena, from.type_),
        sdp_(arena, from.sdp_) {}

SessionDescription::SessionDescription(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SessionDescription& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SessionDescription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SessionDescription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SessionDescription)
}
PROTOBUF_NDEBUG_INLINE SessionDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        type_(arena),
        sdp_(arena) {}

inline void SessionDescription::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SessionDescription::~SessionDescription() {
  // @@protoc_insertion_point(destructor:livekit.SessionDescription)
  SharedDtor(*this);
}
inline void SessionDescription::SharedDtor(MessageLite& self) {
  SessionDescription& this_ = static_cast<SessionDescription&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  this_._impl_.sdp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SessionDescription::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SessionDescription(arena);
}
constexpr auto SessionDescription::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SessionDescription),
                                            alignof(SessionDescription));
}
constexpr auto SessionDescription::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SessionDescription_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SessionDescription::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SessionDescription>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SessionDescription::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SessionDescription>(), &SessionDescription::ByteSizeLong,
              &SessionDescription::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_._cached_size_),
          false,
      },
      &SessionDescription::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SessionDescription_class_data_ =
            SessionDescription::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SessionDescription::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SessionDescription_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SessionDescription_class_data_.tc_table);
  return SessionDescription_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 42, 2>
SessionDescription::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SessionDescription_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SessionDescription>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string sdp = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_.sdp_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_.type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sdp = 2;
    {PROTOBUF_FIELD_OFFSET(SessionDescription, _impl_.sdp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\4\3\0\0\0\0\0"
    "livekit.SessionDescription"
    "type"
    "sdp"
  }},
};
PROTOBUF_NOINLINE void SessionDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SessionDescription)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.sdp_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SessionDescription::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SessionDescription& this_ = static_cast<const SessionDescription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SessionDescription::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SessionDescription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SessionDescription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_type().empty()) {
      const std::string& _s = this_._internal_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SessionDescription.type");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string sdp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_sdp().empty()) {
      const std::string& _s = this_._internal_sdp();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SessionDescription.sdp");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SessionDescription)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SessionDescription::ByteSizeLong(const MessageLite& base) {
  const SessionDescription& this_ = static_cast<const SessionDescription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SessionDescription::ByteSizeLong() const {
  const SessionDescription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SessionDescription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string type = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_type());
      }
    }
    // string sdp = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_sdp().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_sdp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SessionDescription::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SessionDescription*>(&to_msg);
  auto& from = static_cast<const SessionDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SessionDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_type().empty()) {
        _this->_internal_set_type(from._internal_type());
      } else {
        if (_this->_impl_.type_.IsDefault()) {
          _this->_internal_set_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_sdp().empty()) {
        _this->_internal_set_sdp(from._internal_sdp());
      } else {
        if (_this->_impl_.sdp_.IsDefault()) {
          _this->_internal_set_sdp("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SessionDescription::CopyFrom(const SessionDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SessionDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SessionDescription::InternalSwap(SessionDescription* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdp_, &other->_impl_.sdp_, arena);
}

::google::protobuf::Metadata SessionDescription::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ParticipantUpdate::_Internal {
 public:
};

void ParticipantUpdate::clear_participants() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participants_.Clear();
}
ParticipantUpdate::ParticipantUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantUpdate)
}
PROTOBUF_NDEBUG_INLINE ParticipantUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ParticipantUpdate& from_msg)
      : participants_{visibility, arena, from.participants_},
        _cached_size_{0} {}

ParticipantUpdate::ParticipantUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ParticipantUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ParticipantUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantUpdate)
}
PROTOBUF_NDEBUG_INLINE ParticipantUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : participants_{visibility, arena},
        _cached_size_{0} {}

inline void ParticipantUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ParticipantUpdate::~ParticipantUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantUpdate)
  SharedDtor(*this);
}
inline void ParticipantUpdate::SharedDtor(MessageLite& self) {
  ParticipantUpdate& this_ = static_cast<ParticipantUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ParticipantUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantUpdate(arena);
}
constexpr auto ParticipantUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ParticipantUpdate, _impl_.participants_) +
          decltype(ParticipantUpdate::_impl_.participants_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ParticipantUpdate), alignof(ParticipantUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ParticipantUpdate::PlacementNew_,
                                 sizeof(ParticipantUpdate),
                                 alignof(ParticipantUpdate));
  }
}
constexpr auto ParticipantUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ParticipantUpdate>(), &ParticipantUpdate::ByteSizeLong,
              &ParticipantUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantUpdate, _impl_._cached_size_),
          false,
      },
      &ParticipantUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantUpdate_class_data_ =
            ParticipantUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantUpdate_class_data_.tc_table);
  return ParticipantUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ParticipantUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ParticipantUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.ParticipantInfo participants = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ParticipantUpdate, _impl_.participants_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.ParticipantInfo participants = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantUpdate, _impl_.participants_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ParticipantInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ParticipantUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.participants_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ParticipantUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ParticipantUpdate& this_ = static_cast<const ParticipantUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ParticipantUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ParticipantUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.ParticipantInfo participants = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_participants_size());
       i < n; i++) {
    const auto& repfield = this_._internal_participants().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ParticipantUpdate::ByteSizeLong(const MessageLite& base) {
  const ParticipantUpdate& this_ = static_cast<const ParticipantUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ParticipantUpdate::ByteSizeLong() const {
  const ParticipantUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.ParticipantInfo participants = 1;
    {
      total_size += 1UL * this_._internal_participants_size();
      for (const auto& msg : this_._internal_participants()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ParticipantUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ParticipantUpdate*>(&to_msg);
  auto& from = static_cast<const ParticipantUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_participants()->MergeFrom(
      from._internal_participants());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantUpdate::CopyFrom(const ParticipantUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ParticipantUpdate::InternalSwap(ParticipantUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.participants_.InternalSwap(&other->_impl_.participants_);
}

::google::protobuf::Metadata ParticipantUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateSubscription::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateSubscription>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_._has_bits_);
};

void UpdateSubscription::clear_participant_tracks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.participant_tracks_.Clear();
}
UpdateSubscription::UpdateSubscription(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateSubscription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateSubscription)
}
PROTOBUF_NDEBUG_INLINE UpdateSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateSubscription& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sids_{visibility, arena, from.track_sids_},
        participant_tracks_{visibility, arena, from.participant_tracks_} {}

UpdateSubscription::UpdateSubscription(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateSubscription& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateSubscription_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateSubscription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.subscribe_ = from._impl_.subscribe_;

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateSubscription)
}
PROTOBUF_NDEBUG_INLINE UpdateSubscription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sids_{visibility, arena},
        participant_tracks_{visibility, arena} {}

inline void UpdateSubscription::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscribe_ = {};
}
UpdateSubscription::~UpdateSubscription() {
  // @@protoc_insertion_point(destructor:livekit.UpdateSubscription)
  SharedDtor(*this);
}
inline void UpdateSubscription::SharedDtor(MessageLite& self) {
  UpdateSubscription& this_ = static_cast<UpdateSubscription&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateSubscription::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateSubscription(arena);
}
constexpr auto UpdateSubscription::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.track_sids_) +
          decltype(UpdateSubscription::_impl_.track_sids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.participant_tracks_) +
          decltype(UpdateSubscription::_impl_.participant_tracks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(UpdateSubscription), alignof(UpdateSubscription), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateSubscription::PlacementNew_,
                                 sizeof(UpdateSubscription),
                                 alignof(UpdateSubscription));
  }
}
constexpr auto UpdateSubscription::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateSubscription_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateSubscription::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateSubscription>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateSubscription::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateSubscription>(), &UpdateSubscription::ByteSizeLong,
              &UpdateSubscription::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_._cached_size_),
          false,
      },
      &UpdateSubscription::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateSubscription_class_data_ =
            UpdateSubscription::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateSubscription::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateSubscription_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateSubscription_class_data_.tc_table);
  return UpdateSubscription_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 45, 2>
UpdateSubscription::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    UpdateSubscription_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateSubscription>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string track_sids = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.track_sids_)}},
    // bool subscribe = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateSubscription, _impl_.subscribe_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.subscribe_)}},
    // repeated .livekit.ParticipantTracks participant_tracks = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.participant_tracks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string track_sids = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.track_sids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool subscribe = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.subscribe_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .livekit.ParticipantTracks participant_tracks = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateSubscription, _impl_.participant_tracks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ParticipantTracks>()},
  }},
  {{
    "\32\12\0\0\0\0\0\0"
    "livekit.UpdateSubscription"
    "track_sids"
  }},
};
PROTOBUF_NOINLINE void UpdateSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateSubscription)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  _impl_.participant_tracks_.Clear();
  _impl_.subscribe_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateSubscription::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateSubscription& this_ = static_cast<const UpdateSubscription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateSubscription::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateSubscription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateSubscription)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this_._internal_track_sids_size(); i < n; ++i) {
    const auto& s = this_._internal_track_sids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateSubscription.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool subscribe = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_subscribe() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_subscribe(), target);
    }
  }

  // repeated .livekit.ParticipantTracks participant_tracks = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_participant_tracks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_participant_tracks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateSubscription)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateSubscription::ByteSizeLong(const MessageLite& base) {
  const UpdateSubscription& this_ = static_cast<const UpdateSubscription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateSubscription::ByteSizeLong() const {
  const UpdateSubscription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateSubscription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string track_sids = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_track_sids().size());
      for (int i = 0, n = this_._internal_track_sids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_track_sids().Get(i));
      }
    }
    // repeated .livekit.ParticipantTracks participant_tracks = 3;
    {
      total_size += 1UL * this_._internal_participant_tracks_size();
      for (const auto& msg : this_._internal_participant_tracks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // bool subscribe = 2;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_subscribe() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateSubscription::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateSubscription*>(&to_msg);
  auto& from = static_cast<const UpdateSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateSubscription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_track_sids()->MergeFrom(from._internal_track_sids());
  _this->_internal_mutable_participant_tracks()->MergeFrom(
      from._internal_participant_tracks());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_subscribe() != 0) {
      _this->_impl_.subscribe_ = from._impl_.subscribe_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSubscription::CopyFrom(const UpdateSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateSubscription::InternalSwap(UpdateSubscription* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  _impl_.participant_tracks_.InternalSwap(&other->_impl_.participant_tracks_);
  swap(_impl_.subscribe_, other->_impl_.subscribe_);
}

::google::protobuf::Metadata UpdateSubscription::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateTrackSettings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateTrackSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_._has_bits_);
};

UpdateTrackSettings::UpdateTrackSettings(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateTrackSettings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateTrackSettings)
}
PROTOBUF_NDEBUG_INLINE UpdateTrackSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateTrackSettings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sids_{visibility, arena, from.track_sids_} {}

UpdateTrackSettings::UpdateTrackSettings(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateTrackSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateTrackSettings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateTrackSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, disabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, disabled_),
           offsetof(Impl_, priority_) -
               offsetof(Impl_, disabled_) +
               sizeof(Impl_::priority_));

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateTrackSettings)
}
PROTOBUF_NDEBUG_INLINE UpdateTrackSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sids_{visibility, arena} {}

inline void UpdateTrackSettings::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, disabled_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, disabled_) +
               sizeof(Impl_::priority_));
}
UpdateTrackSettings::~UpdateTrackSettings() {
  // @@protoc_insertion_point(destructor:livekit.UpdateTrackSettings)
  SharedDtor(*this);
}
inline void UpdateTrackSettings::SharedDtor(MessageLite& self) {
  UpdateTrackSettings& this_ = static_cast<UpdateTrackSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateTrackSettings::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateTrackSettings(arena);
}
constexpr auto UpdateTrackSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.track_sids_) +
          decltype(UpdateTrackSettings::_impl_.track_sids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(UpdateTrackSettings), alignof(UpdateTrackSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateTrackSettings::PlacementNew_,
                                 sizeof(UpdateTrackSettings),
                                 alignof(UpdateTrackSettings));
  }
}
constexpr auto UpdateTrackSettings::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateTrackSettings_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateTrackSettings::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateTrackSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateTrackSettings::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateTrackSettings>(), &UpdateTrackSettings::ByteSizeLong,
              &UpdateTrackSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_._cached_size_),
          false,
      },
      &UpdateTrackSettings::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateTrackSettings_class_data_ =
            UpdateTrackSettings::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateTrackSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateTrackSettings_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateTrackSettings_class_data_.tc_table);
  return UpdateTrackSettings_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 46, 2>
UpdateTrackSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967042,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateTrackSettings_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateTrackSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 priority = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTrackSettings, _impl_.priority_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.priority_)}},
    // repeated string track_sids = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.track_sids_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disabled = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateTrackSettings, _impl_.disabled_), 0>(),
     {24, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.disabled_)}},
    // .livekit.VideoQuality quality = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTrackSettings, _impl_.quality_), 1>(),
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.quality_)}},
    // uint32 width = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTrackSettings, _impl_.width_), 2>(),
     {40, 2, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.width_)}},
    // uint32 height = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTrackSettings, _impl_.height_), 3>(),
     {48, 3, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.height_)}},
    // uint32 fps = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateTrackSettings, _impl_.fps_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.fps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string track_sids = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.track_sids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool disabled = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.disabled_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.VideoQuality quality = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.quality_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 width = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.width_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 6;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.height_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 fps = 7;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.fps_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 priority = 8;
    {PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.priority_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\33\12\0\0\0\0\0\0"
    "livekit.UpdateTrackSettings"
    "track_sids"
  }},
};
PROTOBUF_NOINLINE void UpdateTrackSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateTrackSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    ::memset(&_impl_.disabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.priority_) -
        reinterpret_cast<char*>(&_impl_.disabled_)) + sizeof(_impl_.priority_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateTrackSettings::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateTrackSettings& this_ = static_cast<const UpdateTrackSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateTrackSettings::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateTrackSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateTrackSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string track_sids = 1;
  for (int i = 0, n = this_._internal_track_sids_size(); i < n; ++i) {
    const auto& s = this_._internal_track_sids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateTrackSettings.track_sids");
    target = stream->WriteString(1, s, target);
  }

  // bool disabled = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_disabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_disabled(), target);
    }
  }

  // .livekit.VideoQuality quality = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_quality() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_quality(), target);
    }
  }

  // uint32 width = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_width(), target);
    }
  }

  // uint32 height = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_height(), target);
    }
  }

  // uint32 fps = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_fps() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_fps(), target);
    }
  }

  // uint32 priority = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_priority() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_priority(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateTrackSettings)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateTrackSettings::ByteSizeLong(const MessageLite& base) {
  const UpdateTrackSettings& this_ = static_cast<const UpdateTrackSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateTrackSettings::ByteSizeLong() const {
  const UpdateTrackSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateTrackSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string track_sids = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_track_sids().size());
      for (int i = 0, n = this_._internal_track_sids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_track_sids().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // bool disabled = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_disabled() != 0) {
        total_size += 2;
      }
    }
    // .livekit.VideoQuality quality = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_quality() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_quality());
      }
    }
    // uint32 width = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
    // uint32 height = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
    // uint32 fps = 7;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_fps() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_fps());
      }
    }
    // uint32 priority = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_priority() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_priority());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateTrackSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateTrackSettings*>(&to_msg);
  auto& from = static_cast<const UpdateTrackSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateTrackSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_track_sids()->MergeFrom(from._internal_track_sids());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_disabled() != 0) {
        _this->_impl_.disabled_ = from._impl_.disabled_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_quality() != 0) {
        _this->_impl_.quality_ = from._impl_.quality_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_fps() != 0) {
        _this->_impl_.fps_ = from._impl_.fps_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_priority() != 0) {
        _this->_impl_.priority_ = from._impl_.priority_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateTrackSettings::CopyFrom(const UpdateTrackSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateTrackSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateTrackSettings::InternalSwap(UpdateTrackSettings* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.priority_)
      + sizeof(UpdateTrackSettings::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(UpdateTrackSettings, _impl_.disabled_)>(
          reinterpret_cast<char*>(&_impl_.disabled_),
          reinterpret_cast<char*>(&other->_impl_.disabled_));
}

::google::protobuf::Metadata UpdateTrackSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateLocalAudioTrack::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateLocalAudioTrack>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_._has_bits_);
};

UpdateLocalAudioTrack::UpdateLocalAudioTrack(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLocalAudioTrack_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLocalAudioTrack)
}
PROTOBUF_NDEBUG_INLINE UpdateLocalAudioTrack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateLocalAudioTrack& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        features_{visibility, arena, from.features_},
        _features_cached_byte_size_{0},
        track_sid_(arena, from.track_sid_) {}

UpdateLocalAudioTrack::UpdateLocalAudioTrack(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateLocalAudioTrack& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLocalAudioTrack_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateLocalAudioTrack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLocalAudioTrack)
}
PROTOBUF_NDEBUG_INLINE UpdateLocalAudioTrack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        features_{visibility, arena},
        _features_cached_byte_size_{0},
        track_sid_(arena) {}

inline void UpdateLocalAudioTrack::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateLocalAudioTrack::~UpdateLocalAudioTrack() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLocalAudioTrack)
  SharedDtor(*this);
}
inline void UpdateLocalAudioTrack::SharedDtor(MessageLite& self) {
  UpdateLocalAudioTrack& this_ = static_cast<UpdateLocalAudioTrack&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateLocalAudioTrack::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateLocalAudioTrack(arena);
}
constexpr auto UpdateLocalAudioTrack::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_.features_) +
          decltype(UpdateLocalAudioTrack::_impl_.features_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UpdateLocalAudioTrack), alignof(UpdateLocalAudioTrack), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateLocalAudioTrack::PlacementNew_,
                                 sizeof(UpdateLocalAudioTrack),
                                 alignof(UpdateLocalAudioTrack));
  }
}
constexpr auto UpdateLocalAudioTrack::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateLocalAudioTrack_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateLocalAudioTrack::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateLocalAudioTrack>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateLocalAudioTrack::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateLocalAudioTrack>(), &UpdateLocalAudioTrack::ByteSizeLong,
              &UpdateLocalAudioTrack::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_._cached_size_),
          false,
      },
      &UpdateLocalAudioTrack::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateLocalAudioTrack_class_data_ =
            UpdateLocalAudioTrack::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateLocalAudioTrack::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateLocalAudioTrack_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateLocalAudioTrack_class_data_.tc_table);
  return UpdateLocalAudioTrack_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2>
UpdateLocalAudioTrack::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateLocalAudioTrack_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateLocalAudioTrack>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.AudioTrackFeature features = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_.features_)}},
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_.track_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.AudioTrackFeature features = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateLocalAudioTrack, _impl_.features_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\35\11\0\0\0\0\0\0"
    "livekit.UpdateLocalAudioTrack"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void UpdateLocalAudioTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLocalAudioTrack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateLocalAudioTrack::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateLocalAudioTrack& this_ = static_cast<const UpdateLocalAudioTrack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateLocalAudioTrack::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateLocalAudioTrack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLocalAudioTrack)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateLocalAudioTrack.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .livekit.AudioTrackFeature features = 2;
  {
    std::size_t byte_size =
                                      this_._impl_._features_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, this_._internal_features(), byte_size, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLocalAudioTrack)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateLocalAudioTrack::ByteSizeLong(const MessageLite& base) {
  const UpdateLocalAudioTrack& this_ = static_cast<const UpdateLocalAudioTrack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateLocalAudioTrack::ByteSizeLong() const {
  const UpdateLocalAudioTrack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLocalAudioTrack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.AudioTrackFeature features = 2;
    {
      total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
          this_._internal_features(), 1, this_._impl_._features_cached_byte_size_);
    }
  }
   {
    // string track_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateLocalAudioTrack::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateLocalAudioTrack*>(&to_msg);
  auto& from = static_cast<const UpdateLocalAudioTrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLocalAudioTrack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_features()->MergeFrom(from._internal_features());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_track_sid().empty()) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    } else {
      if (_this->_impl_.track_sid_.IsDefault()) {
        _this->_internal_set_track_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLocalAudioTrack::CopyFrom(const UpdateLocalAudioTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLocalAudioTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateLocalAudioTrack::InternalSwap(UpdateLocalAudioTrack* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
}

::google::protobuf::Metadata UpdateLocalAudioTrack::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateLocalVideoTrack::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateLocalVideoTrack>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_._has_bits_);
};

UpdateLocalVideoTrack::UpdateLocalVideoTrack(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLocalVideoTrack_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLocalVideoTrack)
}
PROTOBUF_NDEBUG_INLINE UpdateLocalVideoTrack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateLocalVideoTrack& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sid_(arena, from.track_sid_) {}

UpdateLocalVideoTrack::UpdateLocalVideoTrack(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateLocalVideoTrack& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLocalVideoTrack_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateLocalVideoTrack* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, width_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLocalVideoTrack)
}
PROTOBUF_NDEBUG_INLINE UpdateLocalVideoTrack::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sid_(arena) {}

inline void UpdateLocalVideoTrack::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::height_));
}
UpdateLocalVideoTrack::~UpdateLocalVideoTrack() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLocalVideoTrack)
  SharedDtor(*this);
}
inline void UpdateLocalVideoTrack::SharedDtor(MessageLite& self) {
  UpdateLocalVideoTrack& this_ = static_cast<UpdateLocalVideoTrack&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateLocalVideoTrack::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateLocalVideoTrack(arena);
}
constexpr auto UpdateLocalVideoTrack::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UpdateLocalVideoTrack),
                                            alignof(UpdateLocalVideoTrack));
}
constexpr auto UpdateLocalVideoTrack::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateLocalVideoTrack_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateLocalVideoTrack::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateLocalVideoTrack>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateLocalVideoTrack::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateLocalVideoTrack>(), &UpdateLocalVideoTrack::ByteSizeLong,
              &UpdateLocalVideoTrack::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_._cached_size_),
          false,
      },
      &UpdateLocalVideoTrack::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateLocalVideoTrack_class_data_ =
            UpdateLocalVideoTrack::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateLocalVideoTrack::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateLocalVideoTrack_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateLocalVideoTrack_class_data_.tc_table);
  return UpdateLocalVideoTrack_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 47, 2>
UpdateLocalVideoTrack::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateLocalVideoTrack_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateLocalVideoTrack>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.track_sid_)}},
    // uint32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateLocalVideoTrack, _impl_.width_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.width_)}},
    // uint32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateLocalVideoTrack, _impl_.height_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.height_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 width = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.width_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.height_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\35\11\0\0\0\0\0\0"
    "livekit.UpdateLocalVideoTrack"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void UpdateLocalVideoTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLocalVideoTrack)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateLocalVideoTrack::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateLocalVideoTrack& this_ = static_cast<const UpdateLocalVideoTrack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateLocalVideoTrack::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateLocalVideoTrack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLocalVideoTrack)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateLocalVideoTrack.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // uint32 width = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_width(), target);
    }
  }

  // uint32 height = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_height(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLocalVideoTrack)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateLocalVideoTrack::ByteSizeLong(const MessageLite& base) {
  const UpdateLocalVideoTrack& this_ = static_cast<const UpdateLocalVideoTrack&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateLocalVideoTrack::ByteSizeLong() const {
  const UpdateLocalVideoTrack& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLocalVideoTrack)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string track_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
    // uint32 width = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
    // uint32 height = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateLocalVideoTrack::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateLocalVideoTrack*>(&to_msg);
  auto& from = static_cast<const UpdateLocalVideoTrack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLocalVideoTrack)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_track_sid().empty()) {
        _this->_internal_set_track_sid(from._internal_track_sid());
      } else {
        if (_this->_impl_.track_sid_.IsDefault()) {
          _this->_internal_set_track_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLocalVideoTrack::CopyFrom(const UpdateLocalVideoTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLocalVideoTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateLocalVideoTrack::InternalSwap(UpdateLocalVideoTrack* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.height_)
      + sizeof(UpdateLocalVideoTrack::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(UpdateLocalVideoTrack, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata UpdateLocalVideoTrack::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LeaveRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<LeaveRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_._has_bits_);
};

LeaveRequest::LeaveRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LeaveRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.LeaveRequest)
}
PROTOBUF_NDEBUG_INLINE LeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::LeaveRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

LeaveRequest::LeaveRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const LeaveRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, LeaveRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LeaveRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.regions_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.regions_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, can_reconnect_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, can_reconnect_),
           offsetof(Impl_, action_) -
               offsetof(Impl_, can_reconnect_) +
               sizeof(Impl_::action_));

  // @@protoc_insertion_point(copy_constructor:livekit.LeaveRequest)
}
PROTOBUF_NDEBUG_INLINE LeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void LeaveRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, regions_),
           0,
           offsetof(Impl_, action_) -
               offsetof(Impl_, regions_) +
               sizeof(Impl_::action_));
}
LeaveRequest::~LeaveRequest() {
  // @@protoc_insertion_point(destructor:livekit.LeaveRequest)
  SharedDtor(*this);
}
inline void LeaveRequest::SharedDtor(MessageLite& self) {
  LeaveRequest& this_ = static_cast<LeaveRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.regions_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL LeaveRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) LeaveRequest(arena);
}
constexpr auto LeaveRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(LeaveRequest),
                                            alignof(LeaveRequest));
}
constexpr auto LeaveRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_LeaveRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &LeaveRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<LeaveRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &LeaveRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<LeaveRequest>(), &LeaveRequest::ByteSizeLong,
              &LeaveRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_._cached_size_),
          false,
      },
      &LeaveRequest::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        LeaveRequest_class_data_ =
            LeaveRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL LeaveRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&LeaveRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(LeaveRequest_class_data_.tc_table);
  return LeaveRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2>
LeaveRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    LeaveRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::LeaveRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.RegionSettings regions = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.regions_)}},
    // bool can_reconnect = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LeaveRequest, _impl_.can_reconnect_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.can_reconnect_)}},
    // .livekit.DisconnectReason reason = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeaveRequest, _impl_.reason_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.reason_)}},
    // .livekit.LeaveRequest.Action action = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LeaveRequest, _impl_.action_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.action_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool can_reconnect = 1;
    {PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.can_reconnect_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.DisconnectReason reason = 2;
    {PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.reason_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.LeaveRequest.Action action = 3;
    {PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.action_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.RegionSettings regions = 4;
    {PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.regions_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::RegionSettings>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void LeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.LeaveRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.regions_ != nullptr);
    _impl_.regions_->Clear();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.can_reconnect_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.action_) -
        reinterpret_cast<char*>(&_impl_.can_reconnect_)) + sizeof(_impl_.action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL LeaveRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const LeaveRequest& this_ = static_cast<const LeaveRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL LeaveRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const LeaveRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.LeaveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool can_reconnect = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_can_reconnect() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_can_reconnect(), target);
    }
  }

  // .livekit.DisconnectReason reason = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_reason() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_reason(), target);
    }
  }

  // .livekit.LeaveRequest.Action action = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_action() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_action(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.RegionSettings regions = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.regions_, this_._impl_.regions_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.LeaveRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t LeaveRequest::ByteSizeLong(const MessageLite& base) {
  const LeaveRequest& this_ = static_cast<const LeaveRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t LeaveRequest::ByteSizeLong() const {
  const LeaveRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.LeaveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .livekit.RegionSettings regions = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.regions_);
    }
    // bool can_reconnect = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_can_reconnect() != 0) {
        total_size += 2;
      }
    }
    // .livekit.DisconnectReason reason = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_reason() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_reason());
      }
    }
    // .livekit.LeaveRequest.Action action = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_action() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_action());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void LeaveRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LeaveRequest*>(&to_msg);
  auto& from = static_cast<const LeaveRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.LeaveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.regions_ != nullptr);
      if (_this->_impl_.regions_ == nullptr) {
        _this->_impl_.regions_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.regions_);
      } else {
        _this->_impl_.regions_->MergeFrom(*from._impl_.regions_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_can_reconnect() != 0) {
        _this->_impl_.can_reconnect_ = from._impl_.can_reconnect_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_reason() != 0) {
        _this->_impl_.reason_ = from._impl_.reason_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_action() != 0) {
        _this->_impl_.action_ = from._impl_.action_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveRequest::CopyFrom(const LeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.LeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LeaveRequest::InternalSwap(LeaveRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.action_)
      + sizeof(LeaveRequest::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(LeaveRequest, _impl_.regions_)>(
          reinterpret_cast<char*>(&_impl_.regions_),
          reinterpret_cast<char*>(&other->_impl_.regions_));
}

::google::protobuf::Metadata LeaveRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateVideoLayers::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateVideoLayers>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_._has_bits_);
};

void UpdateVideoLayers::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
UpdateVideoLayers::UpdateVideoLayers(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateVideoLayers_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateVideoLayers)
}
PROTOBUF_NDEBUG_INLINE UpdateVideoLayers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateVideoLayers& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layers_{visibility, arena, from.layers_},
        track_sid_(arena, from.track_sid_) {}

UpdateVideoLayers::UpdateVideoLayers(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateVideoLayers& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateVideoLayers_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateVideoLayers* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateVideoLayers)
}
PROTOBUF_NDEBUG_INLINE UpdateVideoLayers::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        layers_{visibility, arena},
        track_sid_(arena) {}

inline void UpdateVideoLayers::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateVideoLayers::~UpdateVideoLayers() {
  // @@protoc_insertion_point(destructor:livekit.UpdateVideoLayers)
  SharedDtor(*this);
}
inline void UpdateVideoLayers::SharedDtor(MessageLite& self) {
  UpdateVideoLayers& this_ = static_cast<UpdateVideoLayers&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateVideoLayers::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateVideoLayers(arena);
}
constexpr auto UpdateVideoLayers::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_.layers_) +
          decltype(UpdateVideoLayers::_impl_.layers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UpdateVideoLayers), alignof(UpdateVideoLayers), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateVideoLayers::PlacementNew_,
                                 sizeof(UpdateVideoLayers),
                                 alignof(UpdateVideoLayers));
  }
}
constexpr auto UpdateVideoLayers::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateVideoLayers_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateVideoLayers::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateVideoLayers>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateVideoLayers::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateVideoLayers>(), &UpdateVideoLayers::ByteSizeLong,
              &UpdateVideoLayers::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_._cached_size_),
          false,
      },
      &UpdateVideoLayers::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateVideoLayers_class_data_ =
            UpdateVideoLayers::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateVideoLayers::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateVideoLayers_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateVideoLayers_class_data_.tc_table);
  return UpdateVideoLayers_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 43, 2>
UpdateVideoLayers::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    UpdateVideoLayers_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateVideoLayers>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.VideoLayer layers = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_.layers_)}},
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_.track_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.VideoLayer layers = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateVideoLayers, _impl_.layers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoLayer>()},
  }},
  {{
    "\31\11\0\0\0\0\0\0"
    "livekit.UpdateVideoLayers"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void UpdateVideoLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateVideoLayers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateVideoLayers::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateVideoLayers& this_ = static_cast<const UpdateVideoLayers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateVideoLayers::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateVideoLayers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateVideoLayers)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateVideoLayers.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .livekit.VideoLayer layers = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_layers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateVideoLayers)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateVideoLayers::ByteSizeLong(const MessageLite& base) {
  const UpdateVideoLayers& this_ = static_cast<const UpdateVideoLayers&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateVideoLayers::ByteSizeLong() const {
  const UpdateVideoLayers& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateVideoLayers)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.VideoLayer layers = 2;
    {
      total_size += 1UL * this_._internal_layers_size();
      for (const auto& msg : this_._internal_layers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // string track_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateVideoLayers::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateVideoLayers*>(&to_msg);
  auto& from = static_cast<const UpdateVideoLayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateVideoLayers)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_track_sid().empty()) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    } else {
      if (_this->_impl_.track_sid_.IsDefault()) {
        _this->_internal_set_track_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVideoLayers::CopyFrom(const UpdateVideoLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateVideoLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateVideoLayers::InternalSwap(UpdateVideoLayers* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
}

::google::protobuf::Metadata UpdateVideoLayers::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse()
    : SuperType(UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.base()) {}
UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse() : SuperType() {}
UpdateParticipantMetadata_AttributesEntry_DoNotUse::UpdateParticipantMetadata_AttributesEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL UpdateParticipantMetadata_AttributesEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateParticipantMetadata_AttributesEntry_DoNotUse(arena);
}
constexpr auto UpdateParticipantMetadata_AttributesEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UpdateParticipantMetadata_AttributesEntry_DoNotUse),
                                            alignof(UpdateParticipantMetadata_AttributesEntry_DoNotUse));
}
constexpr auto UpdateParticipantMetadata_AttributesEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateParticipantMetadata_AttributesEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateParticipantMetadata_AttributesEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateParticipantMetadata_AttributesEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateParticipantMetadata_AttributesEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&UpdateParticipantMetadata_AttributesEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &UpdateParticipantMetadata_AttributesEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_ =
            UpdateParticipantMetadata_AttributesEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateParticipantMetadata_AttributesEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.tc_table);
  return UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 66, 2>
UpdateParticipantMetadata_AttributesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateParticipantMetadata_AttributesEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateParticipantMetadata_AttributesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata_AttributesEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\3\5\0\0\0\0\0"
    "livekit.UpdateParticipantMetadata.AttributesEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class UpdateParticipantMetadata::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateParticipantMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_._has_bits_);
};

UpdateParticipantMetadata::UpdateParticipantMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateParticipantMetadata_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateParticipantMetadata)
}
PROTOBUF_NDEBUG_INLINE UpdateParticipantMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateParticipantMetadata& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        metadata_(arena, from.metadata_),
        name_(arena, from.name_) {}

UpdateParticipantMetadata::UpdateParticipantMetadata(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateParticipantMetadata& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateParticipantMetadata_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateParticipantMetadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.request_id_ = from._impl_.request_id_;

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateParticipantMetadata)
}
PROTOBUF_NDEBUG_INLINE UpdateParticipantMetadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        metadata_(arena),
        name_(arena) {}

inline void UpdateParticipantMetadata::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.request_id_ = {};
}
UpdateParticipantMetadata::~UpdateParticipantMetadata() {
  // @@protoc_insertion_point(destructor:livekit.UpdateParticipantMetadata)
  SharedDtor(*this);
}
inline void UpdateParticipantMetadata::SharedDtor(MessageLite& self) {
  UpdateParticipantMetadata& this_ = static_cast<UpdateParticipantMetadata&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.metadata_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateParticipantMetadata::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateParticipantMetadata(arena);
}
constexpr auto UpdateParticipantMetadata::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.attributes_) +
          decltype(UpdateParticipantMetadata::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.attributes_) +
          decltype(UpdateParticipantMetadata::_impl_.attributes_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UpdateParticipantMetadata), alignof(UpdateParticipantMetadata), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateParticipantMetadata::PlacementNew_,
                                 sizeof(UpdateParticipantMetadata),
                                 alignof(UpdateParticipantMetadata));
  }
}
constexpr auto UpdateParticipantMetadata::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateParticipantMetadata_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateParticipantMetadata::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateParticipantMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateParticipantMetadata::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateParticipantMetadata>(), &UpdateParticipantMetadata::ByteSizeLong,
              &UpdateParticipantMetadata::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_._cached_size_),
          false,
      },
      &UpdateParticipantMetadata::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateParticipantMetadata_class_data_ =
            UpdateParticipantMetadata::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateParticipantMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateParticipantMetadata_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateParticipantMetadata_class_data_.tc_table);
  return UpdateParticipantMetadata_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 64, 2>
UpdateParticipantMetadata::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    UpdateParticipantMetadata_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateParticipantMetadata>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 request_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UpdateParticipantMetadata, _impl_.request_id_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.request_id_)}},
    // string metadata = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.metadata_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string metadata = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.metadata_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> attributes = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // uint32 request_id = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateParticipantMetadata, _impl_.request_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\41\10\4\12\0\0\0\0"
    "livekit.UpdateParticipantMetadata"
    "metadata"
    "name"
    "attributes"
  }},
};
PROTOBUF_NOINLINE void UpdateParticipantMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateParticipantMetadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.request_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateParticipantMetadata::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateParticipantMetadata& this_ = static_cast<const UpdateParticipantMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateParticipantMetadata::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateParticipantMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateParticipantMetadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string metadata = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_metadata().empty()) {
      const std::string& _s = this_._internal_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.metadata");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // map<string, string> attributes = 3;
  if (!this_._internal_attributes().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_attributes();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.attributes");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.attributes");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateParticipantMetadata.attributes");
      }
    }
  }

  // uint32 request_id = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_request_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_request_id(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateParticipantMetadata)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateParticipantMetadata::ByteSizeLong(const MessageLite& base) {
  const UpdateParticipantMetadata& this_ = static_cast<const UpdateParticipantMetadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateParticipantMetadata::ByteSizeLong() const {
  const UpdateParticipantMetadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateParticipantMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> attributes = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_attributes_size());
      for (const auto& entry : this_._internal_attributes()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string metadata = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_metadata());
      }
    }
    // string name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // uint32 request_id = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_request_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_request_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateParticipantMetadata::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateParticipantMetadata*>(&to_msg);
  auto& from = static_cast<const UpdateParticipantMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateParticipantMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_metadata().empty()) {
        _this->_internal_set_metadata(from._internal_metadata());
      } else {
        if (_this->_impl_.metadata_.IsDefault()) {
          _this->_internal_set_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_request_id() != 0) {
        _this->_impl_.request_id_ = from._impl_.request_id_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateParticipantMetadata::CopyFrom(const UpdateParticipantMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateParticipantMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateParticipantMetadata::InternalSwap(UpdateParticipantMetadata* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, &other->_impl_.metadata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::google::protobuf::Metadata UpdateParticipantMetadata::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ICEServer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ICEServer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ICEServer, _impl_._has_bits_);
};

ICEServer::ICEServer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ICEServer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ICEServer)
}
PROTOBUF_NDEBUG_INLINE ICEServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ICEServer& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        urls_{visibility, arena, from.urls_},
        username_(arena, from.username_),
        credential_(arena, from.credential_) {}

ICEServer::ICEServer(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ICEServer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ICEServer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ICEServer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ICEServer)
}
PROTOBUF_NDEBUG_INLINE ICEServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        urls_{visibility, arena},
        username_(arena),
        credential_(arena) {}

inline void ICEServer::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ICEServer::~ICEServer() {
  // @@protoc_insertion_point(destructor:livekit.ICEServer)
  SharedDtor(*this);
}
inline void ICEServer::SharedDtor(MessageLite& self) {
  ICEServer& this_ = static_cast<ICEServer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.username_.Destroy();
  this_._impl_.credential_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ICEServer::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ICEServer(arena);
}
constexpr auto ICEServer::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.urls_) +
          decltype(ICEServer::_impl_.urls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ICEServer), alignof(ICEServer), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ICEServer::PlacementNew_,
                                 sizeof(ICEServer),
                                 alignof(ICEServer));
  }
}
constexpr auto ICEServer::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ICEServer_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ICEServer::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ICEServer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ICEServer::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ICEServer>(), &ICEServer::ByteSizeLong,
              &ICEServer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ICEServer, _impl_._cached_size_),
          false,
      },
      &ICEServer::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ICEServer_class_data_ =
            ICEServer::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ICEServer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ICEServer_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ICEServer_class_data_.tc_table);
  return ICEServer_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 48, 2>
ICEServer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ICEServer, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ICEServer_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ICEServer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string urls = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.urls_)}},
    // string username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.username_)}},
    // string credential = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.credential_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string urls = 1;
    {PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.urls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string username = 2;
    {PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.username_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string credential = 3;
    {PROTOBUF_FIELD_OFFSET(ICEServer, _impl_.credential_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\4\10\12\0\0\0\0"
    "livekit.ICEServer"
    "urls"
    "username"
    "credential"
  }},
};
PROTOBUF_NOINLINE void ICEServer::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ICEServer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.credential_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ICEServer::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ICEServer& this_ = static_cast<const ICEServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ICEServer::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ICEServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ICEServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this_._internal_urls_size(); i < n; ++i) {
    const auto& s = this_._internal_urls().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ICEServer.urls");
    target = stream->WriteString(1, s, target);
  }

  // string username = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_username().empty()) {
      const std::string& _s = this_._internal_username();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ICEServer.username");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string credential = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_credential().empty()) {
      const std::string& _s = this_._internal_credential();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ICEServer.credential");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ICEServer)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ICEServer::ByteSizeLong(const MessageLite& base) {
  const ICEServer& this_ = static_cast<const ICEServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ICEServer::ByteSizeLong() const {
  const ICEServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ICEServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string urls = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_urls().size());
      for (int i = 0, n = this_._internal_urls().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_urls().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string username = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_username().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_username());
      }
    }
    // string credential = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_credential().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_credential());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ICEServer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ICEServer*>(&to_msg);
  auto& from = static_cast<const ICEServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ICEServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_urls()->MergeFrom(from._internal_urls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_username().empty()) {
        _this->_internal_set_username(from._internal_username());
      } else {
        if (_this->_impl_.username_.IsDefault()) {
          _this->_internal_set_username("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_credential().empty()) {
        _this->_internal_set_credential(from._internal_credential());
      } else {
        if (_this->_impl_.credential_.IsDefault()) {
          _this->_internal_set_credential("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ICEServer::CopyFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ICEServer::InternalSwap(ICEServer* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.credential_, &other->_impl_.credential_, arena);
}

::google::protobuf::Metadata ICEServer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SpeakersChanged::_Internal {
 public:
};

void SpeakersChanged::clear_speakers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.speakers_.Clear();
}
SpeakersChanged::SpeakersChanged(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SpeakersChanged_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SpeakersChanged)
}
PROTOBUF_NDEBUG_INLINE SpeakersChanged::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SpeakersChanged& from_msg)
      : speakers_{visibility, arena, from.speakers_},
        _cached_size_{0} {}

SpeakersChanged::SpeakersChanged(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SpeakersChanged& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SpeakersChanged_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SpeakersChanged* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SpeakersChanged)
}
PROTOBUF_NDEBUG_INLINE SpeakersChanged::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : speakers_{visibility, arena},
        _cached_size_{0} {}

inline void SpeakersChanged::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SpeakersChanged::~SpeakersChanged() {
  // @@protoc_insertion_point(destructor:livekit.SpeakersChanged)
  SharedDtor(*this);
}
inline void SpeakersChanged::SharedDtor(MessageLite& self) {
  SpeakersChanged& this_ = static_cast<SpeakersChanged&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SpeakersChanged::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SpeakersChanged(arena);
}
constexpr auto SpeakersChanged::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SpeakersChanged, _impl_.speakers_) +
          decltype(SpeakersChanged::_impl_.speakers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SpeakersChanged), alignof(SpeakersChanged), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SpeakersChanged::PlacementNew_,
                                 sizeof(SpeakersChanged),
                                 alignof(SpeakersChanged));
  }
}
constexpr auto SpeakersChanged::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SpeakersChanged_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SpeakersChanged::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SpeakersChanged>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SpeakersChanged::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SpeakersChanged>(), &SpeakersChanged::ByteSizeLong,
              &SpeakersChanged::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SpeakersChanged, _impl_._cached_size_),
          false,
      },
      &SpeakersChanged::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SpeakersChanged_class_data_ =
            SpeakersChanged::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SpeakersChanged::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SpeakersChanged_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SpeakersChanged_class_data_.tc_table);
  return SpeakersChanged_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
SpeakersChanged::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SpeakersChanged_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SpeakersChanged>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.SpeakerInfo speakers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SpeakersChanged, _impl_.speakers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.SpeakerInfo speakers = 1;
    {PROTOBUF_FIELD_OFFSET(SpeakersChanged, _impl_.speakers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SpeakerInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SpeakersChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SpeakersChanged)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speakers_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SpeakersChanged::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SpeakersChanged& this_ = static_cast<const SpeakersChanged&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SpeakersChanged::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SpeakersChanged& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SpeakersChanged)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.SpeakerInfo speakers = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_speakers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_speakers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SpeakersChanged)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SpeakersChanged::ByteSizeLong(const MessageLite& base) {
  const SpeakersChanged& this_ = static_cast<const SpeakersChanged&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SpeakersChanged::ByteSizeLong() const {
  const SpeakersChanged& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SpeakersChanged)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.SpeakerInfo speakers = 1;
    {
      total_size += 1UL * this_._internal_speakers_size();
      for (const auto& msg : this_._internal_speakers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SpeakersChanged::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpeakersChanged*>(&to_msg);
  auto& from = static_cast<const SpeakersChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SpeakersChanged)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_speakers()->MergeFrom(
      from._internal_speakers());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakersChanged::CopyFrom(const SpeakersChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SpeakersChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpeakersChanged::InternalSwap(SpeakersChanged* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speakers_.InternalSwap(&other->_impl_.speakers_);
}

::google::protobuf::Metadata SpeakersChanged::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoomUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RoomUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoomUpdate, _impl_._has_bits_);
};

void RoomUpdate::clear_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ != nullptr) _impl_.room_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoomUpdate::RoomUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoomUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomUpdate)
}
PROTOBUF_NDEBUG_INLINE RoomUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RoomUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

RoomUpdate::RoomUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoomUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoomUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoomUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.room_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:livekit.RoomUpdate)
}
PROTOBUF_NDEBUG_INLINE RoomUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void RoomUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.room_ = {};
}
RoomUpdate::~RoomUpdate() {
  // @@protoc_insertion_point(destructor:livekit.RoomUpdate)
  SharedDtor(*this);
}
inline void RoomUpdate::SharedDtor(MessageLite& self) {
  RoomUpdate& this_ = static_cast<RoomUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.room_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RoomUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoomUpdate(arena);
}
constexpr auto RoomUpdate::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RoomUpdate),
                                            alignof(RoomUpdate));
}
constexpr auto RoomUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoomUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoomUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoomUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoomUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoomUpdate>(), &RoomUpdate::ByteSizeLong,
              &RoomUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoomUpdate, _impl_._cached_size_),
          false,
      },
      &RoomUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RoomUpdate_class_data_ =
            RoomUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RoomUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoomUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoomUpdate_class_data_.tc_table);
  return RoomUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
RoomUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoomUpdate, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoomUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RoomUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.Room room = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoomUpdate, _impl_.room_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.Room room = 1;
    {PROTOBUF_FIELD_OFFSET(RoomUpdate, _impl_.room_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::Room>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RoomUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.room_ != nullptr);
    _impl_.room_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoomUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoomUpdate& this_ = static_cast<const RoomUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoomUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoomUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.Room room = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.room_, this_._impl_.room_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoomUpdate::ByteSizeLong(const MessageLite& base) {
  const RoomUpdate& this_ = static_cast<const RoomUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoomUpdate::ByteSizeLong() const {
  const RoomUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RoomUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // .livekit.Room room = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.room_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoomUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomUpdate*>(&to_msg);
  auto& from = static_cast<const RoomUpdate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.room_ != nullptr);
    if (_this->_impl_.room_ == nullptr) {
      _this->_impl_.room_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.room_);
    } else {
      _this->_impl_.room_->MergeFrom(*from._impl_.room_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomUpdate::CopyFrom(const RoomUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomUpdate::InternalSwap(RoomUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.room_, other->_impl_.room_);
}

::google::protobuf::Metadata RoomUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConnectionQualityInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ConnectionQualityInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_._has_bits_);
};

ConnectionQualityInfo::ConnectionQualityInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConnectionQualityInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityInfo)
}
PROTOBUF_NDEBUG_INLINE ConnectionQualityInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ConnectionQualityInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        participant_sid_(arena, from.participant_sid_) {}

ConnectionQualityInfo::ConnectionQualityInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConnectionQualityInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConnectionQualityInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConnectionQualityInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, quality_),
           offsetof(Impl_, score_) -
               offsetof(Impl_, quality_) +
               sizeof(Impl_::score_));

  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityInfo)
}
PROTOBUF_NDEBUG_INLINE ConnectionQualityInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        participant_sid_(arena) {}

inline void ConnectionQualityInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_),
           0,
           offsetof(Impl_, score_) -
               offsetof(Impl_, quality_) +
               sizeof(Impl_::score_));
}
ConnectionQualityInfo::~ConnectionQualityInfo() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityInfo)
  SharedDtor(*this);
}
inline void ConnectionQualityInfo::SharedDtor(MessageLite& self) {
  ConnectionQualityInfo& this_ = static_cast<ConnectionQualityInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConnectionQualityInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConnectionQualityInfo(arena);
}
constexpr auto ConnectionQualityInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConnectionQualityInfo),
                                            alignof(ConnectionQualityInfo));
}
constexpr auto ConnectionQualityInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConnectionQualityInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConnectionQualityInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConnectionQualityInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConnectionQualityInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConnectionQualityInfo>(), &ConnectionQualityInfo::ByteSizeLong,
              &ConnectionQualityInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_._cached_size_),
          false,
      },
      &ConnectionQualityInfo::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ConnectionQualityInfo_class_data_ =
            ConnectionQualityInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ConnectionQualityInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConnectionQualityInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConnectionQualityInfo_class_data_.tc_table);
  return ConnectionQualityInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 53, 2>
ConnectionQualityInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ConnectionQualityInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ConnectionQualityInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string participant_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.participant_sid_)}},
    // .livekit.ConnectionQuality quality = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionQualityInfo, _impl_.quality_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.quality_)}},
    // float score = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.score_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ConnectionQuality quality = 2;
    {PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.quality_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // float score = 3;
    {PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.score_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\35\17\0\0\0\0\0\0"
    "livekit.ConnectionQualityInfo"
    "participant_sid"
  }},
};
PROTOBUF_NOINLINE void ConnectionQualityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.participant_sid_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.quality_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.score_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConnectionQualityInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConnectionQualityInfo& this_ = static_cast<const ConnectionQualityInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConnectionQualityInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConnectionQualityInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ConnectionQualityInfo.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.ConnectionQuality quality = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_quality() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_quality(), target);
    }
  }

  // float score = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint32_t>(this_._internal_score()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(
          3, this_._internal_score(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConnectionQualityInfo::ByteSizeLong(const MessageLite& base) {
  const ConnectionQualityInfo& this_ = static_cast<const ConnectionQualityInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConnectionQualityInfo::ByteSizeLong() const {
  const ConnectionQualityInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string participant_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
    // .livekit.ConnectionQuality quality = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_quality() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_quality());
      }
    }
    // float score = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(this_._internal_score()) != 0) {
        total_size += 5;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConnectionQualityInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConnectionQualityInfo*>(&to_msg);
  auto& from = static_cast<const ConnectionQualityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_sid().empty()) {
        _this->_internal_set_participant_sid(from._internal_participant_sid());
      } else {
        if (_this->_impl_.participant_sid_.IsDefault()) {
          _this->_internal_set_participant_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_quality() != 0) {
        _this->_impl_.quality_ = from._impl_.quality_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint32_t>(from._internal_score()) != 0) {
        _this->_impl_.score_ = from._impl_.score_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityInfo::CopyFrom(const ConnectionQualityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConnectionQualityInfo::InternalSwap(ConnectionQualityInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.score_)
      + sizeof(ConnectionQualityInfo::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ConnectionQualityInfo, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::google::protobuf::Metadata ConnectionQualityInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConnectionQualityUpdate::_Internal {
 public:
};

ConnectionQualityUpdate::ConnectionQualityUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConnectionQualityUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ConnectionQualityUpdate)
}
PROTOBUF_NDEBUG_INLINE ConnectionQualityUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ConnectionQualityUpdate& from_msg)
      : updates_{visibility, arena, from.updates_},
        _cached_size_{0} {}

ConnectionQualityUpdate::ConnectionQualityUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ConnectionQualityUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ConnectionQualityUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConnectionQualityUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ConnectionQualityUpdate)
}
PROTOBUF_NDEBUG_INLINE ConnectionQualityUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : updates_{visibility, arena},
        _cached_size_{0} {}

inline void ConnectionQualityUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ConnectionQualityUpdate::~ConnectionQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.ConnectionQualityUpdate)
  SharedDtor(*this);
}
inline void ConnectionQualityUpdate::SharedDtor(MessageLite& self) {
  ConnectionQualityUpdate& this_ = static_cast<ConnectionQualityUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ConnectionQualityUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ConnectionQualityUpdate(arena);
}
constexpr auto ConnectionQualityUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConnectionQualityUpdate, _impl_.updates_) +
          decltype(ConnectionQualityUpdate::_impl_.updates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ConnectionQualityUpdate), alignof(ConnectionQualityUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConnectionQualityUpdate::PlacementNew_,
                                 sizeof(ConnectionQualityUpdate),
                                 alignof(ConnectionQualityUpdate));
  }
}
constexpr auto ConnectionQualityUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ConnectionQualityUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ConnectionQualityUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ConnectionQualityUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ConnectionQualityUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ConnectionQualityUpdate>(), &ConnectionQualityUpdate::ByteSizeLong,
              &ConnectionQualityUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ConnectionQualityUpdate, _impl_._cached_size_),
          false,
      },
      &ConnectionQualityUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ConnectionQualityUpdate_class_data_ =
            ConnectionQualityUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ConnectionQualityUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ConnectionQualityUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ConnectionQualityUpdate_class_data_.tc_table);
  return ConnectionQualityUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ConnectionQualityUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ConnectionQualityUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ConnectionQualityUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.ConnectionQualityInfo updates = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionQualityUpdate, _impl_.updates_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.ConnectionQualityInfo updates = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectionQualityUpdate, _impl_.updates_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ConnectionQualityInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ConnectionQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ConnectionQualityUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ConnectionQualityUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ConnectionQualityUpdate& this_ = static_cast<const ConnectionQualityUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ConnectionQualityUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ConnectionQualityUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ConnectionQualityUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.ConnectionQualityInfo updates = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_updates_size());
       i < n; i++) {
    const auto& repfield = this_._internal_updates().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ConnectionQualityUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ConnectionQualityUpdate::ByteSizeLong(const MessageLite& base) {
  const ConnectionQualityUpdate& this_ = static_cast<const ConnectionQualityUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ConnectionQualityUpdate::ByteSizeLong() const {
  const ConnectionQualityUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ConnectionQualityUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.ConnectionQualityInfo updates = 1;
    {
      total_size += 1UL * this_._internal_updates_size();
      for (const auto& msg : this_._internal_updates()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ConnectionQualityUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConnectionQualityUpdate*>(&to_msg);
  auto& from = static_cast<const ConnectionQualityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ConnectionQualityUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_updates()->MergeFrom(
      from._internal_updates());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionQualityUpdate::CopyFrom(const ConnectionQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ConnectionQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConnectionQualityUpdate::InternalSwap(ConnectionQualityUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
}

::google::protobuf::Metadata ConnectionQualityUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamStateInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StreamStateInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_._has_bits_);
};

StreamStateInfo::StreamStateInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamStateInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateInfo)
}
PROTOBUF_NDEBUG_INLINE StreamStateInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StreamStateInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        participant_sid_(arena, from.participant_sid_),
        track_sid_(arena, from.track_sid_) {}

StreamStateInfo::StreamStateInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamStateInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamStateInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamStateInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.state_ = from._impl_.state_;

  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateInfo)
}
PROTOBUF_NDEBUG_INLINE StreamStateInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        participant_sid_(arena),
        track_sid_(arena) {}

inline void StreamStateInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.state_ = {};
}
StreamStateInfo::~StreamStateInfo() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateInfo)
  SharedDtor(*this);
}
inline void StreamStateInfo::SharedDtor(MessageLite& self) {
  StreamStateInfo& this_ = static_cast<StreamStateInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamStateInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamStateInfo(arena);
}
constexpr auto StreamStateInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamStateInfo),
                                            alignof(StreamStateInfo));
}
constexpr auto StreamStateInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamStateInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamStateInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamStateInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamStateInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamStateInfo>(), &StreamStateInfo::ByteSizeLong,
              &StreamStateInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_._cached_size_),
          false,
      },
      &StreamStateInfo::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StreamStateInfo_class_data_ =
            StreamStateInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StreamStateInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamStateInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamStateInfo_class_data_.tc_table);
  return StreamStateInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 56, 2>
StreamStateInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StreamStateInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StreamStateInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string participant_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.participant_sid_)}},
    // string track_sid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.track_sid_)}},
    // .livekit.StreamState state = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamStateInfo, _impl_.state_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1;
    {PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string track_sid = 2;
    {PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.track_sid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.StreamState state = 3;
    {PROTOBUF_FIELD_OFFSET(StreamStateInfo, _impl_.state_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\27\17\11\0\0\0\0\0"
    "livekit.StreamStateInfo"
    "participant_sid"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void StreamStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.participant_sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamStateInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamStateInfo& this_ = static_cast<const StreamStateInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamStateInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamStateInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StreamStateInfo.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string track_sid = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StreamStateInfo.track_sid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .livekit.StreamState state = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_state() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_state(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamStateInfo::ByteSizeLong(const MessageLite& base) {
  const StreamStateInfo& this_ = static_cast<const StreamStateInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamStateInfo::ByteSizeLong() const {
  const StreamStateInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string participant_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
    // string track_sid = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
    // .livekit.StreamState state = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_state() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_state());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamStateInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamStateInfo*>(&to_msg);
  auto& from = static_cast<const StreamStateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_sid().empty()) {
        _this->_internal_set_participant_sid(from._internal_participant_sid());
      } else {
        if (_this->_impl_.participant_sid_.IsDefault()) {
          _this->_internal_set_participant_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_track_sid().empty()) {
        _this->_internal_set_track_sid(from._internal_track_sid());
      } else {
        if (_this->_impl_.track_sid_.IsDefault()) {
          _this->_internal_set_track_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_state() != 0) {
        _this->_impl_.state_ = from._impl_.state_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateInfo::CopyFrom(const StreamStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamStateInfo::InternalSwap(StreamStateInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
  swap(_impl_.state_, other->_impl_.state_);
}

::google::protobuf::Metadata StreamStateInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamStateUpdate::_Internal {
 public:
};

StreamStateUpdate::StreamStateUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamStateUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamStateUpdate)
}
PROTOBUF_NDEBUG_INLINE StreamStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StreamStateUpdate& from_msg)
      : stream_states_{visibility, arena, from.stream_states_},
        _cached_size_{0} {}

StreamStateUpdate::StreamStateUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamStateUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamStateUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamStateUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.StreamStateUpdate)
}
PROTOBUF_NDEBUG_INLINE StreamStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : stream_states_{visibility, arena},
        _cached_size_{0} {}

inline void StreamStateUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamStateUpdate::~StreamStateUpdate() {
  // @@protoc_insertion_point(destructor:livekit.StreamStateUpdate)
  SharedDtor(*this);
}
inline void StreamStateUpdate::SharedDtor(MessageLite& self) {
  StreamStateUpdate& this_ = static_cast<StreamStateUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamStateUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamStateUpdate(arena);
}
constexpr auto StreamStateUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamStateUpdate, _impl_.stream_states_) +
          decltype(StreamStateUpdate::_impl_.stream_states_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(StreamStateUpdate), alignof(StreamStateUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamStateUpdate::PlacementNew_,
                                 sizeof(StreamStateUpdate),
                                 alignof(StreamStateUpdate));
  }
}
constexpr auto StreamStateUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamStateUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamStateUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamStateUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamStateUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamStateUpdate>(), &StreamStateUpdate::ByteSizeLong,
              &StreamStateUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamStateUpdate, _impl_._cached_size_),
          false,
      },
      &StreamStateUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StreamStateUpdate_class_data_ =
            StreamStateUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StreamStateUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamStateUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamStateUpdate_class_data_.tc_table);
  return StreamStateUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
StreamStateUpdate::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    StreamStateUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StreamStateUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.StreamStateInfo stream_states = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamStateUpdate, _impl_.stream_states_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.StreamStateInfo stream_states = 1;
    {PROTOBUF_FIELD_OFFSET(StreamStateUpdate, _impl_.stream_states_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::StreamStateInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void StreamStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamStateUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_states_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamStateUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamStateUpdate& this_ = static_cast<const StreamStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamStateUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamStateUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.StreamStateInfo stream_states = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_states_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_states().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamStateUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamStateUpdate::ByteSizeLong(const MessageLite& base) {
  const StreamStateUpdate& this_ = static_cast<const StreamStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamStateUpdate::ByteSizeLong() const {
  const StreamStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StreamStateUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.StreamStateInfo stream_states = 1;
    {
      total_size += 1UL * this_._internal_stream_states_size();
      for (const auto& msg : this_._internal_stream_states()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamStateUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamStateUpdate*>(&to_msg);
  auto& from = static_cast<const StreamStateUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamStateUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stream_states()->MergeFrom(
      from._internal_stream_states());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamStateUpdate::CopyFrom(const StreamStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamStateUpdate::InternalSwap(StreamStateUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stream_states_.InternalSwap(&other->_impl_.stream_states_);
}

::google::protobuf::Metadata StreamStateUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribedQuality::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscribedQuality>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_._has_bits_);
};

SubscribedQuality::SubscribedQuality(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedQuality_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQuality)
}
SubscribedQuality::SubscribedQuality(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SubscribedQuality& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedQuality_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE SubscribedQuality::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void SubscribedQuality::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, quality_) +
               sizeof(Impl_::enabled_));
}
SubscribedQuality::~SubscribedQuality() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQuality)
  SharedDtor(*this);
}
inline void SubscribedQuality::SharedDtor(MessageLite& self) {
  SubscribedQuality& this_ = static_cast<SubscribedQuality&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscribedQuality::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscribedQuality(arena);
}
constexpr auto SubscribedQuality::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SubscribedQuality),
                                            alignof(SubscribedQuality));
}
constexpr auto SubscribedQuality::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscribedQuality_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscribedQuality::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscribedQuality>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscribedQuality::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscribedQuality>(), &SubscribedQuality::ByteSizeLong,
              &SubscribedQuality::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_._cached_size_),
          false,
      },
      &SubscribedQuality::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscribedQuality_class_data_ =
            SubscribedQuality::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscribedQuality::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscribedQuality_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscribedQuality_class_data_.tc_table);
  return SubscribedQuality_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
SubscribedQuality::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SubscribedQuality_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscribedQuality>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool enabled = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SubscribedQuality, _impl_.enabled_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.enabled_)}},
    // .livekit.VideoQuality quality = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscribedQuality, _impl_.quality_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.quality_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.VideoQuality quality = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.quality_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool enabled = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.enabled_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void SubscribedQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQuality)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.quality_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscribedQuality::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscribedQuality& this_ = static_cast<const SubscribedQuality&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscribedQuality::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscribedQuality& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQuality)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.VideoQuality quality = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_quality() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_quality(), target);
    }
  }

  // bool enabled = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_enabled(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQuality)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscribedQuality::ByteSizeLong(const MessageLite& base) {
  const SubscribedQuality& this_ = static_cast<const SubscribedQuality&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscribedQuality::ByteSizeLong() const {
  const SubscribedQuality& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQuality)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // .livekit.VideoQuality quality = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_quality() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_quality());
      }
    }
    // bool enabled = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_enabled() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscribedQuality::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscribedQuality*>(&to_msg);
  auto& from = static_cast<const SubscribedQuality&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQuality)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_quality() != 0) {
        _this->_impl_.quality_ = from._impl_.quality_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_enabled() != 0) {
        _this->_impl_.enabled_ = from._impl_.enabled_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQuality::CopyFrom(const SubscribedQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscribedQuality::InternalSwap(SubscribedQuality* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.enabled_)
      + sizeof(SubscribedQuality::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(SubscribedQuality, _impl_.quality_)>(
          reinterpret_cast<char*>(&_impl_.quality_),
          reinterpret_cast<char*>(&other->_impl_.quality_));
}

::google::protobuf::Metadata SubscribedQuality::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribedCodec::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscribedCodec>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_._has_bits_);
};

SubscribedCodec::SubscribedCodec(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedCodec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedCodec)
}
PROTOBUF_NDEBUG_INLINE SubscribedCodec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SubscribedCodec& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        qualities_{visibility, arena, from.qualities_},
        codec_(arena, from.codec_) {}

SubscribedCodec::SubscribedCodec(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SubscribedCodec& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedCodec_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribedCodec* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedCodec)
}
PROTOBUF_NDEBUG_INLINE SubscribedCodec::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        qualities_{visibility, arena},
        codec_(arena) {}

inline void SubscribedCodec::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribedCodec::~SubscribedCodec() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedCodec)
  SharedDtor(*this);
}
inline void SubscribedCodec::SharedDtor(MessageLite& self) {
  SubscribedCodec& this_ = static_cast<SubscribedCodec&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.codec_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscribedCodec::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscribedCodec(arena);
}
constexpr auto SubscribedCodec::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_.qualities_) +
          decltype(SubscribedCodec::_impl_.qualities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SubscribedCodec), alignof(SubscribedCodec), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SubscribedCodec::PlacementNew_,
                                 sizeof(SubscribedCodec),
                                 alignof(SubscribedCodec));
  }
}
constexpr auto SubscribedCodec::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscribedCodec_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscribedCodec::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscribedCodec>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscribedCodec::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscribedCodec>(), &SubscribedCodec::ByteSizeLong,
              &SubscribedCodec::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_._cached_size_),
          false,
      },
      &SubscribedCodec::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscribedCodec_class_data_ =
            SubscribedCodec::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscribedCodec::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscribedCodec_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscribedCodec_class_data_.tc_table);
  return SubscribedCodec_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 37, 2>
SubscribedCodec::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SubscribedCodec_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscribedCodec>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.SubscribedQuality qualities = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_.qualities_)}},
    // string codec = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_.codec_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string codec = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_.codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.SubscribedQuality qualities = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribedCodec, _impl_.qualities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SubscribedQuality>()},
  }},
  {{
    "\27\5\0\0\0\0\0\0"
    "livekit.SubscribedCodec"
    "codec"
  }},
};
PROTOBUF_NOINLINE void SubscribedCodec::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedCodec)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qualities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.codec_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscribedCodec::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscribedCodec& this_ = static_cast<const SubscribedCodec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscribedCodec::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscribedCodec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedCodec)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string codec = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_codec().empty()) {
      const std::string& _s = this_._internal_codec();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SubscribedCodec.codec");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .livekit.SubscribedQuality qualities = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_qualities_size());
       i < n; i++) {
    const auto& repfield = this_._internal_qualities().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedCodec)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscribedCodec::ByteSizeLong(const MessageLite& base) {
  const SubscribedCodec& this_ = static_cast<const SubscribedCodec&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscribedCodec::ByteSizeLong() const {
  const SubscribedCodec& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedCodec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.SubscribedQuality qualities = 2;
    {
      total_size += 1UL * this_._internal_qualities_size();
      for (const auto& msg : this_._internal_qualities()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // string codec = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_codec().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_codec());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscribedCodec::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscribedCodec*>(&to_msg);
  auto& from = static_cast<const SubscribedCodec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedCodec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_qualities()->MergeFrom(
      from._internal_qualities());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_codec().empty()) {
      _this->_internal_set_codec(from._internal_codec());
    } else {
      if (_this->_impl_.codec_.IsDefault()) {
        _this->_internal_set_codec("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedCodec::CopyFrom(const SubscribedCodec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedCodec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscribedCodec::InternalSwap(SubscribedCodec* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.qualities_.InternalSwap(&other->_impl_.qualities_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codec_, &other->_impl_.codec_, arena);
}

::google::protobuf::Metadata SubscribedCodec::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscribedQualityUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscribedQualityUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_._has_bits_);
};

SubscribedQualityUpdate::SubscribedQualityUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedQualityUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscribedQualityUpdate)
}
PROTOBUF_NDEBUG_INLINE SubscribedQualityUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SubscribedQualityUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        subscribed_qualities_{visibility, arena, from.subscribed_qualities_},
        subscribed_codecs_{visibility, arena, from.subscribed_codecs_},
        track_sid_(arena, from.track_sid_) {}

SubscribedQualityUpdate::SubscribedQualityUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SubscribedQualityUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscribedQualityUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscribedQualityUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.SubscribedQualityUpdate)
}
PROTOBUF_NDEBUG_INLINE SubscribedQualityUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        subscribed_qualities_{visibility, arena},
        subscribed_codecs_{visibility, arena},
        track_sid_(arena) {}

inline void SubscribedQualityUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SubscribedQualityUpdate::~SubscribedQualityUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscribedQualityUpdate)
  SharedDtor(*this);
}
inline void SubscribedQualityUpdate::SharedDtor(MessageLite& self) {
  SubscribedQualityUpdate& this_ = static_cast<SubscribedQualityUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscribedQualityUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscribedQualityUpdate(arena);
}
constexpr auto SubscribedQualityUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_qualities_) +
          decltype(SubscribedQualityUpdate::_impl_.subscribed_qualities_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_codecs_) +
          decltype(SubscribedQualityUpdate::_impl_.subscribed_codecs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SubscribedQualityUpdate), alignof(SubscribedQualityUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SubscribedQualityUpdate::PlacementNew_,
                                 sizeof(SubscribedQualityUpdate),
                                 alignof(SubscribedQualityUpdate));
  }
}
constexpr auto SubscribedQualityUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscribedQualityUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscribedQualityUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscribedQualityUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscribedQualityUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscribedQualityUpdate>(), &SubscribedQualityUpdate::ByteSizeLong,
              &SubscribedQualityUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_._cached_size_),
          false,
      },
      &SubscribedQualityUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscribedQualityUpdate_class_data_ =
            SubscribedQualityUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscribedQualityUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscribedQualityUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscribedQualityUpdate_class_data_.tc_table);
  return SubscribedQualityUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 49, 2>
SubscribedQualityUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SubscribedQualityUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscribedQualityUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.track_sid_)}},
    // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_qualities_)}},
    // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_codecs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
    {PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_qualities_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
    {PROTOBUF_FIELD_OFFSET(SubscribedQualityUpdate, _impl_.subscribed_codecs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SubscribedQuality>()},
      {::_pbi::TcParser::GetTable<::livekit::SubscribedCodec>()},
  }},
  {{
    "\37\11\0\0\0\0\0\0"
    "livekit.SubscribedQualityUpdate"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void SubscribedQualityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscribedQualityUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscribed_qualities_.Clear();
  _impl_.subscribed_codecs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscribedQualityUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscribedQualityUpdate& this_ = static_cast<const SubscribedQualityUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscribedQualityUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscribedQualityUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscribedQualityUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SubscribedQualityUpdate.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_subscribed_qualities_size());
       i < n; i++) {
    const auto& repfield = this_._internal_subscribed_qualities().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_subscribed_codecs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_subscribed_codecs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscribedQualityUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscribedQualityUpdate::ByteSizeLong(const MessageLite& base) {
  const SubscribedQualityUpdate& this_ = static_cast<const SubscribedQualityUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscribedQualityUpdate::ByteSizeLong() const {
  const SubscribedQualityUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscribedQualityUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.SubscribedQuality subscribed_qualities = 2;
    {
      total_size += 1UL * this_._internal_subscribed_qualities_size();
      for (const auto& msg : this_._internal_subscribed_qualities()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SubscribedCodec subscribed_codecs = 3;
    {
      total_size += 1UL * this_._internal_subscribed_codecs_size();
      for (const auto& msg : this_._internal_subscribed_codecs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // string track_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscribedQualityUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscribedQualityUpdate*>(&to_msg);
  auto& from = static_cast<const SubscribedQualityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscribedQualityUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subscribed_qualities()->MergeFrom(
      from._internal_subscribed_qualities());
  _this->_internal_mutable_subscribed_codecs()->MergeFrom(
      from._internal_subscribed_codecs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_track_sid().empty()) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    } else {
      if (_this->_impl_.track_sid_.IsDefault()) {
        _this->_internal_set_track_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribedQualityUpdate::CopyFrom(const SubscribedQualityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscribedQualityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscribedQualityUpdate::InternalSwap(SubscribedQualityUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subscribed_qualities_.InternalSwap(&other->_impl_.subscribed_qualities_);
  _impl_.subscribed_codecs_.InternalSwap(&other->_impl_.subscribed_codecs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
}

::google::protobuf::Metadata SubscribedQualityUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackPermission::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackPermission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_._has_bits_);
};

TrackPermission::TrackPermission(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackPermission)
}
PROTOBUF_NDEBUG_INLINE TrackPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackPermission& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sids_{visibility, arena, from.track_sids_},
        participant_sid_(arena, from.participant_sid_),
        participant_identity_(arena, from.participant_identity_) {}

TrackPermission::TrackPermission(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackPermission& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackPermission* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.all_tracks_ = from._impl_.all_tracks_;

  // @@protoc_insertion_point(copy_constructor:livekit.TrackPermission)
}
PROTOBUF_NDEBUG_INLINE TrackPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sids_{visibility, arena},
        participant_sid_(arena),
        participant_identity_(arena) {}

inline void TrackPermission::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.all_tracks_ = {};
}
TrackPermission::~TrackPermission() {
  // @@protoc_insertion_point(destructor:livekit.TrackPermission)
  SharedDtor(*this);
}
inline void TrackPermission::SharedDtor(MessageLite& self) {
  TrackPermission& this_ = static_cast<TrackPermission&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.participant_identity_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrackPermission::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackPermission(arena);
}
constexpr auto TrackPermission::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.track_sids_) +
          decltype(TrackPermission::_impl_.track_sids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TrackPermission), alignof(TrackPermission), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TrackPermission::PlacementNew_,
                                 sizeof(TrackPermission),
                                 alignof(TrackPermission));
  }
}
constexpr auto TrackPermission::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackPermission_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackPermission::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackPermission>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackPermission::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackPermission>(), &TrackPermission::ByteSizeLong,
              &TrackPermission::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_._cached_size_),
          false,
      },
      &TrackPermission::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackPermission_class_data_ =
            TrackPermission::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackPermission::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackPermission_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackPermission_class_data_.tc_table);
  return TrackPermission_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 77, 2>
TrackPermission::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TrackPermission_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackPermission>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string participant_identity = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.participant_identity_)}},
    // string participant_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.participant_sid_)}},
    // bool all_tracks = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TrackPermission, _impl_.all_tracks_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.all_tracks_)}},
    // repeated string track_sids = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.track_sids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1;
    {PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool all_tracks = 2;
    {PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.all_tracks_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated string track_sids = 3;
    {PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.track_sids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string participant_identity = 4;
    {PROTOBUF_FIELD_OFFSET(TrackPermission, _impl_.participant_identity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\17\0\12\24\0\0\0"
    "livekit.TrackPermission"
    "participant_sid"
    "track_sids"
    "participant_identity"
  }},
};
PROTOBUF_NOINLINE void TrackPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackPermission)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_sids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.participant_sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.all_tracks_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackPermission::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackPermission& this_ = static_cast<const TrackPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackPermission::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackPermission)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackPermission.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // bool all_tracks = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_all_tracks() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_all_tracks(), target);
    }
  }

  // repeated string track_sids = 3;
  for (int i = 0, n = this_._internal_track_sids_size(); i < n; ++i) {
    const auto& s = this_._internal_track_sids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackPermission.track_sids");
    target = stream->WriteString(3, s, target);
  }

  // string participant_identity = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackPermission.participant_identity");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackPermission)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackPermission::ByteSizeLong(const MessageLite& base) {
  const TrackPermission& this_ = static_cast<const TrackPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackPermission::ByteSizeLong() const {
  const TrackPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackPermission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string track_sids = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_track_sids().size());
      for (int i = 0, n = this_._internal_track_sids().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_track_sids().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string participant_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
    // string participant_identity = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // bool all_tracks = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_all_tracks() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackPermission::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackPermission*>(&to_msg);
  auto& from = static_cast<const TrackPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackPermission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_track_sids()->MergeFrom(from._internal_track_sids());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_sid().empty()) {
        _this->_internal_set_participant_sid(from._internal_participant_sid());
      } else {
        if (_this->_impl_.participant_sid_.IsDefault()) {
          _this->_internal_set_participant_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_all_tracks() != 0) {
        _this->_impl_.all_tracks_ = from._impl_.all_tracks_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackPermission::CopyFrom(const TrackPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackPermission::InternalSwap(TrackPermission* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.track_sids_.InternalSwap(&other->_impl_.track_sids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  swap(_impl_.all_tracks_, other->_impl_.all_tracks_);
}

::google::protobuf::Metadata TrackPermission::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscriptionPermission::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscriptionPermission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_._has_bits_);
};

SubscriptionPermission::SubscriptionPermission(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermission)
}
PROTOBUF_NDEBUG_INLINE SubscriptionPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SubscriptionPermission& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_permissions_{visibility, arena, from.track_permissions_} {}

SubscriptionPermission::SubscriptionPermission(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SubscriptionPermission& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionPermission_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscriptionPermission* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.all_participants_ = from._impl_.all_participants_;

  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermission)
}
PROTOBUF_NDEBUG_INLINE SubscriptionPermission::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_permissions_{visibility, arena} {}

inline void SubscriptionPermission::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.all_participants_ = {};
}
SubscriptionPermission::~SubscriptionPermission() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermission)
  SharedDtor(*this);
}
inline void SubscriptionPermission::SharedDtor(MessageLite& self) {
  SubscriptionPermission& this_ = static_cast<SubscriptionPermission&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscriptionPermission::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscriptionPermission(arena);
}
constexpr auto SubscriptionPermission::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_.track_permissions_) +
          decltype(SubscriptionPermission::_impl_.track_permissions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SubscriptionPermission), alignof(SubscriptionPermission), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SubscriptionPermission::PlacementNew_,
                                 sizeof(SubscriptionPermission),
                                 alignof(SubscriptionPermission));
  }
}
constexpr auto SubscriptionPermission::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscriptionPermission_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscriptionPermission::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscriptionPermission>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscriptionPermission::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscriptionPermission>(), &SubscriptionPermission::ByteSizeLong,
              &SubscriptionPermission::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_._cached_size_),
          false,
      },
      &SubscriptionPermission::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscriptionPermission_class_data_ =
            SubscriptionPermission::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscriptionPermission::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscriptionPermission_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscriptionPermission_class_data_.tc_table);
  return SubscriptionPermission_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2>
SubscriptionPermission::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SubscriptionPermission_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscriptionPermission>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.TrackPermission track_permissions = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_.track_permissions_)}},
    // bool all_participants = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SubscriptionPermission, _impl_.all_participants_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_.all_participants_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool all_participants = 1;
    {PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_.all_participants_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .livekit.TrackPermission track_permissions = 2;
    {PROTOBUF_FIELD_OFFSET(SubscriptionPermission, _impl_.track_permissions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::TrackPermission>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void SubscriptionPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermission)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_permissions_.Clear();
  _impl_.all_participants_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscriptionPermission::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscriptionPermission& this_ = static_cast<const SubscriptionPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscriptionPermission::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscriptionPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermission)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool all_participants = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_all_participants() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_all_participants(), target);
    }
  }

  // repeated .livekit.TrackPermission track_permissions = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_track_permissions_size());
       i < n; i++) {
    const auto& repfield = this_._internal_track_permissions().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermission)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscriptionPermission::ByteSizeLong(const MessageLite& base) {
  const SubscriptionPermission& this_ = static_cast<const SubscriptionPermission&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscriptionPermission::ByteSizeLong() const {
  const SubscriptionPermission& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TrackPermission track_permissions = 2;
    {
      total_size += 1UL * this_._internal_track_permissions_size();
      for (const auto& msg : this_._internal_track_permissions()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // bool all_participants = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_all_participants() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscriptionPermission::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscriptionPermission*>(&to_msg);
  auto& from = static_cast<const SubscriptionPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_track_permissions()->MergeFrom(
      from._internal_track_permissions());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_all_participants() != 0) {
      _this->_impl_.all_participants_ = from._impl_.all_participants_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermission::CopyFrom(const SubscriptionPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscriptionPermission::InternalSwap(SubscriptionPermission* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.track_permissions_.InternalSwap(&other->_impl_.track_permissions_);
  swap(_impl_.all_participants_, other->_impl_.all_participants_);
}

::google::protobuf::Metadata SubscriptionPermission::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscriptionPermissionUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscriptionPermissionUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_._has_bits_);
};

SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionPermissionUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionPermissionUpdate)
}
PROTOBUF_NDEBUG_INLINE SubscriptionPermissionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SubscriptionPermissionUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        participant_sid_(arena, from.participant_sid_),
        track_sid_(arena, from.track_sid_) {}

SubscriptionPermissionUpdate::SubscriptionPermissionUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SubscriptionPermissionUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionPermissionUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscriptionPermissionUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.allowed_ = from._impl_.allowed_;

  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionPermissionUpdate)
}
PROTOBUF_NDEBUG_INLINE SubscriptionPermissionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        participant_sid_(arena),
        track_sid_(arena) {}

inline void SubscriptionPermissionUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.allowed_ = {};
}
SubscriptionPermissionUpdate::~SubscriptionPermissionUpdate() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionPermissionUpdate)
  SharedDtor(*this);
}
inline void SubscriptionPermissionUpdate::SharedDtor(MessageLite& self) {
  SubscriptionPermissionUpdate& this_ = static_cast<SubscriptionPermissionUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.participant_sid_.Destroy();
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscriptionPermissionUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscriptionPermissionUpdate(arena);
}
constexpr auto SubscriptionPermissionUpdate::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SubscriptionPermissionUpdate),
                                            alignof(SubscriptionPermissionUpdate));
}
constexpr auto SubscriptionPermissionUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscriptionPermissionUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscriptionPermissionUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscriptionPermissionUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscriptionPermissionUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscriptionPermissionUpdate>(), &SubscriptionPermissionUpdate::ByteSizeLong,
              &SubscriptionPermissionUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_._cached_size_),
          false,
      },
      &SubscriptionPermissionUpdate::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscriptionPermissionUpdate_class_data_ =
            SubscriptionPermissionUpdate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscriptionPermissionUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscriptionPermissionUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscriptionPermissionUpdate_class_data_.tc_table);
  return SubscriptionPermissionUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 69, 2>
SubscriptionPermissionUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SubscriptionPermissionUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscriptionPermissionUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string participant_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.participant_sid_)}},
    // string track_sid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.track_sid_)}},
    // bool allowed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SubscriptionPermissionUpdate, _impl_.allowed_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.allowed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string participant_sid = 1;
    {PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.participant_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string track_sid = 2;
    {PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.track_sid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool allowed = 3;
    {PROTOBUF_FIELD_OFFSET(SubscriptionPermissionUpdate, _impl_.allowed_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\44\17\11\0\0\0\0\0"
    "livekit.SubscriptionPermissionUpdate"
    "participant_sid"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void SubscriptionPermissionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionPermissionUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.participant_sid_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.track_sid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.allowed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscriptionPermissionUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscriptionPermissionUpdate& this_ = static_cast<const SubscriptionPermissionUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscriptionPermissionUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscriptionPermissionUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionPermissionUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string participant_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_participant_sid().empty()) {
      const std::string& _s = this_._internal_participant_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SubscriptionPermissionUpdate.participant_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string track_sid = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SubscriptionPermissionUpdate.track_sid");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool allowed = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_allowed() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_allowed(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionPermissionUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscriptionPermissionUpdate::ByteSizeLong(const MessageLite& base) {
  const SubscriptionPermissionUpdate& this_ = static_cast<const SubscriptionPermissionUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscriptionPermissionUpdate::ByteSizeLong() const {
  const SubscriptionPermissionUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionPermissionUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string participant_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_participant_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_sid());
      }
    }
    // string track_sid = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
    // bool allowed = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_allowed() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscriptionPermissionUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscriptionPermissionUpdate*>(&to_msg);
  auto& from = static_cast<const SubscriptionPermissionUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionPermissionUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_participant_sid().empty()) {
        _this->_internal_set_participant_sid(from._internal_participant_sid());
      } else {
        if (_this->_impl_.participant_sid_.IsDefault()) {
          _this->_internal_set_participant_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_track_sid().empty()) {
        _this->_internal_set_track_sid(from._internal_track_sid());
      } else {
        if (_this->_impl_.track_sid_.IsDefault()) {
          _this->_internal_set_track_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_allowed() != 0) {
        _this->_impl_.allowed_ = from._impl_.allowed_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionPermissionUpdate::CopyFrom(const SubscriptionPermissionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionPermissionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscriptionPermissionUpdate::InternalSwap(SubscriptionPermissionUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_sid_, &other->_impl_.participant_sid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
  swap(_impl_.allowed_, other->_impl_.allowed_);
}

::google::protobuf::Metadata SubscriptionPermissionUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SyncState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SyncState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SyncState, _impl_._has_bits_);
};

SyncState::SyncState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SyncState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SyncState)
}
PROTOBUF_NDEBUG_INLINE SyncState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SyncState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        publish_tracks_{visibility, arena, from.publish_tracks_},
        data_channels_{visibility, arena, from.data_channels_},
        track_sids_disabled_{visibility, arena, from.track_sids_disabled_} {}

SyncState::SyncState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SyncState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SyncState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SyncState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.answer_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.answer_)
                : nullptr;
  _impl_.subscription_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.subscription_)
                : nullptr;
  _impl_.offer_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offer_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:livekit.SyncState)
}
PROTOBUF_NDEBUG_INLINE SyncState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        publish_tracks_{visibility, arena},
        data_channels_{visibility, arena},
        track_sids_disabled_{visibility, arena} {}

inline void SyncState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, answer_),
           0,
           offsetof(Impl_, offer_) -
               offsetof(Impl_, answer_) +
               sizeof(Impl_::offer_));
}
SyncState::~SyncState() {
  // @@protoc_insertion_point(destructor:livekit.SyncState)
  SharedDtor(*this);
}
inline void SyncState::SharedDtor(MessageLite& self) {
  SyncState& this_ = static_cast<SyncState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.answer_;
  delete this_._impl_.subscription_;
  delete this_._impl_.offer_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SyncState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SyncState(arena);
}
constexpr auto SyncState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SyncState, _impl_.publish_tracks_) +
          decltype(SyncState::_impl_.publish_tracks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SyncState, _impl_.data_channels_) +
          decltype(SyncState::_impl_.data_channels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SyncState, _impl_.track_sids_disabled_) +
          decltype(SyncState::_impl_.track_sids_disabled_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SyncState), alignof(SyncState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SyncState::PlacementNew_,
                                 sizeof(SyncState),
                                 alignof(SyncState));
  }
}
constexpr auto SyncState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SyncState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SyncState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SyncState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SyncState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SyncState>(), &SyncState::ByteSizeLong,
              &SyncState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SyncState, _impl_._cached_size_),
          false,
      },
      &SyncState::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SyncState_class_data_ =
            SyncState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SyncState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SyncState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SyncState_class_data_.tc_table);
  return SyncState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 45, 2>
SyncState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SyncState, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SyncState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SyncState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.SessionDescription answer = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.answer_)}},
    // .livekit.UpdateSubscription subscription = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.subscription_)}},
    // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.publish_tracks_)}},
    // repeated .livekit.DataChannelInfo data_channels = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.data_channels_)}},
    // .livekit.SessionDescription offer = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 4, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.offer_)}},
    // repeated string track_sids_disabled = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SyncState, _impl_.track_sids_disabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.SessionDescription answer = 1;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.answer_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.UpdateSubscription subscription = 2;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.subscription_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.publish_tracks_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.DataChannelInfo data_channels = 4;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.data_channels_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SessionDescription offer = 5;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.offer_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string track_sids_disabled = 6;
    {PROTOBUF_FIELD_OFFSET(SyncState, _impl_.track_sids_disabled_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
      {::_pbi::TcParser::GetTable<::livekit::UpdateSubscription>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackPublishedResponse>()},
      {::_pbi::TcParser::GetTable<::livekit::DataChannelInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::SessionDescription>()},
  }},
  {{
    "\21\0\0\0\0\0\23\0"
    "livekit.SyncState"
    "track_sids_disabled"
  }},
};
PROTOBUF_NOINLINE void SyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SyncState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publish_tracks_.Clear();
  _impl_.data_channels_.Clear();
  _impl_.track_sids_disabled_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.answer_ != nullptr);
      _impl_.answer_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.subscription_ != nullptr);
      _impl_.subscription_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.offer_ != nullptr);
      _impl_.offer_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SyncState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SyncState& this_ = static_cast<const SyncState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SyncState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SyncState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SyncState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.SessionDescription answer = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.answer_, this_._impl_.answer_->GetCachedSize(), target,
        stream);
  }

  // .livekit.UpdateSubscription subscription = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.subscription_, this_._impl_.subscription_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_publish_tracks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_publish_tracks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.DataChannelInfo data_channels = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_data_channels_size());
       i < n; i++) {
    const auto& repfield = this_._internal_data_channels().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .livekit.SessionDescription offer = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.offer_, this_._impl_.offer_->GetCachedSize(), target,
        stream);
  }

  // repeated string track_sids_disabled = 6;
  for (int i = 0, n = this_._internal_track_sids_disabled_size(); i < n; ++i) {
    const auto& s = this_._internal_track_sids_disabled().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SyncState.track_sids_disabled");
    target = stream->WriteString(6, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SyncState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SyncState::ByteSizeLong(const MessageLite& base) {
  const SyncState& this_ = static_cast<const SyncState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SyncState::ByteSizeLong() const {
  const SyncState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SyncState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TrackPublishedResponse publish_tracks = 3;
    {
      total_size += 1UL * this_._internal_publish_tracks_size();
      for (const auto& msg : this_._internal_publish_tracks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.DataChannelInfo data_channels = 4;
    {
      total_size += 1UL * this_._internal_data_channels_size();
      for (const auto& msg : this_._internal_data_channels()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated string track_sids_disabled = 6;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_track_sids_disabled().size());
      for (int i = 0, n = this_._internal_track_sids_disabled().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_track_sids_disabled().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .livekit.SessionDescription answer = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.answer_);
    }
    // .livekit.UpdateSubscription subscription = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.subscription_);
    }
    // .livekit.SessionDescription offer = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.offer_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SyncState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SyncState*>(&to_msg);
  auto& from = static_cast<const SyncState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SyncState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_publish_tracks()->MergeFrom(
      from._internal_publish_tracks());
  _this->_internal_mutable_data_channels()->MergeFrom(
      from._internal_data_channels());
  _this->_internal_mutable_track_sids_disabled()->MergeFrom(from._internal_track_sids_disabled());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.answer_ != nullptr);
      if (_this->_impl_.answer_ == nullptr) {
        _this->_impl_.answer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.answer_);
      } else {
        _this->_impl_.answer_->MergeFrom(*from._impl_.answer_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.subscription_ != nullptr);
      if (_this->_impl_.subscription_ == nullptr) {
        _this->_impl_.subscription_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.subscription_);
      } else {
        _this->_impl_.subscription_->MergeFrom(*from._impl_.subscription_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.offer_ != nullptr);
      if (_this->_impl_.offer_ == nullptr) {
        _this->_impl_.offer_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.offer_);
      } else {
        _this->_impl_.offer_->MergeFrom(*from._impl_.offer_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SyncState::CopyFrom(const SyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SyncState::InternalSwap(SyncState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.publish_tracks_.InternalSwap(&other->_impl_.publish_tracks_);
  _impl_.data_channels_.InternalSwap(&other->_impl_.data_channels_);
  _impl_.track_sids_disabled_.InternalSwap(&other->_impl_.track_sids_disabled_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncState, _impl_.offer_)
      + sizeof(SyncState::_impl_.offer_)
      - PROTOBUF_FIELD_OFFSET(SyncState, _impl_.answer_)>(
          reinterpret_cast<char*>(&_impl_.answer_),
          reinterpret_cast<char*>(&other->_impl_.answer_));
}

::google::protobuf::Metadata SyncState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataChannelInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DataChannelInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_._has_bits_);
};

DataChannelInfo::DataChannelInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataChannelInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DataChannelInfo)
}
PROTOBUF_NDEBUG_INLINE DataChannelInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DataChannelInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        label_(arena, from.label_) {}

DataChannelInfo::DataChannelInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DataChannelInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DataChannelInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataChannelInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, target_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::target_));

  // @@protoc_insertion_point(copy_constructor:livekit.DataChannelInfo)
}
PROTOBUF_NDEBUG_INLINE DataChannelInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        label_(arena) {}

inline void DataChannelInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, target_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::target_));
}
DataChannelInfo::~DataChannelInfo() {
  // @@protoc_insertion_point(destructor:livekit.DataChannelInfo)
  SharedDtor(*this);
}
inline void DataChannelInfo::SharedDtor(MessageLite& self) {
  DataChannelInfo& this_ = static_cast<DataChannelInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.label_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DataChannelInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DataChannelInfo(arena);
}
constexpr auto DataChannelInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DataChannelInfo),
                                            alignof(DataChannelInfo));
}
constexpr auto DataChannelInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DataChannelInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DataChannelInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DataChannelInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DataChannelInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DataChannelInfo>(), &DataChannelInfo::ByteSizeLong,
              &DataChannelInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_._cached_size_),
          false,
      },
      &DataChannelInfo::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DataChannelInfo_class_data_ =
            DataChannelInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DataChannelInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DataChannelInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DataChannelInfo_class_data_.tc_table);
  return DataChannelInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 37, 2>
DataChannelInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DataChannelInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DataChannelInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string label = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.label_)}},
    // uint32 id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataChannelInfo, _impl_.id_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.id_)}},
    // .livekit.SignalTarget target = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataChannelInfo, _impl_.target_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string label = 1;
    {PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.label_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 id = 2;
    {PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .livekit.SignalTarget target = 3;
    {PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.target_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\27\5\0\0\0\0\0\0"
    "livekit.DataChannelInfo"
    "label"
  }},
};
PROTOBUF_NOINLINE void DataChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DataChannelInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.label_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.target_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DataChannelInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DataChannelInfo& this_ = static_cast<const DataChannelInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DataChannelInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DataChannelInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DataChannelInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string label = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_label().empty()) {
      const std::string& _s = this_._internal_label();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DataChannelInfo.label");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // uint32 id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_id(), target);
    }
  }

  // .livekit.SignalTarget target = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_target() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_target(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DataChannelInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DataChannelInfo::ByteSizeLong(const MessageLite& base) {
  const DataChannelInfo& this_ = static_cast<const DataChannelInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DataChannelInfo::ByteSizeLong() const {
  const DataChannelInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DataChannelInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string label = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_label().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_label());
      }
    }
    // uint32 id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_id());
      }
    }
    // .livekit.SignalTarget target = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_target() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_target());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DataChannelInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataChannelInfo*>(&to_msg);
  auto& from = static_cast<const DataChannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DataChannelInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_label().empty()) {
        _this->_internal_set_label(from._internal_label());
      } else {
        if (_this->_impl_.label_.IsDefault()) {
          _this->_internal_set_label("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_id() != 0) {
        _this->_impl_.id_ = from._impl_.id_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_target() != 0) {
        _this->_impl_.target_ = from._impl_.target_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataChannelInfo::CopyFrom(const DataChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DataChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataChannelInfo::InternalSwap(DataChannelInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.target_)
      + sizeof(DataChannelInfo::_impl_.target_)
      - PROTOBUF_FIELD_OFFSET(DataChannelInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata DataChannelInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SimulateScenario::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::SimulateScenario, _impl_._oneof_case_);
};

SimulateScenario::SimulateScenario(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulateScenario_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SimulateScenario)
}
SimulateScenario::SimulateScenario(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const SimulateScenario& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SimulateScenario_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE SimulateScenario::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : scenario_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void SimulateScenario::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SimulateScenario::~SimulateScenario() {
  // @@protoc_insertion_point(destructor:livekit.SimulateScenario)
  SharedDtor(*this);
}
inline void SimulateScenario::SharedDtor(MessageLite& self) {
  SimulateScenario& this_ = static_cast<SimulateScenario&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_scenario()) {
    this_.clear_scenario();
  }
  this_._impl_.~Impl_();
}

void SimulateScenario::clear_scenario() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SimulateScenario)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (scenario_case()) {
    case kSpeakerUpdate: {
      // No need to clear
      break;
    }
    case kNodeFailure: {
      // No need to clear
      break;
    }
    case kMigration: {
      // No need to clear
      break;
    }
    case kServerLeave: {
      // No need to clear
      break;
    }
    case kSwitchCandidateProtocol: {
      // No need to clear
      break;
    }
    case kSubscriberBandwidth: {
      // No need to clear
      break;
    }
    case kDisconnectSignalOnResume: {
      // No need to clear
      break;
    }
    case kDisconnectSignalOnResumeNoMessages: {
      // No need to clear
      break;
    }
    case kLeaveRequestFullReconnect: {
      // No need to clear
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SCENARIO_NOT_SET;
}


inline void* PROTOBUF_NONNULL SimulateScenario::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SimulateScenario(arena);
}
constexpr auto SimulateScenario::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SimulateScenario),
                                            alignof(SimulateScenario));
}
constexpr auto SimulateScenario::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SimulateScenario_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SimulateScenario::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SimulateScenario>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SimulateScenario::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SimulateScenario>(), &SimulateScenario::ByteSizeLong,
              &SimulateScenario::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_._cached_size_),
          false,
      },
      &SimulateScenario::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SimulateScenario_class_data_ =
            SimulateScenario::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SimulateScenario::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SimulateScenario_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SimulateScenario_class_data_.tc_table);
  return SimulateScenario_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 9, 0, 0, 2>
SimulateScenario::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SimulateScenario_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SimulateScenario>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 speaker_update = 1;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.speaker_update_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // bool node_failure = 2;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.node_failure_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool migration = 3;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.migration_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool server_leave = 4;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.server_leave_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // .livekit.CandidateProtocol switch_candidate_protocol = 5;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.switch_candidate_protocol_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // int64 subscriber_bandwidth = 6;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.subscriber_bandwidth_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // bool disconnect_signal_on_resume = 7;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.disconnect_signal_on_resume_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool disconnect_signal_on_resume_no_messages = 8;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.disconnect_signal_on_resume_no_messages_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // bool leave_request_full_reconnect = 9;
    {PROTOBUF_FIELD_OFFSET(SimulateScenario, _impl_.scenario_.leave_request_full_reconnect_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void SimulateScenario::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SimulateScenario)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_scenario();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SimulateScenario::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SimulateScenario& this_ = static_cast<const SimulateScenario&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SimulateScenario::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SimulateScenario& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SimulateScenario)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.scenario_case()) {
    case kSpeakerUpdate: {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_speaker_update(), target);
      break;
    }
    case kNodeFailure: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_node_failure(), target);
      break;
    }
    case kMigration: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_migration(), target);
      break;
    }
    case kServerLeave: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_server_leave(), target);
      break;
    }
    case kSwitchCandidateProtocol: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_switch_candidate_protocol(), target);
      break;
    }
    case kSubscriberBandwidth: {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
              stream, this_._internal_subscriber_bandwidth(), target);
      break;
    }
    case kDisconnectSignalOnResume: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_disconnect_signal_on_resume(), target);
      break;
    }
    case kDisconnectSignalOnResumeNoMessages: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_disconnect_signal_on_resume_no_messages(), target);
      break;
    }
    case kLeaveRequestFullReconnect: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_leave_request_full_reconnect(), target);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SimulateScenario)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SimulateScenario::ByteSizeLong(const MessageLite& base) {
  const SimulateScenario& this_ = static_cast<const SimulateScenario&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SimulateScenario::ByteSizeLong() const {
  const SimulateScenario& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SimulateScenario)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.scenario_case()) {
    // int32 speaker_update = 1;
    case kSpeakerUpdate: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_speaker_update());
      break;
    }
    // bool node_failure = 2;
    case kNodeFailure: {
      total_size += 2;
      break;
    }
    // bool migration = 3;
    case kMigration: {
      total_size += 2;
      break;
    }
    // bool server_leave = 4;
    case kServerLeave: {
      total_size += 2;
      break;
    }
    // .livekit.CandidateProtocol switch_candidate_protocol = 5;
    case kSwitchCandidateProtocol: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_switch_candidate_protocol());
      break;
    }
    // int64 subscriber_bandwidth = 6;
    case kSubscriberBandwidth: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this_._internal_subscriber_bandwidth());
      break;
    }
    // bool disconnect_signal_on_resume = 7;
    case kDisconnectSignalOnResume: {
      total_size += 2;
      break;
    }
    // bool disconnect_signal_on_resume_no_messages = 8;
    case kDisconnectSignalOnResumeNoMessages: {
      total_size += 2;
      break;
    }
    // bool leave_request_full_reconnect = 9;
    case kLeaveRequestFullReconnect: {
      total_size += 2;
      break;
    }
    case SCENARIO_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SimulateScenario::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SimulateScenario*>(&to_msg);
  auto& from = static_cast<const SimulateScenario&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SimulateScenario)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_scenario();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kSpeakerUpdate: {
        _this->_impl_.scenario_.speaker_update_ = from._impl_.scenario_.speaker_update_;
        break;
      }
      case kNodeFailure: {
        _this->_impl_.scenario_.node_failure_ = from._impl_.scenario_.node_failure_;
        break;
      }
      case kMigration: {
        _this->_impl_.scenario_.migration_ = from._impl_.scenario_.migration_;
        break;
      }
      case kServerLeave: {
        _this->_impl_.scenario_.server_leave_ = from._impl_.scenario_.server_leave_;
        break;
      }
      case kSwitchCandidateProtocol: {
        _this->_impl_.scenario_.switch_candidate_protocol_ = from._impl_.scenario_.switch_candidate_protocol_;
        break;
      }
      case kSubscriberBandwidth: {
        _this->_impl_.scenario_.subscriber_bandwidth_ = from._impl_.scenario_.subscriber_bandwidth_;
        break;
      }
      case kDisconnectSignalOnResume: {
        _this->_impl_.scenario_.disconnect_signal_on_resume_ = from._impl_.scenario_.disconnect_signal_on_resume_;
        break;
      }
      case kDisconnectSignalOnResumeNoMessages: {
        _this->_impl_.scenario_.disconnect_signal_on_resume_no_messages_ = from._impl_.scenario_.disconnect_signal_on_resume_no_messages_;
        break;
      }
      case kLeaveRequestFullReconnect: {
        _this->_impl_.scenario_.leave_request_full_reconnect_ = from._impl_.scenario_.leave_request_full_reconnect_;
        break;
      }
      case SCENARIO_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SimulateScenario::CopyFrom(const SimulateScenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SimulateScenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SimulateScenario::InternalSwap(SimulateScenario* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.scenario_, other->_impl_.scenario_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SimulateScenario::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Ping::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Ping>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Ping, _impl_._has_bits_);
};

Ping::Ping(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Ping_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Ping)
}
Ping::Ping(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Ping& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Ping_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Ping::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Ping::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, rtt_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::rtt_));
}
Ping::~Ping() {
  // @@protoc_insertion_point(destructor:livekit.Ping)
  SharedDtor(*this);
}
inline void Ping::SharedDtor(MessageLite& self) {
  Ping& this_ = static_cast<Ping&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Ping::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Ping(arena);
}
constexpr auto Ping::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Ping),
                                            alignof(Ping));
}
constexpr auto Ping::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Ping_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Ping::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Ping>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Ping::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Ping>(), &Ping::ByteSizeLong,
              &Ping::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Ping, _impl_._cached_size_),
          false,
      },
      &Ping::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Ping_class_data_ =
            Ping::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Ping::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Ping_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Ping_class_data_.tc_table);
  return Ping_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
Ping::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Ping, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Ping_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Ping>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 rtt = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Ping, _impl_.rtt_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Ping, _impl_.rtt_)}},
    // int64 timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Ping, _impl_.timestamp_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Ping, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(Ping, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 rtt = 2;
    {PROTOBUF_FIELD_OFFSET(Ping, _impl_.rtt_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Ping)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rtt_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.rtt_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Ping::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Ping& this_ = static_cast<const Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Ping::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Ping)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 timestamp = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_timestamp(), target);
    }
  }

  // int64 rtt = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_rtt() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_rtt(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Ping)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Ping::ByteSizeLong(const MessageLite& base) {
  const Ping& this_ = static_cast<const Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Ping::ByteSizeLong() const {
  const Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Ping)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int64 timestamp = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
    // int64 rtt = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_rtt() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_rtt());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Ping::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Ping*>(&to_msg);
  auto& from = static_cast<const Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Ping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_rtt() != 0) {
        _this->_impl_.rtt_ = from._impl_.rtt_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Ping::InternalSwap(Ping* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, _impl_.rtt_)
      + sizeof(Ping::_impl_.rtt_)
      - PROTOBUF_FIELD_OFFSET(Ping, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Pong::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Pong>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Pong, _impl_._has_bits_);
};

Pong::Pong(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pong_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.Pong)
}
Pong::Pong(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Pong& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Pong_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE Pong::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void Pong::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_ping_timestamp_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, last_ping_timestamp_) +
               sizeof(Impl_::timestamp_));
}
Pong::~Pong() {
  // @@protoc_insertion_point(destructor:livekit.Pong)
  SharedDtor(*this);
}
inline void Pong::SharedDtor(MessageLite& self) {
  Pong& this_ = static_cast<Pong&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Pong::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Pong(arena);
}
constexpr auto Pong::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Pong),
                                            alignof(Pong));
}
constexpr auto Pong::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Pong_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Pong::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Pong>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Pong::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Pong>(), &Pong::ByteSizeLong,
              &Pong::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Pong, _impl_._cached_size_),
          false,
      },
      &Pong::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Pong_class_data_ =
            Pong::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Pong::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Pong_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Pong_class_data_.tc_table);
  return Pong_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
Pong::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Pong, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Pong_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::Pong>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Pong, _impl_.timestamp_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(Pong, _impl_.timestamp_)}},
    // int64 last_ping_timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Pong, _impl_.last_ping_timestamp_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Pong, _impl_.last_ping_timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 last_ping_timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(Pong, _impl_.last_ping_timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(Pong, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.Pong)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.last_ping_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.last_ping_timestamp_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Pong::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Pong& this_ = static_cast<const Pong&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Pong::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Pong& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.Pong)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 last_ping_timestamp = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_last_ping_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_last_ping_timestamp(), target);
    }
  }

  // int64 timestamp = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_timestamp() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_timestamp(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.Pong)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Pong::ByteSizeLong(const MessageLite& base) {
  const Pong& this_ = static_cast<const Pong&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Pong::ByteSizeLong() const {
  const Pong& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.Pong)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // int64 last_ping_timestamp = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_last_ping_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_last_ping_timestamp());
      }
    }
    // int64 timestamp = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_timestamp() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_timestamp());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Pong::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Pong*>(&to_msg);
  auto& from = static_cast<const Pong&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.Pong)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_last_ping_timestamp() != 0) {
        _this->_impl_.last_ping_timestamp_ = from._impl_.last_ping_timestamp_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_timestamp() != 0) {
        _this->_impl_.timestamp_ = from._impl_.timestamp_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Pong::InternalSwap(Pong* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pong, _impl_.timestamp_)
      + sizeof(Pong::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Pong, _impl_.last_ping_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.last_ping_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.last_ping_timestamp_));
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RegionSettings::_Internal {
 public:
};

RegionSettings::RegionSettings(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RegionSettings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RegionSettings)
}
PROTOBUF_NDEBUG_INLINE RegionSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RegionSettings& from_msg)
      : regions_{visibility, arena, from.regions_},
        _cached_size_{0} {}

RegionSettings::RegionSettings(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RegionSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RegionSettings_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RegionSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.RegionSettings)
}
PROTOBUF_NDEBUG_INLINE RegionSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : regions_{visibility, arena},
        _cached_size_{0} {}

inline void RegionSettings::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RegionSettings::~RegionSettings() {
  // @@protoc_insertion_point(destructor:livekit.RegionSettings)
  SharedDtor(*this);
}
inline void RegionSettings::SharedDtor(MessageLite& self) {
  RegionSettings& this_ = static_cast<RegionSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RegionSettings::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RegionSettings(arena);
}
constexpr auto RegionSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RegionSettings, _impl_.regions_) +
          decltype(RegionSettings::_impl_.regions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(RegionSettings), alignof(RegionSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RegionSettings::PlacementNew_,
                                 sizeof(RegionSettings),
                                 alignof(RegionSettings));
  }
}
constexpr auto RegionSettings::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RegionSettings_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RegionSettings::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RegionSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RegionSettings::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RegionSettings>(), &RegionSettings::ByteSizeLong,
              &RegionSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RegionSettings, _impl_._cached_size_),
          false,
      },
      &RegionSettings::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RegionSettings_class_data_ =
            RegionSettings::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RegionSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RegionSettings_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RegionSettings_class_data_.tc_table);
  return RegionSettings_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
RegionSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RegionSettings_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RegionSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.RegionInfo regions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegionSettings, _impl_.regions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.RegionInfo regions = 1;
    {PROTOBUF_FIELD_OFFSET(RegionSettings, _impl_.regions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::RegionInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void RegionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegionSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RegionSettings::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RegionSettings& this_ = static_cast<const RegionSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RegionSettings::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RegionSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegionSettings)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.RegionInfo regions = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_regions_size());
       i < n; i++) {
    const auto& repfield = this_._internal_regions().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegionSettings)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RegionSettings::ByteSizeLong(const MessageLite& base) {
  const RegionSettings& this_ = static_cast<const RegionSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RegionSettings::ByteSizeLong() const {
  const RegionSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RegionSettings)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.RegionInfo regions = 1;
    {
      total_size += 1UL * this_._internal_regions_size();
      for (const auto& msg : this_._internal_regions()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RegionSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RegionSettings*>(&to_msg);
  auto& from = static_cast<const RegionSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegionSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_regions()->MergeFrom(
      from._internal_regions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegionSettings::CopyFrom(const RegionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RegionSettings::InternalSwap(RegionSettings* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.regions_.InternalSwap(&other->_impl_.regions_);
}

::google::protobuf::Metadata RegionSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RegionInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RegionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_._has_bits_);
};

RegionInfo::RegionInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RegionInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RegionInfo)
}
PROTOBUF_NDEBUG_INLINE RegionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RegionInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        region_(arena, from.region_),
        url_(arena, from.url_) {}

RegionInfo::RegionInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RegionInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RegionInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RegionInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.distance_ = from._impl_.distance_;

  // @@protoc_insertion_point(copy_constructor:livekit.RegionInfo)
}
PROTOBUF_NDEBUG_INLINE RegionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        region_(arena),
        url_(arena) {}

inline void RegionInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.distance_ = {};
}
RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:livekit.RegionInfo)
  SharedDtor(*this);
}
inline void RegionInfo::SharedDtor(MessageLite& self) {
  RegionInfo& this_ = static_cast<RegionInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.region_.Destroy();
  this_._impl_.url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RegionInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RegionInfo(arena);
}
constexpr auto RegionInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RegionInfo),
                                            alignof(RegionInfo));
}
constexpr auto RegionInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RegionInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RegionInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RegionInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RegionInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RegionInfo>(), &RegionInfo::ByteSizeLong,
              &RegionInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_._cached_size_),
          false,
      },
      &RegionInfo::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RegionInfo_class_data_ =
            RegionInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RegionInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RegionInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RegionInfo_class_data_.tc_table);
  return RegionInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 36, 2>
RegionInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RegionInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RegionInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string region = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.region_)}},
    // string url = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.url_)}},
    // int64 distance = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RegionInfo, _impl_.distance_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.distance_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string region = 1;
    {PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.region_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string url = 2;
    {PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 distance = 3;
    {PROTOBUF_FIELD_OFFSET(RegionInfo, _impl_.distance_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\22\6\3\0\0\0\0\0"
    "livekit.RegionInfo"
    "region"
    "url"
  }},
};
PROTOBUF_NOINLINE void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RegionInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.distance_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RegionInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RegionInfo& this_ = static_cast<const RegionInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RegionInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RegionInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RegionInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string region = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_region().empty()) {
      const std::string& _s = this_._internal_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RegionInfo.region");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string url = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RegionInfo.url");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int64 distance = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_distance() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_distance(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RegionInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RegionInfo::ByteSizeLong(const MessageLite& base) {
  const RegionInfo& this_ = static_cast<const RegionInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RegionInfo::ByteSizeLong() const {
  const RegionInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RegionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string region = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_region());
      }
    }
    // string url = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // int64 distance = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_distance() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_distance());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RegionInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RegionInfo*>(&to_msg);
  auto& from = static_cast<const RegionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RegionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_region().empty()) {
        _this->_internal_set_region(from._internal_region());
      } else {
        if (_this->_impl_.region_.IsDefault()) {
          _this->_internal_set_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_distance() != 0) {
        _this->_impl_.distance_ = from._impl_.distance_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RegionInfo::InternalSwap(RegionInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  swap(_impl_.distance_, other->_impl_.distance_);
}

::google::protobuf::Metadata RegionInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SubscriptionResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SubscriptionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_._has_bits_);
};

SubscriptionResponse::SubscriptionResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SubscriptionResponse)
}
PROTOBUF_NDEBUG_INLINE SubscriptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SubscriptionResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sid_(arena, from.track_sid_) {}

SubscriptionResponse::SubscriptionResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SubscriptionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SubscriptionResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SubscriptionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.err_ = from._impl_.err_;

  // @@protoc_insertion_point(copy_constructor:livekit.SubscriptionResponse)
}
PROTOBUF_NDEBUG_INLINE SubscriptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sid_(arena) {}

inline void SubscriptionResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.err_ = {};
}
SubscriptionResponse::~SubscriptionResponse() {
  // @@protoc_insertion_point(destructor:livekit.SubscriptionResponse)
  SharedDtor(*this);
}
inline void SubscriptionResponse::SharedDtor(MessageLite& self) {
  SubscriptionResponse& this_ = static_cast<SubscriptionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SubscriptionResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SubscriptionResponse(arena);
}
constexpr auto SubscriptionResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SubscriptionResponse),
                                            alignof(SubscriptionResponse));
}
constexpr auto SubscriptionResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SubscriptionResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SubscriptionResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SubscriptionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SubscriptionResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SubscriptionResponse>(), &SubscriptionResponse::ByteSizeLong,
              &SubscriptionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_._cached_size_),
          false,
      },
      &SubscriptionResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SubscriptionResponse_class_data_ =
            SubscriptionResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SubscriptionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SubscriptionResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SubscriptionResponse_class_data_.tc_table);
  return SubscriptionResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 46, 2>
SubscriptionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SubscriptionResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SubscriptionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.SubscriptionError err = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SubscriptionResponse, _impl_.err_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.err_)}},
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.track_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.SubscriptionError err = 2;
    {PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.err_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\34\11\0\0\0\0\0\0"
    "livekit.SubscriptionResponse"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void SubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SubscriptionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_.err_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SubscriptionResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SubscriptionResponse& this_ = static_cast<const SubscriptionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SubscriptionResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SubscriptionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SubscriptionResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SubscriptionResponse.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.SubscriptionError err = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_err() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_err(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SubscriptionResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SubscriptionResponse::ByteSizeLong(const MessageLite& base) {
  const SubscriptionResponse& this_ = static_cast<const SubscriptionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SubscriptionResponse::ByteSizeLong() const {
  const SubscriptionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SubscriptionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string track_sid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
    // .livekit.SubscriptionError err = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_err() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_err());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SubscriptionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SubscriptionResponse*>(&to_msg);
  auto& from = static_cast<const SubscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SubscriptionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_track_sid().empty()) {
        _this->_internal_set_track_sid(from._internal_track_sid());
      } else {
        if (_this->_impl_.track_sid_.IsDefault()) {
          _this->_internal_set_track_sid("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_err() != 0) {
        _this->_impl_.err_ = from._impl_.err_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionResponse::CopyFrom(const SubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SubscriptionResponse::InternalSwap(SubscriptionResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
  swap(_impl_.err_, other->_impl_.err_);
}

::google::protobuf::Metadata SubscriptionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RequestResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RequestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_._has_bits_);
};

RequestResponse::RequestResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RequestResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RequestResponse)
}
PROTOBUF_NDEBUG_INLINE RequestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RequestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

RequestResponse::RequestResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RequestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RequestResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RequestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, request_id_),
           offsetof(Impl_, reason_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::reason_));

  // @@protoc_insertion_point(copy_constructor:livekit.RequestResponse)
}
PROTOBUF_NDEBUG_INLINE RequestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        message_(arena) {}

inline void RequestResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, request_id_),
           0,
           offsetof(Impl_, reason_) -
               offsetof(Impl_, request_id_) +
               sizeof(Impl_::reason_));
}
RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:livekit.RequestResponse)
  SharedDtor(*this);
}
inline void RequestResponse::SharedDtor(MessageLite& self) {
  RequestResponse& this_ = static_cast<RequestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RequestResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RequestResponse(arena);
}
constexpr auto RequestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RequestResponse),
                                            alignof(RequestResponse));
}
constexpr auto RequestResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RequestResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RequestResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RequestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RequestResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RequestResponse>(), &RequestResponse::ByteSizeLong,
              &RequestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_._cached_size_),
          false,
      },
      &RequestResponse::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RequestResponse_class_data_ =
            RequestResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RequestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RequestResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RequestResponse_class_data_.tc_table);
  return RequestResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 39, 2>
RequestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    RequestResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RequestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 request_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestResponse, _impl_.request_id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.request_id_)}},
    // .livekit.RequestResponse.Reason reason = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestResponse, _impl_.reason_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.reason_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 request_id = 1;
    {PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.request_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .livekit.RequestResponse.Reason reason = 2;
    {PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.reason_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\0\7\0\0\0\0"
    "livekit.RequestResponse"
    "message"
  }},
};
PROTOBUF_NOINLINE void RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RequestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.request_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RequestResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RequestResponse& this_ = static_cast<const RequestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RequestResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RequestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RequestResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 request_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_request_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_request_id(), target);
    }
  }

  // .livekit.RequestResponse.Reason reason = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_reason() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_reason(), target);
    }
  }

  // string message = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_message().empty()) {
      const std::string& _s = this_._internal_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RequestResponse.message");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RequestResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RequestResponse::ByteSizeLong(const MessageLite& base) {
  const RequestResponse& this_ = static_cast<const RequestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RequestResponse::ByteSizeLong() const {
  const RequestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RequestResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string message = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_message());
      }
    }
    // uint32 request_id = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_request_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_request_id());
      }
    }
    // .livekit.RequestResponse.Reason reason = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_reason() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_reason());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RequestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RequestResponse*>(&to_msg);
  auto& from = static_cast<const RequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RequestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_message().empty()) {
        _this->_internal_set_message(from._internal_message());
      } else {
        if (_this->_impl_.message_.IsDefault()) {
          _this->_internal_set_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_request_id() != 0) {
        _this->_impl_.request_id_ = from._impl_.request_id_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_reason() != 0) {
        _this->_impl_.reason_ = from._impl_.reason_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RequestResponse::InternalSwap(RequestResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.reason_)
      + sizeof(RequestResponse::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(RequestResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::google::protobuf::Metadata RequestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackSubscribed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackSubscribed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackSubscribed, _impl_._has_bits_);
};

TrackSubscribed::TrackSubscribed(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackSubscribed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackSubscribed)
}
PROTOBUF_NDEBUG_INLINE TrackSubscribed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackSubscribed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        track_sid_(arena, from.track_sid_) {}

TrackSubscribed::TrackSubscribed(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackSubscribed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackSubscribed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackSubscribed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.TrackSubscribed)
}
PROTOBUF_NDEBUG_INLINE TrackSubscribed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        track_sid_(arena) {}

inline void TrackSubscribed::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrackSubscribed::~TrackSubscribed() {
  // @@protoc_insertion_point(destructor:livekit.TrackSubscribed)
  SharedDtor(*this);
}
inline void TrackSubscribed::SharedDtor(MessageLite& self) {
  TrackSubscribed& this_ = static_cast<TrackSubscribed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.track_sid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TrackSubscribed::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackSubscribed(arena);
}
constexpr auto TrackSubscribed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TrackSubscribed),
                                            alignof(TrackSubscribed));
}
constexpr auto TrackSubscribed::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackSubscribed_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackSubscribed::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackSubscribed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackSubscribed::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackSubscribed>(), &TrackSubscribed::ByteSizeLong,
              &TrackSubscribed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackSubscribed, _impl_._cached_size_),
          false,
      },
      &TrackSubscribed::kDescriptorMethods,
      &descriptor_table_livekit_5frtc_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackSubscribed_class_data_ =
            TrackSubscribed::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackSubscribed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackSubscribed_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackSubscribed_class_data_.tc_table);
  return TrackSubscribed_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 41, 2>
TrackSubscribed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackSubscribed, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    TrackSubscribed_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackSubscribed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string track_sid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackSubscribed, _impl_.track_sid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string track_sid = 1;
    {PROTOBUF_FIELD_OFFSET(TrackSubscribed, _impl_.track_sid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\11\0\0\0\0\0\0"
    "livekit.TrackSubscribed"
    "track_sid"
  }},
};
PROTOBUF_NOINLINE void TrackSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackSubscribed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.track_sid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackSubscribed::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackSubscribed& this_ = static_cast<const TrackSubscribed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackSubscribed::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackSubscribed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackSubscribed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string track_sid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_track_sid().empty()) {
      const std::string& _s = this_._internal_track_sid();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackSubscribed.track_sid");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackSubscribed)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackSubscribed::ByteSizeLong(const MessageLite& base) {
  const TrackSubscribed& this_ = static_cast<const TrackSubscribed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackSubscribed::ByteSizeLong() const {
  const TrackSubscribed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackSubscribed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string track_sid = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_track_sid().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_sid());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackSubscribed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackSubscribed*>(&to_msg);
  auto& from = static_cast<const TrackSubscribed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackSubscribed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_track_sid().empty()) {
      _this->_internal_set_track_sid(from._internal_track_sid());
    } else {
      if (_this->_impl_.track_sid_.IsDefault()) {
        _this->_internal_set_track_sid("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackSubscribed::CopyFrom(const TrackSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackSubscribed::InternalSwap(TrackSubscribed* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_sid_, &other->_impl_.track_sid_, arena);
}

::google::protobuf::Metadata TrackSubscribed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_livekit_5frtc_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
