// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_egress.proto
// Protobuf C++ Version: 6.30.1

#include "livekit_egress.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace livekit {

inline constexpr UpdateStreamRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        add_output_urls_{},
        remove_output_urls_{},
        egress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR UpdateStreamRequest::UpdateStreamRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateStreamRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateStreamRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateStreamRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateStreamRequestDefaultTypeInternal() {}
  union {
    UpdateStreamRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateStreamRequestDefaultTypeInternal _UpdateStreamRequest_default_instance_;

inline constexpr UpdateLayoutRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        egress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        layout_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR UpdateLayoutRequest::UpdateLayoutRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateLayoutRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateLayoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateLayoutRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateLayoutRequestDefaultTypeInternal() {}
  union {
    UpdateLayoutRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateLayoutRequestDefaultTypeInternal _UpdateLayoutRequest_default_instance_;

inline constexpr StreamOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        urls_{},
        protocol_{static_cast< ::livekit::StreamProtocol >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR StreamOutput::StreamOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOutputDefaultTypeInternal() {}
  union {
    StreamOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOutputDefaultTypeInternal _StreamOutput_default_instance_;

inline constexpr StreamInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}},
        duration_{::int64_t{0}},
        status_{static_cast< ::livekit::StreamInfo_Status >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR StreamInfo::StreamInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoDefaultTypeInternal() {}
  union {
    StreamInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;

inline constexpr StopEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        egress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR StopEgressRequest::StopEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StopEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StopEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopEgressRequestDefaultTypeInternal() {}
  union {
    StopEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopEgressRequestDefaultTypeInternal _StopEgressRequest_default_instance_;

inline constexpr SegmentsInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        playlist_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        playlist_location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        live_playlist_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        live_playlist_location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        duration_{::int64_t{0}},
        size_{::int64_t{0}},
        segment_count_{::int64_t{0}},
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR SegmentsInfo::SegmentsInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SegmentsInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SegmentsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentsInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentsInfoDefaultTypeInternal() {}
  union {
    SegmentsInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentsInfoDefaultTypeInternal _SegmentsInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : S3Upload_MetadataEntry_DoNotUse::MapEntry(S3Upload_MetadataEntry_DoNotUse_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : S3Upload_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    S3Upload_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3Upload_MetadataEntry_DoNotUseDefaultTypeInternal _S3Upload_MetadataEntry_DoNotUse_default_instance_;

inline constexpr ProxyConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ProxyConfig::ProxyConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ProxyConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProxyConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProxyConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProxyConfigDefaultTypeInternal() {}
  union {
    ProxyConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProxyConfigDefaultTypeInternal _ProxyConfig_default_instance_;

inline constexpr ListEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        egress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        active_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ListEgressRequest::ListEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ListEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEgressRequestDefaultTypeInternal() {}
  union {
    ListEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEgressRequestDefaultTypeInternal _ListEgressRequest_default_instance_;

inline constexpr ImagesInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filename_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        image_count_{::int64_t{0}},
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ImagesInfo::ImagesInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ImagesInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImagesInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesInfoDefaultTypeInternal() {}
  union {
    ImagesInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesInfoDefaultTypeInternal _ImagesInfo_default_instance_;

inline constexpr FileInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filename_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}},
        size_{::int64_t{0}},
        duration_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR FileInfo::FileInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FileInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileInfoDefaultTypeInternal _FileInfo_default_instance_;

inline constexpr EncodingOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        width_{0},
        height_{0},
        depth_{0},
        framerate_{0},
        audio_codec_{static_cast< ::livekit::AudioCodec >(0)},
        audio_bitrate_{0},
        audio_frequency_{0},
        video_codec_{static_cast< ::livekit::VideoCodec >(0)},
        key_frame_interval_{0},
        video_bitrate_{0},
        audio_quality_{0},
        video_quality_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EncodingOptions::EncodingOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EncodingOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EncodingOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodingOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodingOptionsDefaultTypeInternal() {}
  union {
    EncodingOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodingOptionsDefaultTypeInternal _EncodingOptions_default_instance_;

inline constexpr AzureBlobUpload::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        container_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR AzureBlobUpload::AzureBlobUpload(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AzureBlobUpload_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AzureBlobUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AzureBlobUploadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AzureBlobUploadDefaultTypeInternal() {}
  union {
    AzureBlobUpload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AzureBlobUploadDefaultTypeInternal _AzureBlobUpload_default_instance_;

inline constexpr AliOSSUpload::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        access_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        secret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR AliOSSUpload::AliOSSUpload(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AliOSSUpload_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AliOSSUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AliOSSUploadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AliOSSUploadDefaultTypeInternal() {}
  union {
    AliOSSUpload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AliOSSUploadDefaultTypeInternal _AliOSSUpload_default_instance_;

inline constexpr StreamInfoList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : info_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamInfoList::StreamInfoList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(StreamInfoList_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamInfoListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamInfoListDefaultTypeInternal() {}
  union {
    StreamInfoList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamInfoListDefaultTypeInternal _StreamInfoList_default_instance_;

inline constexpr S3Upload::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_{},
        access_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        secret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        endpoint_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tagging_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_disposition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proxy_{nullptr},
        force_path_style_{false} {}

template <typename>
PROTOBUF_CONSTEXPR S3Upload::S3Upload(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(S3Upload_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct S3UploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S3UploadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~S3UploadDefaultTypeInternal() {}
  union {
    S3Upload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S3UploadDefaultTypeInternal _S3Upload_default_instance_;

inline constexpr GCPUpload::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        credentials_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bucket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        proxy_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GCPUpload::GCPUpload(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GCPUpload_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GCPUploadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GCPUploadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GCPUploadDefaultTypeInternal() {}
  union {
    GCPUpload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GCPUploadDefaultTypeInternal _GCPUpload_default_instance_;

inline constexpr SegmentedFileOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filename_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        playlist_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        live_playlist_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        protocol_{static_cast< ::livekit::SegmentedFileProtocol >(0)},
        segment_duration_{0u},
        disable_manifest_{false},
        filename_suffix_{static_cast< ::livekit::SegmentedFileSuffix >(0)},
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SegmentedFileOutput::SegmentedFileOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(SegmentedFileOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SegmentedFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SegmentedFileOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SegmentedFileOutputDefaultTypeInternal() {}
  union {
    SegmentedFileOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SegmentedFileOutputDefaultTypeInternal _SegmentedFileOutput_default_instance_;

inline constexpr ImageOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filename_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        capture_interval_{0u},
        width_{0},
        height_{0},
        filename_suffix_{static_cast< ::livekit::ImageFileSuffix >(0)},
        image_codec_{static_cast< ::livekit::ImageCodec >(0)},
        disable_manifest_{false},
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ImageOutput::ImageOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ImageOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ImageOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageOutputDefaultTypeInternal() {}
  union {
    ImageOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageOutputDefaultTypeInternal _ImageOutput_default_instance_;

inline constexpr EncodedFileOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filepath_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_type_{static_cast< ::livekit::EncodedFileType >(0)},
        disable_manifest_{false},
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EncodedFileOutput::EncodedFileOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EncodedFileOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EncodedFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodedFileOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodedFileOutputDefaultTypeInternal() {}
  union {
    EncodedFileOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodedFileOutputDefaultTypeInternal _EncodedFileOutput_default_instance_;

inline constexpr DirectFileOutput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filepath_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        disable_manifest_{false},
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DirectFileOutput::DirectFileOutput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DirectFileOutput_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DirectFileOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectFileOutputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectFileOutputDefaultTypeInternal() {}
  union {
    DirectFileOutput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectFileOutputDefaultTypeInternal _DirectFileOutput_default_instance_;

inline constexpr AutoTrackEgress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        filepath_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        disable_manifest_{false},
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AutoTrackEgress::AutoTrackEgress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AutoTrackEgress_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AutoTrackEgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoTrackEgressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoTrackEgressDefaultTypeInternal() {}
  union {
    AutoTrackEgress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoTrackEgressDefaultTypeInternal _AutoTrackEgress_default_instance_;

inline constexpr WebEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        file_outputs_{},
        stream_outputs_{},
        segment_outputs_{},
        image_outputs_{},
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_only_{false},
        video_only_{false},
        await_start_signal_{false},
        output_{},
        options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR WebEgressRequest::WebEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(WebEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WebEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebEgressRequestDefaultTypeInternal() {}
  union {
    WebEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebEgressRequestDefaultTypeInternal _WebEgressRequest_default_instance_;

inline constexpr TrackEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        track_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        output_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TrackEgressRequest::TrackEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackEgressRequestDefaultTypeInternal() {}
  union {
    TrackEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackEgressRequestDefaultTypeInternal _TrackEgressRequest_default_instance_;

inline constexpr TrackCompositeEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        file_outputs_{},
        stream_outputs_{},
        segment_outputs_{},
        image_outputs_{},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_track_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        video_track_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        output_{},
        options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TrackCompositeEgressRequest::TrackCompositeEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TrackCompositeEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TrackCompositeEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackCompositeEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackCompositeEgressRequestDefaultTypeInternal() {}
  union {
    TrackCompositeEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackCompositeEgressRequestDefaultTypeInternal _TrackCompositeEgressRequest_default_instance_;

inline constexpr RoomCompositeEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        file_outputs_{},
        stream_outputs_{},
        segment_outputs_{},
        image_outputs_{},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        layout_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        custom_base_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_only_{false},
        video_only_{false},
        audio_mixing_{static_cast< ::livekit::AudioMixing >(0)},
        output_{},
        options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR RoomCompositeEgressRequest::RoomCompositeEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RoomCompositeEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomCompositeEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomCompositeEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomCompositeEgressRequestDefaultTypeInternal() {}
  union {
    RoomCompositeEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomCompositeEgressRequestDefaultTypeInternal _RoomCompositeEgressRequest_default_instance_;

inline constexpr ParticipantEgressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        file_outputs_{},
        stream_outputs_{},
        segment_outputs_{},
        image_outputs_{},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        screen_share_{false},
        options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ParticipantEgressRequest::ParticipantEgressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ParticipantEgressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ParticipantEgressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParticipantEgressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParticipantEgressRequestDefaultTypeInternal() {}
  union {
    ParticipantEgressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParticipantEgressRequestDefaultTypeInternal _ParticipantEgressRequest_default_instance_;

inline constexpr AutoParticipantEgress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : file_outputs_{},
        segment_outputs_{},
        options_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AutoParticipantEgress::AutoParticipantEgress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AutoParticipantEgress_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AutoParticipantEgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoParticipantEgressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoParticipantEgressDefaultTypeInternal() {}
  union {
    AutoParticipantEgress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoParticipantEgressDefaultTypeInternal _AutoParticipantEgress_default_instance_;

inline constexpr EgressInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stream_results_{},
        file_results_{},
        segment_results_{},
        image_results_{},
        egress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        details_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        manifest_location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}},
        status_{static_cast< ::livekit::EgressStatus >(0)},
        error_code_{0},
        updated_at_{::int64_t{0}},
        backup_storage_used_{false},
        source_type_{static_cast< ::livekit::EgressSourceType >(0)},
        request_{},
        result_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EgressInfo::EgressInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(EgressInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EgressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EgressInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EgressInfoDefaultTypeInternal() {}
  union {
    EgressInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EgressInfoDefaultTypeInternal _EgressInfo_default_instance_;

inline constexpr ListEgressResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : items_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ListEgressResponse::ListEgressResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ListEgressResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListEgressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListEgressResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListEgressResponseDefaultTypeInternal() {}
  union {
    ListEgressResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListEgressResponseDefaultTypeInternal _ListEgressResponse_default_instance_;
}  // namespace livekit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_livekit_5fegress_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_livekit_5fegress_2eproto = nullptr;
const ::uint32_t
    TableStruct_livekit_5fegress_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.layout_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.audio_only_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.audio_mixing_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.video_only_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.custom_base_url_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.file_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.stream_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.segment_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.image_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.output_),
        PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_.options_),
        0,
        1,
        3,
        5,
        4,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.audio_only_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.video_only_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.await_start_signal_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.file_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.stream_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.segment_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.image_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.output_),
        PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_.options_),
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.screen_share_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.file_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.stream_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.segment_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.image_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_.options_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.audio_track_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.video_track_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.file_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.stream_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.segment_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.image_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.output_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_.options_),
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.track_id_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_.output_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.file_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.filepath_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.disable_manifest_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_.output_),
        1,
        0,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.filename_prefix_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.playlist_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.live_playlist_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.segment_duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.filename_suffix_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.disable_manifest_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_.output_),
        3,
        0,
        1,
        2,
        4,
        6,
        5,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.filepath_),
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.disable_manifest_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_.output_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.capture_interval_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.filename_prefix_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.filename_suffix_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.image_codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.disable_manifest_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_.output_),
        1,
        2,
        3,
        0,
        4,
        5,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.access_key_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.secret_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.session_token_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.endpoint_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.bucket_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.force_path_style_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.tagging_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.content_disposition_),
        PROTOBUF_FIELD_OFFSET(::livekit::S3Upload, _impl_.proxy_),
        0,
        1,
        7,
        2,
        3,
        4,
        9,
        ~0u,
        5,
        6,
        8,
        PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.credentials_),
        PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.bucket_),
        PROTOBUF_FIELD_OFFSET(::livekit::GCPUpload, _impl_.proxy_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.account_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.account_key_),
        PROTOBUF_FIELD_OFFSET(::livekit::AzureBlobUpload, _impl_.container_name_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.access_key_),
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.secret_),
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.endpoint_),
        PROTOBUF_FIELD_OFFSET(::livekit::AliOSSUpload, _impl_.bucket_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::livekit::ProxyConfig, _impl_.password_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamOutput, _impl_.urls_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.depth_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.framerate_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.audio_frequency_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.video_quality_),
        PROTOBUF_FIELD_OFFSET(::livekit::EncodingOptions, _impl_.key_frame_interval_),
        0,
        1,
        2,
        3,
        4,
        5,
        10,
        6,
        7,
        9,
        11,
        8,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _impl_.egress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateLayoutRequest, _impl_.layout_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.egress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.add_output_urls_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateStreamRequest, _impl_.remove_output_urls_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.egress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressRequest, _impl_.active_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ListEgressResponse, _impl_.items_),
        PROTOBUF_FIELD_OFFSET(::livekit::StopEgressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::StopEgressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StopEgressRequest, _impl_.egress_id_),
        0,
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.egress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.source_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.ended_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.updated_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.details_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.error_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.error_code_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.stream_results_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.file_results_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.segment_results_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.image_results_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.manifest_location_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.backup_storage_used_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.request_),
        PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_.result_),
        0,
        1,
        3,
        12,
        8,
        6,
        7,
        10,
        4,
        2,
        9,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        5,
        11,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfoList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfoList, _impl_.info_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.ended_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::livekit::StreamInfo, _impl_.error_),
        0,
        2,
        3,
        4,
        5,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.filename_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.ended_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::livekit::FileInfo, _impl_.location_),
        0,
        2,
        3,
        5,
        4,
        1,
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.playlist_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.live_playlist_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.playlist_location_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.live_playlist_location_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.segment_count_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::SegmentsInfo, _impl_.ended_at_),
        0,
        2,
        4,
        5,
        1,
        3,
        6,
        7,
        8,
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.filename_prefix_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.image_count_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::ImagesInfo, _impl_.ended_at_),
        0,
        1,
        2,
        3,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.file_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.segment_outputs_),
        PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_.options_),
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.filepath_),
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.disable_manifest_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_.output_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 25, -1, sizeof(::livekit::RoomCompositeEgressRequest)},
        {40, 63, -1, sizeof(::livekit::WebEgressRequest)},
        {76, 94, -1, sizeof(::livekit::ParticipantEgressRequest)},
        {103, 125, -1, sizeof(::livekit::TrackCompositeEgressRequest)},
        {137, 150, -1, sizeof(::livekit::TrackEgressRequest)},
        {154, 170, -1, sizeof(::livekit::EncodedFileOutput)},
        {177, 197, -1, sizeof(::livekit::SegmentedFileOutput)},
        {208, 223, -1, sizeof(::livekit::DirectFileOutput)},
        {229, 249, -1, sizeof(::livekit::ImageOutput)},
        {260, 270, -1, sizeof(::livekit::S3Upload_MetadataEntry_DoNotUse)},
        {272, 291, -1, sizeof(::livekit::S3Upload)},
        {302, 313, -1, sizeof(::livekit::GCPUpload)},
        {316, 327, -1, sizeof(::livekit::AzureBlobUpload)},
        {330, 343, -1, sizeof(::livekit::AliOSSUpload)},
        {348, 359, -1, sizeof(::livekit::ProxyConfig)},
        {362, 372, -1, sizeof(::livekit::StreamOutput)},
        {374, 394, -1, sizeof(::livekit::EncodingOptions)},
        {406, 416, -1, sizeof(::livekit::UpdateLayoutRequest)},
        {418, 429, -1, sizeof(::livekit::UpdateStreamRequest)},
        {432, 443, -1, sizeof(::livekit::ListEgressRequest)},
        {446, -1, -1, sizeof(::livekit::ListEgressResponse)},
        {455, 464, -1, sizeof(::livekit::StopEgressRequest)},
        {465, 500, -1, sizeof(::livekit::EgressInfo)},
        {525, -1, -1, sizeof(::livekit::StreamInfoList)},
        {534, 548, -1, sizeof(::livekit::StreamInfo)},
        {554, 568, -1, sizeof(::livekit::FileInfo)},
        {574, 591, -1, sizeof(::livekit::SegmentsInfo)},
        {600, 612, -1, sizeof(::livekit::ImagesInfo)},
        {616, -1, -1, sizeof(::livekit::AutoParticipantEgress)},
        {629, 644, -1, sizeof(::livekit::AutoTrackEgress)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::livekit::_RoomCompositeEgressRequest_default_instance_._instance,
    &::livekit::_WebEgressRequest_default_instance_._instance,
    &::livekit::_ParticipantEgressRequest_default_instance_._instance,
    &::livekit::_TrackCompositeEgressRequest_default_instance_._instance,
    &::livekit::_TrackEgressRequest_default_instance_._instance,
    &::livekit::_EncodedFileOutput_default_instance_._instance,
    &::livekit::_SegmentedFileOutput_default_instance_._instance,
    &::livekit::_DirectFileOutput_default_instance_._instance,
    &::livekit::_ImageOutput_default_instance_._instance,
    &::livekit::_S3Upload_MetadataEntry_DoNotUse_default_instance_._instance,
    &::livekit::_S3Upload_default_instance_._instance,
    &::livekit::_GCPUpload_default_instance_._instance,
    &::livekit::_AzureBlobUpload_default_instance_._instance,
    &::livekit::_AliOSSUpload_default_instance_._instance,
    &::livekit::_ProxyConfig_default_instance_._instance,
    &::livekit::_StreamOutput_default_instance_._instance,
    &::livekit::_EncodingOptions_default_instance_._instance,
    &::livekit::_UpdateLayoutRequest_default_instance_._instance,
    &::livekit::_UpdateStreamRequest_default_instance_._instance,
    &::livekit::_ListEgressRequest_default_instance_._instance,
    &::livekit::_ListEgressResponse_default_instance_._instance,
    &::livekit::_StopEgressRequest_default_instance_._instance,
    &::livekit::_EgressInfo_default_instance_._instance,
    &::livekit::_StreamInfoList_default_instance_._instance,
    &::livekit::_StreamInfo_default_instance_._instance,
    &::livekit::_FileInfo_default_instance_._instance,
    &::livekit::_SegmentsInfo_default_instance_._instance,
    &::livekit::_ImagesInfo_default_instance_._instance,
    &::livekit::_AutoParticipantEgress_default_instance_._instance,
    &::livekit::_AutoTrackEgress_default_instance_._instance,
};
const char descriptor_table_protodef_livekit_5fegress_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024livekit_egress.proto\022\007livekit\032\024livekit"
    "_models.proto\"\371\004\n\032RoomCompositeEgressReq"
    "uest\022\021\n\troom_name\030\001 \001(\t\022\016\n\006layout\030\002 \001(\t\022"
    "\022\n\naudio_only\030\003 \001(\010\022*\n\014audio_mixing\030\017 \001("
    "\0162\024.livekit.AudioMixing\022\022\n\nvideo_only\030\004 "
    "\001(\010\022\027\n\017custom_base_url\030\005 \001(\t\022.\n\004file\030\006 \001"
    "(\0132\032.livekit.EncodedFileOutputB\002\030\001H\000\022+\n\006"
    "stream\030\007 \001(\0132\025.livekit.StreamOutputB\002\030\001H"
    "\000\0224\n\010segments\030\n \001(\0132\034.livekit.SegmentedF"
    "ileOutputB\002\030\001H\000\0220\n\006preset\030\010 \001(\0162\036.liveki"
    "t.EncodingOptionsPresetH\001\022,\n\010advanced\030\t "
    "\001(\0132\030.livekit.EncodingOptionsH\001\0220\n\014file_"
    "outputs\030\013 \003(\0132\032.livekit.EncodedFileOutpu"
    "t\022-\n\016stream_outputs\030\014 \003(\0132\025.livekit.Stre"
    "amOutput\0225\n\017segment_outputs\030\r \003(\0132\034.live"
    "kit.SegmentedFileOutput\022+\n\rimage_outputs"
    "\030\016 \003(\0132\024.livekit.ImageOutputB\010\n\006outputB\t"
    "\n\007options\"\260\004\n\020WebEgressRequest\022\013\n\003url\030\001 "
    "\001(\t\022\022\n\naudio_only\030\002 \001(\010\022\022\n\nvideo_only\030\003 "
    "\001(\010\022\032\n\022await_start_signal\030\014 \001(\010\022.\n\004file\030"
    "\004 \001(\0132\032.livekit.EncodedFileOutputB\002\030\001H\000\022"
    "+\n\006stream\030\005 \001(\0132\025.livekit.StreamOutputB\002"
    "\030\001H\000\0224\n\010segments\030\006 \001(\0132\034.livekit.Segment"
    "edFileOutputB\002\030\001H\000\0220\n\006preset\030\007 \001(\0162\036.liv"
    "ekit.EncodingOptionsPresetH\001\022,\n\010advanced"
    "\030\010 \001(\0132\030.livekit.EncodingOptionsH\001\0220\n\014fi"
    "le_outputs\030\t \003(\0132\032.livekit.EncodedFileOu"
    "tput\022-\n\016stream_outputs\030\n \003(\0132\025.livekit.S"
    "treamOutput\0225\n\017segment_outputs\030\013 \003(\0132\034.l"
    "ivekit.SegmentedFileOutput\022+\n\rimage_outp"
    "uts\030\r \003(\0132\024.livekit.ImageOutputB\010\n\006outpu"
    "tB\t\n\007options\"\205\003\n\030ParticipantEgressReques"
    "t\022\021\n\troom_name\030\001 \001(\t\022\020\n\010identity\030\002 \001(\t\022\024"
    "\n\014screen_share\030\003 \001(\010\0220\n\006preset\030\004 \001(\0162\036.l"
    "ivekit.EncodingOptionsPresetH\000\022,\n\010advanc"
    "ed\030\005 \001(\0132\030.livekit.EncodingOptionsH\000\0220\n\014"
    "file_outputs\030\006 \003(\0132\032.livekit.EncodedFile"
    "Output\022-\n\016stream_outputs\030\007 \003(\0132\025.livekit"
    ".StreamOutput\0225\n\017segment_outputs\030\010 \003(\0132\034"
    ".livekit.SegmentedFileOutput\022+\n\rimage_ou"
    "tputs\030\t \003(\0132\024.livekit.ImageOutputB\t\n\007opt"
    "ions\"\255\004\n\033TrackCompositeEgressRequest\022\021\n\t"
    "room_name\030\001 \001(\t\022\026\n\016audio_track_id\030\002 \001(\t\022"
    "\026\n\016video_track_id\030\003 \001(\t\022.\n\004file\030\004 \001(\0132\032."
    "livekit.EncodedFileOutputB\002\030\001H\000\022+\n\006strea"
    "m\030\005 \001(\0132\025.livekit.StreamOutputB\002\030\001H\000\0224\n\010"
    "segments\030\010 \001(\0132\034.livekit.SegmentedFileOu"
    "tputB\002\030\001H\000\0220\n\006preset\030\006 \001(\0162\036.livekit.Enc"
    "odingOptionsPresetH\001\022,\n\010advanced\030\007 \001(\0132\030"
    ".livekit.EncodingOptionsH\001\0220\n\014file_outpu"
    "ts\030\013 \003(\0132\032.livekit.EncodedFileOutput\022-\n\016"
    "stream_outputs\030\014 \003(\0132\025.livekit.StreamOut"
    "put\0225\n\017segment_outputs\030\r \003(\0132\034.livekit.S"
    "egmentedFileOutput\022+\n\rimage_outputs\030\016 \003("
    "\0132\024.livekit.ImageOutputB\010\n\006outputB\t\n\007opt"
    "ions\"\207\001\n\022TrackEgressRequest\022\021\n\troom_name"
    "\030\001 \001(\t\022\020\n\010track_id\030\002 \001(\t\022)\n\004file\030\003 \001(\0132\031"
    ".livekit.DirectFileOutputH\000\022\027\n\rwebsocket"
    "_url\030\004 \001(\tH\000B\010\n\006output\"\216\002\n\021EncodedFileOu"
    "tput\022+\n\tfile_type\030\001 \001(\0162\030.livekit.Encode"
    "dFileType\022\020\n\010filepath\030\002 \001(\t\022\030\n\020disable_m"
    "anifest\030\006 \001(\010\022\037\n\002s3\030\003 \001(\0132\021.livekit.S3Up"
    "loadH\000\022!\n\003gcp\030\004 \001(\0132\022.livekit.GCPUploadH"
    "\000\022)\n\005azure\030\005 \001(\0132\030.livekit.AzureBlobUplo"
    "adH\000\022\'\n\006aliOSS\030\007 \001(\0132\025.livekit.AliOSSUpl"
    "oadH\000B\010\n\006output\"\240\003\n\023SegmentedFileOutput\022"
    "0\n\010protocol\030\001 \001(\0162\036.livekit.SegmentedFil"
    "eProtocol\022\027\n\017filename_prefix\030\002 \001(\t\022\025\n\rpl"
    "aylist_name\030\003 \001(\t\022\032\n\022live_playlist_name\030"
    "\013 \001(\t\022\030\n\020segment_duration\030\004 \001(\r\0225\n\017filen"
    "ame_suffix\030\n \001(\0162\034.livekit.SegmentedFile"
    "Suffix\022\030\n\020disable_manifest\030\010 \001(\010\022\037\n\002s3\030\005"
    " \001(\0132\021.livekit.S3UploadH\000\022!\n\003gcp\030\006 \001(\0132\022"
    ".livekit.GCPUploadH\000\022)\n\005azure\030\007 \001(\0132\030.li"
    "vekit.AzureBlobUploadH\000\022\'\n\006aliOSS\030\t \001(\0132"
    "\025.livekit.AliOSSUploadH\000B\010\n\006output\"\340\001\n\020D"
    "irectFileOutput\022\020\n\010filepath\030\001 \001(\t\022\030\n\020dis"
    "able_manifest\030\005 \001(\010\022\037\n\002s3\030\002 \001(\0132\021.liveki"
    "t.S3UploadH\000\022!\n\003gcp\030\003 \001(\0132\022.livekit.GCPU"
    "ploadH\000\022)\n\005azure\030\004 \001(\0132\030.livekit.AzureBl"
    "obUploadH\000\022\'\n\006aliOSS\030\006 \001(\0132\025.livekit.Ali"
    "OSSUploadH\000B\010\n\006output\"\370\002\n\013ImageOutput\022\030\n"
    "\020capture_interval\030\001 \001(\r\022\r\n\005width\030\002 \001(\005\022\016"
    "\n\006height\030\003 \001(\005\022\027\n\017filename_prefix\030\004 \001(\t\022"
    "1\n\017filename_suffix\030\005 \001(\0162\030.livekit.Image"
    "FileSuffix\022(\n\013image_codec\030\006 \001(\0162\023.liveki"
    "t.ImageCodec\022\030\n\020disable_manifest\030\007 \001(\010\022\037"
    "\n\002s3\030\010 \001(\0132\021.livekit.S3UploadH\000\022!\n\003gcp\030\t"
    " \001(\0132\022.livekit.GCPUploadH\000\022)\n\005azure\030\n \001("
    "\0132\030.livekit.AzureBlobUploadH\000\022\'\n\006aliOSS\030"
    "\013 \001(\0132\025.livekit.AliOSSUploadH\000B\010\n\006output"
    "\"\310\002\n\010S3Upload\022\022\n\naccess_key\030\001 \001(\t\022\016\n\006sec"
    "ret\030\002 \001(\t\022\025\n\rsession_token\030\013 \001(\t\022\016\n\006regi"
    "on\030\003 \001(\t\022\020\n\010endpoint\030\004 \001(\t\022\016\n\006bucket\030\005 \001"
    "(\t\022\030\n\020force_path_style\030\006 \001(\010\0221\n\010metadata"
    "\030\007 \003(\0132\037.livekit.S3Upload.MetadataEntry\022"
    "\017\n\007tagging\030\010 \001(\t\022\033\n\023content_disposition\030"
    "\t \001(\t\022#\n\005proxy\030\n \001(\0132\024.livekit.ProxyConf"
    "ig\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\"U\n\tGCPUpload\022\023\n\013credentials\030"
    "\001 \001(\t\022\016\n\006bucket\030\002 \001(\t\022#\n\005proxy\030\003 \001(\0132\024.l"
    "ivekit.ProxyConfig\"T\n\017AzureBlobUpload\022\024\n"
    "\014account_name\030\001 \001(\t\022\023\n\013account_key\030\002 \001(\t"
    "\022\026\n\016container_name\030\003 \001(\t\"d\n\014AliOSSUpload"
    "\022\022\n\naccess_key\030\001 \001(\t\022\016\n\006secret\030\002 \001(\t\022\016\n\006"
    "region\030\003 \001(\t\022\020\n\010endpoint\030\004 \001(\t\022\016\n\006bucket"
    "\030\005 \001(\t\">\n\013ProxyConfig\022\013\n\003url\030\001 \001(\t\022\020\n\010us"
    "ername\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"G\n\014Stream"
    "Output\022)\n\010protocol\030\001 \001(\0162\027.livekit.Strea"
    "mProtocol\022\014\n\004urls\030\002 \003(\t\"\267\002\n\017EncodingOpti"
    "ons\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r\n\005de"
    "pth\030\003 \001(\005\022\021\n\tframerate\030\004 \001(\005\022(\n\013audio_co"
    "dec\030\005 \001(\0162\023.livekit.AudioCodec\022\025\n\raudio_"
    "bitrate\030\006 \001(\005\022\025\n\raudio_quality\030\013 \001(\005\022\027\n\017"
    "audio_frequency\030\007 \001(\005\022(\n\013video_codec\030\010 \001"
    "(\0162\023.livekit.VideoCodec\022\025\n\rvideo_bitrate"
    "\030\t \001(\005\022\025\n\rvideo_quality\030\014 \001(\005\022\032\n\022key_fra"
    "me_interval\030\n \001(\001\"8\n\023UpdateLayoutRequest"
    "\022\021\n\tegress_id\030\001 \001(\t\022\016\n\006layout\030\002 \001(\t\"]\n\023U"
    "pdateStreamRequest\022\021\n\tegress_id\030\001 \001(\t\022\027\n"
    "\017add_output_urls\030\002 \003(\t\022\032\n\022remove_output_"
    "urls\030\003 \003(\t\"I\n\021ListEgressRequest\022\021\n\troom_"
    "name\030\001 \001(\t\022\021\n\tegress_id\030\002 \001(\t\022\016\n\006active\030"
    "\003 \001(\010\"8\n\022ListEgressResponse\022\"\n\005items\030\001 \003"
    "(\0132\023.livekit.EgressInfo\"&\n\021StopEgressReq"
    "uest\022\021\n\tegress_id\030\001 \001(\t\"\236\007\n\nEgressInfo\022\021"
    "\n\tegress_id\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\t\022\021\n\tro"
    "om_name\030\r \001(\t\022.\n\013source_type\030\032 \001(\0162\031.liv"
    "ekit.EgressSourceType\022%\n\006status\030\003 \001(\0162\025."
    "livekit.EgressStatus\022\022\n\nstarted_at\030\n \001(\003"
    "\022\020\n\010ended_at\030\013 \001(\003\022\022\n\nupdated_at\030\022 \001(\003\022\017"
    "\n\007details\030\025 \001(\t\022\r\n\005error\030\t \001(\t\022\022\n\nerror_"
    "code\030\026 \001(\005\022=\n\016room_composite\030\004 \001(\0132#.liv"
    "ekit.RoomCompositeEgressRequestH\000\022(\n\003web"
    "\030\016 \001(\0132\031.livekit.WebEgressRequestH\000\0228\n\013p"
    "articipant\030\023 \001(\0132!.livekit.ParticipantEg"
    "ressRequestH\000\022\?\n\017track_composite\030\005 \001(\0132$"
    ".livekit.TrackCompositeEgressRequestH\000\022,"
    "\n\005track\030\006 \001(\0132\033.livekit.TrackEgressReque"
    "stH\000\022-\n\006stream\030\007 \001(\0132\027.livekit.StreamInf"
    "oListB\002\030\001H\001\022%\n\004file\030\010 \001(\0132\021.livekit.File"
    "InfoB\002\030\001H\001\022-\n\010segments\030\014 \001(\0132\025.livekit.S"
    "egmentsInfoB\002\030\001H\001\022+\n\016stream_results\030\017 \003("
    "\0132\023.livekit.StreamInfo\022\'\n\014file_results\030\020"
    " \003(\0132\021.livekit.FileInfo\022.\n\017segment_resul"
    "ts\030\021 \003(\0132\025.livekit.SegmentsInfo\022*\n\rimage"
    "_results\030\024 \003(\0132\023.livekit.ImagesInfo\022\031\n\021m"
    "anifest_location\030\027 \001(\t\022\033\n\023backup_storage"
    "_used\030\031 \001(\010B\t\n\007requestB\010\n\006result\"7\n\016Stre"
    "amInfoList\022!\n\004info\030\001 \003(\0132\023.livekit.Strea"
    "mInfo:\002\030\001\"\274\001\n\nStreamInfo\022\013\n\003url\030\001 \001(\t\022\022\n"
    "\nstarted_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\022\020\n\010d"
    "uration\030\004 \001(\003\022*\n\006status\030\005 \001(\0162\032.livekit."
    "StreamInfo.Status\022\r\n\005error\030\006 \001(\t\".\n\006Stat"
    "us\022\n\n\006ACTIVE\020\000\022\014\n\010FINISHED\020\001\022\n\n\006FAILED\020\002"
    "\"t\n\010FileInfo\022\020\n\010filename\030\001 \001(\t\022\022\n\nstarte"
    "d_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\022\020\n\010duration"
    "\030\006 \001(\003\022\014\n\004size\030\004 \001(\003\022\020\n\010location\030\005 \001(\t\"\331"
    "\001\n\014SegmentsInfo\022\025\n\rplaylist_name\030\001 \001(\t\022\032"
    "\n\022live_playlist_name\030\010 \001(\t\022\020\n\010duration\030\002"
    " \001(\003\022\014\n\004size\030\003 \001(\003\022\031\n\021playlist_location\030"
    "\004 \001(\t\022\036\n\026live_playlist_location\030\t \001(\t\022\025\n"
    "\rsegment_count\030\005 \001(\003\022\022\n\nstarted_at\030\006 \001(\003"
    "\022\020\n\010ended_at\030\007 \001(\003\"`\n\nImagesInfo\022\027\n\017file"
    "name_prefix\030\004 \001(\t\022\023\n\013image_count\030\001 \001(\003\022\022"
    "\n\nstarted_at\030\002 \001(\003\022\020\n\010ended_at\030\003 \001(\003\"\353\001\n"
    "\025AutoParticipantEgress\0220\n\006preset\030\001 \001(\0162\036"
    ".livekit.EncodingOptionsPresetH\000\022,\n\010adva"
    "nced\030\002 \001(\0132\030.livekit.EncodingOptionsH\000\0220"
    "\n\014file_outputs\030\003 \003(\0132\032.livekit.EncodedFi"
    "leOutput\0225\n\017segment_outputs\030\004 \003(\0132\034.live"
    "kit.SegmentedFileOutputB\t\n\007options\"\337\001\n\017A"
    "utoTrackEgress\022\020\n\010filepath\030\001 \001(\t\022\030\n\020disa"
    "ble_manifest\030\005 \001(\010\022\037\n\002s3\030\002 \001(\0132\021.livekit"
    ".S3UploadH\000\022!\n\003gcp\030\003 \001(\0132\022.livekit.GCPUp"
    "loadH\000\022)\n\005azure\030\004 \001(\0132\030.livekit.AzureBlo"
    "bUploadH\000\022\'\n\006aliOSS\030\006 \001(\0132\025.livekit.AliO"
    "SSUploadH\000B\010\n\006output*9\n\017EncodedFileType\022"
    "\024\n\020DEFAULT_FILETYPE\020\000\022\007\n\003MP4\020\001\022\007\n\003OGG\020\002*"
    "N\n\025SegmentedFileProtocol\022#\n\037DEFAULT_SEGM"
    "ENTED_FILE_PROTOCOL\020\000\022\020\n\014HLS_PROTOCOL\020\001*"
    "/\n\023SegmentedFileSuffix\022\t\n\005INDEX\020\000\022\r\n\tTIM"
    "ESTAMP\020\001*E\n\017ImageFileSuffix\022\026\n\022IMAGE_SUF"
    "FIX_INDEX\020\000\022\032\n\026IMAGE_SUFFIX_TIMESTAMP\020\001*"
    "9\n\016StreamProtocol\022\024\n\020DEFAULT_PROTOCOL\020\000\022"
    "\010\n\004RTMP\020\001\022\007\n\003SRT\020\002*U\n\013AudioMixing\022\022\n\016DEF"
    "AULT_MIXING\020\000\022\026\n\022DUAL_CHANNEL_AGENT\020\001\022\032\n"
    "\026DUAL_CHANNEL_ALTERNATE\020\002*\317\001\n\025EncodingOp"
    "tionsPreset\022\020\n\014H264_720P_30\020\000\022\020\n\014H264_72"
    "0P_60\020\001\022\021\n\rH264_1080P_30\020\002\022\021\n\rH264_1080P"
    "_60\020\003\022\031\n\025PORTRAIT_H264_720P_30\020\004\022\031\n\025PORT"
    "RAIT_H264_720P_60\020\005\022\032\n\026PORTRAIT_H264_108"
    "0P_30\020\006\022\032\n\026PORTRAIT_H264_1080P_60\020\007*\237\001\n\014"
    "EgressStatus\022\023\n\017EGRESS_STARTING\020\000\022\021\n\rEGR"
    "ESS_ACTIVE\020\001\022\021\n\rEGRESS_ENDING\020\002\022\023\n\017EGRES"
    "S_COMPLETE\020\003\022\021\n\rEGRESS_FAILED\020\004\022\022\n\016EGRES"
    "S_ABORTED\020\005\022\030\n\024EGRESS_LIMIT_REACHED\020\006*J\n"
    "\020EgressSourceType\022\032\n\026EGRESS_SOURCE_TYPE_"
    "WEB\020\000\022\032\n\026EGRESS_SOURCE_TYPE_SDK\020\0012\234\005\n\006Eg"
    "ress\022T\n\030StartRoomCompositeEgress\022#.livek"
    "it.RoomCompositeEgressRequest\032\023.livekit."
    "EgressInfo\022@\n\016StartWebEgress\022\031.livekit.W"
    "ebEgressRequest\032\023.livekit.EgressInfo\022P\n\026"
    "StartParticipantEgress\022!.livekit.Partici"
    "pantEgressRequest\032\023.livekit.EgressInfo\022V"
    "\n\031StartTrackCompositeEgress\022$.livekit.Tr"
    "ackCompositeEgressRequest\032\023.livekit.Egre"
    "ssInfo\022D\n\020StartTrackEgress\022\033.livekit.Tra"
    "ckEgressRequest\032\023.livekit.EgressInfo\022A\n\014"
    "UpdateLayout\022\034.livekit.UpdateLayoutReque"
    "st\032\023.livekit.EgressInfo\022A\n\014UpdateStream\022"
    "\034.livekit.UpdateStreamRequest\032\023.livekit."
    "EgressInfo\022E\n\nListEgress\022\032.livekit.ListE"
    "gressRequest\032\033.livekit.ListEgressRespons"
    "e\022=\n\nStopEgress\022\032.livekit.StopEgressRequ"
    "est\032\023.livekit.EgressInfoBFZ#github.com/l"
    "ivekit/protocol/livekit\252\002\rLiveKit.Proto\352"
    "\002\016LiveKit::Protob\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_livekit_5fegress_2eproto_deps[1] = {
        &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::absl::once_flag descriptor_table_livekit_5fegress_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_livekit_5fegress_2eproto = {
    false,
    false,
    8704,
    descriptor_table_protodef_livekit_5fegress_2eproto,
    "livekit_egress.proto",
    &descriptor_table_livekit_5fegress_2eproto_once,
    descriptor_table_livekit_5fegress_2eproto_deps,
    1,
    30,
    schemas,
    file_default_instances,
    TableStruct_livekit_5fegress_2eproto::offsets,
    file_level_enum_descriptors_livekit_5fegress_2eproto,
    file_level_service_descriptors_livekit_5fegress_2eproto,
};
namespace livekit {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL StreamInfo_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t StreamInfo_Status_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EncodedFileType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t EncodedFileType_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SegmentedFileProtocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t SegmentedFileProtocol_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL SegmentedFileSuffix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t SegmentedFileSuffix_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ImageFileSuffix_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ImageFileSuffix_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL StreamProtocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t StreamProtocol_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL AudioMixing_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t AudioMixing_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EncodingOptionsPreset_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t EncodingOptionsPreset_internal_data_[] = {
    524288u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EgressStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t EgressStatus_internal_data_[] = {
    458752u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EgressSourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fegress_2eproto);
  return file_level_enum_descriptors_livekit_5fegress_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t EgressSourceType_internal_data_[] = {
    131072u, 0u, };
// ===================================================================

class RoomCompositeEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RoomCompositeEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::RoomCompositeEgressRequest, _impl_._oneof_case_);
};

void RoomCompositeEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* PROTOBUF_NULLABLE file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.file)
}
void RoomCompositeEgressRequest::set_allocated_stream(::livekit::StreamOutput* PROTOBUF_NULLABLE stream) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = stream->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.stream)
}
void RoomCompositeEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* PROTOBUF_NULLABLE segments) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (segments) {
    ::google::protobuf::Arena* submessage_arena = segments->GetArena();
    if (message_arena != submessage_arena) {
      segments = ::google::protobuf::internal::GetOwnedMessage(message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.segments)
}
void RoomCompositeEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* PROTOBUF_NULLABLE advanced) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_options();
  if (advanced) {
    ::google::protobuf::Arena* submessage_arena = advanced->GetArena();
    if (message_arena != submessage_arena) {
      advanced = ::google::protobuf::internal::GetOwnedMessage(message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.RoomCompositeEgressRequest.advanced)
}
RoomCompositeEgressRequest::RoomCompositeEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoomCompositeEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.RoomCompositeEgressRequest)
}
PROTOBUF_NDEBUG_INLINE RoomCompositeEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::RoomCompositeEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        file_outputs_{visibility, arena, from.file_outputs_},
        stream_outputs_{visibility, arena, from.stream_outputs_},
        segment_outputs_{visibility, arena, from.segment_outputs_},
        image_outputs_{visibility, arena, from.image_outputs_},
        room_name_(arena, from.room_name_),
        layout_(arena, from.layout_),
        custom_base_url_(arena, from.custom_base_url_),
        output_{},
        options_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

RoomCompositeEgressRequest::RoomCompositeEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const RoomCompositeEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RoomCompositeEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoomCompositeEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_only_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, audio_only_),
           offsetof(Impl_, audio_mixing_) -
               offsetof(Impl_, audio_only_) +
               sizeof(Impl_::audio_mixing_));
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kFile:
        _impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        break;
      case kStream:
        _impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        break;
      case kSegments:
        _impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        break;
  }
  switch (options_case()) {
    case OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      case kAdvanced:
        _impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.RoomCompositeEgressRequest)
}
PROTOBUF_NDEBUG_INLINE RoomCompositeEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        file_outputs_{visibility, arena},
        stream_outputs_{visibility, arena},
        segment_outputs_{visibility, arena},
        image_outputs_{visibility, arena},
        room_name_(arena),
        layout_(arena),
        custom_base_url_(arena),
        output_{},
        options_{},
        _oneof_case_{} {}

inline void RoomCompositeEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_only_),
           0,
           offsetof(Impl_, audio_mixing_) -
               offsetof(Impl_, audio_only_) +
               sizeof(Impl_::audio_mixing_));
}
RoomCompositeEgressRequest::~RoomCompositeEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.RoomCompositeEgressRequest)
  SharedDtor(*this);
}
inline void RoomCompositeEgressRequest::SharedDtor(MessageLite& self) {
  RoomCompositeEgressRequest& this_ = static_cast<RoomCompositeEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.layout_.Destroy();
  this_._impl_.custom_base_url_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  if (this_.has_options()) {
    this_.clear_options();
  }
  this_._impl_.~Impl_();
}

void RoomCompositeEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RoomCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.file_);
      }
      break;
    }
    case kStream: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.stream_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.stream_);
      }
      break;
    }
    case kSegments: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.segments_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.segments_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void RoomCompositeEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.RoomCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArena() == nullptr) {
        delete _impl_.options_.advanced_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.options_.advanced_);
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL RoomCompositeEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RoomCompositeEgressRequest(arena);
}
constexpr auto RoomCompositeEgressRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.file_outputs_) +
          decltype(RoomCompositeEgressRequest::_impl_.file_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.stream_outputs_) +
          decltype(RoomCompositeEgressRequest::_impl_.stream_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.segment_outputs_) +
          decltype(RoomCompositeEgressRequest::_impl_.segment_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.image_outputs_) +
          decltype(RoomCompositeEgressRequest::_impl_.image_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RoomCompositeEgressRequest), alignof(RoomCompositeEgressRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RoomCompositeEgressRequest::PlacementNew_,
                                 sizeof(RoomCompositeEgressRequest),
                                 alignof(RoomCompositeEgressRequest));
  }
}
constexpr auto RoomCompositeEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RoomCompositeEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &RoomCompositeEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RoomCompositeEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RoomCompositeEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RoomCompositeEgressRequest>(), &RoomCompositeEgressRequest::ByteSizeLong,
              &RoomCompositeEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_._cached_size_),
          false,
      },
      &RoomCompositeEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        RoomCompositeEgressRequest_class_data_ =
            RoomCompositeEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL RoomCompositeEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RoomCompositeEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RoomCompositeEgressRequest_class_data_.tc_table);
  return RoomCompositeEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 8, 81, 2>
RoomCompositeEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    RoomCompositeEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::RoomCompositeEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.room_name_)}},
    // string layout = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.layout_)}},
    // bool audio_only = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomCompositeEgressRequest, _impl_.audio_only_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_only_)}},
    // bool video_only = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomCompositeEgressRequest, _impl_.video_only_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.video_only_)}},
    // string custom_base_url = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.custom_base_url_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 4, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.file_outputs_)}},
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 5, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.stream_outputs_)}},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 6, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.segment_outputs_)}},
    // repeated .livekit.ImageOutput image_outputs = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 7, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.image_outputs_)}},
    // .livekit.AudioMixing audio_mixing = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomCompositeEgressRequest, _impl_.audio_mixing_), 5>(),
     {120, 5, 0, PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_mixing_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string layout = 2;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.layout_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool audio_only = 3;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_only_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool video_only = 4;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.video_only_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string custom_base_url = 5;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.custom_base_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.EncodedFileOutput file = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.output_.file_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.StreamOutput stream = 7 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.output_.stream_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.EncodingOptionsPreset preset = 8;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.options_.preset_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.EncodingOptions advanced = 9;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.options_.advanced_), _Internal::kOneofCaseOffset + 4, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.output_.segments_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.file_outputs_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.stream_outputs_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.segment_outputs_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.ImageOutput image_outputs = 14;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.image_outputs_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AudioMixing audio_mixing = 15;
    {PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_mixing_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodingOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::ImageOutput>()},
  }},
  {{
    "\42\11\6\0\0\17\0\0\0\0\0\0\0\0\0\0"
    "livekit.RoomCompositeEgressRequest"
    "room_name"
    "layout"
    "custom_base_url"
  }},
};
PROTOBUF_NOINLINE void RoomCompositeEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.RoomCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.layout_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.custom_base_url_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000038u) != 0) {
    ::memset(&_impl_.audio_only_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.audio_mixing_) -
        reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.audio_mixing_));
  }
  clear_output();
  clear_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL RoomCompositeEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RoomCompositeEgressRequest& this_ = static_cast<const RoomCompositeEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RoomCompositeEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RoomCompositeEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.RoomCompositeEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RoomCompositeEgressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string layout = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_layout().empty()) {
      const std::string& _s = this_._internal_layout();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RoomCompositeEgressRequest.layout");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool audio_only = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_audio_only() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_audio_only(), target);
    }
  }

  // bool video_only = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_video_only() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_video_only(), target);
    }
  }

  // string custom_base_url = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_custom_base_url().empty()) {
      const std::string& _s = this_._internal_custom_base_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.RoomCompositeEgressRequest.custom_base_url");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.output_.file_, this_._impl_.output_.file_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStream: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.output_.stream_, this_._impl_.output_.stream_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  switch (this_.options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_preset(), target);
      break;
    }
    case kAdvanced: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.options_.advanced_, this_._impl_.options_.advanced_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
  if (this_.output_case() == kSegments) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.output_.segments_, this_._impl_.output_.segments_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            11, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            12, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_image_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_image_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            14, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // .livekit.AudioMixing audio_mixing = 15;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_audio_mixing() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          15, this_._internal_audio_mixing(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.RoomCompositeEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RoomCompositeEgressRequest::ByteSizeLong(const MessageLite& base) {
  const RoomCompositeEgressRequest& this_ = static_cast<const RoomCompositeEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t RoomCompositeEgressRequest::ByteSizeLong() const {
  const RoomCompositeEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.RoomCompositeEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {
      total_size += 1UL * this_._internal_file_outputs_size();
      for (const auto& msg : this_._internal_file_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {
      total_size += 1UL * this_._internal_stream_outputs_size();
      for (const auto& msg : this_._internal_stream_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {
      total_size += 1UL * this_._internal_segment_outputs_size();
      for (const auto& msg : this_._internal_segment_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ImageOutput image_outputs = 14;
    {
      total_size += 1UL * this_._internal_image_outputs_size();
      for (const auto& msg : this_._internal_image_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string layout = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_layout().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_layout());
      }
    }
    // string custom_base_url = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_custom_base_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_custom_base_url());
      }
    }
    // bool audio_only = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_audio_only() != 0) {
        total_size += 2;
      }
    }
    // bool video_only = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_video_only() != 0) {
        total_size += 2;
      }
    }
    // .livekit.AudioMixing audio_mixing = 15;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_audio_mixing() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_audio_mixing());
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.EncodedFileOutput file = 6 [deprecated = true];
    case kFile: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 7 [deprecated = true];
    case kStream: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 10 [deprecated = true];
    case kSegments: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (this_.options_case()) {
    // .livekit.EncodingOptionsPreset preset = 8;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 9;
    case kAdvanced: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void RoomCompositeEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomCompositeEgressRequest*>(&to_msg);
  auto& from = static_cast<const RoomCompositeEgressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.RoomCompositeEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_file_outputs()->MergeFrom(
      from._internal_file_outputs());
  _this->_internal_mutable_stream_outputs()->MergeFrom(
      from._internal_stream_outputs());
  _this->_internal_mutable_segment_outputs()->MergeFrom(
      from._internal_segment_outputs());
  _this->_internal_mutable_image_outputs()->MergeFrom(
      from._internal_image_outputs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_layout().empty()) {
        _this->_internal_set_layout(from._internal_layout());
      } else {
        if (_this->_impl_.layout_.IsDefault()) {
          _this->_internal_set_layout("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_custom_base_url().empty()) {
        _this->_internal_set_custom_base_url(from._internal_custom_base_url());
      } else {
        if (_this->_impl_.custom_base_url_.IsDefault()) {
          _this->_internal_set_custom_base_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_audio_only() != 0) {
        _this->_impl_.audio_only_ = from._impl_.audio_only_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_video_only() != 0) {
        _this->_impl_.video_only_ = from._impl_.video_only_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_audio_mixing() != 0) {
        _this->_impl_.audio_mixing_ = from._impl_.audio_mixing_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        } else {
          _this->_impl_.output_.file_->MergeFrom(*from._impl_.output_.file_);
        }
        break;
      }
      case kStream: {
        if (oneof_needs_init) {
          _this->_impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        } else {
          _this->_impl_.output_.stream_->MergeFrom(*from._impl_.output_.stream_);
        }
        break;
      }
      case kSegments: {
        if (oneof_needs_init) {
          _this->_impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        } else {
          _this->_impl_.output_.segments_->MergeFrom(*from._impl_.output_.segments_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_options();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      }
      case kAdvanced: {
        if (oneof_needs_init) {
          _this->_impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        } else {
          _this->_impl_.options_.advanced_->MergeFrom(*from._impl_.options_.advanced_);
        }
        break;
      }
      case OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomCompositeEgressRequest::CopyFrom(const RoomCompositeEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.RoomCompositeEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomCompositeEgressRequest::InternalSwap(RoomCompositeEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layout_, &other->_impl_.layout_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.custom_base_url_, &other->_impl_.custom_base_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_mixing_)
      + sizeof(RoomCompositeEgressRequest::_impl_.audio_mixing_)
      - PROTOBUF_FIELD_OFFSET(RoomCompositeEgressRequest, _impl_.audio_only_)>(
          reinterpret_cast<char*>(&_impl_.audio_only_),
          reinterpret_cast<char*>(&other->_impl_.audio_only_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata RoomCompositeEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WebEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WebEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::WebEgressRequest, _impl_._oneof_case_);
};

void WebEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* PROTOBUF_NULLABLE file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.file)
}
void WebEgressRequest::set_allocated_stream(::livekit::StreamOutput* PROTOBUF_NULLABLE stream) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = stream->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.stream)
}
void WebEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* PROTOBUF_NULLABLE segments) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (segments) {
    ::google::protobuf::Arena* submessage_arena = segments->GetArena();
    if (message_arena != submessage_arena) {
      segments = ::google::protobuf::internal::GetOwnedMessage(message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.segments)
}
void WebEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* PROTOBUF_NULLABLE advanced) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_options();
  if (advanced) {
    ::google::protobuf::Arena* submessage_arena = advanced->GetArena();
    if (message_arena != submessage_arena) {
      advanced = ::google::protobuf::internal::GetOwnedMessage(message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebEgressRequest.advanced)
}
WebEgressRequest::WebEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WebEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.WebEgressRequest)
}
PROTOBUF_NDEBUG_INLINE WebEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::WebEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        file_outputs_{visibility, arena, from.file_outputs_},
        stream_outputs_{visibility, arena, from.stream_outputs_},
        segment_outputs_{visibility, arena, from.segment_outputs_},
        image_outputs_{visibility, arena, from.image_outputs_},
        url_(arena, from.url_),
        output_{},
        options_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

WebEgressRequest::WebEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const WebEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, WebEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WebEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_only_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, audio_only_),
           offsetof(Impl_, await_start_signal_) -
               offsetof(Impl_, audio_only_) +
               sizeof(Impl_::await_start_signal_));
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kFile:
        _impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        break;
      case kStream:
        _impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        break;
      case kSegments:
        _impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        break;
  }
  switch (options_case()) {
    case OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      case kAdvanced:
        _impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.WebEgressRequest)
}
PROTOBUF_NDEBUG_INLINE WebEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        file_outputs_{visibility, arena},
        stream_outputs_{visibility, arena},
        segment_outputs_{visibility, arena},
        image_outputs_{visibility, arena},
        url_(arena),
        output_{},
        options_{},
        _oneof_case_{} {}

inline void WebEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_only_),
           0,
           offsetof(Impl_, await_start_signal_) -
               offsetof(Impl_, audio_only_) +
               sizeof(Impl_::await_start_signal_));
}
WebEgressRequest::~WebEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.WebEgressRequest)
  SharedDtor(*this);
}
inline void WebEgressRequest::SharedDtor(MessageLite& self) {
  WebEgressRequest& this_ = static_cast<WebEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.url_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  if (this_.has_options()) {
    this_.clear_options();
  }
  this_._impl_.~Impl_();
}

void WebEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.WebEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.file_);
      }
      break;
    }
    case kStream: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.stream_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.stream_);
      }
      break;
    }
    case kSegments: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.segments_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.segments_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void WebEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.WebEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArena() == nullptr) {
        delete _impl_.options_.advanced_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.options_.advanced_);
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL WebEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) WebEgressRequest(arena);
}
constexpr auto WebEgressRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.file_outputs_) +
          decltype(WebEgressRequest::_impl_.file_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.stream_outputs_) +
          decltype(WebEgressRequest::_impl_.stream_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.segment_outputs_) +
          decltype(WebEgressRequest::_impl_.segment_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.image_outputs_) +
          decltype(WebEgressRequest::_impl_.image_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(WebEgressRequest), alignof(WebEgressRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&WebEgressRequest::PlacementNew_,
                                 sizeof(WebEgressRequest),
                                 alignof(WebEgressRequest));
  }
}
constexpr auto WebEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_WebEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &WebEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<WebEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &WebEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<WebEgressRequest>(), &WebEgressRequest::ByteSizeLong,
              &WebEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_._cached_size_),
          false,
      },
      &WebEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        WebEgressRequest_class_data_ =
            WebEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL WebEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&WebEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(WebEgressRequest_class_data_.tc_table);
  return WebEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 8, 44, 2>
WebEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    WebEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::WebEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.url_)}},
    // bool audio_only = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WebEgressRequest, _impl_.audio_only_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.audio_only_)}},
    // bool video_only = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WebEgressRequest, _impl_.video_only_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.video_only_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.EncodedFileOutput file_outputs = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.file_outputs_)}},
    // repeated .livekit.StreamOutput stream_outputs = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 5, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.stream_outputs_)}},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 6, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.segment_outputs_)}},
    // bool await_start_signal = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WebEgressRequest, _impl_.await_start_signal_), 3>(),
     {96, 3, 0, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.await_start_signal_)}},
    // repeated .livekit.ImageOutput image_outputs = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 7, PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.image_outputs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool audio_only = 2;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.audio_only_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool video_only = 3;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.video_only_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.output_.file_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.output_.stream_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SegmentedFileOutput segments = 6 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.output_.segments_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.EncodingOptionsPreset preset = 7;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.options_.preset_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.EncodingOptions advanced = 8;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.options_.advanced_), _Internal::kOneofCaseOffset + 4, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EncodedFileOutput file_outputs = 9;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.file_outputs_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.StreamOutput stream_outputs = 10;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.stream_outputs_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.segment_outputs_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool await_start_signal = 12;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.await_start_signal_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .livekit.ImageOutput image_outputs = 13;
    {PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.image_outputs_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodingOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::ImageOutput>()},
  }},
  {{
    "\30\3\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "livekit.WebEgressRequest"
    "url"
  }},
};
PROTOBUF_NOINLINE void WebEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.WebEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.url_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.audio_only_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.await_start_signal_) -
      reinterpret_cast<char*>(&_impl_.audio_only_)) + sizeof(_impl_.await_start_signal_));
  clear_output();
  clear_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL WebEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const WebEgressRequest& this_ = static_cast<const WebEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL WebEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const WebEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.WebEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.WebEgressRequest.url");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // bool audio_only = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_audio_only() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_audio_only(), target);
    }
  }

  // bool video_only = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_video_only() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_video_only(), target);
    }
  }

  switch (this_.output_case()) {
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.output_.file_, this_._impl_.output_.file_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStream: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.output_.stream_, this_._impl_.output_.stream_->GetCachedSize(), target,
          stream);
      break;
    }
    case kSegments: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.output_.segments_, this_._impl_.output_.segments_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  switch (this_.options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          7, this_._internal_preset(), target);
      break;
    }
    case kAdvanced: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.options_.advanced_, this_._impl_.options_.advanced_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // repeated .livekit.EncodedFileOutput file_outputs = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            11, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // bool await_start_signal = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_await_start_signal() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this_._internal_await_start_signal(), target);
    }
  }

  // repeated .livekit.ImageOutput image_outputs = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_image_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_image_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.WebEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t WebEgressRequest::ByteSizeLong(const MessageLite& base) {
  const WebEgressRequest& this_ = static_cast<const WebEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t WebEgressRequest::ByteSizeLong() const {
  const WebEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.WebEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EncodedFileOutput file_outputs = 9;
    {
      total_size += 1UL * this_._internal_file_outputs_size();
      for (const auto& msg : this_._internal_file_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.StreamOutput stream_outputs = 10;
    {
      total_size += 1UL * this_._internal_stream_outputs_size();
      for (const auto& msg : this_._internal_stream_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentedFileOutput segment_outputs = 11;
    {
      total_size += 1UL * this_._internal_segment_outputs_size();
      for (const auto& msg : this_._internal_segment_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ImageOutput image_outputs = 13;
    {
      total_size += 1UL * this_._internal_image_outputs_size();
      for (const auto& msg : this_._internal_image_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string url = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // bool audio_only = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_audio_only() != 0) {
        total_size += 2;
      }
    }
    // bool video_only = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_video_only() != 0) {
        total_size += 2;
      }
    }
    // bool await_start_signal = 12;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_await_start_signal() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    case kFile: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    case kStream: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 6 [deprecated = true];
    case kSegments: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (this_.options_case()) {
    // .livekit.EncodingOptionsPreset preset = 7;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 8;
    case kAdvanced: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void WebEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WebEgressRequest*>(&to_msg);
  auto& from = static_cast<const WebEgressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.WebEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_file_outputs()->MergeFrom(
      from._internal_file_outputs());
  _this->_internal_mutable_stream_outputs()->MergeFrom(
      from._internal_stream_outputs());
  _this->_internal_mutable_segment_outputs()->MergeFrom(
      from._internal_segment_outputs());
  _this->_internal_mutable_image_outputs()->MergeFrom(
      from._internal_image_outputs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_audio_only() != 0) {
        _this->_impl_.audio_only_ = from._impl_.audio_only_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_video_only() != 0) {
        _this->_impl_.video_only_ = from._impl_.video_only_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_await_start_signal() != 0) {
        _this->_impl_.await_start_signal_ = from._impl_.await_start_signal_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        } else {
          _this->_impl_.output_.file_->MergeFrom(*from._impl_.output_.file_);
        }
        break;
      }
      case kStream: {
        if (oneof_needs_init) {
          _this->_impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        } else {
          _this->_impl_.output_.stream_->MergeFrom(*from._impl_.output_.stream_);
        }
        break;
      }
      case kSegments: {
        if (oneof_needs_init) {
          _this->_impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        } else {
          _this->_impl_.output_.segments_->MergeFrom(*from._impl_.output_.segments_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_options();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      }
      case kAdvanced: {
        if (oneof_needs_init) {
          _this->_impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        } else {
          _this->_impl_.options_.advanced_->MergeFrom(*from._impl_.options_.advanced_);
        }
        break;
      }
      case OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WebEgressRequest::CopyFrom(const WebEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.WebEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WebEgressRequest::InternalSwap(WebEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.await_start_signal_)
      + sizeof(WebEgressRequest::_impl_.await_start_signal_)
      - PROTOBUF_FIELD_OFFSET(WebEgressRequest, _impl_.audio_only_)>(
          reinterpret_cast<char*>(&_impl_.audio_only_),
          reinterpret_cast<char*>(&other->_impl_.audio_only_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata WebEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ParticipantEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ParticipantEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::ParticipantEgressRequest, _impl_._oneof_case_);
};

void ParticipantEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* PROTOBUF_NULLABLE advanced) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_options();
  if (advanced) {
    ::google::protobuf::Arena* submessage_arena = advanced->GetArena();
    if (message_arena != submessage_arena) {
      advanced = ::google::protobuf::internal::GetOwnedMessage(message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ParticipantEgressRequest.advanced)
}
ParticipantEgressRequest::ParticipantEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ParticipantEgressRequest)
}
PROTOBUF_NDEBUG_INLINE ParticipantEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ParticipantEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        file_outputs_{visibility, arena, from.file_outputs_},
        stream_outputs_{visibility, arena, from.stream_outputs_},
        segment_outputs_{visibility, arena, from.segment_outputs_},
        image_outputs_{visibility, arena, from.image_outputs_},
        room_name_(arena, from.room_name_),
        identity_(arena, from.identity_),
        options_{},
        _oneof_case_{from._oneof_case_[0]} {}

ParticipantEgressRequest::ParticipantEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ParticipantEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ParticipantEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ParticipantEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.screen_share_ = from._impl_.screen_share_;
  switch (options_case()) {
    case OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      case kAdvanced:
        _impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.ParticipantEgressRequest)
}
PROTOBUF_NDEBUG_INLINE ParticipantEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        file_outputs_{visibility, arena},
        stream_outputs_{visibility, arena},
        segment_outputs_{visibility, arena},
        image_outputs_{visibility, arena},
        room_name_(arena),
        identity_(arena),
        options_{},
        _oneof_case_{} {}

inline void ParticipantEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.screen_share_ = {};
}
ParticipantEgressRequest::~ParticipantEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.ParticipantEgressRequest)
  SharedDtor(*this);
}
inline void ParticipantEgressRequest::SharedDtor(MessageLite& self) {
  ParticipantEgressRequest& this_ = static_cast<ParticipantEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.identity_.Destroy();
  if (this_.has_options()) {
    this_.clear_options();
  }
  this_._impl_.~Impl_();
}

void ParticipantEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.ParticipantEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArena() == nullptr) {
        delete _impl_.options_.advanced_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.options_.advanced_);
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL ParticipantEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ParticipantEgressRequest(arena);
}
constexpr auto ParticipantEgressRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.file_outputs_) +
          decltype(ParticipantEgressRequest::_impl_.file_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.stream_outputs_) +
          decltype(ParticipantEgressRequest::_impl_.stream_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.segment_outputs_) +
          decltype(ParticipantEgressRequest::_impl_.segment_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.image_outputs_) +
          decltype(ParticipantEgressRequest::_impl_.image_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ParticipantEgressRequest), alignof(ParticipantEgressRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ParticipantEgressRequest::PlacementNew_,
                                 sizeof(ParticipantEgressRequest),
                                 alignof(ParticipantEgressRequest));
  }
}
constexpr auto ParticipantEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ParticipantEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ParticipantEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ParticipantEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ParticipantEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ParticipantEgressRequest>(), &ParticipantEgressRequest::ByteSizeLong,
              &ParticipantEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_._cached_size_),
          false,
      },
      &ParticipantEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ParticipantEgressRequest_class_data_ =
            ParticipantEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ParticipantEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ParticipantEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ParticipantEgressRequest_class_data_.tc_table);
  return ParticipantEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 66, 2>
ParticipantEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ParticipantEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ParticipantEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.room_name_)}},
    // string identity = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.identity_)}},
    // bool screen_share = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ParticipantEgressRequest, _impl_.screen_share_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.screen_share_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.EncodedFileOutput file_outputs = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.file_outputs_)}},
    // repeated .livekit.StreamOutput stream_outputs = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 2, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.stream_outputs_)}},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.segment_outputs_)}},
    // repeated .livekit.ImageOutput image_outputs = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.image_outputs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string identity = 2;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.identity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool screen_share = 3;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.screen_share_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.EncodingOptionsPreset preset = 4;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.options_.preset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.EncodingOptions advanced = 5;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.options_.advanced_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EncodedFileOutput file_outputs = 6;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.file_outputs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.StreamOutput stream_outputs = 7;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.stream_outputs_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.segment_outputs_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.ImageOutput image_outputs = 9;
    {PROTOBUF_FIELD_OFFSET(ParticipantEgressRequest, _impl_.image_outputs_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EncodingOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::ImageOutput>()},
  }},
  {{
    "\40\11\10\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "livekit.ParticipantEgressRequest"
    "room_name"
    "identity"
  }},
};
PROTOBUF_NOINLINE void ParticipantEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ParticipantEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.identity_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.screen_share_ = false;
  clear_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ParticipantEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ParticipantEgressRequest& this_ = static_cast<const ParticipantEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ParticipantEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ParticipantEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ParticipantEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantEgressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string identity = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_identity().empty()) {
      const std::string& _s = this_._internal_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ParticipantEgressRequest.identity");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool screen_share = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_screen_share() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_screen_share(), target);
    }
  }

  switch (this_.options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_preset(), target);
      break;
    }
    case kAdvanced: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.options_.advanced_, this_._impl_.options_.advanced_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // repeated .livekit.EncodedFileOutput file_outputs = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            8, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 9;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_image_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_image_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            9, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ParticipantEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ParticipantEgressRequest::ByteSizeLong(const MessageLite& base) {
  const ParticipantEgressRequest& this_ = static_cast<const ParticipantEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ParticipantEgressRequest::ByteSizeLong() const {
  const ParticipantEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ParticipantEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EncodedFileOutput file_outputs = 6;
    {
      total_size += 1UL * this_._internal_file_outputs_size();
      for (const auto& msg : this_._internal_file_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.StreamOutput stream_outputs = 7;
    {
      total_size += 1UL * this_._internal_stream_outputs_size();
      for (const auto& msg : this_._internal_stream_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentedFileOutput segment_outputs = 8;
    {
      total_size += 1UL * this_._internal_segment_outputs_size();
      for (const auto& msg : this_._internal_segment_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ImageOutput image_outputs = 9;
    {
      total_size += 1UL * this_._internal_image_outputs_size();
      for (const auto& msg : this_._internal_image_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string identity = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_identity());
      }
    }
    // bool screen_share = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_screen_share() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.options_case()) {
    // .livekit.EncodingOptionsPreset preset = 4;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 5;
    case kAdvanced: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ParticipantEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ParticipantEgressRequest*>(&to_msg);
  auto& from = static_cast<const ParticipantEgressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ParticipantEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_file_outputs()->MergeFrom(
      from._internal_file_outputs());
  _this->_internal_mutable_stream_outputs()->MergeFrom(
      from._internal_stream_outputs());
  _this->_internal_mutable_segment_outputs()->MergeFrom(
      from._internal_segment_outputs());
  _this->_internal_mutable_image_outputs()->MergeFrom(
      from._internal_image_outputs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_identity().empty()) {
        _this->_internal_set_identity(from._internal_identity());
      } else {
        if (_this->_impl_.identity_.IsDefault()) {
          _this->_internal_set_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_screen_share() != 0) {
        _this->_impl_.screen_share_ = from._impl_.screen_share_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_options();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      }
      case kAdvanced: {
        if (oneof_needs_init) {
          _this->_impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        } else {
          _this->_impl_.options_.advanced_->MergeFrom(*from._impl_.options_.advanced_);
        }
        break;
      }
      case OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ParticipantEgressRequest::CopyFrom(const ParticipantEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ParticipantEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ParticipantEgressRequest::InternalSwap(ParticipantEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_, &other->_impl_.identity_, arena);
  swap(_impl_.screen_share_, other->_impl_.screen_share_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ParticipantEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackCompositeEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackCompositeEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::TrackCompositeEgressRequest, _impl_._oneof_case_);
};

void TrackCompositeEgressRequest::set_allocated_file(::livekit::EncodedFileOutput* PROTOBUF_NULLABLE file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.file)
}
void TrackCompositeEgressRequest::set_allocated_stream(::livekit::StreamOutput* PROTOBUF_NULLABLE stream) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = stream->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.output_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.stream)
}
void TrackCompositeEgressRequest::set_allocated_segments(::livekit::SegmentedFileOutput* PROTOBUF_NULLABLE segments) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (segments) {
    ::google::protobuf::Arena* submessage_arena = segments->GetArena();
    if (message_arena != submessage_arena) {
      segments = ::google::protobuf::internal::GetOwnedMessage(message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.output_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.segments)
}
void TrackCompositeEgressRequest::set_allocated_advanced(::livekit::EncodingOptions* PROTOBUF_NULLABLE advanced) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_options();
  if (advanced) {
    ::google::protobuf::Arena* submessage_arena = advanced->GetArena();
    if (message_arena != submessage_arena) {
      advanced = ::google::protobuf::internal::GetOwnedMessage(message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackCompositeEgressRequest.advanced)
}
TrackCompositeEgressRequest::TrackCompositeEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackCompositeEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackCompositeEgressRequest)
}
PROTOBUF_NDEBUG_INLINE TrackCompositeEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackCompositeEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        file_outputs_{visibility, arena, from.file_outputs_},
        stream_outputs_{visibility, arena, from.stream_outputs_},
        segment_outputs_{visibility, arena, from.segment_outputs_},
        image_outputs_{visibility, arena, from.image_outputs_},
        room_name_(arena, from.room_name_),
        audio_track_id_(arena, from.audio_track_id_),
        video_track_id_(arena, from.video_track_id_),
        output_{},
        options_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

TrackCompositeEgressRequest::TrackCompositeEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackCompositeEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackCompositeEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackCompositeEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kFile:
        _impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        break;
      case kStream:
        _impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        break;
      case kSegments:
        _impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        break;
  }
  switch (options_case()) {
    case OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      case kAdvanced:
        _impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.TrackCompositeEgressRequest)
}
PROTOBUF_NDEBUG_INLINE TrackCompositeEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        file_outputs_{visibility, arena},
        stream_outputs_{visibility, arena},
        segment_outputs_{visibility, arena},
        image_outputs_{visibility, arena},
        room_name_(arena),
        audio_track_id_(arena),
        video_track_id_(arena),
        output_{},
        options_{},
        _oneof_case_{} {}

inline void TrackCompositeEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrackCompositeEgressRequest::~TrackCompositeEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrackCompositeEgressRequest)
  SharedDtor(*this);
}
inline void TrackCompositeEgressRequest::SharedDtor(MessageLite& self) {
  TrackCompositeEgressRequest& this_ = static_cast<TrackCompositeEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.audio_track_id_.Destroy();
  this_._impl_.video_track_id_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  if (this_.has_options()) {
    this_.clear_options();
  }
  this_._impl_.~Impl_();
}

void TrackCompositeEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.file_);
      }
      break;
    }
    case kStream: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.stream_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.stream_);
      }
      break;
    }
    case kSegments: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.segments_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.segments_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}

void TrackCompositeEgressRequest::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArena() == nullptr) {
        delete _impl_.options_.advanced_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.options_.advanced_);
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL TrackCompositeEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackCompositeEgressRequest(arena);
}
constexpr auto TrackCompositeEgressRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.file_outputs_) +
          decltype(TrackCompositeEgressRequest::_impl_.file_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.stream_outputs_) +
          decltype(TrackCompositeEgressRequest::_impl_.stream_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.segment_outputs_) +
          decltype(TrackCompositeEgressRequest::_impl_.segment_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.image_outputs_) +
          decltype(TrackCompositeEgressRequest::_impl_.image_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TrackCompositeEgressRequest), alignof(TrackCompositeEgressRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TrackCompositeEgressRequest::PlacementNew_,
                                 sizeof(TrackCompositeEgressRequest),
                                 alignof(TrackCompositeEgressRequest));
  }
}
constexpr auto TrackCompositeEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackCompositeEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackCompositeEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackCompositeEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackCompositeEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackCompositeEgressRequest>(), &TrackCompositeEgressRequest::ByteSizeLong,
              &TrackCompositeEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_._cached_size_),
          false,
      },
      &TrackCompositeEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackCompositeEgressRequest_class_data_ =
            TrackCompositeEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackCompositeEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackCompositeEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackCompositeEgressRequest_class_data_.tc_table);
  return TrackCompositeEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 8, 89, 2>
TrackCompositeEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294951680,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrackCompositeEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackCompositeEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.room_name_)}},
    // string audio_track_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.audio_track_id_)}},
    // string video_track_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.video_track_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 4, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.file_outputs_)}},
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 5, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.stream_outputs_)}},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 6, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.segment_outputs_)}},
    // repeated .livekit.ImageOutput image_outputs = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 7, PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.image_outputs_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string audio_track_id = 2;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.audio_track_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string video_track_id = 3;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.video_track_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.output_.file_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.output_.stream_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.EncodingOptionsPreset preset = 6;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.options_.preset_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.EncodingOptions advanced = 7;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.options_.advanced_), _Internal::kOneofCaseOffset + 4, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.output_.segments_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.file_outputs_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.stream_outputs_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.segment_outputs_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.ImageOutput image_outputs = 14;
    {PROTOBUF_FIELD_OFFSET(TrackCompositeEgressRequest, _impl_.image_outputs_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodingOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::ImageOutput>()},
  }},
  {{
    "\43\11\16\16\0\0\0\0\0\0\0\0\0\0\0\0"
    "livekit.TrackCompositeEgressRequest"
    "room_name"
    "audio_track_id"
    "video_track_id"
  }},
};
PROTOBUF_NOINLINE void TrackCompositeEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackCompositeEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.stream_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  _impl_.image_outputs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.audio_track_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.video_track_id_.ClearNonDefaultToEmpty();
    }
  }
  clear_output();
  clear_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackCompositeEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackCompositeEgressRequest& this_ = static_cast<const TrackCompositeEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackCompositeEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackCompositeEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackCompositeEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackCompositeEgressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string audio_track_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_audio_track_id().empty()) {
      const std::string& _s = this_._internal_audio_track_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackCompositeEgressRequest.audio_track_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string video_track_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_video_track_id().empty()) {
      const std::string& _s = this_._internal_video_track_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackCompositeEgressRequest.video_track_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.output_.file_, this_._impl_.output_.file_->GetCachedSize(), target,
          stream);
      break;
    }
    case kStream: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.output_.stream_, this_._impl_.output_.stream_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  switch (this_.options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_preset(), target);
      break;
    }
    case kAdvanced: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.options_.advanced_, this_._impl_.options_.advanced_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
  if (this_.output_case() == kSegments) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.output_.segments_, this_._impl_.output_.segments_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.EncodedFileOutput file_outputs = 11;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            11, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.StreamOutput stream_outputs = 12;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            12, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.ImageOutput image_outputs = 14;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_image_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_image_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            14, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackCompositeEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackCompositeEgressRequest::ByteSizeLong(const MessageLite& base) {
  const TrackCompositeEgressRequest& this_ = static_cast<const TrackCompositeEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackCompositeEgressRequest::ByteSizeLong() const {
  const TrackCompositeEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackCompositeEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EncodedFileOutput file_outputs = 11;
    {
      total_size += 1UL * this_._internal_file_outputs_size();
      for (const auto& msg : this_._internal_file_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.StreamOutput stream_outputs = 12;
    {
      total_size += 1UL * this_._internal_stream_outputs_size();
      for (const auto& msg : this_._internal_stream_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentedFileOutput segment_outputs = 13;
    {
      total_size += 1UL * this_._internal_segment_outputs_size();
      for (const auto& msg : this_._internal_segment_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ImageOutput image_outputs = 14;
    {
      total_size += 1UL * this_._internal_image_outputs_size();
      for (const auto& msg : this_._internal_image_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string audio_track_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_audio_track_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_audio_track_id());
      }
    }
    // string video_track_id = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_video_track_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_video_track_id());
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.EncodedFileOutput file = 4 [deprecated = true];
    case kFile: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.file_);
      break;
    }
    // .livekit.StreamOutput stream = 5 [deprecated = true];
    case kStream: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.stream_);
      break;
    }
    // .livekit.SegmentedFileOutput segments = 8 [deprecated = true];
    case kSegments: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.segments_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  switch (this_.options_case()) {
    // .livekit.EncodingOptionsPreset preset = 6;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 7;
    case kAdvanced: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackCompositeEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackCompositeEgressRequest*>(&to_msg);
  auto& from = static_cast<const TrackCompositeEgressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackCompositeEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_file_outputs()->MergeFrom(
      from._internal_file_outputs());
  _this->_internal_mutable_stream_outputs()->MergeFrom(
      from._internal_stream_outputs());
  _this->_internal_mutable_segment_outputs()->MergeFrom(
      from._internal_segment_outputs());
  _this->_internal_mutable_image_outputs()->MergeFrom(
      from._internal_image_outputs());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_audio_track_id().empty()) {
        _this->_internal_set_audio_track_id(from._internal_audio_track_id());
      } else {
        if (_this->_impl_.audio_track_id_.IsDefault()) {
          _this->_internal_set_audio_track_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_video_track_id().empty()) {
        _this->_internal_set_video_track_id(from._internal_video_track_id());
      } else {
        if (_this->_impl_.video_track_id_.IsDefault()) {
          _this->_internal_set_video_track_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        } else {
          _this->_impl_.output_.file_->MergeFrom(*from._impl_.output_.file_);
        }
        break;
      }
      case kStream: {
        if (oneof_needs_init) {
          _this->_impl_.output_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.stream_);
        } else {
          _this->_impl_.output_.stream_->MergeFrom(*from._impl_.output_.stream_);
        }
        break;
      }
      case kSegments: {
        if (oneof_needs_init) {
          _this->_impl_.output_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.segments_);
        } else {
          _this->_impl_.output_.segments_->MergeFrom(*from._impl_.output_.segments_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_options();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      }
      case kAdvanced: {
        if (oneof_needs_init) {
          _this->_impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        } else {
          _this->_impl_.options_.advanced_->MergeFrom(*from._impl_.options_.advanced_);
        }
        break;
      }
      case OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackCompositeEgressRequest::CopyFrom(const TrackCompositeEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackCompositeEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackCompositeEgressRequest::InternalSwap(TrackCompositeEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.stream_outputs_.InternalSwap(&other->_impl_.stream_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  _impl_.image_outputs_.InternalSwap(&other->_impl_.image_outputs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_track_id_, &other->_impl_.audio_track_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.video_track_id_, &other->_impl_.video_track_id_, arena);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata TrackCompositeEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TrackEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TrackEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::TrackEgressRequest, _impl_._oneof_case_);
};

void TrackEgressRequest::set_allocated_file(::livekit::DirectFileOutput* PROTOBUF_NULLABLE file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.output_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.TrackEgressRequest.file)
}
TrackEgressRequest::TrackEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.TrackEgressRequest)
}
PROTOBUF_NDEBUG_INLINE TrackEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::TrackEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        room_name_(arena, from.room_name_),
        track_id_(arena, from.track_id_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

TrackEgressRequest::TrackEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const TrackEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TrackEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TrackEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kFile:
        _impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        break;
      case kWebsocketUrl:
        new (&_impl_.output_.websocket_url_) decltype(_impl_.output_.websocket_url_){arena, from._impl_.output_.websocket_url_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.TrackEgressRequest)
}
PROTOBUF_NDEBUG_INLINE TrackEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        room_name_(arena),
        track_id_(arena),
        output_{},
        _oneof_case_{} {}

inline void TrackEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TrackEgressRequest::~TrackEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.TrackEgressRequest)
  SharedDtor(*this);
}
inline void TrackEgressRequest::SharedDtor(MessageLite& self) {
  TrackEgressRequest& this_ = static_cast<TrackEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.track_id_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void TrackEgressRequest::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.TrackEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.file_);
      }
      break;
    }
    case kWebsocketUrl: {
      _impl_.output_.websocket_url_.Destroy();
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL TrackEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TrackEgressRequest(arena);
}
constexpr auto TrackEgressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TrackEgressRequest),
                                            alignof(TrackEgressRequest));
}
constexpr auto TrackEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TrackEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &TrackEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TrackEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TrackEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TrackEgressRequest>(), &TrackEgressRequest::ByteSizeLong,
              &TrackEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_._cached_size_),
          false,
      },
      &TrackEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        TrackEgressRequest_class_data_ =
            TrackEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL TrackEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TrackEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TrackEgressRequest_class_data_.tc_table);
  return TrackEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 1, 65, 2>
TrackEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    TrackEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::TrackEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string track_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.track_id_)}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.room_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string track_id = 2;
    {PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.track_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.DirectFileOutput file = 3;
    {PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.output_.file_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string websocket_url = 4;
    {PROTOBUF_FIELD_OFFSET(TrackEgressRequest, _impl_.output_.websocket_url_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::DirectFileOutput>()},
  }},
  {{
    "\32\11\10\0\15\0\0\0"
    "livekit.TrackEgressRequest"
    "room_name"
    "track_id"
    "websocket_url"
  }},
};
PROTOBUF_NOINLINE void TrackEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.TrackEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.track_id_.ClearNonDefaultToEmpty();
    }
  }
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL TrackEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TrackEgressRequest& this_ = static_cast<const TrackEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TrackEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TrackEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.TrackEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackEgressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string track_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_track_id().empty()) {
      const std::string& _s = this_._internal_track_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackEgressRequest.track_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.output_.file_, this_._impl_.output_.file_->GetCachedSize(), target,
          stream);
      break;
    }
    case kWebsocketUrl: {
      const std::string& _s = this_._internal_websocket_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.TrackEgressRequest.websocket_url");
      target = stream->WriteStringMaybeAliased(4, _s, target);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.TrackEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TrackEgressRequest::ByteSizeLong(const MessageLite& base) {
  const TrackEgressRequest& this_ = static_cast<const TrackEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t TrackEgressRequest::ByteSizeLong() const {
  const TrackEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.TrackEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string track_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_track_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_track_id());
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.DirectFileOutput file = 3;
    case kFile: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.file_);
      break;
    }
    // string websocket_url = 4;
    case kWebsocketUrl: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_websocket_url());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void TrackEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TrackEgressRequest*>(&to_msg);
  auto& from = static_cast<const TrackEgressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.TrackEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_track_id().empty()) {
        _this->_internal_set_track_id(from._internal_track_id());
      } else {
        if (_this->_impl_.track_id_.IsDefault()) {
          _this->_internal_set_track_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.output_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.file_);
        } else {
          _this->_impl_.output_.file_->MergeFrom(*from._impl_.output_.file_);
        }
        break;
      }
      case kWebsocketUrl: {
        if (oneof_needs_init) {
          _this->_impl_.output_.websocket_url_.InitDefault();
        }
        _this->_impl_.output_.websocket_url_.Set(from._internal_websocket_url(), arena);
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TrackEgressRequest::CopyFrom(const TrackEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.TrackEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TrackEgressRequest::InternalSwap(TrackEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.track_id_, &other->_impl_.track_id_, arena);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TrackEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EncodedFileOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EncodedFileOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::EncodedFileOutput, _impl_._oneof_case_);
};

void EncodedFileOutput::set_allocated_s3(::livekit::S3Upload* PROTOBUF_NULLABLE s3) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (s3) {
    ::google::protobuf::Arena* submessage_arena = s3->GetArena();
    if (message_arena != submessage_arena) {
      s3 = ::google::protobuf::internal::GetOwnedMessage(message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.s3)
}
void EncodedFileOutput::set_allocated_gcp(::livekit::GCPUpload* PROTOBUF_NULLABLE gcp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (gcp) {
    ::google::protobuf::Arena* submessage_arena = gcp->GetArena();
    if (message_arena != submessage_arena) {
      gcp = ::google::protobuf::internal::GetOwnedMessage(message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.gcp)
}
void EncodedFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* PROTOBUF_NULLABLE azure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (azure) {
    ::google::protobuf::Arena* submessage_arena = azure->GetArena();
    if (message_arena != submessage_arena) {
      azure = ::google::protobuf::internal::GetOwnedMessage(message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.azure)
}
void EncodedFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* PROTOBUF_NULLABLE alioss) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (alioss) {
    ::google::protobuf::Arena* submessage_arena = alioss->GetArena();
    if (message_arena != submessage_arena) {
      alioss = ::google::protobuf::internal::GetOwnedMessage(message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EncodedFileOutput.aliOSS)
}
EncodedFileOutput::EncodedFileOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EncodedFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.EncodedFileOutput)
}
PROTOBUF_NDEBUG_INLINE EncodedFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::EncodedFileOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filepath_(arena, from.filepath_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

EncodedFileOutput::EncodedFileOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EncodedFileOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EncodedFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EncodedFileOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, file_type_),
           offsetof(Impl_, disable_manifest_) -
               offsetof(Impl_, file_type_) +
               sizeof(Impl_::disable_manifest_));
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kS3:
        _impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        break;
      case kGcp:
        _impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        break;
      case kAzure:
        _impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        break;
      case kAliOSS:
        _impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.EncodedFileOutput)
}
PROTOBUF_NDEBUG_INLINE EncodedFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filepath_(arena),
        output_{},
        _oneof_case_{} {}

inline void EncodedFileOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, file_type_),
           0,
           offsetof(Impl_, disable_manifest_) -
               offsetof(Impl_, file_type_) +
               sizeof(Impl_::disable_manifest_));
}
EncodedFileOutput::~EncodedFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.EncodedFileOutput)
  SharedDtor(*this);
}
inline void EncodedFileOutput::SharedDtor(MessageLite& self) {
  EncodedFileOutput& this_ = static_cast<EncodedFileOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filepath_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void EncodedFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EncodedFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.s3_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.s3_);
      }
      break;
    }
    case kGcp: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.gcp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.gcp_);
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.azure_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.azure_);
      }
      break;
    }
    case kAliOSS: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.alioss_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.alioss_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL EncodedFileOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EncodedFileOutput(arena);
}
constexpr auto EncodedFileOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EncodedFileOutput),
                                            alignof(EncodedFileOutput));
}
constexpr auto EncodedFileOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EncodedFileOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EncodedFileOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EncodedFileOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EncodedFileOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EncodedFileOutput>(), &EncodedFileOutput::ByteSizeLong,
              &EncodedFileOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_._cached_size_),
          false,
      },
      &EncodedFileOutput::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        EncodedFileOutput_class_data_ =
            EncodedFileOutput::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL EncodedFileOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EncodedFileOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EncodedFileOutput_class_data_.tc_table);
  return EncodedFileOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 42, 2>
EncodedFileOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EncodedFileOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.EncodedFileType file_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodedFileOutput, _impl_.file_type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.file_type_)}},
    // string filepath = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.filepath_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disable_manifest = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodedFileOutput, _impl_.disable_manifest_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.disable_manifest_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.EncodedFileType file_type = 1;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.file_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string filepath = 2;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.filepath_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.S3Upload s3 = 3;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.output_.s3_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.GCPUpload gcp = 4;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.output_.gcp_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AzureBlobUpload azure = 5;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.output_.azure_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool disable_manifest = 6;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.disable_manifest_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.AliOSSUpload aliOSS = 7;
    {PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.output_.alioss_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::S3Upload>()},
      {::_pbi::TcParser::GetTable<::livekit::GCPUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>()},
  }},
  {{
    "\31\0\10\0\0\0\0\0"
    "livekit.EncodedFileOutput"
    "filepath"
  }},
};
PROTOBUF_NOINLINE void EncodedFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EncodedFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filepath_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.file_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_manifest_) -
        reinterpret_cast<char*>(&_impl_.file_type_)) + sizeof(_impl_.disable_manifest_));
  }
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EncodedFileOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EncodedFileOutput& this_ = static_cast<const EncodedFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EncodedFileOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EncodedFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EncodedFileOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.EncodedFileType file_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_file_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_file_type(), target);
    }
  }

  // string filepath = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filepath().empty()) {
      const std::string& _s = this_._internal_filepath();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EncodedFileOutput.filepath");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kS3: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.output_.s3_, this_._impl_.output_.s3_->GetCachedSize(), target,
          stream);
      break;
    }
    case kGcp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.output_.gcp_, this_._impl_.output_.gcp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAzure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.output_.azure_, this_._impl_.output_.azure_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // bool disable_manifest = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_disable_manifest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_disable_manifest(), target);
    }
  }

  // .livekit.AliOSSUpload aliOSS = 7;
  if (this_.output_case() == kAliOSS) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.output_.alioss_, this_._impl_.output_.alioss_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EncodedFileOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EncodedFileOutput::ByteSizeLong(const MessageLite& base) {
  const EncodedFileOutput& this_ = static_cast<const EncodedFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EncodedFileOutput::ByteSizeLong() const {
  const EncodedFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.EncodedFileOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string filepath = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filepath().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filepath());
      }
    }
    // .livekit.EncodedFileType file_type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_file_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_file_type());
      }
    }
    // bool disable_manifest = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_disable_manifest() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.S3Upload s3 = 3;
    case kS3: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 4;
    case kGcp: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 5;
    case kAzure: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 7;
    case kAliOSS: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EncodedFileOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EncodedFileOutput*>(&to_msg);
  auto& from = static_cast<const EncodedFileOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EncodedFileOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filepath().empty()) {
        _this->_internal_set_filepath(from._internal_filepath());
      } else {
        if (_this->_impl_.filepath_.IsDefault()) {
          _this->_internal_set_filepath("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_file_type() != 0) {
        _this->_impl_.file_type_ = from._impl_.file_type_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_disable_manifest() != 0) {
        _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kS3: {
        if (oneof_needs_init) {
          _this->_impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        } else {
          _this->_impl_.output_.s3_->MergeFrom(*from._impl_.output_.s3_);
        }
        break;
      }
      case kGcp: {
        if (oneof_needs_init) {
          _this->_impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        } else {
          _this->_impl_.output_.gcp_->MergeFrom(*from._impl_.output_.gcp_);
        }
        break;
      }
      case kAzure: {
        if (oneof_needs_init) {
          _this->_impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        } else {
          _this->_impl_.output_.azure_->MergeFrom(*from._impl_.output_.azure_);
        }
        break;
      }
      case kAliOSS: {
        if (oneof_needs_init) {
          _this->_impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        } else {
          _this->_impl_.output_.alioss_->MergeFrom(*from._impl_.output_.alioss_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EncodedFileOutput::CopyFrom(const EncodedFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EncodedFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EncodedFileOutput::InternalSwap(EncodedFileOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, &other->_impl_.filepath_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.disable_manifest_)
      + sizeof(EncodedFileOutput::_impl_.disable_manifest_)
      - PROTOBUF_FIELD_OFFSET(EncodedFileOutput, _impl_.file_type_)>(
          reinterpret_cast<char*>(&_impl_.file_type_),
          reinterpret_cast<char*>(&other->_impl_.file_type_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata EncodedFileOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SegmentedFileOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SegmentedFileOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::SegmentedFileOutput, _impl_._oneof_case_);
};

void SegmentedFileOutput::set_allocated_s3(::livekit::S3Upload* PROTOBUF_NULLABLE s3) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (s3) {
    ::google::protobuf::Arena* submessage_arena = s3->GetArena();
    if (message_arena != submessage_arena) {
      s3 = ::google::protobuf::internal::GetOwnedMessage(message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.s3)
}
void SegmentedFileOutput::set_allocated_gcp(::livekit::GCPUpload* PROTOBUF_NULLABLE gcp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (gcp) {
    ::google::protobuf::Arena* submessage_arena = gcp->GetArena();
    if (message_arena != submessage_arena) {
      gcp = ::google::protobuf::internal::GetOwnedMessage(message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.gcp)
}
void SegmentedFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* PROTOBUF_NULLABLE azure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (azure) {
    ::google::protobuf::Arena* submessage_arena = azure->GetArena();
    if (message_arena != submessage_arena) {
      azure = ::google::protobuf::internal::GetOwnedMessage(message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.azure)
}
void SegmentedFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* PROTOBUF_NULLABLE alioss) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (alioss) {
    ::google::protobuf::Arena* submessage_arena = alioss->GetArena();
    if (message_arena != submessage_arena) {
      alioss = ::google::protobuf::internal::GetOwnedMessage(message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.SegmentedFileOutput.aliOSS)
}
SegmentedFileOutput::SegmentedFileOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentedFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SegmentedFileOutput)
}
PROTOBUF_NDEBUG_INLINE SegmentedFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SegmentedFileOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filename_prefix_(arena, from.filename_prefix_),
        playlist_name_(arena, from.playlist_name_),
        live_playlist_name_(arena, from.live_playlist_name_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

SegmentedFileOutput::SegmentedFileOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SegmentedFileOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentedFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SegmentedFileOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, protocol_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, protocol_),
           offsetof(Impl_, filename_suffix_) -
               offsetof(Impl_, protocol_) +
               sizeof(Impl_::filename_suffix_));
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kS3:
        _impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        break;
      case kGcp:
        _impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        break;
      case kAzure:
        _impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        break;
      case kAliOSS:
        _impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.SegmentedFileOutput)
}
PROTOBUF_NDEBUG_INLINE SegmentedFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filename_prefix_(arena),
        playlist_name_(arena),
        live_playlist_name_(arena),
        output_{},
        _oneof_case_{} {}

inline void SegmentedFileOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, protocol_),
           0,
           offsetof(Impl_, filename_suffix_) -
               offsetof(Impl_, protocol_) +
               sizeof(Impl_::filename_suffix_));
}
SegmentedFileOutput::~SegmentedFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.SegmentedFileOutput)
  SharedDtor(*this);
}
inline void SegmentedFileOutput::SharedDtor(MessageLite& self) {
  SegmentedFileOutput& this_ = static_cast<SegmentedFileOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filename_prefix_.Destroy();
  this_._impl_.playlist_name_.Destroy();
  this_._impl_.live_playlist_name_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void SegmentedFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.SegmentedFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.s3_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.s3_);
      }
      break;
    }
    case kGcp: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.gcp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.gcp_);
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.azure_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.azure_);
      }
      break;
    }
    case kAliOSS: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.alioss_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.alioss_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL SegmentedFileOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SegmentedFileOutput(arena);
}
constexpr auto SegmentedFileOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SegmentedFileOutput),
                                            alignof(SegmentedFileOutput));
}
constexpr auto SegmentedFileOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SegmentedFileOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SegmentedFileOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SegmentedFileOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SegmentedFileOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SegmentedFileOutput>(), &SegmentedFileOutput::ByteSizeLong,
              &SegmentedFileOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_._cached_size_),
          false,
      },
      &SegmentedFileOutput::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SegmentedFileOutput_class_data_ =
            SegmentedFileOutput::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SegmentedFileOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SegmentedFileOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SegmentedFileOutput_class_data_.tc_table);
  return SegmentedFileOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 4, 90, 2>
SegmentedFileOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    SegmentedFileOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.SegmentedFileProtocol protocol = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SegmentedFileOutput, _impl_.protocol_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.protocol_)}},
    // string filename_prefix = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_prefix_)}},
    // string playlist_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.playlist_name_)}},
    // uint32 segment_duration = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SegmentedFileOutput, _impl_.segment_duration_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.segment_duration_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disable_manifest = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SegmentedFileOutput, _impl_.disable_manifest_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.disable_manifest_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.SegmentedFileSuffix filename_suffix = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SegmentedFileOutput, _impl_.filename_suffix_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_suffix_)}},
    // string live_playlist_name = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.live_playlist_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.SegmentedFileProtocol protocol = 1;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.protocol_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string filename_prefix = 2;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_prefix_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string playlist_name = 3;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.playlist_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 segment_duration = 4;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.segment_duration_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .livekit.S3Upload s3 = 5;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.output_.s3_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.GCPUpload gcp = 6;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.output_.gcp_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AzureBlobUpload azure = 7;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.output_.azure_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool disable_manifest = 8;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.disable_manifest_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.AliOSSUpload aliOSS = 9;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.output_.alioss_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.SegmentedFileSuffix filename_suffix = 10;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_suffix_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string live_playlist_name = 11;
    {PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.live_playlist_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::S3Upload>()},
      {::_pbi::TcParser::GetTable<::livekit::GCPUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>()},
  }},
  {{
    "\33\0\17\15\0\0\0\0\0\0\0\22\0\0\0\0"
    "livekit.SegmentedFileOutput"
    "filename_prefix"
    "playlist_name"
    "live_playlist_name"
  }},
};
PROTOBUF_NOINLINE void SegmentedFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SegmentedFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.filename_prefix_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.playlist_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.live_playlist_name_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000078u) != 0) {
    ::memset(&_impl_.protocol_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.filename_suffix_) -
        reinterpret_cast<char*>(&_impl_.protocol_)) + sizeof(_impl_.filename_suffix_));
  }
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SegmentedFileOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SegmentedFileOutput& this_ = static_cast<const SegmentedFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SegmentedFileOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SegmentedFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SegmentedFileOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.SegmentedFileProtocol protocol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_protocol() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_protocol(), target);
    }
  }

  // string filename_prefix = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filename_prefix().empty()) {
      const std::string& _s = this_._internal_filename_prefix();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentedFileOutput.filename_prefix");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string playlist_name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_playlist_name().empty()) {
      const std::string& _s = this_._internal_playlist_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentedFileOutput.playlist_name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // uint32 segment_duration = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_segment_duration() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_segment_duration(), target);
    }
  }

  switch (this_.output_case()) {
    case kS3: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.output_.s3_, this_._impl_.output_.s3_->GetCachedSize(), target,
          stream);
      break;
    }
    case kGcp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.output_.gcp_, this_._impl_.output_.gcp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAzure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.output_.azure_, this_._impl_.output_.azure_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // bool disable_manifest = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_disable_manifest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_disable_manifest(), target);
    }
  }

  // .livekit.AliOSSUpload aliOSS = 9;
  if (this_.output_case() == kAliOSS) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.output_.alioss_, this_._impl_.output_.alioss_->GetCachedSize(), target,
        stream);
  }

  // .livekit.SegmentedFileSuffix filename_suffix = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_filename_suffix() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          10, this_._internal_filename_suffix(), target);
    }
  }

  // string live_playlist_name = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_live_playlist_name().empty()) {
      const std::string& _s = this_._internal_live_playlist_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentedFileOutput.live_playlist_name");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SegmentedFileOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SegmentedFileOutput::ByteSizeLong(const MessageLite& base) {
  const SegmentedFileOutput& this_ = static_cast<const SegmentedFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SegmentedFileOutput::ByteSizeLong() const {
  const SegmentedFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SegmentedFileOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // string filename_prefix = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filename_prefix().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename_prefix());
      }
    }
    // string playlist_name = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_playlist_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_playlist_name());
      }
    }
    // string live_playlist_name = 11;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_live_playlist_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_live_playlist_name());
      }
    }
    // .livekit.SegmentedFileProtocol protocol = 1;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_protocol() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_protocol());
      }
    }
    // uint32 segment_duration = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_segment_duration() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_segment_duration());
      }
    }
    // bool disable_manifest = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_disable_manifest() != 0) {
        total_size += 2;
      }
    }
    // .livekit.SegmentedFileSuffix filename_suffix = 10;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_filename_suffix() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_filename_suffix());
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.S3Upload s3 = 5;
    case kS3: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 6;
    case kGcp: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 7;
    case kAzure: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 9;
    case kAliOSS: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SegmentedFileOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SegmentedFileOutput*>(&to_msg);
  auto& from = static_cast<const SegmentedFileOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SegmentedFileOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filename_prefix().empty()) {
        _this->_internal_set_filename_prefix(from._internal_filename_prefix());
      } else {
        if (_this->_impl_.filename_prefix_.IsDefault()) {
          _this->_internal_set_filename_prefix("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_playlist_name().empty()) {
        _this->_internal_set_playlist_name(from._internal_playlist_name());
      } else {
        if (_this->_impl_.playlist_name_.IsDefault()) {
          _this->_internal_set_playlist_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_live_playlist_name().empty()) {
        _this->_internal_set_live_playlist_name(from._internal_live_playlist_name());
      } else {
        if (_this->_impl_.live_playlist_name_.IsDefault()) {
          _this->_internal_set_live_playlist_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_protocol() != 0) {
        _this->_impl_.protocol_ = from._impl_.protocol_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_segment_duration() != 0) {
        _this->_impl_.segment_duration_ = from._impl_.segment_duration_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_disable_manifest() != 0) {
        _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_filename_suffix() != 0) {
        _this->_impl_.filename_suffix_ = from._impl_.filename_suffix_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kS3: {
        if (oneof_needs_init) {
          _this->_impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        } else {
          _this->_impl_.output_.s3_->MergeFrom(*from._impl_.output_.s3_);
        }
        break;
      }
      case kGcp: {
        if (oneof_needs_init) {
          _this->_impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        } else {
          _this->_impl_.output_.gcp_->MergeFrom(*from._impl_.output_.gcp_);
        }
        break;
      }
      case kAzure: {
        if (oneof_needs_init) {
          _this->_impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        } else {
          _this->_impl_.output_.azure_->MergeFrom(*from._impl_.output_.azure_);
        }
        break;
      }
      case kAliOSS: {
        if (oneof_needs_init) {
          _this->_impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        } else {
          _this->_impl_.output_.alioss_->MergeFrom(*from._impl_.output_.alioss_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentedFileOutput::CopyFrom(const SegmentedFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SegmentedFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SegmentedFileOutput::InternalSwap(SegmentedFileOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_prefix_, &other->_impl_.filename_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.playlist_name_, &other->_impl_.playlist_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.live_playlist_name_, &other->_impl_.live_playlist_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.filename_suffix_)
      + sizeof(SegmentedFileOutput::_impl_.filename_suffix_)
      - PROTOBUF_FIELD_OFFSET(SegmentedFileOutput, _impl_.protocol_)>(
          reinterpret_cast<char*>(&_impl_.protocol_),
          reinterpret_cast<char*>(&other->_impl_.protocol_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata SegmentedFileOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DirectFileOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DirectFileOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::DirectFileOutput, _impl_._oneof_case_);
};

void DirectFileOutput::set_allocated_s3(::livekit::S3Upload* PROTOBUF_NULLABLE s3) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (s3) {
    ::google::protobuf::Arena* submessage_arena = s3->GetArena();
    if (message_arena != submessage_arena) {
      s3 = ::google::protobuf::internal::GetOwnedMessage(message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.s3)
}
void DirectFileOutput::set_allocated_gcp(::livekit::GCPUpload* PROTOBUF_NULLABLE gcp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (gcp) {
    ::google::protobuf::Arena* submessage_arena = gcp->GetArena();
    if (message_arena != submessage_arena) {
      gcp = ::google::protobuf::internal::GetOwnedMessage(message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.gcp)
}
void DirectFileOutput::set_allocated_azure(::livekit::AzureBlobUpload* PROTOBUF_NULLABLE azure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (azure) {
    ::google::protobuf::Arena* submessage_arena = azure->GetArena();
    if (message_arena != submessage_arena) {
      azure = ::google::protobuf::internal::GetOwnedMessage(message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.azure)
}
void DirectFileOutput::set_allocated_alioss(::livekit::AliOSSUpload* PROTOBUF_NULLABLE alioss) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (alioss) {
    ::google::protobuf::Arena* submessage_arena = alioss->GetArena();
    if (message_arena != submessage_arena) {
      alioss = ::google::protobuf::internal::GetOwnedMessage(message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.DirectFileOutput.aliOSS)
}
DirectFileOutput::DirectFileOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DirectFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DirectFileOutput)
}
PROTOBUF_NDEBUG_INLINE DirectFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DirectFileOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filepath_(arena, from.filepath_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

DirectFileOutput::DirectFileOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DirectFileOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DirectFileOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DirectFileOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.disable_manifest_ = from._impl_.disable_manifest_;
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kS3:
        _impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        break;
      case kGcp:
        _impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        break;
      case kAzure:
        _impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        break;
      case kAliOSS:
        _impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.DirectFileOutput)
}
PROTOBUF_NDEBUG_INLINE DirectFileOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filepath_(arena),
        output_{},
        _oneof_case_{} {}

inline void DirectFileOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.disable_manifest_ = {};
}
DirectFileOutput::~DirectFileOutput() {
  // @@protoc_insertion_point(destructor:livekit.DirectFileOutput)
  SharedDtor(*this);
}
inline void DirectFileOutput::SharedDtor(MessageLite& self) {
  DirectFileOutput& this_ = static_cast<DirectFileOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filepath_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void DirectFileOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.DirectFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.s3_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.s3_);
      }
      break;
    }
    case kGcp: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.gcp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.gcp_);
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.azure_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.azure_);
      }
      break;
    }
    case kAliOSS: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.alioss_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.alioss_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL DirectFileOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DirectFileOutput(arena);
}
constexpr auto DirectFileOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DirectFileOutput),
                                            alignof(DirectFileOutput));
}
constexpr auto DirectFileOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DirectFileOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DirectFileOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DirectFileOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DirectFileOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DirectFileOutput>(), &DirectFileOutput::ByteSizeLong,
              &DirectFileOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_._cached_size_),
          false,
      },
      &DirectFileOutput::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DirectFileOutput_class_data_ =
            DirectFileOutput::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DirectFileOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DirectFileOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DirectFileOutput_class_data_.tc_table);
  return DirectFileOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 41, 2>
DirectFileOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    DirectFileOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DirectFileOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string filepath = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.filepath_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disable_manifest = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DirectFileOutput, _impl_.disable_manifest_), 1>(),
     {40, 1, 0, PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.disable_manifest_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string filepath = 1;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.filepath_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.S3Upload s3 = 2;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.output_.s3_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.GCPUpload gcp = 3;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.output_.gcp_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AzureBlobUpload azure = 4;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.output_.azure_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool disable_manifest = 5;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.disable_manifest_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.AliOSSUpload aliOSS = 6;
    {PROTOBUF_FIELD_OFFSET(DirectFileOutput, _impl_.output_.alioss_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::S3Upload>()},
      {::_pbi::TcParser::GetTable<::livekit::GCPUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>()},
  }},
  {{
    "\30\10\0\0\0\0\0\0"
    "livekit.DirectFileOutput"
    "filepath"
  }},
};
PROTOBUF_NOINLINE void DirectFileOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DirectFileOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filepath_.ClearNonDefaultToEmpty();
  }
  _impl_.disable_manifest_ = false;
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DirectFileOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DirectFileOutput& this_ = static_cast<const DirectFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DirectFileOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DirectFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DirectFileOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string filepath = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filepath().empty()) {
      const std::string& _s = this_._internal_filepath();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DirectFileOutput.filepath");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kS3: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.output_.s3_, this_._impl_.output_.s3_->GetCachedSize(), target,
          stream);
      break;
    }
    case kGcp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.output_.gcp_, this_._impl_.output_.gcp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAzure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.output_.azure_, this_._impl_.output_.azure_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // bool disable_manifest = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_disable_manifest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_disable_manifest(), target);
    }
  }

  // .livekit.AliOSSUpload aliOSS = 6;
  if (this_.output_case() == kAliOSS) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.output_.alioss_, this_._impl_.output_.alioss_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DirectFileOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DirectFileOutput::ByteSizeLong(const MessageLite& base) {
  const DirectFileOutput& this_ = static_cast<const DirectFileOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DirectFileOutput::ByteSizeLong() const {
  const DirectFileOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DirectFileOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string filepath = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filepath().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filepath());
      }
    }
    // bool disable_manifest = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_disable_manifest() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.S3Upload s3 = 2;
    case kS3: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 3;
    case kGcp: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 4;
    case kAzure: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 6;
    case kAliOSS: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DirectFileOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DirectFileOutput*>(&to_msg);
  auto& from = static_cast<const DirectFileOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DirectFileOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filepath().empty()) {
        _this->_internal_set_filepath(from._internal_filepath());
      } else {
        if (_this->_impl_.filepath_.IsDefault()) {
          _this->_internal_set_filepath("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_disable_manifest() != 0) {
        _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kS3: {
        if (oneof_needs_init) {
          _this->_impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        } else {
          _this->_impl_.output_.s3_->MergeFrom(*from._impl_.output_.s3_);
        }
        break;
      }
      case kGcp: {
        if (oneof_needs_init) {
          _this->_impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        } else {
          _this->_impl_.output_.gcp_->MergeFrom(*from._impl_.output_.gcp_);
        }
        break;
      }
      case kAzure: {
        if (oneof_needs_init) {
          _this->_impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        } else {
          _this->_impl_.output_.azure_->MergeFrom(*from._impl_.output_.azure_);
        }
        break;
      }
      case kAliOSS: {
        if (oneof_needs_init) {
          _this->_impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        } else {
          _this->_impl_.output_.alioss_->MergeFrom(*from._impl_.output_.alioss_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DirectFileOutput::CopyFrom(const DirectFileOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DirectFileOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DirectFileOutput::InternalSwap(DirectFileOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, &other->_impl_.filepath_, arena);
  swap(_impl_.disable_manifest_, other->_impl_.disable_manifest_);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DirectFileOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImageOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ImageOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::ImageOutput, _impl_._oneof_case_);
};

void ImageOutput::set_allocated_s3(::livekit::S3Upload* PROTOBUF_NULLABLE s3) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (s3) {
    ::google::protobuf::Arena* submessage_arena = s3->GetArena();
    if (message_arena != submessage_arena) {
      s3 = ::google::protobuf::internal::GetOwnedMessage(message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.s3)
}
void ImageOutput::set_allocated_gcp(::livekit::GCPUpload* PROTOBUF_NULLABLE gcp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (gcp) {
    ::google::protobuf::Arena* submessage_arena = gcp->GetArena();
    if (message_arena != submessage_arena) {
      gcp = ::google::protobuf::internal::GetOwnedMessage(message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.gcp)
}
void ImageOutput::set_allocated_azure(::livekit::AzureBlobUpload* PROTOBUF_NULLABLE azure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (azure) {
    ::google::protobuf::Arena* submessage_arena = azure->GetArena();
    if (message_arena != submessage_arena) {
      azure = ::google::protobuf::internal::GetOwnedMessage(message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.azure)
}
void ImageOutput::set_allocated_alioss(::livekit::AliOSSUpload* PROTOBUF_NULLABLE alioss) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (alioss) {
    ::google::protobuf::Arena* submessage_arena = alioss->GetArena();
    if (message_arena != submessage_arena) {
      alioss = ::google::protobuf::internal::GetOwnedMessage(message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.ImageOutput.aliOSS)
}
ImageOutput::ImageOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImageOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ImageOutput)
}
PROTOBUF_NDEBUG_INLINE ImageOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ImageOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filename_prefix_(arena, from.filename_prefix_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

ImageOutput::ImageOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ImageOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImageOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImageOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capture_interval_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, capture_interval_),
           offsetof(Impl_, disable_manifest_) -
               offsetof(Impl_, capture_interval_) +
               sizeof(Impl_::disable_manifest_));
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kS3:
        _impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        break;
      case kGcp:
        _impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        break;
      case kAzure:
        _impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        break;
      case kAliOSS:
        _impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.ImageOutput)
}
PROTOBUF_NDEBUG_INLINE ImageOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filename_prefix_(arena),
        output_{},
        _oneof_case_{} {}

inline void ImageOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, capture_interval_),
           0,
           offsetof(Impl_, disable_manifest_) -
               offsetof(Impl_, capture_interval_) +
               sizeof(Impl_::disable_manifest_));
}
ImageOutput::~ImageOutput() {
  // @@protoc_insertion_point(destructor:livekit.ImageOutput)
  SharedDtor(*this);
}
inline void ImageOutput::SharedDtor(MessageLite& self) {
  ImageOutput& this_ = static_cast<ImageOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filename_prefix_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void ImageOutput::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.ImageOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.s3_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.s3_);
      }
      break;
    }
    case kGcp: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.gcp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.gcp_);
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.azure_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.azure_);
      }
      break;
    }
    case kAliOSS: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.alioss_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.alioss_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL ImageOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ImageOutput(arena);
}
constexpr auto ImageOutput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ImageOutput),
                                            alignof(ImageOutput));
}
constexpr auto ImageOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ImageOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ImageOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ImageOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ImageOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ImageOutput>(), &ImageOutput::ByteSizeLong,
              &ImageOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_._cached_size_),
          false,
      },
      &ImageOutput::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ImageOutput_class_data_ =
            ImageOutput::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ImageOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ImageOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ImageOutput_class_data_.tc_table);
  return ImageOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 11, 4, 51, 2>
ImageOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_._has_bits_),
    0, // no _extensions_
    11, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ImageOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ImageOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 capture_interval = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageOutput, _impl_.capture_interval_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.capture_interval_)}},
    // int32 width = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageOutput, _impl_.width_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.width_)}},
    // int32 height = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageOutput, _impl_.height_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.height_)}},
    // string filename_prefix = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.filename_prefix_)}},
    // .livekit.ImageFileSuffix filename_suffix = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageOutput, _impl_.filename_suffix_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.filename_suffix_)}},
    // .livekit.ImageCodec image_codec = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ImageOutput, _impl_.image_codec_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.image_codec_)}},
    // bool disable_manifest = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ImageOutput, _impl_.disable_manifest_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.disable_manifest_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 capture_interval = 1;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.capture_interval_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // int32 width = 2;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.width_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 height = 3;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.height_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string filename_prefix = 4;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.filename_prefix_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ImageFileSuffix filename_suffix = 5;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.filename_suffix_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.ImageCodec image_codec = 6;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.image_codec_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool disable_manifest = 7;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.disable_manifest_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.S3Upload s3 = 8;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.output_.s3_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.GCPUpload gcp = 9;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.output_.gcp_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AzureBlobUpload azure = 10;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.output_.azure_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AliOSSUpload aliOSS = 11;
    {PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.output_.alioss_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::S3Upload>()},
      {::_pbi::TcParser::GetTable<::livekit::GCPUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>()},
  }},
  {{
    "\23\0\0\0\17\0\0\0\0\0\0\0\0\0\0\0"
    "livekit.ImageOutput"
    "filename_prefix"
  }},
};
PROTOBUF_NOINLINE void ImageOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ImageOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filename_prefix_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000007eu) != 0) {
    ::memset(&_impl_.capture_interval_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.disable_manifest_) -
        reinterpret_cast<char*>(&_impl_.capture_interval_)) + sizeof(_impl_.disable_manifest_));
  }
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ImageOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ImageOutput& this_ = static_cast<const ImageOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ImageOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ImageOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ImageOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 capture_interval = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_capture_interval() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_capture_interval(), target);
    }
  }

  // int32 width = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_width() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_width(), target);
    }
  }

  // int32 height = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_height() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_height(), target);
    }
  }

  // string filename_prefix = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filename_prefix().empty()) {
      const std::string& _s = this_._internal_filename_prefix();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ImageOutput.filename_prefix");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // .livekit.ImageFileSuffix filename_suffix = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_filename_suffix() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_filename_suffix(), target);
    }
  }

  // .livekit.ImageCodec image_codec = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_image_codec() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          6, this_._internal_image_codec(), target);
    }
  }

  // bool disable_manifest = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_disable_manifest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_disable_manifest(), target);
    }
  }

  switch (this_.output_case()) {
    case kS3: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.output_.s3_, this_._impl_.output_.s3_->GetCachedSize(), target,
          stream);
      break;
    }
    case kGcp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, *this_._impl_.output_.gcp_, this_._impl_.output_.gcp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAzure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, *this_._impl_.output_.azure_, this_._impl_.output_.azure_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAliOSS: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, *this_._impl_.output_.alioss_, this_._impl_.output_.alioss_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ImageOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ImageOutput::ByteSizeLong(const MessageLite& base) {
  const ImageOutput& this_ = static_cast<const ImageOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ImageOutput::ByteSizeLong() const {
  const ImageOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ImageOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // string filename_prefix = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filename_prefix().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename_prefix());
      }
    }
    // uint32 capture_interval = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_capture_interval() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_capture_interval());
      }
    }
    // int32 width = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_width());
      }
    }
    // int32 height = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_height());
      }
    }
    // .livekit.ImageFileSuffix filename_suffix = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_filename_suffix() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_filename_suffix());
      }
    }
    // .livekit.ImageCodec image_codec = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_image_codec() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_image_codec());
      }
    }
    // bool disable_manifest = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_disable_manifest() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.S3Upload s3 = 8;
    case kS3: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 9;
    case kGcp: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 10;
    case kAzure: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 11;
    case kAliOSS: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ImageOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImageOutput*>(&to_msg);
  auto& from = static_cast<const ImageOutput&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ImageOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filename_prefix().empty()) {
        _this->_internal_set_filename_prefix(from._internal_filename_prefix());
      } else {
        if (_this->_impl_.filename_prefix_.IsDefault()) {
          _this->_internal_set_filename_prefix("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_capture_interval() != 0) {
        _this->_impl_.capture_interval_ = from._impl_.capture_interval_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_filename_suffix() != 0) {
        _this->_impl_.filename_suffix_ = from._impl_.filename_suffix_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_image_codec() != 0) {
        _this->_impl_.image_codec_ = from._impl_.image_codec_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_disable_manifest() != 0) {
        _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kS3: {
        if (oneof_needs_init) {
          _this->_impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        } else {
          _this->_impl_.output_.s3_->MergeFrom(*from._impl_.output_.s3_);
        }
        break;
      }
      case kGcp: {
        if (oneof_needs_init) {
          _this->_impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        } else {
          _this->_impl_.output_.gcp_->MergeFrom(*from._impl_.output_.gcp_);
        }
        break;
      }
      case kAzure: {
        if (oneof_needs_init) {
          _this->_impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        } else {
          _this->_impl_.output_.azure_->MergeFrom(*from._impl_.output_.azure_);
        }
        break;
      }
      case kAliOSS: {
        if (oneof_needs_init) {
          _this->_impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        } else {
          _this->_impl_.output_.alioss_->MergeFrom(*from._impl_.output_.alioss_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImageOutput::CopyFrom(const ImageOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ImageOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImageOutput::InternalSwap(ImageOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_prefix_, &other->_impl_.filename_prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.disable_manifest_)
      + sizeof(ImageOutput::_impl_.disable_manifest_)
      - PROTOBUF_FIELD_OFFSET(ImageOutput, _impl_.capture_interval_)>(
          reinterpret_cast<char*>(&_impl_.capture_interval_),
          reinterpret_cast<char*>(&other->_impl_.capture_interval_));
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ImageOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse()
    : SuperType(S3Upload_MetadataEntry_DoNotUse_class_data_.base()) {}
S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : SuperType(arena, S3Upload_MetadataEntry_DoNotUse_class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse() : SuperType() {}
S3Upload_MetadataEntry_DoNotUse::S3Upload_MetadataEntry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
inline void* PROTOBUF_NONNULL S3Upload_MetadataEntry_DoNotUse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) S3Upload_MetadataEntry_DoNotUse(arena);
}
constexpr auto S3Upload_MetadataEntry_DoNotUse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(S3Upload_MetadataEntry_DoNotUse),
                                            alignof(S3Upload_MetadataEntry_DoNotUse));
}
constexpr auto S3Upload_MetadataEntry_DoNotUse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_S3Upload_MetadataEntry_DoNotUse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &S3Upload_MetadataEntry_DoNotUse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<S3Upload_MetadataEntry_DoNotUse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &S3Upload_MetadataEntry_DoNotUse::SharedDtor,
          static_cast<void (::google::protobuf::MessageLite::*)()>(&S3Upload_MetadataEntry_DoNotUse::ClearImpl),
              ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
              ,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_._cached_size_),
          false,
      },
      &S3Upload_MetadataEntry_DoNotUse::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        S3Upload_MetadataEntry_DoNotUse_class_data_ =
            S3Upload_MetadataEntry_DoNotUse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL S3Upload_MetadataEntry_DoNotUse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&S3Upload_MetadataEntry_DoNotUse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(S3Upload_MetadataEntry_DoNotUse_class_data_.tc_table);
  return S3Upload_MetadataEntry_DoNotUse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2>
S3Upload_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    S3Upload_MetadataEntry_DoNotUse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::S3Upload_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(S3Upload_MetadataEntry_DoNotUse, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\36\3\5\0\0\0\0\0"
    "livekit.S3Upload.MetadataEntry"
    "key"
    "value"
  }},
};
// ===================================================================

class S3Upload::_Internal {
 public:
  using HasBits =
      decltype(std::declval<S3Upload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(S3Upload, _impl_._has_bits_);
};

S3Upload::S3Upload(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, S3Upload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.S3Upload)
}
PROTOBUF_NDEBUG_INLINE S3Upload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::S3Upload& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metadata_{visibility, arena, from.metadata_},
        access_key_(arena, from.access_key_),
        secret_(arena, from.secret_),
        region_(arena, from.region_),
        endpoint_(arena, from.endpoint_),
        bucket_(arena, from.bucket_),
        tagging_(arena, from.tagging_),
        content_disposition_(arena, from.content_disposition_),
        session_token_(arena, from.session_token_) {}

S3Upload::S3Upload(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const S3Upload& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, S3Upload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  S3Upload* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.proxy_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.proxy_)
                : nullptr;
  _impl_.force_path_style_ = from._impl_.force_path_style_;

  // @@protoc_insertion_point(copy_constructor:livekit.S3Upload)
}
PROTOBUF_NDEBUG_INLINE S3Upload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        metadata_{visibility, arena},
        access_key_(arena),
        secret_(arena),
        region_(arena),
        endpoint_(arena),
        bucket_(arena),
        tagging_(arena),
        content_disposition_(arena),
        session_token_(arena) {}

inline void S3Upload::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, proxy_),
           0,
           offsetof(Impl_, force_path_style_) -
               offsetof(Impl_, proxy_) +
               sizeof(Impl_::force_path_style_));
}
S3Upload::~S3Upload() {
  // @@protoc_insertion_point(destructor:livekit.S3Upload)
  SharedDtor(*this);
}
inline void S3Upload::SharedDtor(MessageLite& self) {
  S3Upload& this_ = static_cast<S3Upload&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.access_key_.Destroy();
  this_._impl_.secret_.Destroy();
  this_._impl_.region_.Destroy();
  this_._impl_.endpoint_.Destroy();
  this_._impl_.bucket_.Destroy();
  this_._impl_.tagging_.Destroy();
  this_._impl_.content_disposition_.Destroy();
  this_._impl_.session_token_.Destroy();
  delete this_._impl_.proxy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL S3Upload::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) S3Upload(arena);
}
constexpr auto S3Upload::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.metadata_) +
          decltype(S3Upload::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.metadata_) +
          decltype(S3Upload::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(S3Upload), alignof(S3Upload), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&S3Upload::PlacementNew_,
                                 sizeof(S3Upload),
                                 alignof(S3Upload));
  }
}
constexpr auto S3Upload::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_S3Upload_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &S3Upload::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<S3Upload>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &S3Upload::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<S3Upload>(), &S3Upload::ByteSizeLong,
              &S3Upload::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(S3Upload, _impl_._cached_size_),
          false,
      },
      &S3Upload::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        S3Upload_class_data_ =
            S3Upload::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL S3Upload::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&S3Upload_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(S3Upload_class_data_.tc_table);
  return S3Upload_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 2, 116, 2>
S3Upload::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(S3Upload, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    S3Upload_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::S3Upload>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string access_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.access_key_)}},
    // string secret = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.secret_)}},
    // string region = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.region_)}},
    // string endpoint = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.endpoint_)}},
    // string bucket = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.bucket_)}},
    // bool force_path_style = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(S3Upload, _impl_.force_path_style_), 9>(),
     {48, 9, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.force_path_style_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string tagging = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 5, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.tagging_)}},
    // string content_disposition = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 6, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.content_disposition_)}},
    // .livekit.ProxyConfig proxy = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.proxy_)}},
    // string session_token = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 7, 0, PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.session_token_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string access_key = 1;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.access_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string secret = 2;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.secret_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string region = 3;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.region_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string endpoint = 4;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.endpoint_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bucket = 5;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.bucket_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool force_path_style = 6;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.force_path_style_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // map<string, string> metadata = 7;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.metadata_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string tagging = 8;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.tagging_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string content_disposition = 9;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.content_disposition_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ProxyConfig proxy = 10;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.proxy_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string session_token = 11;
    {PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.session_token_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ProxyConfig>()},
      {::_pbi::TcParser::GetMapAuxInfo(1, 0, 0,
                                       9, 9,
                                       0)},
  }},
  {{
    "\20\12\6\6\10\6\0\10\7\23\0\15\0\0\0\0"
    "livekit.S3Upload"
    "access_key"
    "secret"
    "region"
    "endpoint"
    "bucket"
    "metadata"
    "tagging"
    "content_disposition"
    "session_token"
  }},
};
PROTOBUF_NOINLINE void S3Upload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.S3Upload)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.access_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.secret_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.bucket_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.tagging_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.content_disposition_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.session_token_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    ABSL_DCHECK(_impl_.proxy_ != nullptr);
    _impl_.proxy_->Clear();
  }
  _impl_.force_path_style_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL S3Upload::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const S3Upload& this_ = static_cast<const S3Upload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL S3Upload::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const S3Upload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.S3Upload)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string access_key = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_access_key().empty()) {
      const std::string& _s = this_._internal_access_key();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.access_key");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string secret = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_secret().empty()) {
      const std::string& _s = this_._internal_secret();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.secret");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string region = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_region().empty()) {
      const std::string& _s = this_._internal_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.region");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string endpoint = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_endpoint().empty()) {
      const std::string& _s = this_._internal_endpoint();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.endpoint");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string bucket = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_bucket().empty()) {
      const std::string& _s = this_._internal_bucket();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.bucket");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // bool force_path_style = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_force_path_style() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this_._internal_force_path_style(), target);
    }
  }

  // map<string, string> metadata = 7;
  if (!this_._internal_metadata().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = this_._internal_metadata();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.metadata");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.metadata");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.metadata");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.metadata");
      }
    }
  }

  // string tagging = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (!this_._internal_tagging().empty()) {
      const std::string& _s = this_._internal_tagging();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.tagging");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // string content_disposition = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (!this_._internal_content_disposition().empty()) {
      const std::string& _s = this_._internal_content_disposition();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.content_disposition");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.ProxyConfig proxy = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.proxy_, this_._impl_.proxy_->GetCachedSize(), target,
        stream);
  }

  // string session_token = 11;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (!this_._internal_session_token().empty()) {
      const std::string& _s = this_._internal_session_token();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.S3Upload.session_token");
      target = stream->WriteStringMaybeAliased(11, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.S3Upload)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t S3Upload::ByteSizeLong(const MessageLite& base) {
  const S3Upload& this_ = static_cast<const S3Upload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t S3Upload::ByteSizeLong() const {
  const S3Upload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.S3Upload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // map<string, string> metadata = 7;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
      for (const auto& entry : this_._internal_metadata()) {
        total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                       _pbi::WireFormatLite::TYPE_STRING,
                                       _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string access_key = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_access_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_access_key());
      }
    }
    // string secret = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_secret().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_secret());
      }
    }
    // string region = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_region());
      }
    }
    // string endpoint = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_endpoint().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_endpoint());
      }
    }
    // string bucket = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_bucket().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_bucket());
      }
    }
    // string tagging = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_tagging().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_tagging());
      }
    }
    // string content_disposition = 9;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_content_disposition().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_content_disposition());
      }
    }
    // string session_token = 11;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!this_._internal_session_token().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_session_token());
      }
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // .livekit.ProxyConfig proxy = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.proxy_);
    }
    // bool force_path_style = 6;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_force_path_style() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void S3Upload::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<S3Upload*>(&to_msg);
  auto& from = static_cast<const S3Upload&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.S3Upload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_access_key().empty()) {
        _this->_internal_set_access_key(from._internal_access_key());
      } else {
        if (_this->_impl_.access_key_.IsDefault()) {
          _this->_internal_set_access_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_secret().empty()) {
        _this->_internal_set_secret(from._internal_secret());
      } else {
        if (_this->_impl_.secret_.IsDefault()) {
          _this->_internal_set_secret("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_region().empty()) {
        _this->_internal_set_region(from._internal_region());
      } else {
        if (_this->_impl_.region_.IsDefault()) {
          _this->_internal_set_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_endpoint().empty()) {
        _this->_internal_set_endpoint(from._internal_endpoint());
      } else {
        if (_this->_impl_.endpoint_.IsDefault()) {
          _this->_internal_set_endpoint("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_bucket().empty()) {
        _this->_internal_set_bucket(from._internal_bucket());
      } else {
        if (_this->_impl_.bucket_.IsDefault()) {
          _this->_internal_set_bucket("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_tagging().empty()) {
        _this->_internal_set_tagging(from._internal_tagging());
      } else {
        if (_this->_impl_.tagging_.IsDefault()) {
          _this->_internal_set_tagging("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_content_disposition().empty()) {
        _this->_internal_set_content_disposition(from._internal_content_disposition());
      } else {
        if (_this->_impl_.content_disposition_.IsDefault()) {
          _this->_internal_set_content_disposition("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!from._internal_session_token().empty()) {
        _this->_internal_set_session_token(from._internal_session_token());
      } else {
        if (_this->_impl_.session_token_.IsDefault()) {
          _this->_internal_set_session_token("");
        }
      }
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.proxy_ != nullptr);
      if (_this->_impl_.proxy_ == nullptr) {
        _this->_impl_.proxy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.proxy_);
      } else {
        _this->_impl_.proxy_->MergeFrom(*from._impl_.proxy_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_force_path_style() != 0) {
        _this->_impl_.force_path_style_ = from._impl_.force_path_style_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void S3Upload::CopyFrom(const S3Upload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.S3Upload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void S3Upload::InternalSwap(S3Upload* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_key_, &other->_impl_.access_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_, &other->_impl_.secret_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endpoint_, &other->_impl_.endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tagging_, &other->_impl_.tagging_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_disposition_, &other->_impl_.content_disposition_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_token_, &other->_impl_.session_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.force_path_style_)
      + sizeof(S3Upload::_impl_.force_path_style_)
      - PROTOBUF_FIELD_OFFSET(S3Upload, _impl_.proxy_)>(
          reinterpret_cast<char*>(&_impl_.proxy_),
          reinterpret_cast<char*>(&other->_impl_.proxy_));
}

::google::protobuf::Metadata S3Upload::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GCPUpload::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GCPUpload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_._has_bits_);
};

GCPUpload::GCPUpload(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GCPUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.GCPUpload)
}
PROTOBUF_NDEBUG_INLINE GCPUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::GCPUpload& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        credentials_(arena, from.credentials_),
        bucket_(arena, from.bucket_) {}

GCPUpload::GCPUpload(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GCPUpload& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GCPUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GCPUpload* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.proxy_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.proxy_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:livekit.GCPUpload)
}
PROTOBUF_NDEBUG_INLINE GCPUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        credentials_(arena),
        bucket_(arena) {}

inline void GCPUpload::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.proxy_ = {};
}
GCPUpload::~GCPUpload() {
  // @@protoc_insertion_point(destructor:livekit.GCPUpload)
  SharedDtor(*this);
}
inline void GCPUpload::SharedDtor(MessageLite& self) {
  GCPUpload& this_ = static_cast<GCPUpload&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.credentials_.Destroy();
  this_._impl_.bucket_.Destroy();
  delete this_._impl_.proxy_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GCPUpload::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GCPUpload(arena);
}
constexpr auto GCPUpload::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GCPUpload),
                                            alignof(GCPUpload));
}
constexpr auto GCPUpload::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GCPUpload_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GCPUpload::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GCPUpload>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GCPUpload::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GCPUpload>(), &GCPUpload::ByteSizeLong,
              &GCPUpload::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_._cached_size_),
          false,
      },
      &GCPUpload::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        GCPUpload_class_data_ =
            GCPUpload::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GCPUpload::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GCPUpload_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GCPUpload_class_data_.tc_table);
  return GCPUpload_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 43, 2>
GCPUpload::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    GCPUpload_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::GCPUpload>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string credentials = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.credentials_)}},
    // string bucket = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.bucket_)}},
    // .livekit.ProxyConfig proxy = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.proxy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string credentials = 1;
    {PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.credentials_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bucket = 2;
    {PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.bucket_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.ProxyConfig proxy = 3;
    {PROTOBUF_FIELD_OFFSET(GCPUpload, _impl_.proxy_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::ProxyConfig>()},
  }},
  {{
    "\21\13\6\0\0\0\0\0"
    "livekit.GCPUpload"
    "credentials"
    "bucket"
  }},
};
PROTOBUF_NOINLINE void GCPUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.GCPUpload)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.credentials_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.bucket_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.proxy_ != nullptr);
      _impl_.proxy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GCPUpload::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GCPUpload& this_ = static_cast<const GCPUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GCPUpload::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GCPUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.GCPUpload)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string credentials = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_credentials().empty()) {
      const std::string& _s = this_._internal_credentials();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.GCPUpload.credentials");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string bucket = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_bucket().empty()) {
      const std::string& _s = this_._internal_bucket();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.GCPUpload.bucket");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.ProxyConfig proxy = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.proxy_, this_._impl_.proxy_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.GCPUpload)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GCPUpload::ByteSizeLong(const MessageLite& base) {
  const GCPUpload& this_ = static_cast<const GCPUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GCPUpload::ByteSizeLong() const {
  const GCPUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.GCPUpload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string credentials = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_credentials().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_credentials());
      }
    }
    // string bucket = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_bucket().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_bucket());
      }
    }
    // .livekit.ProxyConfig proxy = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.proxy_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GCPUpload::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GCPUpload*>(&to_msg);
  auto& from = static_cast<const GCPUpload&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.GCPUpload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_credentials().empty()) {
        _this->_internal_set_credentials(from._internal_credentials());
      } else {
        if (_this->_impl_.credentials_.IsDefault()) {
          _this->_internal_set_credentials("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_bucket().empty()) {
        _this->_internal_set_bucket(from._internal_bucket());
      } else {
        if (_this->_impl_.bucket_.IsDefault()) {
          _this->_internal_set_bucket("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.proxy_ != nullptr);
      if (_this->_impl_.proxy_ == nullptr) {
        _this->_impl_.proxy_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.proxy_);
      } else {
        _this->_impl_.proxy_->MergeFrom(*from._impl_.proxy_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GCPUpload::CopyFrom(const GCPUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.GCPUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GCPUpload::InternalSwap(GCPUpload* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.credentials_, &other->_impl_.credentials_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
  swap(_impl_.proxy_, other->_impl_.proxy_);
}

::google::protobuf::Metadata GCPUpload::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AzureBlobUpload::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AzureBlobUpload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_._has_bits_);
};

AzureBlobUpload::AzureBlobUpload(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AzureBlobUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.AzureBlobUpload)
}
PROTOBUF_NDEBUG_INLINE AzureBlobUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::AzureBlobUpload& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_name_(arena, from.account_name_),
        account_key_(arena, from.account_key_),
        container_name_(arena, from.container_name_) {}

AzureBlobUpload::AzureBlobUpload(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AzureBlobUpload& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AzureBlobUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AzureBlobUpload* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.AzureBlobUpload)
}
PROTOBUF_NDEBUG_INLINE AzureBlobUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_name_(arena),
        account_key_(arena),
        container_name_(arena) {}

inline void AzureBlobUpload::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AzureBlobUpload::~AzureBlobUpload() {
  // @@protoc_insertion_point(destructor:livekit.AzureBlobUpload)
  SharedDtor(*this);
}
inline void AzureBlobUpload::SharedDtor(MessageLite& self) {
  AzureBlobUpload& this_ = static_cast<AzureBlobUpload&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_name_.Destroy();
  this_._impl_.account_key_.Destroy();
  this_._impl_.container_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AzureBlobUpload::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AzureBlobUpload(arena);
}
constexpr auto AzureBlobUpload::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AzureBlobUpload),
                                            alignof(AzureBlobUpload));
}
constexpr auto AzureBlobUpload::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AzureBlobUpload_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AzureBlobUpload::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AzureBlobUpload>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AzureBlobUpload::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AzureBlobUpload>(), &AzureBlobUpload::ByteSizeLong,
              &AzureBlobUpload::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_._cached_size_),
          false,
      },
      &AzureBlobUpload::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AzureBlobUpload_class_data_ =
            AzureBlobUpload::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AzureBlobUpload::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AzureBlobUpload_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AzureBlobUpload_class_data_.tc_table);
  return AzureBlobUpload_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 69, 2>
AzureBlobUpload::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AzureBlobUpload_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.account_name_)}},
    // string account_key = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.account_key_)}},
    // string container_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.container_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string account_name = 1;
    {PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.account_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string account_key = 2;
    {PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.account_key_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string container_name = 3;
    {PROTOBUF_FIELD_OFFSET(AzureBlobUpload, _impl_.container_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\14\13\16\0\0\0\0"
    "livekit.AzureBlobUpload"
    "account_name"
    "account_key"
    "container_name"
  }},
};
PROTOBUF_NOINLINE void AzureBlobUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AzureBlobUpload)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.account_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.container_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AzureBlobUpload::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AzureBlobUpload& this_ = static_cast<const AzureBlobUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AzureBlobUpload::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AzureBlobUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AzureBlobUpload)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_name().empty()) {
      const std::string& _s = this_._internal_account_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AzureBlobUpload.account_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string account_key = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_account_key().empty()) {
      const std::string& _s = this_._internal_account_key();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AzureBlobUpload.account_key");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string container_name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_container_name().empty()) {
      const std::string& _s = this_._internal_container_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AzureBlobUpload.container_name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AzureBlobUpload)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AzureBlobUpload::ByteSizeLong(const MessageLite& base) {
  const AzureBlobUpload& this_ = static_cast<const AzureBlobUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AzureBlobUpload::ByteSizeLong() const {
  const AzureBlobUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.AzureBlobUpload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string account_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_name());
      }
    }
    // string account_key = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_account_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_key());
      }
    }
    // string container_name = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_container_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_container_name());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AzureBlobUpload::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AzureBlobUpload*>(&to_msg);
  auto& from = static_cast<const AzureBlobUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AzureBlobUpload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_name().empty()) {
        _this->_internal_set_account_name(from._internal_account_name());
      } else {
        if (_this->_impl_.account_name_.IsDefault()) {
          _this->_internal_set_account_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_account_key().empty()) {
        _this->_internal_set_account_key(from._internal_account_key());
      } else {
        if (_this->_impl_.account_key_.IsDefault()) {
          _this->_internal_set_account_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_container_name().empty()) {
        _this->_internal_set_container_name(from._internal_container_name());
      } else {
        if (_this->_impl_.container_name_.IsDefault()) {
          _this->_internal_set_container_name("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AzureBlobUpload::CopyFrom(const AzureBlobUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AzureBlobUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AzureBlobUpload::InternalSwap(AzureBlobUpload* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, &other->_impl_.account_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_key_, &other->_impl_.account_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.container_name_, &other->_impl_.container_name_, arena);
}

::google::protobuf::Metadata AzureBlobUpload::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AliOSSUpload::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AliOSSUpload>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_._has_bits_);
};

AliOSSUpload::AliOSSUpload(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AliOSSUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.AliOSSUpload)
}
PROTOBUF_NDEBUG_INLINE AliOSSUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::AliOSSUpload& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        access_key_(arena, from.access_key_),
        secret_(arena, from.secret_),
        region_(arena, from.region_),
        endpoint_(arena, from.endpoint_),
        bucket_(arena, from.bucket_) {}

AliOSSUpload::AliOSSUpload(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AliOSSUpload& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AliOSSUpload_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AliOSSUpload* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.AliOSSUpload)
}
PROTOBUF_NDEBUG_INLINE AliOSSUpload::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        access_key_(arena),
        secret_(arena),
        region_(arena),
        endpoint_(arena),
        bucket_(arena) {}

inline void AliOSSUpload::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AliOSSUpload::~AliOSSUpload() {
  // @@protoc_insertion_point(destructor:livekit.AliOSSUpload)
  SharedDtor(*this);
}
inline void AliOSSUpload::SharedDtor(MessageLite& self) {
  AliOSSUpload& this_ = static_cast<AliOSSUpload&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.access_key_.Destroy();
  this_._impl_.secret_.Destroy();
  this_._impl_.region_.Destroy();
  this_._impl_.endpoint_.Destroy();
  this_._impl_.bucket_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AliOSSUpload::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AliOSSUpload(arena);
}
constexpr auto AliOSSUpload::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AliOSSUpload),
                                            alignof(AliOSSUpload));
}
constexpr auto AliOSSUpload::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AliOSSUpload_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AliOSSUpload::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AliOSSUpload>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AliOSSUpload::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AliOSSUpload>(), &AliOSSUpload::ByteSizeLong,
              &AliOSSUpload::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_._cached_size_),
          false,
      },
      &AliOSSUpload::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AliOSSUpload_class_data_ =
            AliOSSUpload::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AliOSSUpload::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AliOSSUpload_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AliOSSUpload_class_data_.tc_table);
  return AliOSSUpload_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 65, 2>
AliOSSUpload::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AliOSSUpload_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string access_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.access_key_)}},
    // string secret = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.secret_)}},
    // string region = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.region_)}},
    // string endpoint = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.endpoint_)}},
    // string bucket = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.bucket_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string access_key = 1;
    {PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.access_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string secret = 2;
    {PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.secret_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string region = 3;
    {PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.region_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string endpoint = 4;
    {PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.endpoint_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string bucket = 5;
    {PROTOBUF_FIELD_OFFSET(AliOSSUpload, _impl_.bucket_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\12\6\6\10\6\0\0"
    "livekit.AliOSSUpload"
    "access_key"
    "secret"
    "region"
    "endpoint"
    "bucket"
  }},
};
PROTOBUF_NOINLINE void AliOSSUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AliOSSUpload)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.access_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.secret_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.region_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.endpoint_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.bucket_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AliOSSUpload::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AliOSSUpload& this_ = static_cast<const AliOSSUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AliOSSUpload::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AliOSSUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AliOSSUpload)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string access_key = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_access_key().empty()) {
      const std::string& _s = this_._internal_access_key();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AliOSSUpload.access_key");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string secret = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_secret().empty()) {
      const std::string& _s = this_._internal_secret();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AliOSSUpload.secret");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string region = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_region().empty()) {
      const std::string& _s = this_._internal_region();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AliOSSUpload.region");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string endpoint = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_endpoint().empty()) {
      const std::string& _s = this_._internal_endpoint();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AliOSSUpload.endpoint");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string bucket = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_bucket().empty()) {
      const std::string& _s = this_._internal_bucket();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AliOSSUpload.bucket");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AliOSSUpload)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AliOSSUpload::ByteSizeLong(const MessageLite& base) {
  const AliOSSUpload& this_ = static_cast<const AliOSSUpload&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AliOSSUpload::ByteSizeLong() const {
  const AliOSSUpload& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.AliOSSUpload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string access_key = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_access_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_access_key());
      }
    }
    // string secret = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_secret().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_secret());
      }
    }
    // string region = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_region().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_region());
      }
    }
    // string endpoint = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_endpoint().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_endpoint());
      }
    }
    // string bucket = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_bucket().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_bucket());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AliOSSUpload::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AliOSSUpload*>(&to_msg);
  auto& from = static_cast<const AliOSSUpload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AliOSSUpload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_access_key().empty()) {
        _this->_internal_set_access_key(from._internal_access_key());
      } else {
        if (_this->_impl_.access_key_.IsDefault()) {
          _this->_internal_set_access_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_secret().empty()) {
        _this->_internal_set_secret(from._internal_secret());
      } else {
        if (_this->_impl_.secret_.IsDefault()) {
          _this->_internal_set_secret("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_region().empty()) {
        _this->_internal_set_region(from._internal_region());
      } else {
        if (_this->_impl_.region_.IsDefault()) {
          _this->_internal_set_region("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_endpoint().empty()) {
        _this->_internal_set_endpoint(from._internal_endpoint());
      } else {
        if (_this->_impl_.endpoint_.IsDefault()) {
          _this->_internal_set_endpoint("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_bucket().empty()) {
        _this->_internal_set_bucket(from._internal_bucket());
      } else {
        if (_this->_impl_.bucket_.IsDefault()) {
          _this->_internal_set_bucket("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AliOSSUpload::CopyFrom(const AliOSSUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AliOSSUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AliOSSUpload::InternalSwap(AliOSSUpload* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_key_, &other->_impl_.access_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_, &other->_impl_.secret_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.endpoint_, &other->_impl_.endpoint_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bucket_, &other->_impl_.bucket_, arena);
}

::google::protobuf::Metadata AliOSSUpload::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProxyConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ProxyConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_._has_bits_);
};

ProxyConfig::ProxyConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProxyConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ProxyConfig)
}
PROTOBUF_NDEBUG_INLINE ProxyConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ProxyConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        url_(arena, from.url_),
        username_(arena, from.username_),
        password_(arena, from.password_) {}

ProxyConfig::ProxyConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ProxyConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProxyConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ProxyConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ProxyConfig)
}
PROTOBUF_NDEBUG_INLINE ProxyConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        url_(arena),
        username_(arena),
        password_(arena) {}

inline void ProxyConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ProxyConfig::~ProxyConfig() {
  // @@protoc_insertion_point(destructor:livekit.ProxyConfig)
  SharedDtor(*this);
}
inline void ProxyConfig::SharedDtor(MessageLite& self) {
  ProxyConfig& this_ = static_cast<ProxyConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.url_.Destroy();
  this_._impl_.username_.Destroy();
  this_._impl_.password_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ProxyConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ProxyConfig(arena);
}
constexpr auto ProxyConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ProxyConfig),
                                            alignof(ProxyConfig));
}
constexpr auto ProxyConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ProxyConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ProxyConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ProxyConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ProxyConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ProxyConfig>(), &ProxyConfig::ByteSizeLong,
              &ProxyConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_._cached_size_),
          false,
      },
      &ProxyConfig::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ProxyConfig_class_data_ =
            ProxyConfig::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ProxyConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ProxyConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ProxyConfig_class_data_.tc_table);
  return ProxyConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 47, 2>
ProxyConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ProxyConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ProxyConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.url_)}},
    // string username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.username_)}},
    // string password = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.password_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string username = 2;
    {PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.username_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string password = 3;
    {PROTOBUF_FIELD_OFFSET(ProxyConfig, _impl_.password_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\3\10\10\0\0\0\0"
    "livekit.ProxyConfig"
    "url"
    "username"
    "password"
  }},
};
PROTOBUF_NOINLINE void ProxyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ProxyConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ProxyConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ProxyConfig& this_ = static_cast<const ProxyConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ProxyConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ProxyConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ProxyConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ProxyConfig.url");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string username = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_username().empty()) {
      const std::string& _s = this_._internal_username();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ProxyConfig.username");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string password = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_password().empty()) {
      const std::string& _s = this_._internal_password();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ProxyConfig.password");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ProxyConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ProxyConfig::ByteSizeLong(const MessageLite& base) {
  const ProxyConfig& this_ = static_cast<const ProxyConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ProxyConfig::ByteSizeLong() const {
  const ProxyConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ProxyConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string url = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // string username = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_username().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_username());
      }
    }
    // string password = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_password().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_password());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ProxyConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProxyConfig*>(&to_msg);
  auto& from = static_cast<const ProxyConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ProxyConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_username().empty()) {
        _this->_internal_set_username(from._internal_username());
      } else {
        if (_this->_impl_.username_.IsDefault()) {
          _this->_internal_set_username("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_password().empty()) {
        _this->_internal_set_password(from._internal_password());
      } else {
        if (_this->_impl_.password_.IsDefault()) {
          _this->_internal_set_password("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProxyConfig::CopyFrom(const ProxyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ProxyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ProxyConfig::InternalSwap(ProxyConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
}

::google::protobuf::Metadata ProxyConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamOutput::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StreamOutput>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_._has_bits_);
};

StreamOutput::StreamOutput(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamOutput)
}
PROTOBUF_NDEBUG_INLINE StreamOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StreamOutput& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        urls_{visibility, arena, from.urls_} {}

StreamOutput::StreamOutput(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamOutput& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamOutput_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamOutput* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.protocol_ = from._impl_.protocol_;

  // @@protoc_insertion_point(copy_constructor:livekit.StreamOutput)
}
PROTOBUF_NDEBUG_INLINE StreamOutput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        urls_{visibility, arena} {}

inline void StreamOutput::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.protocol_ = {};
}
StreamOutput::~StreamOutput() {
  // @@protoc_insertion_point(destructor:livekit.StreamOutput)
  SharedDtor(*this);
}
inline void StreamOutput::SharedDtor(MessageLite& self) {
  StreamOutput& this_ = static_cast<StreamOutput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamOutput::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamOutput(arena);
}
constexpr auto StreamOutput::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_.urls_) +
          decltype(StreamOutput::_impl_.urls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(StreamOutput), alignof(StreamOutput), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamOutput::PlacementNew_,
                                 sizeof(StreamOutput),
                                 alignof(StreamOutput));
  }
}
constexpr auto StreamOutput::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamOutput_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamOutput::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamOutput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamOutput::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamOutput>(), &StreamOutput::ByteSizeLong,
              &StreamOutput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_._cached_size_),
          false,
      },
      &StreamOutput::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StreamOutput_class_data_ =
            StreamOutput::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StreamOutput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamOutput_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamOutput_class_data_.tc_table);
  return StreamOutput_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 33, 2>
StreamOutput::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StreamOutput_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StreamOutput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string urls = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_.urls_)}},
    // .livekit.StreamProtocol protocol = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamOutput, _impl_.protocol_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_.protocol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.StreamProtocol protocol = 1;
    {PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_.protocol_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // repeated string urls = 2;
    {PROTOBUF_FIELD_OFFSET(StreamOutput, _impl_.urls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\24\0\4\0\0\0\0\0"
    "livekit.StreamOutput"
    "urls"
  }},
};
PROTOBUF_NOINLINE void StreamOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamOutput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  _impl_.protocol_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamOutput::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamOutput& this_ = static_cast<const StreamOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamOutput::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamOutput)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.StreamProtocol protocol = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_protocol() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_protocol(), target);
    }
  }

  // repeated string urls = 2;
  for (int i = 0, n = this_._internal_urls_size(); i < n; ++i) {
    const auto& s = this_._internal_urls().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StreamOutput.urls");
    target = stream->WriteString(2, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamOutput)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamOutput::ByteSizeLong(const MessageLite& base) {
  const StreamOutput& this_ = static_cast<const StreamOutput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamOutput::ByteSizeLong() const {
  const StreamOutput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StreamOutput)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string urls = 2;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_urls().size());
      for (int i = 0, n = this_._internal_urls().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_urls().Get(i));
      }
    }
  }
   {
    // .livekit.StreamProtocol protocol = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_protocol() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_protocol());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamOutput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamOutput*>(&to_msg);
  auto& from = static_cast<const StreamOutput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamOutput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_urls()->MergeFrom(from._internal_urls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_protocol() != 0) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOutput::CopyFrom(const StreamOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamOutput::InternalSwap(StreamOutput* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  swap(_impl_.protocol_, other->_impl_.protocol_);
}

::google::protobuf::Metadata StreamOutput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EncodingOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EncodingOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_._has_bits_);
};

EncodingOptions::EncodingOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EncodingOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.EncodingOptions)
}
EncodingOptions::EncodingOptions(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const EncodingOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EncodingOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE EncodingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void EncodingOptions::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, width_),
           0,
           offsetof(Impl_, video_quality_) -
               offsetof(Impl_, width_) +
               sizeof(Impl_::video_quality_));
}
EncodingOptions::~EncodingOptions() {
  // @@protoc_insertion_point(destructor:livekit.EncodingOptions)
  SharedDtor(*this);
}
inline void EncodingOptions::SharedDtor(MessageLite& self) {
  EncodingOptions& this_ = static_cast<EncodingOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL EncodingOptions::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EncodingOptions(arena);
}
constexpr auto EncodingOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EncodingOptions),
                                            alignof(EncodingOptions));
}
constexpr auto EncodingOptions::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EncodingOptions_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EncodingOptions::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EncodingOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EncodingOptions::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EncodingOptions>(), &EncodingOptions::ByteSizeLong,
              &EncodingOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_._cached_size_),
          false,
      },
      &EncodingOptions::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        EncodingOptions_class_data_ =
            EncodingOptions::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL EncodingOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EncodingOptions_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EncodingOptions_class_data_.tc_table);
  return EncodingOptions_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2>
EncodingOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    EncodingOptions_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::EncodingOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 width = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.width_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.width_)}},
    // int32 height = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.height_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.height_)}},
    // int32 depth = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.depth_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.depth_)}},
    // int32 framerate = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.framerate_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.framerate_)}},
    // .livekit.AudioCodec audio_codec = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.audio_codec_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_codec_)}},
    // int32 audio_bitrate = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.audio_bitrate_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_bitrate_)}},
    // int32 audio_frequency = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.audio_frequency_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_frequency_)}},
    // .livekit.VideoCodec video_codec = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.video_codec_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_codec_)}},
    // int32 video_bitrate = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.video_bitrate_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_bitrate_)}},
    // double key_frame_interval = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 8, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.key_frame_interval_)}},
    // int32 audio_quality = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.audio_quality_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_quality_)}},
    // int32 video_quality = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodingOptions, _impl_.video_quality_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_quality_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 width = 1;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.width_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 height = 2;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.height_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 depth = 3;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.depth_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 framerate = 4;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.framerate_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .livekit.AudioCodec audio_codec = 5;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_codec_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // int32 audio_bitrate = 6;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_bitrate_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 audio_frequency = 7;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_frequency_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // .livekit.VideoCodec video_codec = 8;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_codec_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // int32 video_bitrate = 9;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_bitrate_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double key_frame_interval = 10;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.key_frame_interval_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 audio_quality = 11;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.audio_quality_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 video_quality = 12;
    {PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_quality_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void EncodingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EncodingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.video_codec_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.video_codec_));
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    ::memset(&_impl_.key_frame_interval_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.video_quality_) -
        reinterpret_cast<char*>(&_impl_.key_frame_interval_)) + sizeof(_impl_.video_quality_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EncodingOptions::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EncodingOptions& this_ = static_cast<const EncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EncodingOptions::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EncodingOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 width = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_width() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
              stream, this_._internal_width(), target);
    }
  }

  // int32 height = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_height() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
              stream, this_._internal_height(), target);
    }
  }

  // int32 depth = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_depth() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
              stream, this_._internal_depth(), target);
    }
  }

  // int32 framerate = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_framerate() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
              stream, this_._internal_framerate(), target);
    }
  }

  // .livekit.AudioCodec audio_codec = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_audio_codec() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_audio_codec(), target);
    }
  }

  // int32 audio_bitrate = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_audio_bitrate() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_audio_bitrate(), target);
    }
  }

  // int32 audio_frequency = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_audio_frequency() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_audio_frequency(), target);
    }
  }

  // .livekit.VideoCodec video_codec = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_video_codec() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          8, this_._internal_video_codec(), target);
    }
  }

  // int32 video_bitrate = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_video_bitrate() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
              stream, this_._internal_video_bitrate(), target);
    }
  }

  // double key_frame_interval = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_key_frame_interval()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          10, this_._internal_key_frame_interval(), target);
    }
  }

  // int32 audio_quality = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_audio_quality() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
              stream, this_._internal_audio_quality(), target);
    }
  }

  // int32 video_quality = 12;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_video_quality() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
              stream, this_._internal_video_quality(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EncodingOptions)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EncodingOptions::ByteSizeLong(const MessageLite& base) {
  const EncodingOptions& this_ = static_cast<const EncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EncodingOptions::ByteSizeLong() const {
  const EncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.EncodingOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // int32 width = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_width());
      }
    }
    // int32 height = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_height());
      }
    }
    // int32 depth = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_depth() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_depth());
      }
    }
    // int32 framerate = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_framerate() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_framerate());
      }
    }
    // .livekit.AudioCodec audio_codec = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_audio_codec() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_audio_codec());
      }
    }
    // int32 audio_bitrate = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_audio_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_audio_bitrate());
      }
    }
    // int32 audio_frequency = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_audio_frequency() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_audio_frequency());
      }
    }
    // .livekit.VideoCodec video_codec = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_video_codec() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_video_codec());
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    // double key_frame_interval = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_key_frame_interval()) != 0) {
        total_size += 9;
      }
    }
    // int32 video_bitrate = 9;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_video_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_video_bitrate());
      }
    }
    // int32 audio_quality = 11;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_audio_quality() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_audio_quality());
      }
    }
    // int32 video_quality = 12;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_video_quality() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_video_quality());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EncodingOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EncodingOptions*>(&to_msg);
  auto& from = static_cast<const EncodingOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EncodingOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_depth() != 0) {
        _this->_impl_.depth_ = from._impl_.depth_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_framerate() != 0) {
        _this->_impl_.framerate_ = from._impl_.framerate_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_audio_codec() != 0) {
        _this->_impl_.audio_codec_ = from._impl_.audio_codec_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_audio_bitrate() != 0) {
        _this->_impl_.audio_bitrate_ = from._impl_.audio_bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_audio_frequency() != 0) {
        _this->_impl_.audio_frequency_ = from._impl_.audio_frequency_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_video_codec() != 0) {
        _this->_impl_.video_codec_ = from._impl_.video_codec_;
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_key_frame_interval()) != 0) {
        _this->_impl_.key_frame_interval_ = from._impl_.key_frame_interval_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_video_bitrate() != 0) {
        _this->_impl_.video_bitrate_ = from._impl_.video_bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_audio_quality() != 0) {
        _this->_impl_.audio_quality_ = from._impl_.audio_quality_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_video_quality() != 0) {
        _this->_impl_.video_quality_ = from._impl_.video_quality_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EncodingOptions::CopyFrom(const EncodingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EncodingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EncodingOptions::InternalSwap(EncodingOptions* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.video_quality_)
      + sizeof(EncodingOptions::_impl_.video_quality_)
      - PROTOBUF_FIELD_OFFSET(EncodingOptions, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::google::protobuf::Metadata EncodingOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateLayoutRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateLayoutRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_._has_bits_);
};

UpdateLayoutRequest::UpdateLayoutRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLayoutRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateLayoutRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateLayoutRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateLayoutRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        egress_id_(arena, from.egress_id_),
        layout_(arena, from.layout_) {}

UpdateLayoutRequest::UpdateLayoutRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateLayoutRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateLayoutRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateLayoutRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateLayoutRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateLayoutRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        egress_id_(arena),
        layout_(arena) {}

inline void UpdateLayoutRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateLayoutRequest::~UpdateLayoutRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateLayoutRequest)
  SharedDtor(*this);
}
inline void UpdateLayoutRequest::SharedDtor(MessageLite& self) {
  UpdateLayoutRequest& this_ = static_cast<UpdateLayoutRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.egress_id_.Destroy();
  this_._impl_.layout_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateLayoutRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateLayoutRequest(arena);
}
constexpr auto UpdateLayoutRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UpdateLayoutRequest),
                                            alignof(UpdateLayoutRequest));
}
constexpr auto UpdateLayoutRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateLayoutRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateLayoutRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateLayoutRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateLayoutRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateLayoutRequest>(), &UpdateLayoutRequest::ByteSizeLong,
              &UpdateLayoutRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_._cached_size_),
          false,
      },
      &UpdateLayoutRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateLayoutRequest_class_data_ =
            UpdateLayoutRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateLayoutRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateLayoutRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateLayoutRequest_class_data_.tc_table);
  return UpdateLayoutRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2>
UpdateLayoutRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateLayoutRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateLayoutRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string layout = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_.layout_)}},
    // string egress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_.egress_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string egress_id = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_.egress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string layout = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateLayoutRequest, _impl_.layout_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\11\6\0\0\0\0\0"
    "livekit.UpdateLayoutRequest"
    "egress_id"
    "layout"
  }},
};
PROTOBUF_NOINLINE void UpdateLayoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateLayoutRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.egress_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.layout_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateLayoutRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateLayoutRequest& this_ = static_cast<const UpdateLayoutRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateLayoutRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateLayoutRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateLayoutRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string egress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_egress_id().empty()) {
      const std::string& _s = this_._internal_egress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateLayoutRequest.egress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string layout = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_layout().empty()) {
      const std::string& _s = this_._internal_layout();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateLayoutRequest.layout");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateLayoutRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateLayoutRequest::ByteSizeLong(const MessageLite& base) {
  const UpdateLayoutRequest& this_ = static_cast<const UpdateLayoutRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateLayoutRequest::ByteSizeLong() const {
  const UpdateLayoutRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateLayoutRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string egress_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_egress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_egress_id());
      }
    }
    // string layout = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_layout().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_layout());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateLayoutRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateLayoutRequest*>(&to_msg);
  auto& from = static_cast<const UpdateLayoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateLayoutRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_egress_id().empty()) {
        _this->_internal_set_egress_id(from._internal_egress_id());
      } else {
        if (_this->_impl_.egress_id_.IsDefault()) {
          _this->_internal_set_egress_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_layout().empty()) {
        _this->_internal_set_layout(from._internal_layout());
      } else {
        if (_this->_impl_.layout_.IsDefault()) {
          _this->_internal_set_layout("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateLayoutRequest::CopyFrom(const UpdateLayoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateLayoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateLayoutRequest::InternalSwap(UpdateLayoutRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_id_, &other->_impl_.egress_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.layout_, &other->_impl_.layout_, arena);
}

::google::protobuf::Metadata UpdateLayoutRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateStreamRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateStreamRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_._has_bits_);
};

UpdateStreamRequest::UpdateStreamRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateStreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateStreamRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateStreamRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        add_output_urls_{visibility, arena, from.add_output_urls_},
        remove_output_urls_{visibility, arena, from.remove_output_urls_},
        egress_id_(arena, from.egress_id_) {}

UpdateStreamRequest::UpdateStreamRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateStreamRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateStreamRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateStreamRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateStreamRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateStreamRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        add_output_urls_{visibility, arena},
        remove_output_urls_{visibility, arena},
        egress_id_(arena) {}

inline void UpdateStreamRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UpdateStreamRequest::~UpdateStreamRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateStreamRequest)
  SharedDtor(*this);
}
inline void UpdateStreamRequest::SharedDtor(MessageLite& self) {
  UpdateStreamRequest& this_ = static_cast<UpdateStreamRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.egress_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateStreamRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateStreamRequest(arena);
}
constexpr auto UpdateStreamRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.add_output_urls_) +
          decltype(UpdateStreamRequest::_impl_.add_output_urls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.remove_output_urls_) +
          decltype(UpdateStreamRequest::_impl_.remove_output_urls_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UpdateStreamRequest), alignof(UpdateStreamRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UpdateStreamRequest::PlacementNew_,
                                 sizeof(UpdateStreamRequest),
                                 alignof(UpdateStreamRequest));
  }
}
constexpr auto UpdateStreamRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateStreamRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateStreamRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateStreamRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateStreamRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateStreamRequest>(), &UpdateStreamRequest::ByteSizeLong,
              &UpdateStreamRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_._cached_size_),
          false,
      },
      &UpdateStreamRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateStreamRequest_class_data_ =
            UpdateStreamRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateStreamRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateStreamRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateStreamRequest_class_data_.tc_table);
  return UpdateStreamRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 78, 2>
UpdateStreamRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    UpdateStreamRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateStreamRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string egress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.egress_id_)}},
    // repeated string add_output_urls = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.add_output_urls_)}},
    // repeated string remove_output_urls = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.remove_output_urls_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string egress_id = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.egress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string add_output_urls = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.add_output_urls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string remove_output_urls = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateStreamRequest, _impl_.remove_output_urls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\33\11\17\22\0\0\0\0"
    "livekit.UpdateStreamRequest"
    "egress_id"
    "add_output_urls"
    "remove_output_urls"
  }},
};
PROTOBUF_NOINLINE void UpdateStreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateStreamRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.add_output_urls_.Clear();
  _impl_.remove_output_urls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.egress_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateStreamRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateStreamRequest& this_ = static_cast<const UpdateStreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateStreamRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateStreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateStreamRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string egress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_egress_id().empty()) {
      const std::string& _s = this_._internal_egress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateStreamRequest.egress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated string add_output_urls = 2;
  for (int i = 0, n = this_._internal_add_output_urls_size(); i < n; ++i) {
    const auto& s = this_._internal_add_output_urls().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateStreamRequest.add_output_urls");
    target = stream->WriteString(2, s, target);
  }

  // repeated string remove_output_urls = 3;
  for (int i = 0, n = this_._internal_remove_output_urls_size(); i < n; ++i) {
    const auto& s = this_._internal_remove_output_urls().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateStreamRequest.remove_output_urls");
    target = stream->WriteString(3, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateStreamRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateStreamRequest::ByteSizeLong(const MessageLite& base) {
  const UpdateStreamRequest& this_ = static_cast<const UpdateStreamRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateStreamRequest::ByteSizeLong() const {
  const UpdateStreamRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateStreamRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string add_output_urls = 2;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_add_output_urls().size());
      for (int i = 0, n = this_._internal_add_output_urls().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_add_output_urls().Get(i));
      }
    }
    // repeated string remove_output_urls = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_remove_output_urls().size());
      for (int i = 0, n = this_._internal_remove_output_urls().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_remove_output_urls().Get(i));
      }
    }
  }
   {
    // string egress_id = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_egress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_egress_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateStreamRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateStreamRequest*>(&to_msg);
  auto& from = static_cast<const UpdateStreamRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateStreamRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_add_output_urls()->MergeFrom(from._internal_add_output_urls());
  _this->_internal_mutable_remove_output_urls()->MergeFrom(from._internal_remove_output_urls());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_egress_id().empty()) {
      _this->_internal_set_egress_id(from._internal_egress_id());
    } else {
      if (_this->_impl_.egress_id_.IsDefault()) {
        _this->_internal_set_egress_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateStreamRequest::CopyFrom(const UpdateStreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateStreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateStreamRequest::InternalSwap(UpdateStreamRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.add_output_urls_.InternalSwap(&other->_impl_.add_output_urls_);
  _impl_.remove_output_urls_.InternalSwap(&other->_impl_.remove_output_urls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_id_, &other->_impl_.egress_id_, arena);
}

::google::protobuf::Metadata UpdateStreamRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_._has_bits_);
};

ListEgressRequest::ListEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ListEgressRequest)
}
PROTOBUF_NDEBUG_INLINE ListEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ListEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        room_name_(arena, from.room_name_),
        egress_id_(arena, from.egress_id_) {}

ListEgressRequest::ListEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ListEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.active_ = from._impl_.active_;

  // @@protoc_insertion_point(copy_constructor:livekit.ListEgressRequest)
}
PROTOBUF_NDEBUG_INLINE ListEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        room_name_(arena),
        egress_id_(arena) {}

inline void ListEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.active_ = {};
}
ListEgressRequest::~ListEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListEgressRequest)
  SharedDtor(*this);
}
inline void ListEgressRequest::SharedDtor(MessageLite& self) {
  ListEgressRequest& this_ = static_cast<ListEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.egress_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ListEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ListEgressRequest(arena);
}
constexpr auto ListEgressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ListEgressRequest),
                                            alignof(ListEgressRequest));
}
constexpr auto ListEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ListEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ListEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ListEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ListEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ListEgressRequest>(), &ListEgressRequest::ByteSizeLong,
              &ListEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_._cached_size_),
          false,
      },
      &ListEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ListEgressRequest_class_data_ =
            ListEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ListEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ListEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ListEgressRequest_class_data_.tc_table);
  return ListEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 52, 2>
ListEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ListEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ListEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.room_name_)}},
    // string egress_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.egress_id_)}},
    // bool active = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ListEgressRequest, _impl_.active_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.active_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string egress_id = 2;
    {PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.egress_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool active = 3;
    {PROTOBUF_FIELD_OFFSET(ListEgressRequest, _impl_.active_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\31\11\11\0\0\0\0\0"
    "livekit.ListEgressRequest"
    "room_name"
    "egress_id"
  }},
};
PROTOBUF_NOINLINE void ListEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.egress_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.active_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ListEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ListEgressRequest& this_ = static_cast<const ListEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ListEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ListEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ListEgressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string egress_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_egress_id().empty()) {
      const std::string& _s = this_._internal_egress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ListEgressRequest.egress_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // bool active = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_active() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_active(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ListEgressRequest::ByteSizeLong(const MessageLite& base) {
  const ListEgressRequest& this_ = static_cast<const ListEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ListEgressRequest::ByteSizeLong() const {
  const ListEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ListEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string egress_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_egress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_egress_id());
      }
    }
    // bool active = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_active() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ListEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListEgressRequest*>(&to_msg);
  auto& from = static_cast<const ListEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_egress_id().empty()) {
        _this->_internal_set_egress_id(from._internal_egress_id());
      } else {
        if (_this->_impl_.egress_id_.IsDefault()) {
          _this->_internal_set_egress_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_active() != 0) {
        _this->_impl_.active_ = from._impl_.active_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListEgressRequest::CopyFrom(const ListEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListEgressRequest::InternalSwap(ListEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_id_, &other->_impl_.egress_id_, arena);
  swap(_impl_.active_, other->_impl_.active_);
}

::google::protobuf::Metadata ListEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListEgressResponse::_Internal {
 public:
};

ListEgressResponse::ListEgressResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListEgressResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ListEgressResponse)
}
PROTOBUF_NDEBUG_INLINE ListEgressResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ListEgressResponse& from_msg)
      : items_{visibility, arena, from.items_},
        _cached_size_{0} {}

ListEgressResponse::ListEgressResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ListEgressResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListEgressResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListEgressResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ListEgressResponse)
}
PROTOBUF_NDEBUG_INLINE ListEgressResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : items_{visibility, arena},
        _cached_size_{0} {}

inline void ListEgressResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ListEgressResponse::~ListEgressResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListEgressResponse)
  SharedDtor(*this);
}
inline void ListEgressResponse::SharedDtor(MessageLite& self) {
  ListEgressResponse& this_ = static_cast<ListEgressResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ListEgressResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ListEgressResponse(arena);
}
constexpr auto ListEgressResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ListEgressResponse, _impl_.items_) +
          decltype(ListEgressResponse::_impl_.items_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ListEgressResponse), alignof(ListEgressResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ListEgressResponse::PlacementNew_,
                                 sizeof(ListEgressResponse),
                                 alignof(ListEgressResponse));
  }
}
constexpr auto ListEgressResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ListEgressResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ListEgressResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ListEgressResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ListEgressResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ListEgressResponse>(), &ListEgressResponse::ByteSizeLong,
              &ListEgressResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ListEgressResponse, _impl_._cached_size_),
          false,
      },
      &ListEgressResponse::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ListEgressResponse_class_data_ =
            ListEgressResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ListEgressResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ListEgressResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ListEgressResponse_class_data_.tc_table);
  return ListEgressResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ListEgressResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ListEgressResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ListEgressResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.EgressInfo items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ListEgressResponse, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.EgressInfo items = 1;
    {PROTOBUF_FIELD_OFFSET(ListEgressResponse, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EgressInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ListEgressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListEgressResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ListEgressResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ListEgressResponse& this_ = static_cast<const ListEgressResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ListEgressResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ListEgressResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListEgressResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.EgressInfo items = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_items_size());
       i < n; i++) {
    const auto& repfield = this_._internal_items().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListEgressResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ListEgressResponse::ByteSizeLong(const MessageLite& base) {
  const ListEgressResponse& this_ = static_cast<const ListEgressResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ListEgressResponse::ByteSizeLong() const {
  const ListEgressResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ListEgressResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EgressInfo items = 1;
    {
      total_size += 1UL * this_._internal_items_size();
      for (const auto& msg : this_._internal_items()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ListEgressResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListEgressResponse*>(&to_msg);
  auto& from = static_cast<const ListEgressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListEgressResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListEgressResponse::CopyFrom(const ListEgressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListEgressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListEgressResponse::InternalSwap(ListEgressResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::google::protobuf::Metadata ListEgressResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StopEgressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StopEgressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StopEgressRequest, _impl_._has_bits_);
};

StopEgressRequest::StopEgressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StopEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StopEgressRequest)
}
PROTOBUF_NDEBUG_INLINE StopEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StopEgressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        egress_id_(arena, from.egress_id_) {}

StopEgressRequest::StopEgressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StopEgressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StopEgressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StopEgressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.StopEgressRequest)
}
PROTOBUF_NDEBUG_INLINE StopEgressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        egress_id_(arena) {}

inline void StopEgressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StopEgressRequest::~StopEgressRequest() {
  // @@protoc_insertion_point(destructor:livekit.StopEgressRequest)
  SharedDtor(*this);
}
inline void StopEgressRequest::SharedDtor(MessageLite& self) {
  StopEgressRequest& this_ = static_cast<StopEgressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.egress_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StopEgressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StopEgressRequest(arena);
}
constexpr auto StopEgressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StopEgressRequest),
                                            alignof(StopEgressRequest));
}
constexpr auto StopEgressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StopEgressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StopEgressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StopEgressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StopEgressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StopEgressRequest>(), &StopEgressRequest::ByteSizeLong,
              &StopEgressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StopEgressRequest, _impl_._cached_size_),
          false,
      },
      &StopEgressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StopEgressRequest_class_data_ =
            StopEgressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StopEgressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StopEgressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StopEgressRequest_class_data_.tc_table);
  return StopEgressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2>
StopEgressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StopEgressRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StopEgressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StopEgressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string egress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StopEgressRequest, _impl_.egress_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string egress_id = 1;
    {PROTOBUF_FIELD_OFFSET(StopEgressRequest, _impl_.egress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\11\0\0\0\0\0\0"
    "livekit.StopEgressRequest"
    "egress_id"
  }},
};
PROTOBUF_NOINLINE void StopEgressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StopEgressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.egress_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StopEgressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StopEgressRequest& this_ = static_cast<const StopEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StopEgressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StopEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StopEgressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string egress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_egress_id().empty()) {
      const std::string& _s = this_._internal_egress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StopEgressRequest.egress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StopEgressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StopEgressRequest::ByteSizeLong(const MessageLite& base) {
  const StopEgressRequest& this_ = static_cast<const StopEgressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StopEgressRequest::ByteSizeLong() const {
  const StopEgressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StopEgressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string egress_id = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_egress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_egress_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StopEgressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StopEgressRequest*>(&to_msg);
  auto& from = static_cast<const StopEgressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StopEgressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_egress_id().empty()) {
      _this->_internal_set_egress_id(from._internal_egress_id());
    } else {
      if (_this->_impl_.egress_id_.IsDefault()) {
        _this->_internal_set_egress_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StopEgressRequest::CopyFrom(const StopEgressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StopEgressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StopEgressRequest::InternalSwap(StopEgressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_id_, &other->_impl_.egress_id_, arena);
}

::google::protobuf::Metadata StopEgressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EgressInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EgressInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::EgressInfo, _impl_._oneof_case_);
};

void EgressInfo::set_allocated_room_composite(::livekit::RoomCompositeEgressRequest* PROTOBUF_NULLABLE room_composite) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (room_composite) {
    ::google::protobuf::Arena* submessage_arena = room_composite->GetArena();
    if (message_arena != submessage_arena) {
      room_composite = ::google::protobuf::internal::GetOwnedMessage(message_arena, room_composite, submessage_arena);
    }
    set_has_room_composite();
    _impl_.request_.room_composite_ = room_composite;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.room_composite)
}
void EgressInfo::set_allocated_web(::livekit::WebEgressRequest* PROTOBUF_NULLABLE web) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (web) {
    ::google::protobuf::Arena* submessage_arena = web->GetArena();
    if (message_arena != submessage_arena) {
      web = ::google::protobuf::internal::GetOwnedMessage(message_arena, web, submessage_arena);
    }
    set_has_web();
    _impl_.request_.web_ = web;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.web)
}
void EgressInfo::set_allocated_participant(::livekit::ParticipantEgressRequest* PROTOBUF_NULLABLE participant) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (participant) {
    ::google::protobuf::Arena* submessage_arena = participant->GetArena();
    if (message_arena != submessage_arena) {
      participant = ::google::protobuf::internal::GetOwnedMessage(message_arena, participant, submessage_arena);
    }
    set_has_participant();
    _impl_.request_.participant_ = participant;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.participant)
}
void EgressInfo::set_allocated_track_composite(::livekit::TrackCompositeEgressRequest* PROTOBUF_NULLABLE track_composite) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (track_composite) {
    ::google::protobuf::Arena* submessage_arena = track_composite->GetArena();
    if (message_arena != submessage_arena) {
      track_composite = ::google::protobuf::internal::GetOwnedMessage(message_arena, track_composite, submessage_arena);
    }
    set_has_track_composite();
    _impl_.request_.track_composite_ = track_composite;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.track_composite)
}
void EgressInfo::set_allocated_track(::livekit::TrackEgressRequest* PROTOBUF_NULLABLE track) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (track) {
    ::google::protobuf::Arena* submessage_arena = track->GetArena();
    if (message_arena != submessage_arena) {
      track = ::google::protobuf::internal::GetOwnedMessage(message_arena, track, submessage_arena);
    }
    set_has_track();
    _impl_.request_.track_ = track;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.track)
}
void EgressInfo::set_allocated_stream(::livekit::StreamInfoList* PROTOBUF_NULLABLE stream) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_result();
  if (stream) {
    ::google::protobuf::Arena* submessage_arena = stream->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::google::protobuf::internal::GetOwnedMessage(message_arena, stream, submessage_arena);
    }
    set_has_stream();
    _impl_.result_.stream_ = stream;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.stream)
}
void EgressInfo::set_allocated_file(::livekit::FileInfo* PROTOBUF_NULLABLE file) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_result();
  if (file) {
    ::google::protobuf::Arena* submessage_arena = file->GetArena();
    if (message_arena != submessage_arena) {
      file = ::google::protobuf::internal::GetOwnedMessage(message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.result_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.file)
}
void EgressInfo::set_allocated_segments(::livekit::SegmentsInfo* PROTOBUF_NULLABLE segments) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_result();
  if (segments) {
    ::google::protobuf::Arena* submessage_arena = segments->GetArena();
    if (message_arena != submessage_arena) {
      segments = ::google::protobuf::internal::GetOwnedMessage(message_arena, segments, submessage_arena);
    }
    set_has_segments();
    _impl_.result_.segments_ = segments;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.EgressInfo.segments)
}
EgressInfo::EgressInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EgressInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.EgressInfo)
}
PROTOBUF_NDEBUG_INLINE EgressInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::EgressInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        stream_results_{visibility, arena, from.stream_results_},
        file_results_{visibility, arena, from.file_results_},
        segment_results_{visibility, arena, from.segment_results_},
        image_results_{visibility, arena, from.image_results_},
        egress_id_(arena, from.egress_id_),
        room_id_(arena, from.room_id_),
        error_(arena, from.error_),
        room_name_(arena, from.room_name_),
        details_(arena, from.details_),
        manifest_location_(arena, from.manifest_location_),
        request_{},
        result_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

EgressInfo::EgressInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const EgressInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, EgressInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EgressInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, started_at_),
           offsetof(Impl_, source_type_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::source_type_));
  switch (request_case()) {
    case REQUEST_NOT_SET:
      break;
      case kRoomComposite:
        _impl_.request_.room_composite_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.room_composite_);
        break;
      case kWeb:
        _impl_.request_.web_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.web_);
        break;
      case kParticipant:
        _impl_.request_.participant_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.participant_);
        break;
      case kTrackComposite:
        _impl_.request_.track_composite_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.track_composite_);
        break;
      case kTrack:
        _impl_.request_.track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.track_);
        break;
  }
  switch (result_case()) {
    case RESULT_NOT_SET:
      break;
      case kStream:
        _impl_.result_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.stream_);
        break;
      case kFile:
        _impl_.result_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.file_);
        break;
      case kSegments:
        _impl_.result_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.segments_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.EgressInfo)
}
PROTOBUF_NDEBUG_INLINE EgressInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        stream_results_{visibility, arena},
        file_results_{visibility, arena},
        segment_results_{visibility, arena},
        image_results_{visibility, arena},
        egress_id_(arena),
        room_id_(arena),
        error_(arena),
        room_name_(arena),
        details_(arena),
        manifest_location_(arena),
        request_{},
        result_{},
        _oneof_case_{} {}

inline void EgressInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           0,
           offsetof(Impl_, source_type_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::source_type_));
}
EgressInfo::~EgressInfo() {
  // @@protoc_insertion_point(destructor:livekit.EgressInfo)
  SharedDtor(*this);
}
inline void EgressInfo::SharedDtor(MessageLite& self) {
  EgressInfo& this_ = static_cast<EgressInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.egress_id_.Destroy();
  this_._impl_.room_id_.Destroy();
  this_._impl_.error_.Destroy();
  this_._impl_.room_name_.Destroy();
  this_._impl_.details_.Destroy();
  this_._impl_.manifest_location_.Destroy();
  if (this_.has_request()) {
    this_.clear_request();
  }
  if (this_.has_result()) {
    this_.clear_result();
  }
  this_._impl_.~Impl_();
}

void EgressInfo::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EgressInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (request_case()) {
    case kRoomComposite: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.room_composite_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.room_composite_);
      }
      break;
    }
    case kWeb: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.web_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.web_);
      }
      break;
    }
    case kParticipant: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.participant_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.participant_);
      }
      break;
    }
    case kTrackComposite: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.track_composite_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.track_composite_);
      }
      break;
    }
    case kTrack: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.track_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.request_.track_);
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}

void EgressInfo::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:livekit.EgressInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (result_case()) {
    case kStream: {
      if (GetArena() == nullptr) {
        delete _impl_.result_.stream_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.stream_);
      }
      break;
    }
    case kFile: {
      if (GetArena() == nullptr) {
        delete _impl_.result_.file_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.file_);
      }
      break;
    }
    case kSegments: {
      if (GetArena() == nullptr) {
        delete _impl_.result_.segments_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.result_.segments_);
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = RESULT_NOT_SET;
}


inline void* PROTOBUF_NONNULL EgressInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) EgressInfo(arena);
}
constexpr auto EgressInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.stream_results_) +
          decltype(EgressInfo::_impl_.stream_results_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.file_results_) +
          decltype(EgressInfo::_impl_.file_results_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.segment_results_) +
          decltype(EgressInfo::_impl_.segment_results_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.image_results_) +
          decltype(EgressInfo::_impl_.image_results_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(EgressInfo), alignof(EgressInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EgressInfo::PlacementNew_,
                                 sizeof(EgressInfo),
                                 alignof(EgressInfo));
  }
}
constexpr auto EgressInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_EgressInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &EgressInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<EgressInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &EgressInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<EgressInfo>(), &EgressInfo::ByteSizeLong,
              &EgressInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_._cached_size_),
          false,
      },
      &EgressInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        EgressInfo_class_data_ =
            EgressInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL EgressInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&EgressInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(EgressInfo_class_data_.tc_table);
  return EgressInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 25, 12, 105, 2>
EgressInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_._has_bits_),
    0, // no _extensions_
    26, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4236247040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    25,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    EgressInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::EgressInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string egress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.egress_id_)}},
    // string room_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.room_id_)}},
    // .livekit.EgressStatus status = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EgressInfo, _impl_.status_), 8>(),
     {24, 8, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string error = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.error_)}},
    // int64 started_at = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EgressInfo, _impl_.started_at_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.started_at_)}},
    // int64 ended_at = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(EgressInfo, _impl_.ended_at_), 7>(),
     {88, 7, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.ended_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string room_name = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 3, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.room_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.StreamInfo stream_results = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 7, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.stream_results_)}},
    // repeated .livekit.FileInfo file_results = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 8, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.file_results_)}},
    // repeated .livekit.SegmentsInfo segment_results = 17;
    {::_pbi::TcParser::FastMtR2,
     {394, 63, 9, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.segment_results_)}},
    // int64 updated_at = 18;
    {::_pbi::TcParser::FastV64S2,
     {400, 10, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.updated_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .livekit.ImagesInfo image_results = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 11, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.image_results_)}},
    // string details = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 4, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.details_)}},
    // int32 error_code = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 9, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.error_code_)}},
    // string manifest_location = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 5, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.manifest_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool backup_storage_used = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 11, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.backup_storage_used_)}},
    // .livekit.EgressSourceType source_type = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 12, 0, PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.source_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string egress_id = 1;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.egress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string room_id = 2;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.room_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.EgressStatus status = 3;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.status_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.RoomCompositeEgressRequest room_composite = 4;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.request_.room_composite_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrackCompositeEgressRequest track_composite = 5;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.request_.track_composite_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.TrackEgressRequest track = 6;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.request_.track_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.StreamInfoList stream = 7 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.result_.stream_), _Internal::kOneofCaseOffset + 4, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.FileInfo file = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.result_.file_), _Internal::kOneofCaseOffset + 4, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error = 9;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.error_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 started_at = 10;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.started_at_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 11;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.ended_at_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .livekit.SegmentsInfo segments = 12 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.result_.segments_), _Internal::kOneofCaseOffset + 4, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string room_name = 13;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.room_name_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.WebEgressRequest web = 14;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.request_.web_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.StreamInfo stream_results = 15;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.stream_results_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.FileInfo file_results = 16;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.file_results_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentsInfo segment_results = 17;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.segment_results_), -1, 9,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 updated_at = 18;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.updated_at_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .livekit.ParticipantEgressRequest participant = 19;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.request_.participant_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.ImagesInfo image_results = 20;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.image_results_), -1, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string details = 21;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.details_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 error_code = 22;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.error_code_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string manifest_location = 23;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.manifest_location_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool backup_storage_used = 25;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.backup_storage_used_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.EgressSourceType source_type = 26;
    {PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.source_type_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::RoomCompositeEgressRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackCompositeEgressRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackEgressRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamInfoList>()},
      {::_pbi::TcParser::GetTable<::livekit::FileInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentsInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::WebEgressRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::StreamInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::FileInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentsInfo>()},
      {::_pbi::TcParser::GetTable<::livekit::ParticipantEgressRequest>()},
      {::_pbi::TcParser::GetTable<::livekit::ImagesInfo>()},
  }},
  {{
    "\22\11\7\0\0\0\0\0\0\5\0\0\0\11\0\0\0\0\0\0\0\7\0\21\0\0\0\0\0\0\0\0"
    "livekit.EgressInfo"
    "egress_id"
    "room_id"
    "error"
    "room_name"
    "details"
    "manifest_location"
  }},
};
PROTOBUF_NOINLINE void EgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.EgressInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stream_results_.Clear();
  _impl_.file_results_.Clear();
  _impl_.segment_results_.Clear();
  _impl_.image_results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.egress_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.room_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.details_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.manifest_location_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000c0u) != 0) {
    ::memset(&_impl_.started_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ended_at_) -
        reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.ended_at_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.status_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.source_type_) -
        reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.source_type_));
  }
  clear_request();
  clear_result();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL EgressInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const EgressInfo& this_ = static_cast<const EgressInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL EgressInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const EgressInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.EgressInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string egress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_egress_id().empty()) {
      const std::string& _s = this_._internal_egress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.egress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string room_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_room_id().empty()) {
      const std::string& _s = this_._internal_room_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.room_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .livekit.EgressStatus status = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_status(), target);
    }
  }

  switch (this_.request_case()) {
    case kRoomComposite: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.request_.room_composite_, this_._impl_.request_.room_composite_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrackComposite: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.request_.track_composite_, this_._impl_.request_.track_composite_->GetCachedSize(), target,
          stream);
      break;
    }
    case kTrack: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.request_.track_, this_._impl_.request_.track_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  switch (this_.result_case()) {
    case kStream: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.result_.stream_, this_._impl_.result_.stream_->GetCachedSize(), target,
          stream);
      break;
    }
    case kFile: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.result_.file_, this_._impl_.result_.file_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // string error = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_error().empty()) {
      const std::string& _s = this_._internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.error");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // int64 started_at = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<10>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<11>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // .livekit.SegmentsInfo segments = 12 [deprecated = true];
  if (this_.result_case() == kSegments) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.result_.segments_, this_._impl_.result_.segments_->GetCachedSize(), target,
        stream);
  }

  // string room_name = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.room_name");
      target = stream->WriteStringMaybeAliased(13, _s, target);
    }
  }

  // .livekit.WebEgressRequest web = 14;
  if (this_.request_case() == kWeb) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.request_.web_, this_._impl_.request_.web_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.StreamInfo stream_results = 15;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_stream_results_size());
       i < n; i++) {
    const auto& repfield = this_._internal_stream_results().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            15, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.FileInfo file_results = 16;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_results_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_results().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            16, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentsInfo segment_results = 17;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_results_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_results().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            17, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int64 updated_at = 18;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_updated_at() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          18, this_._internal_updated_at(), target);
    }
  }

  // .livekit.ParticipantEgressRequest participant = 19;
  if (this_.request_case() == kParticipant) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *this_._impl_.request_.participant_, this_._impl_.request_.participant_->GetCachedSize(), target,
        stream);
  }

  // repeated .livekit.ImagesInfo image_results = 20;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_image_results_size());
       i < n; i++) {
    const auto& repfield = this_._internal_image_results().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            20, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string details = 21;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_details().empty()) {
      const std::string& _s = this_._internal_details();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.details");
      target = stream->WriteStringMaybeAliased(21, _s, target);
    }
  }

  // int32 error_code = 22;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          22, this_._internal_error_code(), target);
    }
  }

  // string manifest_location = 23;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (!this_._internal_manifest_location().empty()) {
      const std::string& _s = this_._internal_manifest_location();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.EgressInfo.manifest_location");
      target = stream->WriteStringMaybeAliased(23, _s, target);
    }
  }

  // bool backup_storage_used = 25;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_backup_storage_used() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          25, this_._internal_backup_storage_used(), target);
    }
  }

  // .livekit.EgressSourceType source_type = 26;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_source_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          26, this_._internal_source_type(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.EgressInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t EgressInfo::ByteSizeLong(const MessageLite& base) {
  const EgressInfo& this_ = static_cast<const EgressInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t EgressInfo::ByteSizeLong() const {
  const EgressInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.EgressInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.StreamInfo stream_results = 15;
    {
      total_size += 1UL * this_._internal_stream_results_size();
      for (const auto& msg : this_._internal_stream_results()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.FileInfo file_results = 16;
    {
      total_size += 2UL * this_._internal_file_results_size();
      for (const auto& msg : this_._internal_file_results()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentsInfo segment_results = 17;
    {
      total_size += 2UL * this_._internal_segment_results_size();
      for (const auto& msg : this_._internal_segment_results()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.ImagesInfo image_results = 20;
    {
      total_size += 2UL * this_._internal_image_results_size();
      for (const auto& msg : this_._internal_image_results()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string egress_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_egress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_egress_id());
      }
    }
    // string room_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_room_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_id());
      }
    }
    // string error = 9;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_error().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_error());
      }
    }
    // string room_name = 13;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string details = 21;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_details().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_details());
      }
    }
    // string manifest_location = 23;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_manifest_location().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_manifest_location());
      }
    }
    // int64 started_at = 10;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
    // int64 ended_at = 11;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // .livekit.EgressStatus status = 3;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
      }
    }
    // int32 error_code = 22;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_error_code());
      }
    }
    // int64 updated_at = 18;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_updated_at() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                        this_._internal_updated_at());
      }
    }
    // bool backup_storage_used = 25;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_backup_storage_used() != 0) {
        total_size += 3;
      }
    }
    // .livekit.EgressSourceType source_type = 26;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_source_type() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_source_type());
      }
    }
  }
  switch (this_.request_case()) {
    // .livekit.RoomCompositeEgressRequest room_composite = 4;
    case kRoomComposite: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_.room_composite_);
      break;
    }
    // .livekit.WebEgressRequest web = 14;
    case kWeb: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_.web_);
      break;
    }
    // .livekit.ParticipantEgressRequest participant = 19;
    case kParticipant: {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_.participant_);
      break;
    }
    // .livekit.TrackCompositeEgressRequest track_composite = 5;
    case kTrackComposite: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_.track_composite_);
      break;
    }
    // .livekit.TrackEgressRequest track = 6;
    case kTrack: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.request_.track_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  switch (this_.result_case()) {
    // .livekit.StreamInfoList stream = 7 [deprecated = true];
    case kStream: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_.stream_);
      break;
    }
    // .livekit.FileInfo file = 8 [deprecated = true];
    case kFile: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_.file_);
      break;
    }
    // .livekit.SegmentsInfo segments = 12 [deprecated = true];
    case kSegments: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_.segments_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void EgressInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EgressInfo*>(&to_msg);
  auto& from = static_cast<const EgressInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.EgressInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stream_results()->MergeFrom(
      from._internal_stream_results());
  _this->_internal_mutable_file_results()->MergeFrom(
      from._internal_file_results());
  _this->_internal_mutable_segment_results()->MergeFrom(
      from._internal_segment_results());
  _this->_internal_mutable_image_results()->MergeFrom(
      from._internal_image_results());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_egress_id().empty()) {
        _this->_internal_set_egress_id(from._internal_egress_id());
      } else {
        if (_this->_impl_.egress_id_.IsDefault()) {
          _this->_internal_set_egress_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_room_id().empty()) {
        _this->_internal_set_room_id(from._internal_room_id());
      } else {
        if (_this->_impl_.room_id_.IsDefault()) {
          _this->_internal_set_room_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_error().empty()) {
        _this->_internal_set_error(from._internal_error());
      } else {
        if (_this->_impl_.error_.IsDefault()) {
          _this->_internal_set_error("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_details().empty()) {
        _this->_internal_set_details(from._internal_details());
      } else {
        if (_this->_impl_.details_.IsDefault()) {
          _this->_internal_set_details("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_manifest_location().empty()) {
        _this->_internal_set_manifest_location(from._internal_manifest_location());
      } else {
        if (_this->_impl_.manifest_location_.IsDefault()) {
          _this->_internal_set_manifest_location("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_ended_at() != 0) {
        _this->_impl_.ended_at_ = from._impl_.ended_at_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_status() != 0) {
        _this->_impl_.status_ = from._impl_.status_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_updated_at() != 0) {
        _this->_impl_.updated_at_ = from._impl_.updated_at_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_backup_storage_used() != 0) {
        _this->_impl_.backup_storage_used_ = from._impl_.backup_storage_used_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_source_type() != 0) {
        _this->_impl_.source_type_ = from._impl_.source_type_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_request();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kRoomComposite: {
        if (oneof_needs_init) {
          _this->_impl_.request_.room_composite_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.room_composite_);
        } else {
          _this->_impl_.request_.room_composite_->MergeFrom(*from._impl_.request_.room_composite_);
        }
        break;
      }
      case kWeb: {
        if (oneof_needs_init) {
          _this->_impl_.request_.web_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.web_);
        } else {
          _this->_impl_.request_.web_->MergeFrom(*from._impl_.request_.web_);
        }
        break;
      }
      case kParticipant: {
        if (oneof_needs_init) {
          _this->_impl_.request_.participant_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.participant_);
        } else {
          _this->_impl_.request_.participant_->MergeFrom(*from._impl_.request_.participant_);
        }
        break;
      }
      case kTrackComposite: {
        if (oneof_needs_init) {
          _this->_impl_.request_.track_composite_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.track_composite_);
        } else {
          _this->_impl_.request_.track_composite_->MergeFrom(*from._impl_.request_.track_composite_);
        }
        break;
      }
      case kTrack: {
        if (oneof_needs_init) {
          _this->_impl_.request_.track_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.request_.track_);
        } else {
          _this->_impl_.request_.track_->MergeFrom(*from._impl_.request_.track_);
        }
        break;
      }
      case REQUEST_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_result();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kStream: {
        if (oneof_needs_init) {
          _this->_impl_.result_.stream_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.stream_);
        } else {
          _this->_impl_.result_.stream_->MergeFrom(*from._impl_.result_.stream_);
        }
        break;
      }
      case kFile: {
        if (oneof_needs_init) {
          _this->_impl_.result_.file_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.file_);
        } else {
          _this->_impl_.result_.file_->MergeFrom(*from._impl_.result_.file_);
        }
        break;
      }
      case kSegments: {
        if (oneof_needs_init) {
          _this->_impl_.result_.segments_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.result_.segments_);
        } else {
          _this->_impl_.result_.segments_->MergeFrom(*from._impl_.result_.segments_);
        }
        break;
      }
      case RESULT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EgressInfo::CopyFrom(const EgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.EgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EgressInfo::InternalSwap(EgressInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stream_results_.InternalSwap(&other->_impl_.stream_results_);
  _impl_.file_results_.InternalSwap(&other->_impl_.file_results_);
  _impl_.segment_results_.InternalSwap(&other->_impl_.segment_results_);
  _impl_.image_results_.InternalSwap(&other->_impl_.image_results_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_id_, &other->_impl_.egress_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_id_, &other->_impl_.room_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, &other->_impl_.error_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.details_, &other->_impl_.details_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.manifest_location_, &other->_impl_.manifest_location_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.source_type_)
      + sizeof(EgressInfo::_impl_.source_type_)
      - PROTOBUF_FIELD_OFFSET(EgressInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata EgressInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamInfoList::_Internal {
 public:
};

StreamInfoList::StreamInfoList(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamInfoList_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamInfoList)
}
PROTOBUF_NDEBUG_INLINE StreamInfoList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StreamInfoList& from_msg)
      : info_{visibility, arena, from.info_},
        _cached_size_{0} {}

StreamInfoList::StreamInfoList(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamInfoList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamInfoList_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamInfoList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.StreamInfoList)
}
PROTOBUF_NDEBUG_INLINE StreamInfoList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : info_{visibility, arena},
        _cached_size_{0} {}

inline void StreamInfoList::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamInfoList::~StreamInfoList() {
  // @@protoc_insertion_point(destructor:livekit.StreamInfoList)
  SharedDtor(*this);
}
inline void StreamInfoList::SharedDtor(MessageLite& self) {
  StreamInfoList& this_ = static_cast<StreamInfoList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamInfoList::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamInfoList(arena);
}
constexpr auto StreamInfoList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamInfoList, _impl_.info_) +
          decltype(StreamInfoList::_impl_.info_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(StreamInfoList), alignof(StreamInfoList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamInfoList::PlacementNew_,
                                 sizeof(StreamInfoList),
                                 alignof(StreamInfoList));
  }
}
constexpr auto StreamInfoList::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamInfoList_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamInfoList::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamInfoList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamInfoList::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamInfoList>(), &StreamInfoList::ByteSizeLong,
              &StreamInfoList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamInfoList, _impl_._cached_size_),
          false,
      },
      &StreamInfoList::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StreamInfoList_class_data_ =
            StreamInfoList::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StreamInfoList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamInfoList_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamInfoList_class_data_.tc_table);
  return StreamInfoList_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
StreamInfoList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    StreamInfoList_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StreamInfoList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.StreamInfo info = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamInfoList, _impl_.info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.StreamInfo info = 1;
    {PROTOBUF_FIELD_OFFSET(StreamInfoList, _impl_.info_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::StreamInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void StreamInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamInfoList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.info_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamInfoList::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamInfoList& this_ = static_cast<const StreamInfoList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamInfoList::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamInfoList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamInfoList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.StreamInfo info = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_info_size());
       i < n; i++) {
    const auto& repfield = this_._internal_info().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamInfoList)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamInfoList::ByteSizeLong(const MessageLite& base) {
  const StreamInfoList& this_ = static_cast<const StreamInfoList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamInfoList::ByteSizeLong() const {
  const StreamInfoList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StreamInfoList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.StreamInfo info = 1;
    {
      total_size += 1UL * this_._internal_info_size();
      for (const auto& msg : this_._internal_info()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamInfoList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamInfoList*>(&to_msg);
  auto& from = static_cast<const StreamInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamInfoList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_info()->MergeFrom(
      from._internal_info());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfoList::CopyFrom(const StreamInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamInfoList::InternalSwap(StreamInfoList* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.info_.InternalSwap(&other->_impl_.info_);
}

::google::protobuf::Metadata StreamInfoList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StreamInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_._has_bits_);
};

StreamInfo::StreamInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.StreamInfo)
}
PROTOBUF_NDEBUG_INLINE StreamInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::StreamInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        url_(arena, from.url_),
        error_(arena, from.error_) {}

StreamInfo::StreamInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const StreamInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, StreamInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, started_at_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:livekit.StreamInfo)
}
PROTOBUF_NDEBUG_INLINE StreamInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        url_(arena),
        error_(arena) {}

inline void StreamInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::status_));
}
StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:livekit.StreamInfo)
  SharedDtor(*this);
}
inline void StreamInfo::SharedDtor(MessageLite& self) {
  StreamInfo& this_ = static_cast<StreamInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.url_.Destroy();
  this_._impl_.error_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL StreamInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) StreamInfo(arena);
}
constexpr auto StreamInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StreamInfo),
                                            alignof(StreamInfo));
}
constexpr auto StreamInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_StreamInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &StreamInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<StreamInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &StreamInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<StreamInfo>(), &StreamInfo::ByteSizeLong,
              &StreamInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_._cached_size_),
          false,
      },
      &StreamInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        StreamInfo_class_data_ =
            StreamInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL StreamInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&StreamInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(StreamInfo_class_data_.tc_table);
  return StreamInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 35, 2>
StreamInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    StreamInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::StreamInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.url_)}},
    // int64 started_at = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamInfo, _impl_.started_at_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.started_at_)}},
    // int64 ended_at = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamInfo, _impl_.ended_at_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.ended_at_)}},
    // int64 duration = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(StreamInfo, _impl_.duration_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.duration_)}},
    // .livekit.StreamInfo.Status status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamInfo, _impl_.status_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.status_)}},
    // string error = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.error_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string url = 1;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.url_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 started_at = 2;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.started_at_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 3;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.ended_at_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 duration = 4;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.duration_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .livekit.StreamInfo.Status status = 5;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.status_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string error = 6;
    {PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.error_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\3\0\0\0\0\5\0"
    "livekit.StreamInfo"
    "url"
    "error"
  }},
};
PROTOBUF_NOINLINE void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.StreamInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.started_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL StreamInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const StreamInfo& this_ = static_cast<const StreamInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL StreamInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const StreamInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.StreamInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string url = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StreamInfo.url");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 started_at = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // int64 duration = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_duration() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_duration(), target);
    }
  }

  // .livekit.StreamInfo.Status status = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_status(), target);
    }
  }

  // string error = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_error().empty()) {
      const std::string& _s = this_._internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.StreamInfo.error");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.StreamInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t StreamInfo::ByteSizeLong(const MessageLite& base) {
  const StreamInfo& this_ = static_cast<const StreamInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t StreamInfo::ByteSizeLong() const {
  const StreamInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.StreamInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string url = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // string error = 6;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_error().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_error());
      }
    }
    // int64 started_at = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
    // int64 ended_at = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
    // int64 duration = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_duration() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_duration());
      }
    }
    // .livekit.StreamInfo.Status status = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void StreamInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamInfo*>(&to_msg);
  auto& from = static_cast<const StreamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.StreamInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_error().empty()) {
        _this->_internal_set_error(from._internal_error());
      } else {
        if (_this->_impl_.error_.IsDefault()) {
          _this->_internal_set_error("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_ended_at() != 0) {
        _this->_impl_.ended_at_ = from._impl_.ended_at_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_duration() != 0) {
        _this->_impl_.duration_ = from._impl_.duration_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_status() != 0) {
        _this->_impl_.status_ = from._impl_.status_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamInfo::InternalSwap(StreamInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, &other->_impl_.error_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.status_)
      + sizeof(StreamInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StreamInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::google::protobuf::Metadata StreamInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FileInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FileInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FileInfo, _impl_._has_bits_);
};

FileInfo::FileInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FileInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.FileInfo)
}
PROTOBUF_NDEBUG_INLINE FileInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::FileInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filename_(arena, from.filename_),
        location_(arena, from.location_) {}

FileInfo::FileInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const FileInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FileInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FileInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, started_at_),
           offsetof(Impl_, duration_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::duration_));

  // @@protoc_insertion_point(copy_constructor:livekit.FileInfo)
}
PROTOBUF_NDEBUG_INLINE FileInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filename_(arena),
        location_(arena) {}

inline void FileInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           0,
           offsetof(Impl_, duration_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::duration_));
}
FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:livekit.FileInfo)
  SharedDtor(*this);
}
inline void FileInfo::SharedDtor(MessageLite& self) {
  FileInfo& this_ = static_cast<FileInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filename_.Destroy();
  this_._impl_.location_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FileInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FileInfo(arena);
}
constexpr auto FileInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FileInfo),
                                            alignof(FileInfo));
}
constexpr auto FileInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FileInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &FileInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FileInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FileInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FileInfo>(), &FileInfo::ByteSizeLong,
              &FileInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FileInfo, _impl_._cached_size_),
          false,
      },
      &FileInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        FileInfo_class_data_ =
            FileInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL FileInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FileInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FileInfo_class_data_.tc_table);
  return FileInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 41, 2>
FileInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FileInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    FileInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::FileInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string filename = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.filename_)}},
    // int64 started_at = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileInfo, _impl_.started_at_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.started_at_)}},
    // int64 ended_at = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileInfo, _impl_.ended_at_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.ended_at_)}},
    // int64 size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileInfo, _impl_.size_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.size_)}},
    // string location = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.location_)}},
    // int64 duration = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FileInfo, _impl_.duration_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.duration_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string filename = 1;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.filename_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 started_at = 2;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.started_at_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 3;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.ended_at_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 size = 4;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string location = 5;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.location_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 duration = 6;
    {PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.duration_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\20\10\0\0\0\10\0\0"
    "livekit.FileInfo"
    "filename"
    "location"
  }},
};
PROTOBUF_NOINLINE void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.FileInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.location_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.started_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL FileInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FileInfo& this_ = static_cast<const FileInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FileInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FileInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.FileInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string filename = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filename().empty()) {
      const std::string& _s = this_._internal_filename();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.FileInfo.filename");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 started_at = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // int64 size = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
              stream, this_._internal_size(), target);
    }
  }

  // string location = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_location().empty()) {
      const std::string& _s = this_._internal_location();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.FileInfo.location");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // int64 duration = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_duration() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
              stream, this_._internal_duration(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.FileInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FileInfo::ByteSizeLong(const MessageLite& base) {
  const FileInfo& this_ = static_cast<const FileInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t FileInfo::ByteSizeLong() const {
  const FileInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.FileInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string filename = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filename().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename());
      }
    }
    // string location = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_location().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_location());
      }
    }
    // int64 started_at = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
    // int64 ended_at = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
    // int64 size = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_size());
      }
    }
    // int64 duration = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_duration() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_duration());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void FileInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FileInfo*>(&to_msg);
  auto& from = static_cast<const FileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.FileInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filename().empty()) {
        _this->_internal_set_filename(from._internal_filename());
      } else {
        if (_this->_impl_.filename_.IsDefault()) {
          _this->_internal_set_filename("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_location().empty()) {
        _this->_internal_set_location(from._internal_location());
      } else {
        if (_this->_impl_.location_.IsDefault()) {
          _this->_internal_set_location("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_ended_at() != 0) {
        _this->_impl_.ended_at_ = from._impl_.ended_at_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_size() != 0) {
        _this->_impl_.size_ = from._impl_.size_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_duration() != 0) {
        _this->_impl_.duration_ = from._impl_.duration_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FileInfo::InternalSwap(FileInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_, &other->_impl_.filename_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, &other->_impl_.location_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.duration_)
      + sizeof(FileInfo::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(FileInfo, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SegmentsInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SegmentsInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_._has_bits_);
};

SegmentsInfo::SegmentsInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentsInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.SegmentsInfo)
}
PROTOBUF_NDEBUG_INLINE SegmentsInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::SegmentsInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        playlist_name_(arena, from.playlist_name_),
        playlist_location_(arena, from.playlist_location_),
        live_playlist_name_(arena, from.live_playlist_name_),
        live_playlist_location_(arena, from.live_playlist_location_) {}

SegmentsInfo::SegmentsInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const SegmentsInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, SegmentsInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SegmentsInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, ended_at_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::ended_at_));

  // @@protoc_insertion_point(copy_constructor:livekit.SegmentsInfo)
}
PROTOBUF_NDEBUG_INLINE SegmentsInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        playlist_name_(arena),
        playlist_location_(arena),
        live_playlist_name_(arena),
        live_playlist_location_(arena) {}

inline void SegmentsInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           0,
           offsetof(Impl_, ended_at_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::ended_at_));
}
SegmentsInfo::~SegmentsInfo() {
  // @@protoc_insertion_point(destructor:livekit.SegmentsInfo)
  SharedDtor(*this);
}
inline void SegmentsInfo::SharedDtor(MessageLite& self) {
  SegmentsInfo& this_ = static_cast<SegmentsInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.playlist_name_.Destroy();
  this_._impl_.playlist_location_.Destroy();
  this_._impl_.live_playlist_name_.Destroy();
  this_._impl_.live_playlist_location_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL SegmentsInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) SegmentsInfo(arena);
}
constexpr auto SegmentsInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SegmentsInfo),
                                            alignof(SegmentsInfo));
}
constexpr auto SegmentsInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_SegmentsInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &SegmentsInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<SegmentsInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &SegmentsInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<SegmentsInfo>(), &SegmentsInfo::ByteSizeLong,
              &SegmentsInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_._cached_size_),
          false,
      },
      &SegmentsInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        SegmentsInfo_class_data_ =
            SegmentsInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL SegmentsInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&SegmentsInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(SegmentsInfo_class_data_.tc_table);
  return SegmentsInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 107, 2>
SegmentsInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    SegmentsInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::SegmentsInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string playlist_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.playlist_name_)}},
    // int64 duration = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SegmentsInfo, _impl_.duration_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.duration_)}},
    // int64 size = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SegmentsInfo, _impl_.size_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.size_)}},
    // string playlist_location = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.playlist_location_)}},
    // int64 segment_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SegmentsInfo, _impl_.segment_count_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.segment_count_)}},
    // int64 started_at = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SegmentsInfo, _impl_.started_at_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.started_at_)}},
    // int64 ended_at = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SegmentsInfo, _impl_.ended_at_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.ended_at_)}},
    // string live_playlist_name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 2, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.live_playlist_name_)}},
    // string live_playlist_location = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 3, 0, PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.live_playlist_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string playlist_name = 1;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.playlist_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 duration = 2;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.duration_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 size = 3;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.size_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string playlist_location = 4;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.playlist_location_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 segment_count = 5;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.segment_count_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 started_at = 6;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.started_at_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 7;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.ended_at_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string live_playlist_name = 8;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.live_playlist_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string live_playlist_location = 9;
    {PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.live_playlist_location_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\15\0\0\21\0\0\0\22\26\0\0\0\0\0\0"
    "livekit.SegmentsInfo"
    "playlist_name"
    "playlist_location"
    "live_playlist_name"
    "live_playlist_location"
  }},
};
PROTOBUF_NOINLINE void SegmentsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.SegmentsInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.playlist_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.playlist_location_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.live_playlist_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.live_playlist_location_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.started_at_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.started_at_));
  }
  _impl_.ended_at_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL SegmentsInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const SegmentsInfo& this_ = static_cast<const SegmentsInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL SegmentsInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const SegmentsInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.SegmentsInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string playlist_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_playlist_name().empty()) {
      const std::string& _s = this_._internal_playlist_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentsInfo.playlist_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 duration = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_duration() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_duration(), target);
    }
  }

  // int64 size = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_size(), target);
    }
  }

  // string playlist_location = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_playlist_location().empty()) {
      const std::string& _s = this_._internal_playlist_location();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentsInfo.playlist_location");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // int64 segment_count = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_segment_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<5>(
              stream, this_._internal_segment_count(), target);
    }
  }

  // int64 started_at = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // string live_playlist_name = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_live_playlist_name().empty()) {
      const std::string& _s = this_._internal_live_playlist_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentsInfo.live_playlist_name");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // string live_playlist_location = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_live_playlist_location().empty()) {
      const std::string& _s = this_._internal_live_playlist_location();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.SegmentsInfo.live_playlist_location");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.SegmentsInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t SegmentsInfo::ByteSizeLong(const MessageLite& base) {
  const SegmentsInfo& this_ = static_cast<const SegmentsInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t SegmentsInfo::ByteSizeLong() const {
  const SegmentsInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.SegmentsInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string playlist_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_playlist_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_playlist_name());
      }
    }
    // string playlist_location = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_playlist_location().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_playlist_location());
      }
    }
    // string live_playlist_name = 8;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_live_playlist_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_live_playlist_name());
      }
    }
    // string live_playlist_location = 9;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_live_playlist_location().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_live_playlist_location());
      }
    }
    // int64 duration = 2;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_duration() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_duration());
      }
    }
    // int64 size = 3;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_size());
      }
    }
    // int64 segment_count = 5;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_segment_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_segment_count());
      }
    }
    // int64 started_at = 6;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
  }
   {
    // int64 ended_at = 7;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void SegmentsInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SegmentsInfo*>(&to_msg);
  auto& from = static_cast<const SegmentsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.SegmentsInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_playlist_name().empty()) {
        _this->_internal_set_playlist_name(from._internal_playlist_name());
      } else {
        if (_this->_impl_.playlist_name_.IsDefault()) {
          _this->_internal_set_playlist_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_playlist_location().empty()) {
        _this->_internal_set_playlist_location(from._internal_playlist_location());
      } else {
        if (_this->_impl_.playlist_location_.IsDefault()) {
          _this->_internal_set_playlist_location("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_live_playlist_name().empty()) {
        _this->_internal_set_live_playlist_name(from._internal_live_playlist_name());
      } else {
        if (_this->_impl_.live_playlist_name_.IsDefault()) {
          _this->_internal_set_live_playlist_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_live_playlist_location().empty()) {
        _this->_internal_set_live_playlist_location(from._internal_live_playlist_location());
      } else {
        if (_this->_impl_.live_playlist_location_.IsDefault()) {
          _this->_internal_set_live_playlist_location("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_duration() != 0) {
        _this->_impl_.duration_ = from._impl_.duration_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_size() != 0) {
        _this->_impl_.size_ = from._impl_.size_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_segment_count() != 0) {
        _this->_impl_.segment_count_ = from._impl_.segment_count_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (from._internal_ended_at() != 0) {
      _this->_impl_.ended_at_ = from._impl_.ended_at_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SegmentsInfo::CopyFrom(const SegmentsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.SegmentsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SegmentsInfo::InternalSwap(SegmentsInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.playlist_name_, &other->_impl_.playlist_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.playlist_location_, &other->_impl_.playlist_location_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.live_playlist_name_, &other->_impl_.live_playlist_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.live_playlist_location_, &other->_impl_.live_playlist_location_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.ended_at_)
      + sizeof(SegmentsInfo::_impl_.ended_at_)
      - PROTOBUF_FIELD_OFFSET(SegmentsInfo, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::google::protobuf::Metadata SegmentsInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ImagesInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ImagesInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_._has_bits_);
};

ImagesInfo::ImagesInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImagesInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ImagesInfo)
}
PROTOBUF_NDEBUG_INLINE ImagesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ImagesInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filename_prefix_(arena, from.filename_prefix_) {}

ImagesInfo::ImagesInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ImagesInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ImagesInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ImagesInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, image_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, image_count_),
           offsetof(Impl_, ended_at_) -
               offsetof(Impl_, image_count_) +
               sizeof(Impl_::ended_at_));

  // @@protoc_insertion_point(copy_constructor:livekit.ImagesInfo)
}
PROTOBUF_NDEBUG_INLINE ImagesInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filename_prefix_(arena) {}

inline void ImagesInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, image_count_),
           0,
           offsetof(Impl_, ended_at_) -
               offsetof(Impl_, image_count_) +
               sizeof(Impl_::ended_at_));
}
ImagesInfo::~ImagesInfo() {
  // @@protoc_insertion_point(destructor:livekit.ImagesInfo)
  SharedDtor(*this);
}
inline void ImagesInfo::SharedDtor(MessageLite& self) {
  ImagesInfo& this_ = static_cast<ImagesInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filename_prefix_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ImagesInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ImagesInfo(arena);
}
constexpr auto ImagesInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ImagesInfo),
                                            alignof(ImagesInfo));
}
constexpr auto ImagesInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ImagesInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ImagesInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ImagesInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ImagesInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ImagesInfo>(), &ImagesInfo::ByteSizeLong,
              &ImagesInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_._cached_size_),
          false,
      },
      &ImagesInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ImagesInfo_class_data_ =
            ImagesInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ImagesInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ImagesInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ImagesInfo_class_data_.tc_table);
  return ImagesInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 42, 2>
ImagesInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ImagesInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ImagesInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string filename_prefix = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.filename_prefix_)}},
    // int64 image_count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ImagesInfo, _impl_.image_count_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.image_count_)}},
    // int64 started_at = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ImagesInfo, _impl_.started_at_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.started_at_)}},
    // int64 ended_at = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ImagesInfo, _impl_.ended_at_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.ended_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 image_count = 1;
    {PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.image_count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 started_at = 2;
    {PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.started_at_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 3;
    {PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.ended_at_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string filename_prefix = 4;
    {PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.filename_prefix_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\0\0\17\0\0\0"
    "livekit.ImagesInfo"
    "filename_prefix"
  }},
};
PROTOBUF_NOINLINE void ImagesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ImagesInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filename_prefix_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.image_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ended_at_) -
        reinterpret_cast<char*>(&_impl_.image_count_)) + sizeof(_impl_.ended_at_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ImagesInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ImagesInfo& this_ = static_cast<const ImagesInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ImagesInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ImagesInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ImagesInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 image_count = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_image_count() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
              stream, this_._internal_image_count(), target);
    }
  }

  // int64 started_at = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // string filename_prefix = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filename_prefix().empty()) {
      const std::string& _s = this_._internal_filename_prefix();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ImagesInfo.filename_prefix");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ImagesInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ImagesInfo::ByteSizeLong(const MessageLite& base) {
  const ImagesInfo& this_ = static_cast<const ImagesInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ImagesInfo::ByteSizeLong() const {
  const ImagesInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ImagesInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string filename_prefix = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filename_prefix().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filename_prefix());
      }
    }
    // int64 image_count = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_image_count() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_image_count());
      }
    }
    // int64 started_at = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
    // int64 ended_at = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ImagesInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ImagesInfo*>(&to_msg);
  auto& from = static_cast<const ImagesInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ImagesInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filename_prefix().empty()) {
        _this->_internal_set_filename_prefix(from._internal_filename_prefix());
      } else {
        if (_this->_impl_.filename_prefix_.IsDefault()) {
          _this->_internal_set_filename_prefix("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_image_count() != 0) {
        _this->_impl_.image_count_ = from._impl_.image_count_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_ended_at() != 0) {
        _this->_impl_.ended_at_ = from._impl_.ended_at_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesInfo::CopyFrom(const ImagesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ImagesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ImagesInfo::InternalSwap(ImagesInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filename_prefix_, &other->_impl_.filename_prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.ended_at_)
      + sizeof(ImagesInfo::_impl_.ended_at_)
      - PROTOBUF_FIELD_OFFSET(ImagesInfo, _impl_.image_count_)>(
          reinterpret_cast<char*>(&_impl_.image_count_),
          reinterpret_cast<char*>(&other->_impl_.image_count_));
}

::google::protobuf::Metadata ImagesInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AutoParticipantEgress::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::AutoParticipantEgress, _impl_._oneof_case_);
};

void AutoParticipantEgress::set_allocated_advanced(::livekit::EncodingOptions* PROTOBUF_NULLABLE advanced) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_options();
  if (advanced) {
    ::google::protobuf::Arena* submessage_arena = advanced->GetArena();
    if (message_arena != submessage_arena) {
      advanced = ::google::protobuf::internal::GetOwnedMessage(message_arena, advanced, submessage_arena);
    }
    set_has_advanced();
    _impl_.options_.advanced_ = advanced;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoParticipantEgress.advanced)
}
AutoParticipantEgress::AutoParticipantEgress(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AutoParticipantEgress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.AutoParticipantEgress)
}
PROTOBUF_NDEBUG_INLINE AutoParticipantEgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::AutoParticipantEgress& from_msg)
      : file_outputs_{visibility, arena, from.file_outputs_},
        segment_outputs_{visibility, arena, from.segment_outputs_},
        options_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AutoParticipantEgress::AutoParticipantEgress(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AutoParticipantEgress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AutoParticipantEgress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AutoParticipantEgress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (options_case()) {
    case OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      case kAdvanced:
        _impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.AutoParticipantEgress)
}
PROTOBUF_NDEBUG_INLINE AutoParticipantEgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : file_outputs_{visibility, arena},
        segment_outputs_{visibility, arena},
        options_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AutoParticipantEgress::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AutoParticipantEgress::~AutoParticipantEgress() {
  // @@protoc_insertion_point(destructor:livekit.AutoParticipantEgress)
  SharedDtor(*this);
}
inline void AutoParticipantEgress::SharedDtor(MessageLite& self) {
  AutoParticipantEgress& this_ = static_cast<AutoParticipantEgress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_options()) {
    this_.clear_options();
  }
  this_._impl_.~Impl_();
}

void AutoParticipantEgress::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.AutoParticipantEgress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kAdvanced: {
      if (GetArena() == nullptr) {
        delete _impl_.options_.advanced_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.options_.advanced_);
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL AutoParticipantEgress::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AutoParticipantEgress(arena);
}
constexpr auto AutoParticipantEgress::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.file_outputs_) +
          decltype(AutoParticipantEgress::_impl_.file_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.segment_outputs_) +
          decltype(AutoParticipantEgress::_impl_.segment_outputs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AutoParticipantEgress), alignof(AutoParticipantEgress), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AutoParticipantEgress::PlacementNew_,
                                 sizeof(AutoParticipantEgress),
                                 alignof(AutoParticipantEgress));
  }
}
constexpr auto AutoParticipantEgress::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AutoParticipantEgress_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AutoParticipantEgress::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AutoParticipantEgress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AutoParticipantEgress::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AutoParticipantEgress>(), &AutoParticipantEgress::ByteSizeLong,
              &AutoParticipantEgress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_._cached_size_),
          false,
      },
      &AutoParticipantEgress::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AutoParticipantEgress_class_data_ =
            AutoParticipantEgress::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AutoParticipantEgress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AutoParticipantEgress_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AutoParticipantEgress_class_data_.tc_table);
  return AutoParticipantEgress_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 3, 0, 2>
AutoParticipantEgress::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AutoParticipantEgress_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::AutoParticipantEgress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.segment_outputs_)}},
    // repeated .livekit.EncodedFileOutput file_outputs = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.file_outputs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.EncodingOptionsPreset preset = 1;
    {PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.options_.preset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.EncodingOptions advanced = 2;
    {PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.options_.advanced_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.EncodedFileOutput file_outputs = 3;
    {PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.file_outputs_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
    {PROTOBUF_FIELD_OFFSET(AutoParticipantEgress, _impl_.segment_outputs_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::EncodingOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::EncodedFileOutput>()},
      {::_pbi::TcParser::GetTable<::livekit::SegmentedFileOutput>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AutoParticipantEgress::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AutoParticipantEgress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_outputs_.Clear();
  _impl_.segment_outputs_.Clear();
  clear_options();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AutoParticipantEgress::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AutoParticipantEgress& this_ = static_cast<const AutoParticipantEgress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AutoParticipantEgress::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AutoParticipantEgress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AutoParticipantEgress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_preset(), target);
      break;
    }
    case kAdvanced: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.options_.advanced_, this_._impl_.options_.advanced_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // repeated .livekit.EncodedFileOutput file_outputs = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_file_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_file_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_segment_outputs_size());
       i < n; i++) {
    const auto& repfield = this_._internal_segment_outputs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AutoParticipantEgress)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AutoParticipantEgress::ByteSizeLong(const MessageLite& base) {
  const AutoParticipantEgress& this_ = static_cast<const AutoParticipantEgress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AutoParticipantEgress::ByteSizeLong() const {
  const AutoParticipantEgress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.AutoParticipantEgress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.EncodedFileOutput file_outputs = 3;
    {
      total_size += 1UL * this_._internal_file_outputs_size();
      for (const auto& msg : this_._internal_file_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .livekit.SegmentedFileOutput segment_outputs = 4;
    {
      total_size += 1UL * this_._internal_segment_outputs_size();
      for (const auto& msg : this_._internal_segment_outputs()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  switch (this_.options_case()) {
    // .livekit.EncodingOptionsPreset preset = 1;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.EncodingOptions advanced = 2;
    case kAdvanced: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.options_.advanced_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AutoParticipantEgress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AutoParticipantEgress*>(&to_msg);
  auto& from = static_cast<const AutoParticipantEgress&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AutoParticipantEgress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_file_outputs()->MergeFrom(
      from._internal_file_outputs());
  _this->_internal_mutable_segment_outputs()->MergeFrom(
      from._internal_segment_outputs());
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_options();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.options_.preset_ = from._impl_.options_.preset_;
        break;
      }
      case kAdvanced: {
        if (oneof_needs_init) {
          _this->_impl_.options_.advanced_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.options_.advanced_);
        } else {
          _this->_impl_.options_.advanced_->MergeFrom(*from._impl_.options_.advanced_);
        }
        break;
      }
      case OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutoParticipantEgress::CopyFrom(const AutoParticipantEgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AutoParticipantEgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AutoParticipantEgress::InternalSwap(AutoParticipantEgress* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_outputs_.InternalSwap(&other->_impl_.file_outputs_);
  _impl_.segment_outputs_.InternalSwap(&other->_impl_.segment_outputs_);
  swap(_impl_.options_, other->_impl_.options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AutoParticipantEgress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AutoTrackEgress::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AutoTrackEgress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::AutoTrackEgress, _impl_._oneof_case_);
};

void AutoTrackEgress::set_allocated_s3(::livekit::S3Upload* PROTOBUF_NULLABLE s3) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (s3) {
    ::google::protobuf::Arena* submessage_arena = s3->GetArena();
    if (message_arena != submessage_arena) {
      s3 = ::google::protobuf::internal::GetOwnedMessage(message_arena, s3, submessage_arena);
    }
    set_has_s3();
    _impl_.output_.s3_ = s3;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.s3)
}
void AutoTrackEgress::set_allocated_gcp(::livekit::GCPUpload* PROTOBUF_NULLABLE gcp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (gcp) {
    ::google::protobuf::Arena* submessage_arena = gcp->GetArena();
    if (message_arena != submessage_arena) {
      gcp = ::google::protobuf::internal::GetOwnedMessage(message_arena, gcp, submessage_arena);
    }
    set_has_gcp();
    _impl_.output_.gcp_ = gcp;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.gcp)
}
void AutoTrackEgress::set_allocated_azure(::livekit::AzureBlobUpload* PROTOBUF_NULLABLE azure) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (azure) {
    ::google::protobuf::Arena* submessage_arena = azure->GetArena();
    if (message_arena != submessage_arena) {
      azure = ::google::protobuf::internal::GetOwnedMessage(message_arena, azure, submessage_arena);
    }
    set_has_azure();
    _impl_.output_.azure_ = azure;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.azure)
}
void AutoTrackEgress::set_allocated_alioss(::livekit::AliOSSUpload* PROTOBUF_NULLABLE alioss) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_output();
  if (alioss) {
    ::google::protobuf::Arena* submessage_arena = alioss->GetArena();
    if (message_arena != submessage_arena) {
      alioss = ::google::protobuf::internal::GetOwnedMessage(message_arena, alioss, submessage_arena);
    }
    set_has_alioss();
    _impl_.output_.alioss_ = alioss;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.AutoTrackEgress.aliOSS)
}
AutoTrackEgress::AutoTrackEgress(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AutoTrackEgress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.AutoTrackEgress)
}
PROTOBUF_NDEBUG_INLINE AutoTrackEgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::AutoTrackEgress& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        filepath_(arena, from.filepath_),
        output_{},
        _oneof_case_{from._oneof_case_[0]} {}

AutoTrackEgress::AutoTrackEgress(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AutoTrackEgress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AutoTrackEgress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AutoTrackEgress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.disable_manifest_ = from._impl_.disable_manifest_;
  switch (output_case()) {
    case OUTPUT_NOT_SET:
      break;
      case kS3:
        _impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        break;
      case kGcp:
        _impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        break;
      case kAzure:
        _impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        break;
      case kAliOSS:
        _impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.AutoTrackEgress)
}
PROTOBUF_NDEBUG_INLINE AutoTrackEgress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        filepath_(arena),
        output_{},
        _oneof_case_{} {}

inline void AutoTrackEgress::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.disable_manifest_ = {};
}
AutoTrackEgress::~AutoTrackEgress() {
  // @@protoc_insertion_point(destructor:livekit.AutoTrackEgress)
  SharedDtor(*this);
}
inline void AutoTrackEgress::SharedDtor(MessageLite& self) {
  AutoTrackEgress& this_ = static_cast<AutoTrackEgress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.filepath_.Destroy();
  if (this_.has_output()) {
    this_.clear_output();
  }
  this_._impl_.~Impl_();
}

void AutoTrackEgress::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:livekit.AutoTrackEgress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (output_case()) {
    case kS3: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.s3_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.s3_);
      }
      break;
    }
    case kGcp: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.gcp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.gcp_);
      }
      break;
    }
    case kAzure: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.azure_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.azure_);
      }
      break;
    }
    case kAliOSS: {
      if (GetArena() == nullptr) {
        delete _impl_.output_.alioss_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.output_.alioss_);
      }
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}


inline void* PROTOBUF_NONNULL AutoTrackEgress::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AutoTrackEgress(arena);
}
constexpr auto AutoTrackEgress::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AutoTrackEgress),
                                            alignof(AutoTrackEgress));
}
constexpr auto AutoTrackEgress::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AutoTrackEgress_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AutoTrackEgress::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AutoTrackEgress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AutoTrackEgress::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AutoTrackEgress>(), &AutoTrackEgress::ByteSizeLong,
              &AutoTrackEgress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_._cached_size_),
          false,
      },
      &AutoTrackEgress::kDescriptorMethods,
      &descriptor_table_livekit_5fegress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        AutoTrackEgress_class_data_ =
            AutoTrackEgress::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL AutoTrackEgress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AutoTrackEgress_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AutoTrackEgress_class_data_.tc_table);
  return AutoTrackEgress_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 4, 40, 2>
AutoTrackEgress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AutoTrackEgress_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::AutoTrackEgress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string filepath = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.filepath_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool disable_manifest = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AutoTrackEgress, _impl_.disable_manifest_), 1>(),
     {40, 1, 0, PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.disable_manifest_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string filepath = 1;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.filepath_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.S3Upload s3 = 2;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.output_.s3_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.GCPUpload gcp = 3;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.output_.gcp_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.AzureBlobUpload azure = 4;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.output_.azure_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool disable_manifest = 5;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.disable_manifest_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.AliOSSUpload aliOSS = 6;
    {PROTOBUF_FIELD_OFFSET(AutoTrackEgress, _impl_.output_.alioss_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::S3Upload>()},
      {::_pbi::TcParser::GetTable<::livekit::GCPUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AzureBlobUpload>()},
      {::_pbi::TcParser::GetTable<::livekit::AliOSSUpload>()},
  }},
  {{
    "\27\10\0\0\0\0\0\0"
    "livekit.AutoTrackEgress"
    "filepath"
  }},
};
PROTOBUF_NOINLINE void AutoTrackEgress::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.AutoTrackEgress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.filepath_.ClearNonDefaultToEmpty();
  }
  _impl_.disable_manifest_ = false;
  clear_output();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AutoTrackEgress::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AutoTrackEgress& this_ = static_cast<const AutoTrackEgress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AutoTrackEgress::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AutoTrackEgress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.AutoTrackEgress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string filepath = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_filepath().empty()) {
      const std::string& _s = this_._internal_filepath();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.AutoTrackEgress.filepath");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  switch (this_.output_case()) {
    case kS3: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *this_._impl_.output_.s3_, this_._impl_.output_.s3_->GetCachedSize(), target,
          stream);
      break;
    }
    case kGcp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.output_.gcp_, this_._impl_.output_.gcp_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAzure: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.output_.azure_, this_._impl_.output_.azure_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  // bool disable_manifest = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_disable_manifest() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_disable_manifest(), target);
    }
  }

  // .livekit.AliOSSUpload aliOSS = 6;
  if (this_.output_case() == kAliOSS) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.output_.alioss_, this_._impl_.output_.alioss_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.AutoTrackEgress)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AutoTrackEgress::ByteSizeLong(const MessageLite& base) {
  const AutoTrackEgress& this_ = static_cast<const AutoTrackEgress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AutoTrackEgress::ByteSizeLong() const {
  const AutoTrackEgress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.AutoTrackEgress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string filepath = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_filepath().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_filepath());
      }
    }
    // bool disable_manifest = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_disable_manifest() != 0) {
        total_size += 2;
      }
    }
  }
  switch (this_.output_case()) {
    // .livekit.S3Upload s3 = 2;
    case kS3: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.s3_);
      break;
    }
    // .livekit.GCPUpload gcp = 3;
    case kGcp: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.gcp_);
      break;
    }
    // .livekit.AzureBlobUpload azure = 4;
    case kAzure: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.azure_);
      break;
    }
    // .livekit.AliOSSUpload aliOSS = 6;
    case kAliOSS: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.output_.alioss_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AutoTrackEgress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AutoTrackEgress*>(&to_msg);
  auto& from = static_cast<const AutoTrackEgress&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.AutoTrackEgress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_filepath().empty()) {
        _this->_internal_set_filepath(from._internal_filepath());
      } else {
        if (_this->_impl_.filepath_.IsDefault()) {
          _this->_internal_set_filepath("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_disable_manifest() != 0) {
        _this->_impl_.disable_manifest_ = from._impl_.disable_manifest_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_output();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kS3: {
        if (oneof_needs_init) {
          _this->_impl_.output_.s3_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.s3_);
        } else {
          _this->_impl_.output_.s3_->MergeFrom(*from._impl_.output_.s3_);
        }
        break;
      }
      case kGcp: {
        if (oneof_needs_init) {
          _this->_impl_.output_.gcp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.gcp_);
        } else {
          _this->_impl_.output_.gcp_->MergeFrom(*from._impl_.output_.gcp_);
        }
        break;
      }
      case kAzure: {
        if (oneof_needs_init) {
          _this->_impl_.output_.azure_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.azure_);
        } else {
          _this->_impl_.output_.azure_->MergeFrom(*from._impl_.output_.azure_);
        }
        break;
      }
      case kAliOSS: {
        if (oneof_needs_init) {
          _this->_impl_.output_.alioss_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.output_.alioss_);
        } else {
          _this->_impl_.output_.alioss_->MergeFrom(*from._impl_.output_.alioss_);
        }
        break;
      }
      case OUTPUT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AutoTrackEgress::CopyFrom(const AutoTrackEgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.AutoTrackEgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AutoTrackEgress::InternalSwap(AutoTrackEgress* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filepath_, &other->_impl_.filepath_, arena);
  swap(_impl_.disable_manifest_, other->_impl_.disable_manifest_);
  swap(_impl_.output_, other->_impl_.output_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AutoTrackEgress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_livekit_5fegress_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
