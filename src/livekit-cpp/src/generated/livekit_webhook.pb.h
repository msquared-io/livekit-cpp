// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_webhook.proto
// Protobuf C++ Version: 6.30.1

#ifndef livekit_5fwebhook_2eproto_2epb_2eh
#define livekit_5fwebhook_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "livekit_models.pb.h"
#include "livekit_egress.pb.h"
#include "livekit_ingress.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_livekit_5fwebhook_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_livekit_5fwebhook_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_livekit_5fwebhook_2eproto;
}  // extern "C"
namespace livekit {
class WebhookEvent;
struct WebhookEventDefaultTypeInternal;
extern WebhookEventDefaultTypeInternal _WebhookEvent_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull WebhookEvent_class_data_;
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace livekit {

// ===================================================================


// -------------------------------------------------------------------

class WebhookEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:livekit.WebhookEvent) */ {
 public:
  inline WebhookEvent() : WebhookEvent(nullptr) {}
  ~WebhookEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WebhookEvent* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WebhookEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WebhookEvent(::google::protobuf::internal::ConstantInitialized);

  inline WebhookEvent(const WebhookEvent& from) : WebhookEvent(nullptr, from) {}
  inline WebhookEvent(WebhookEvent&& from) noexcept
      : WebhookEvent(nullptr, std::move(from)) {}
  inline WebhookEvent& operator=(const WebhookEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebhookEvent& operator=(WebhookEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WebhookEvent& default_instance() {
    return *reinterpret_cast<const WebhookEvent*>(
        &_WebhookEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WebhookEvent& a, WebhookEvent& b) { a.Swap(&b); }
  inline void Swap(WebhookEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebhookEvent* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebhookEvent* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WebhookEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WebhookEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WebhookEvent& from) { WebhookEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WebhookEvent* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "livekit.WebhookEvent"; }

 protected:
  explicit WebhookEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  WebhookEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const WebhookEvent& from);
  WebhookEvent(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, WebhookEvent&& from) noexcept
      : WebhookEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEventFieldNumber = 1,
    kIdFieldNumber = 6,
    kRoomFieldNumber = 2,
    kParticipantFieldNumber = 3,
    kTrackFieldNumber = 8,
    kEgressInfoFieldNumber = 9,
    kIngressInfoFieldNumber = 10,
    kCreatedAtFieldNumber = 7,
    kNumDroppedFieldNumber = 11,
  };
  // string event = 1;
  void clear_event() ;
  const std::string& event() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_event();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_event();
  void set_allocated_event(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_event() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_event(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_event();

  public:
  // string id = 6;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_id();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_id();
  void set_allocated_id(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_id() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_id();

  public:
  // .livekit.Room room = 2;
  bool has_room() const;
  void clear_room() ;
  const ::livekit::Room& room() const;
  [[nodiscard]] ::livekit::Room* PROTOBUF_NULLABLE release_room();
  ::livekit::Room* PROTOBUF_NONNULL mutable_room();
  void set_allocated_room(::livekit::Room* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_room(::livekit::Room* PROTOBUF_NULLABLE value);
  ::livekit::Room* PROTOBUF_NULLABLE unsafe_arena_release_room();

  private:
  const ::livekit::Room& _internal_room() const;
  ::livekit::Room* PROTOBUF_NONNULL _internal_mutable_room();

  public:
  // .livekit.ParticipantInfo participant = 3;
  bool has_participant() const;
  void clear_participant() ;
  const ::livekit::ParticipantInfo& participant() const;
  [[nodiscard]] ::livekit::ParticipantInfo* PROTOBUF_NULLABLE release_participant();
  ::livekit::ParticipantInfo* PROTOBUF_NONNULL mutable_participant();
  void set_allocated_participant(::livekit::ParticipantInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_participant(::livekit::ParticipantInfo* PROTOBUF_NULLABLE value);
  ::livekit::ParticipantInfo* PROTOBUF_NULLABLE unsafe_arena_release_participant();

  private:
  const ::livekit::ParticipantInfo& _internal_participant() const;
  ::livekit::ParticipantInfo* PROTOBUF_NONNULL _internal_mutable_participant();

  public:
  // .livekit.TrackInfo track = 8;
  bool has_track() const;
  void clear_track() ;
  const ::livekit::TrackInfo& track() const;
  [[nodiscard]] ::livekit::TrackInfo* PROTOBUF_NULLABLE release_track();
  ::livekit::TrackInfo* PROTOBUF_NONNULL mutable_track();
  void set_allocated_track(::livekit::TrackInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_track(::livekit::TrackInfo* PROTOBUF_NULLABLE value);
  ::livekit::TrackInfo* PROTOBUF_NULLABLE unsafe_arena_release_track();

  private:
  const ::livekit::TrackInfo& _internal_track() const;
  ::livekit::TrackInfo* PROTOBUF_NONNULL _internal_mutable_track();

  public:
  // .livekit.EgressInfo egress_info = 9;
  bool has_egress_info() const;
  void clear_egress_info() ;
  const ::livekit::EgressInfo& egress_info() const;
  [[nodiscard]] ::livekit::EgressInfo* PROTOBUF_NULLABLE release_egress_info();
  ::livekit::EgressInfo* PROTOBUF_NONNULL mutable_egress_info();
  void set_allocated_egress_info(::livekit::EgressInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_egress_info(::livekit::EgressInfo* PROTOBUF_NULLABLE value);
  ::livekit::EgressInfo* PROTOBUF_NULLABLE unsafe_arena_release_egress_info();

  private:
  const ::livekit::EgressInfo& _internal_egress_info() const;
  ::livekit::EgressInfo* PROTOBUF_NONNULL _internal_mutable_egress_info();

  public:
  // .livekit.IngressInfo ingress_info = 10;
  bool has_ingress_info() const;
  void clear_ingress_info() ;
  const ::livekit::IngressInfo& ingress_info() const;
  [[nodiscard]] ::livekit::IngressInfo* PROTOBUF_NULLABLE release_ingress_info();
  ::livekit::IngressInfo* PROTOBUF_NONNULL mutable_ingress_info();
  void set_allocated_ingress_info(::livekit::IngressInfo* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_ingress_info(::livekit::IngressInfo* PROTOBUF_NULLABLE value);
  ::livekit::IngressInfo* PROTOBUF_NULLABLE unsafe_arena_release_ingress_info();

  private:
  const ::livekit::IngressInfo& _internal_ingress_info() const;
  ::livekit::IngressInfo* PROTOBUF_NONNULL _internal_mutable_ingress_info();

  public:
  // int64 created_at = 7;
  void clear_created_at() ;
  ::int64_t created_at() const;
  void set_created_at(::int64_t value);

  private:
  ::int64_t _internal_created_at() const;
  void _internal_set_created_at(::int64_t value);

  public:
  // int32 num_dropped = 11 [deprecated = true];
  [[deprecated]]  void clear_num_dropped() ;
  [[deprecated]] ::int32_t num_dropped() const;
  [[deprecated]] void set_num_dropped(::int32_t value);

  private:
  ::int32_t _internal_num_dropped() const;
  void _internal_set_num_dropped(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:livekit.WebhookEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9,
                                   5, 44,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const WebhookEvent& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr event_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::livekit::Room* PROTOBUF_NULLABLE room_;
    ::livekit::ParticipantInfo* PROTOBUF_NULLABLE participant_;
    ::livekit::TrackInfo* PROTOBUF_NULLABLE track_;
    ::livekit::EgressInfo* PROTOBUF_NULLABLE egress_info_;
    ::livekit::IngressInfo* PROTOBUF_NULLABLE ingress_info_;
    ::int64_t created_at_;
    ::int32_t num_dropped_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_livekit_5fwebhook_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull WebhookEvent_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WebhookEvent

// string event = 1;
inline void WebhookEvent::clear_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.event_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebhookEvent::event() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.event)
  return _internal_event();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void WebhookEvent::set_event(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.event)
}
inline std::string* PROTOBUF_NONNULL WebhookEvent::mutable_event()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.event)
  return _s;
}
inline const std::string& WebhookEvent::_internal_event() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.event_.Get();
}
inline void WebhookEvent::_internal_set_event(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE WebhookEvent::release_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.event)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.event_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.event_.Set("", GetArena());
  }
  return released;
}
inline void WebhookEvent::set_allocated_event(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.event_.IsDefault()) {
    _impl_.event_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.event)
}

// .livekit.Room room = 2;
inline bool WebhookEvent::has_room() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_ != nullptr);
  return value;
}
inline const ::livekit::Room& WebhookEvent::_internal_room() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::Room&>(::livekit::_Room_default_instance_);
}
inline const ::livekit::Room& WebhookEvent::room() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.room)
  return _internal_room();
}
inline void WebhookEvent::unsafe_arena_set_allocated_room(
    ::livekit::Room* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = reinterpret_cast<::livekit::Room*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.room)
}
inline ::livekit::Room* PROTOBUF_NULLABLE WebhookEvent::release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::Room* released = _impl_.room_;
  _impl_.room_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::Room* PROTOBUF_NULLABLE WebhookEvent::unsafe_arena_release_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.room)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::livekit::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::livekit::Room* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_room() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::Room>(GetArena());
    _impl_.room_ = reinterpret_cast<::livekit::Room*>(p);
  }
  return _impl_.room_;
}
inline ::livekit::Room* PROTOBUF_NONNULL WebhookEvent::mutable_room()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::livekit::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.room)
  return _msg;
}
inline void WebhookEvent::set_allocated_room(::livekit::Room* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.room_ = reinterpret_cast<::livekit::Room*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.room)
}

// .livekit.ParticipantInfo participant = 3;
inline bool WebhookEvent::has_participant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.participant_ != nullptr);
  return value;
}
inline const ::livekit::ParticipantInfo& WebhookEvent::_internal_participant() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::ParticipantInfo* p = _impl_.participant_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::ParticipantInfo&>(::livekit::_ParticipantInfo_default_instance_);
}
inline const ::livekit::ParticipantInfo& WebhookEvent::participant() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.participant)
  return _internal_participant();
}
inline void WebhookEvent::unsafe_arena_set_allocated_participant(
    ::livekit::ParticipantInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.participant_);
  }
  _impl_.participant_ = reinterpret_cast<::livekit::ParticipantInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.participant)
}
inline ::livekit::ParticipantInfo* PROTOBUF_NULLABLE WebhookEvent::release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::ParticipantInfo* released = _impl_.participant_;
  _impl_.participant_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::ParticipantInfo* PROTOBUF_NULLABLE WebhookEvent::unsafe_arena_release_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.participant)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::livekit::ParticipantInfo* temp = _impl_.participant_;
  _impl_.participant_ = nullptr;
  return temp;
}
inline ::livekit::ParticipantInfo* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_participant() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.participant_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::ParticipantInfo>(GetArena());
    _impl_.participant_ = reinterpret_cast<::livekit::ParticipantInfo*>(p);
  }
  return _impl_.participant_;
}
inline ::livekit::ParticipantInfo* PROTOBUF_NONNULL WebhookEvent::mutable_participant()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::livekit::ParticipantInfo* _msg = _internal_mutable_participant();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.participant)
  return _msg;
}
inline void WebhookEvent::set_allocated_participant(::livekit::ParticipantInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.participant_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.participant_ = reinterpret_cast<::livekit::ParticipantInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.participant)
}

// .livekit.EgressInfo egress_info = 9;
inline bool WebhookEvent::has_egress_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.egress_info_ != nullptr);
  return value;
}
inline const ::livekit::EgressInfo& WebhookEvent::_internal_egress_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::EgressInfo* p = _impl_.egress_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::EgressInfo&>(::livekit::_EgressInfo_default_instance_);
}
inline const ::livekit::EgressInfo& WebhookEvent::egress_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.egress_info)
  return _internal_egress_info();
}
inline void WebhookEvent::unsafe_arena_set_allocated_egress_info(
    ::livekit::EgressInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.egress_info_);
  }
  _impl_.egress_info_ = reinterpret_cast<::livekit::EgressInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.egress_info)
}
inline ::livekit::EgressInfo* PROTOBUF_NULLABLE WebhookEvent::release_egress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::EgressInfo* released = _impl_.egress_info_;
  _impl_.egress_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::EgressInfo* PROTOBUF_NULLABLE WebhookEvent::unsafe_arena_release_egress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.egress_info)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::livekit::EgressInfo* temp = _impl_.egress_info_;
  _impl_.egress_info_ = nullptr;
  return temp;
}
inline ::livekit::EgressInfo* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_egress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.egress_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::EgressInfo>(GetArena());
    _impl_.egress_info_ = reinterpret_cast<::livekit::EgressInfo*>(p);
  }
  return _impl_.egress_info_;
}
inline ::livekit::EgressInfo* PROTOBUF_NONNULL WebhookEvent::mutable_egress_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::livekit::EgressInfo* _msg = _internal_mutable_egress_info();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.egress_info)
  return _msg;
}
inline void WebhookEvent::set_allocated_egress_info(::livekit::EgressInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.egress_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.egress_info_ = reinterpret_cast<::livekit::EgressInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.egress_info)
}

// .livekit.IngressInfo ingress_info = 10;
inline bool WebhookEvent::has_ingress_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ingress_info_ != nullptr);
  return value;
}
inline const ::livekit::IngressInfo& WebhookEvent::_internal_ingress_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::IngressInfo* p = _impl_.ingress_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::IngressInfo&>(::livekit::_IngressInfo_default_instance_);
}
inline const ::livekit::IngressInfo& WebhookEvent::ingress_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.ingress_info)
  return _internal_ingress_info();
}
inline void WebhookEvent::unsafe_arena_set_allocated_ingress_info(
    ::livekit::IngressInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingress_info_);
  }
  _impl_.ingress_info_ = reinterpret_cast<::livekit::IngressInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.ingress_info)
}
inline ::livekit::IngressInfo* PROTOBUF_NULLABLE WebhookEvent::release_ingress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::livekit::IngressInfo* released = _impl_.ingress_info_;
  _impl_.ingress_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::IngressInfo* PROTOBUF_NULLABLE WebhookEvent::unsafe_arena_release_ingress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.ingress_info)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::livekit::IngressInfo* temp = _impl_.ingress_info_;
  _impl_.ingress_info_ = nullptr;
  return temp;
}
inline ::livekit::IngressInfo* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_ingress_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ingress_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::IngressInfo>(GetArena());
    _impl_.ingress_info_ = reinterpret_cast<::livekit::IngressInfo*>(p);
  }
  return _impl_.ingress_info_;
}
inline ::livekit::IngressInfo* PROTOBUF_NONNULL WebhookEvent::mutable_ingress_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::livekit::IngressInfo* _msg = _internal_mutable_ingress_info();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.ingress_info)
  return _msg;
}
inline void WebhookEvent::set_allocated_ingress_info(::livekit::IngressInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ingress_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.ingress_info_ = reinterpret_cast<::livekit::IngressInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.ingress_info)
}

// .livekit.TrackInfo track = 8;
inline bool WebhookEvent::has_track() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.track_ != nullptr);
  return value;
}
inline const ::livekit::TrackInfo& WebhookEvent::_internal_track() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::livekit::TrackInfo* p = _impl_.track_;
  return p != nullptr ? *p : reinterpret_cast<const ::livekit::TrackInfo&>(::livekit::_TrackInfo_default_instance_);
}
inline const ::livekit::TrackInfo& WebhookEvent::track() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.track)
  return _internal_track();
}
inline void WebhookEvent::unsafe_arena_set_allocated_track(
    ::livekit::TrackInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.track_);
  }
  _impl_.track_ = reinterpret_cast<::livekit::TrackInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:livekit.WebhookEvent.track)
}
inline ::livekit::TrackInfo* PROTOBUF_NULLABLE WebhookEvent::release_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::livekit::TrackInfo* released = _impl_.track_;
  _impl_.track_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::livekit::TrackInfo* PROTOBUF_NULLABLE WebhookEvent::unsafe_arena_release_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.track)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::livekit::TrackInfo* temp = _impl_.track_;
  _impl_.track_ = nullptr;
  return temp;
}
inline ::livekit::TrackInfo* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_track() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.track_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::livekit::TrackInfo>(GetArena());
    _impl_.track_ = reinterpret_cast<::livekit::TrackInfo*>(p);
  }
  return _impl_.track_;
}
inline ::livekit::TrackInfo* PROTOBUF_NONNULL WebhookEvent::mutable_track()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::livekit::TrackInfo* _msg = _internal_mutable_track();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.track)
  return _msg;
}
inline void WebhookEvent::set_allocated_track(::livekit::TrackInfo* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.track_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.track_ = reinterpret_cast<::livekit::TrackInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.track)
}

// string id = 6;
inline void WebhookEvent::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebhookEvent::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void WebhookEvent::set_id(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.id)
}
inline std::string* PROTOBUF_NONNULL WebhookEvent::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:livekit.WebhookEvent.id)
  return _s;
}
inline const std::string& WebhookEvent::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void WebhookEvent::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL WebhookEvent::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE WebhookEvent::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:livekit.WebhookEvent.id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.id_.Set("", GetArena());
  }
  return released;
}
inline void WebhookEvent::set_allocated_id(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.WebhookEvent.id)
}

// int64 created_at = 7;
inline void WebhookEvent::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t WebhookEvent::created_at() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.created_at)
  return _internal_created_at();
}
inline void WebhookEvent::set_created_at(::int64_t value) {
  _internal_set_created_at(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.created_at)
}
inline ::int64_t WebhookEvent::_internal_created_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.created_at_;
}
inline void WebhookEvent::_internal_set_created_at(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.created_at_ = value;
}

// int32 num_dropped = 11 [deprecated = true];
inline void WebhookEvent::clear_num_dropped() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_dropped_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t WebhookEvent::num_dropped() const {
  // @@protoc_insertion_point(field_get:livekit.WebhookEvent.num_dropped)
  return _internal_num_dropped();
}
inline void WebhookEvent::set_num_dropped(::int32_t value) {
  _internal_set_num_dropped(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:livekit.WebhookEvent.num_dropped)
}
inline ::int32_t WebhookEvent::_internal_num_dropped() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_dropped_;
}
inline void WebhookEvent::_internal_set_num_dropped(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_dropped_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // livekit_5fwebhook_2eproto_2epb_2eh
