// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: livekit_ingress.proto
// Protobuf C++ Version: 6.30.1

#include "livekit_ingress.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace livekit {

inline constexpr ListIngressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ingress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ListIngressRequest::ListIngressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ListIngressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListIngressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListIngressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListIngressRequestDefaultTypeInternal() {}
  union {
    ListIngressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListIngressRequestDefaultTypeInternal _ListIngressRequest_default_instance_;

inline constexpr InputVideoState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        average_bitrate_{0u},
        width_{0u},
        framerate_{0},
        height_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR InputVideoState::InputVideoState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(InputVideoState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InputVideoStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputVideoStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputVideoStateDefaultTypeInternal() {}
  union {
    InputVideoState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputVideoStateDefaultTypeInternal _InputVideoState_default_instance_;

inline constexpr InputAudioState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mime_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        average_bitrate_{0u},
        channels_{0u},
        sample_rate_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR InputAudioState::InputAudioState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(InputAudioState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InputAudioStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputAudioStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputAudioStateDefaultTypeInternal() {}
  union {
    InputAudioState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputAudioStateDefaultTypeInternal _InputAudioState_default_instance_;

inline constexpr IngressAudioEncodingOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_codec_{static_cast< ::livekit::AudioCodec >(0)},
        bitrate_{0u},
        disable_dtx_{false},
        channels_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR IngressAudioEncodingOptions::IngressAudioEncodingOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressAudioEncodingOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressAudioEncodingOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressAudioEncodingOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressAudioEncodingOptionsDefaultTypeInternal() {}
  union {
    IngressAudioEncodingOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressAudioEncodingOptionsDefaultTypeInternal _IngressAudioEncodingOptions_default_instance_;

inline constexpr DeleteIngressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ingress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR DeleteIngressRequest::DeleteIngressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DeleteIngressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeleteIngressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteIngressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteIngressRequestDefaultTypeInternal() {}
  union {
    DeleteIngressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteIngressRequestDefaultTypeInternal _DeleteIngressRequest_default_instance_;

inline constexpr IngressVideoEncodingOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        layers_{},
        frame_rate_{0},
        video_codec_{static_cast< ::livekit::VideoCodec >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR IngressVideoEncodingOptions::IngressVideoEncodingOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressVideoEncodingOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressVideoEncodingOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressVideoEncodingOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressVideoEncodingOptionsDefaultTypeInternal() {}
  union {
    IngressVideoEncodingOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressVideoEncodingOptionsDefaultTypeInternal _IngressVideoEncodingOptions_default_instance_;

inline constexpr IngressAudioOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_{static_cast< ::livekit::TrackSource >(0)},
        encoding_options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR IngressAudioOptions::IngressAudioOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressAudioOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressAudioOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressAudioOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressAudioOptionsDefaultTypeInternal() {}
  union {
    IngressAudioOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressAudioOptionsDefaultTypeInternal _IngressAudioOptions_default_instance_;

inline constexpr IngressVideoOptions::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_{static_cast< ::livekit::TrackSource >(0)},
        encoding_options_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR IngressVideoOptions::IngressVideoOptions(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressVideoOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressVideoOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressVideoOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressVideoOptionsDefaultTypeInternal() {}
  union {
    IngressVideoOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressVideoOptionsDefaultTypeInternal _IngressVideoOptions_default_instance_;

inline constexpr UpdateIngressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ingress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_{nullptr},
        video_{nullptr},
        bypass_transcoding_{false},
        enable_transcoding_{false},
        enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateIngressRequest::UpdateIngressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(UpdateIngressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateIngressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateIngressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateIngressRequestDefaultTypeInternal() {}
  union {
    UpdateIngressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateIngressRequestDefaultTypeInternal _UpdateIngressRequest_default_instance_;

inline constexpr IngressState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tracks_{},
        error_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resource_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        video_{nullptr},
        audio_{nullptr},
        started_at_{::int64_t{0}},
        ended_at_{::int64_t{0}},
        updated_at_{::int64_t{0}},
        status_{static_cast< ::livekit::IngressState_Status >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR IngressState::IngressState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressStateDefaultTypeInternal() {}
  union {
    IngressState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressStateDefaultTypeInternal _IngressState_default_instance_;

inline constexpr CreateIngressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_{nullptr},
        video_{nullptr},
        input_type_{static_cast< ::livekit::IngressInput >(0)},
        bypass_transcoding_{false},
        enable_transcoding_{false},
        enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CreateIngressRequest::CreateIngressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CreateIngressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateIngressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateIngressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateIngressRequestDefaultTypeInternal() {}
  union {
    CreateIngressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateIngressRequestDefaultTypeInternal _CreateIngressRequest_default_instance_;

inline constexpr IngressInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ingress_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stream_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        participant_metadata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        audio_{nullptr},
        video_{nullptr},
        state_{nullptr},
        input_type_{static_cast< ::livekit::IngressInput >(0)},
        bypass_transcoding_{false},
        enable_transcoding_{false},
        reusable_{false},
        enabled_{false} {}

template <typename>
PROTOBUF_CONSTEXPR IngressInfo::IngressInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(IngressInfo_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IngressInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IngressInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IngressInfoDefaultTypeInternal() {}
  union {
    IngressInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IngressInfoDefaultTypeInternal _IngressInfo_default_instance_;

inline constexpr ListIngressResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : items_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ListIngressResponse::ListIngressResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ListIngressResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListIngressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListIngressResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListIngressResponseDefaultTypeInternal() {}
  union {
    ListIngressResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListIngressResponseDefaultTypeInternal _ListIngressResponse_default_instance_;
}  // namespace livekit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_livekit_5fingress_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_livekit_5fingress_2eproto = nullptr;
const ::uint32_t
    TableStruct_livekit_5fingress_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.input_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.participant_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.participant_metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.bypass_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.enable_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.video_),
        PROTOBUF_FIELD_OFFSET(::livekit::CreateIngressRequest, _impl_.enabled_),
        8,
        4,
        0,
        1,
        2,
        3,
        5,
        9,
        10,
        6,
        7,
        11,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_.source_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_.encoding_options_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_.source_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_.encoding_options_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _impl_.audio_codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _impl_.bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _impl_.disable_dtx_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioEncodingOptions, _impl_.channels_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoEncodingOptions, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoEncodingOptions, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoEncodingOptions, _impl_.video_codec_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoEncodingOptions, _impl_.frame_rate_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoEncodingOptions, _impl_.layers_),
        1,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.ingress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.stream_key_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.url_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.input_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.bypass_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.enable_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.video_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.participant_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.participant_metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.reusable_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressInfo, _impl_.enabled_),
        0,
        1,
        2,
        3,
        11,
        12,
        13,
        8,
        9,
        4,
        5,
        6,
        7,
        14,
        10,
        15,
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.error_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.video_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.ended_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.updated_at_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.resource_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::IngressState, _impl_.tracks_),
        8,
        0,
        3,
        4,
        1,
        5,
        6,
        7,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_.average_bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_.width_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_.height_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputVideoState, _impl_.framerate_),
        0,
        1,
        2,
        4,
        3,
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _impl_.mime_type_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _impl_.average_bitrate_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _impl_.channels_),
        PROTOBUF_FIELD_OFFSET(::livekit::InputAudioState, _impl_.sample_rate_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.ingress_id_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.participant_identity_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.participant_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.participant_metadata_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.bypass_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.enable_transcoding_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.video_),
        PROTOBUF_FIELD_OFFSET(::livekit::UpdateIngressRequest, _impl_.enabled_),
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        6,
        7,
        10,
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressRequest, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressRequest, _impl_.ingress_id_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::ListIngressResponse, _impl_.items_),
        PROTOBUF_FIELD_OFFSET(::livekit::DeleteIngressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::livekit::DeleteIngressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::livekit::DeleteIngressRequest, _impl_.ingress_id_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 20, -1, sizeof(::livekit::CreateIngressRequest)},
        {32, 45, -1, sizeof(::livekit::IngressAudioOptions)},
        {49, 62, -1, sizeof(::livekit::IngressVideoOptions)},
        {66, 78, -1, sizeof(::livekit::IngressAudioEncodingOptions)},
        {82, 93, -1, sizeof(::livekit::IngressVideoEncodingOptions)},
        {96, 120, -1, sizeof(::livekit::IngressInfo)},
        {136, 154, -1, sizeof(::livekit::IngressState)},
        {164, 177, -1, sizeof(::livekit::InputVideoState)},
        {182, 194, -1, sizeof(::livekit::InputAudioState)},
        {198, 217, -1, sizeof(::livekit::UpdateIngressRequest)},
        {228, 238, -1, sizeof(::livekit::ListIngressRequest)},
        {240, -1, -1, sizeof(::livekit::ListIngressResponse)},
        {249, 258, -1, sizeof(::livekit::DeleteIngressRequest)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::livekit::_CreateIngressRequest_default_instance_._instance,
    &::livekit::_IngressAudioOptions_default_instance_._instance,
    &::livekit::_IngressVideoOptions_default_instance_._instance,
    &::livekit::_IngressAudioEncodingOptions_default_instance_._instance,
    &::livekit::_IngressVideoEncodingOptions_default_instance_._instance,
    &::livekit::_IngressInfo_default_instance_._instance,
    &::livekit::_IngressState_default_instance_._instance,
    &::livekit::_InputVideoState_default_instance_._instance,
    &::livekit::_InputAudioState_default_instance_._instance,
    &::livekit::_UpdateIngressRequest_default_instance_._instance,
    &::livekit::_ListIngressRequest_default_instance_._instance,
    &::livekit::_ListIngressResponse_default_instance_._instance,
    &::livekit::_DeleteIngressRequest_default_instance_._instance,
};
const char descriptor_table_protodef_livekit_5fingress_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025livekit_ingress.proto\022\007livekit\032\024liveki"
    "t_models.proto\"\231\003\n\024CreateIngressRequest\022"
    ")\n\ninput_type\030\001 \001(\0162\025.livekit.IngressInp"
    "ut\022\013\n\003url\030\t \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\troom_na"
    "me\030\003 \001(\t\022\034\n\024participant_identity\030\004 \001(\t\022\030"
    "\n\020participant_name\030\005 \001(\t\022\034\n\024participant_"
    "metadata\030\n \001(\t\022\036\n\022bypass_transcoding\030\010 \001"
    "(\010B\002\030\001\022\037\n\022enable_transcoding\030\013 \001(\010H\000\210\001\001\022"
    "+\n\005audio\030\006 \001(\0132\034.livekit.IngressAudioOpt"
    "ions\022+\n\005video\030\007 \001(\0132\034.livekit.IngressVid"
    "eoOptions\022\024\n\007enabled\030\014 \001(\010H\001\210\001\001B\025\n\023_enab"
    "le_transcodingB\n\n\010_enabled\"\315\001\n\023IngressAu"
    "dioOptions\022\014\n\004name\030\001 \001(\t\022$\n\006source\030\002 \001(\016"
    "2\024.livekit.TrackSource\0225\n\006preset\030\003 \001(\0162#"
    ".livekit.IngressAudioEncodingPresetH\000\0227\n"
    "\007options\030\004 \001(\0132$.livekit.IngressAudioEnc"
    "odingOptionsH\000B\022\n\020encoding_options\"\315\001\n\023I"
    "ngressVideoOptions\022\014\n\004name\030\001 \001(\t\022$\n\006sour"
    "ce\030\002 \001(\0162\024.livekit.TrackSource\0225\n\006preset"
    "\030\003 \001(\0162#.livekit.IngressVideoEncodingPre"
    "setH\000\0227\n\007options\030\004 \001(\0132$.livekit.Ingress"
    "VideoEncodingOptionsH\000B\022\n\020encoding_optio"
    "ns\"\177\n\033IngressAudioEncodingOptions\022(\n\013aud"
    "io_codec\030\001 \001(\0162\023.livekit.AudioCodec\022\017\n\007b"
    "itrate\030\002 \001(\r\022\023\n\013disable_dtx\030\003 \001(\010\022\020\n\010cha"
    "nnels\030\004 \001(\r\"\200\001\n\033IngressVideoEncodingOpti"
    "ons\022(\n\013video_codec\030\001 \001(\0162\023.livekit.Video"
    "Codec\022\022\n\nframe_rate\030\002 \001(\001\022#\n\006layers\030\003 \003("
    "\0132\023.livekit.VideoLayer\"\360\003\n\013IngressInfo\022\022"
    "\n\ningress_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\nstre"
    "am_key\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\022)\n\ninput_type\030"
    "\005 \001(\0162\025.livekit.IngressInput\022\036\n\022bypass_t"
    "ranscoding\030\r \001(\010B\002\030\001\022\037\n\022enable_transcodi"
    "ng\030\017 \001(\010H\000\210\001\001\022+\n\005audio\030\006 \001(\0132\034.livekit.I"
    "ngressAudioOptions\022+\n\005video\030\007 \001(\0132\034.live"
    "kit.IngressVideoOptions\022\021\n\troom_name\030\010 \001"
    "(\t\022\034\n\024participant_identity\030\t \001(\t\022\030\n\020part"
    "icipant_name\030\n \001(\t\022\034\n\024participant_metada"
    "ta\030\016 \001(\t\022\020\n\010reusable\030\013 \001(\010\022$\n\005state\030\014 \001("
    "\0132\025.livekit.IngressState\022\024\n\007enabled\030\020 \001("
    "\010H\001\210\001\001B\025\n\023_enable_transcodingB\n\n\010_enable"
    "d\"\236\003\n\014IngressState\022,\n\006status\030\001 \001(\0162\034.liv"
    "ekit.IngressState.Status\022\r\n\005error\030\002 \001(\t\022"
    "\'\n\005video\030\003 \001(\0132\030.livekit.InputVideoState"
    "\022\'\n\005audio\030\004 \001(\0132\030.livekit.InputAudioStat"
    "e\022\017\n\007room_id\030\005 \001(\t\022\022\n\nstarted_at\030\007 \001(\003\022\020"
    "\n\010ended_at\030\010 \001(\003\022\022\n\nupdated_at\030\n \001(\003\022\023\n\013"
    "resource_id\030\t \001(\t\022\"\n\006tracks\030\006 \003(\0132\022.live"
    "kit.TrackInfo\"{\n\006Status\022\025\n\021ENDPOINT_INAC"
    "TIVE\020\000\022\026\n\022ENDPOINT_BUFFERING\020\001\022\027\n\023ENDPOI"
    "NT_PUBLISHING\020\002\022\022\n\016ENDPOINT_ERROR\020\003\022\025\n\021E"
    "NDPOINT_COMPLETE\020\004\"o\n\017InputVideoState\022\021\n"
    "\tmime_type\030\001 \001(\t\022\027\n\017average_bitrate\030\002 \001("
    "\r\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\022\021\n\tfram"
    "erate\030\005 \001(\001\"d\n\017InputAudioState\022\021\n\tmime_t"
    "ype\030\001 \001(\t\022\027\n\017average_bitrate\030\002 \001(\r\022\020\n\010ch"
    "annels\030\003 \001(\r\022\023\n\013sample_rate\030\004 \001(\r\"\221\003\n\024Up"
    "dateIngressRequest\022\022\n\ningress_id\030\001 \001(\t\022\014"
    "\n\004name\030\002 \001(\t\022\021\n\troom_name\030\003 \001(\t\022\034\n\024parti"
    "cipant_identity\030\004 \001(\t\022\030\n\020participant_nam"
    "e\030\005 \001(\t\022\034\n\024participant_metadata\030\t \001(\t\022#\n"
    "\022bypass_transcoding\030\010 \001(\010B\002\030\001H\000\210\001\001\022\037\n\022en"
    "able_transcoding\030\n \001(\010H\001\210\001\001\022+\n\005audio\030\006 \001"
    "(\0132\034.livekit.IngressAudioOptions\022+\n\005vide"
    "o\030\007 \001(\0132\034.livekit.IngressVideoOptions\022\024\n"
    "\007enabled\030\013 \001(\010H\002\210\001\001B\025\n\023_bypass_transcodi"
    "ngB\025\n\023_enable_transcodingB\n\n\010_enabled\";\n"
    "\022ListIngressRequest\022\021\n\troom_name\030\001 \001(\t\022\022"
    "\n\ningress_id\030\002 \001(\t\":\n\023ListIngressRespons"
    "e\022#\n\005items\030\001 \003(\0132\024.livekit.IngressInfo\"*"
    "\n\024DeleteIngressRequest\022\022\n\ningress_id\030\001 \001"
    "(\t*=\n\014IngressInput\022\016\n\nRTMP_INPUT\020\000\022\016\n\nWH"
    "IP_INPUT\020\001\022\r\n\tURL_INPUT\020\002*I\n\032IngressAudi"
    "oEncodingPreset\022\026\n\022OPUS_STEREO_96KBPS\020\000\022"
    "\023\n\017OPUS_MONO_64KBS\020\001*\204\003\n\032IngressVideoEnc"
    "odingPreset\022\034\n\030H264_720P_30FPS_3_LAYERS\020"
    "\000\022\035\n\031H264_1080P_30FPS_3_LAYERS\020\001\022\034\n\030H264"
    "_540P_25FPS_2_LAYERS\020\002\022\033\n\027H264_720P_30FP"
    "S_1_LAYER\020\003\022\034\n\030H264_1080P_30FPS_1_LAYER\020"
    "\004\022(\n$H264_720P_30FPS_3_LAYERS_HIGH_MOTIO"
    "N\020\005\022)\n%H264_1080P_30FPS_3_LAYERS_HIGH_MO"
    "TION\020\006\022(\n$H264_540P_25FPS_2_LAYERS_HIGH_"
    "MOTION\020\007\022\'\n#H264_720P_30FPS_1_LAYER_HIGH"
    "_MOTION\020\010\022(\n$H264_1080P_30FPS_1_LAYER_HI"
    "GH_MOTION\020\t2\245\002\n\007Ingress\022D\n\rCreateIngress"
    "\022\035.livekit.CreateIngressRequest\032\024.liveki"
    "t.IngressInfo\022D\n\rUpdateIngress\022\035.livekit"
    ".UpdateIngressRequest\032\024.livekit.IngressI"
    "nfo\022H\n\013ListIngress\022\033.livekit.ListIngress"
    "Request\032\034.livekit.ListIngressResponse\022D\n"
    "\rDeleteIngress\022\035.livekit.DeleteIngressRe"
    "quest\032\024.livekit.IngressInfoBFZ#github.co"
    "m/livekit/protocol/livekit\252\002\rLiveKit.Pro"
    "to\352\002\016LiveKit::Protob\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_livekit_5fingress_2eproto_deps[1] = {
        &::descriptor_table_livekit_5fmodels_2eproto,
};
static ::absl::once_flag descriptor_table_livekit_5fingress_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_livekit_5fingress_2eproto = {
    false,
    false,
    3747,
    descriptor_table_protodef_livekit_5fingress_2eproto,
    "livekit_ingress.proto",
    &descriptor_table_livekit_5fingress_2eproto_once,
    descriptor_table_livekit_5fingress_2eproto_deps,
    1,
    13,
    schemas,
    file_default_instances,
    TableStruct_livekit_5fingress_2eproto::offsets,
    file_level_enum_descriptors_livekit_5fingress_2eproto,
    file_level_service_descriptors_livekit_5fingress_2eproto,
};
namespace livekit {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL IngressState_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fingress_2eproto);
  return file_level_enum_descriptors_livekit_5fingress_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t IngressState_Status_internal_data_[] = {
    327680u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL IngressInput_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fingress_2eproto);
  return file_level_enum_descriptors_livekit_5fingress_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t IngressInput_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL IngressAudioEncodingPreset_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fingress_2eproto);
  return file_level_enum_descriptors_livekit_5fingress_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t IngressAudioEncodingPreset_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL IngressVideoEncodingPreset_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_livekit_5fingress_2eproto);
  return file_level_enum_descriptors_livekit_5fingress_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t IngressVideoEncodingPreset_internal_data_[] = {
    655360u, 0u, };
// ===================================================================

class CreateIngressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateIngressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_._has_bits_);
};

CreateIngressRequest::CreateIngressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.CreateIngressRequest)
}
PROTOBUF_NDEBUG_INLINE CreateIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::CreateIngressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        room_name_(arena, from.room_name_),
        participant_identity_(arena, from.participant_identity_),
        participant_name_(arena, from.participant_name_),
        url_(arena, from.url_),
        participant_metadata_(arena, from.participant_metadata_) {}

CreateIngressRequest::CreateIngressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CreateIngressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateIngressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.video_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, input_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, input_type_),
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, input_type_) +
               sizeof(Impl_::enabled_));

  // @@protoc_insertion_point(copy_constructor:livekit.CreateIngressRequest)
}
PROTOBUF_NDEBUG_INLINE CreateIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena),
        room_name_(arena),
        participant_identity_(arena),
        participant_name_(arena),
        url_(arena),
        participant_metadata_(arena) {}

inline void CreateIngressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::enabled_));
}
CreateIngressRequest::~CreateIngressRequest() {
  // @@protoc_insertion_point(destructor:livekit.CreateIngressRequest)
  SharedDtor(*this);
}
inline void CreateIngressRequest::SharedDtor(MessageLite& self) {
  CreateIngressRequest& this_ = static_cast<CreateIngressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.room_name_.Destroy();
  this_._impl_.participant_identity_.Destroy();
  this_._impl_.participant_name_.Destroy();
  this_._impl_.url_.Destroy();
  this_._impl_.participant_metadata_.Destroy();
  delete this_._impl_.audio_;
  delete this_._impl_.video_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CreateIngressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CreateIngressRequest(arena);
}
constexpr auto CreateIngressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CreateIngressRequest),
                                            alignof(CreateIngressRequest));
}
constexpr auto CreateIngressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CreateIngressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CreateIngressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CreateIngressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CreateIngressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CreateIngressRequest>(), &CreateIngressRequest::ByteSizeLong,
              &CreateIngressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_._cached_size_),
          false,
      },
      &CreateIngressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CreateIngressRequest_class_data_ =
            CreateIngressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CreateIngressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CreateIngressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CreateIngressRequest_class_data_.tc_table);
  return CreateIngressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 117, 2>
CreateIngressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CreateIngressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::CreateIngressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.IngressInput input_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CreateIngressRequest, _impl_.input_type_), 8>(),
     {8, 8, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.input_type_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.name_)}},
    // string room_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.room_name_)}},
    // string participant_identity = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_identity_)}},
    // string participant_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 3, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_name_)}},
    // .livekit.IngressAudioOptions audio = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 6, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.audio_)}},
    // .livekit.IngressVideoOptions video = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 7, 1, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.video_)}},
    // bool bypass_transcoding = 8 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CreateIngressRequest, _impl_.bypass_transcoding_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.bypass_transcoding_)}},
    // string url = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 4, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.url_)}},
    // string participant_metadata = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 5, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_metadata_)}},
    // optional bool enable_transcoding = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CreateIngressRequest, _impl_.enable_transcoding_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.enable_transcoding_)}},
    // optional bool enabled = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CreateIngressRequest, _impl_.enabled_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.IngressInput input_type = 1;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.input_type_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string room_name = 3;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_identity = 4;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_identity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_name = 5;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_name_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.IngressAudioOptions audio = 6;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.audio_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.IngressVideoOptions video = 7;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.video_), _Internal::kHasBitsOffset + 7, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool bypass_transcoding = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.bypass_transcoding_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string url = 9;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.url_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_metadata = 10;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.participant_metadata_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_transcoding = 11;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.enable_transcoding_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enabled = 12;
    {PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.enabled_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressAudioOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::IngressVideoOptions>()},
  }},
  {{
    "\34\0\4\11\24\20\0\0\0\3\24\0\0\0\0\0"
    "livekit.CreateIngressRequest"
    "name"
    "room_name"
    "participant_identity"
    "participant_name"
    "url"
    "participant_metadata"
  }},
};
PROTOBUF_NOINLINE void CreateIngressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.CreateIngressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.participant_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.participant_metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    ::memset(&_impl_.input_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.input_type_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CreateIngressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CreateIngressRequest& this_ = static_cast<const CreateIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CreateIngressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CreateIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.CreateIngressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.IngressInput input_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_input_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_input_type(), target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string room_name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.room_name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string participant_identity = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.participant_identity");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string participant_name = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_participant_name().empty()) {
      const std::string& _s = this_._internal_participant_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.participant_name");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.IngressAudioOptions audio = 6;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .livekit.IngressVideoOptions video = 7;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.video_, this_._impl_.video_->GetCachedSize(), target,
        stream);
  }

  // bool bypass_transcoding = 8 [deprecated = true];
  if ((cached_has_bits & 0x00000200u) != 0) {
    if (this_._internal_bypass_transcoding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_bypass_transcoding(), target);
    }
  }

  // string url = 9;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.url");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // string participant_metadata = 10;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_participant_metadata().empty()) {
      const std::string& _s = this_._internal_participant_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.CreateIngressRequest.participant_metadata");
      target = stream->WriteStringMaybeAliased(10, _s, target);
    }
  }

  // optional bool enable_transcoding = 11;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this_._internal_enable_transcoding(), target);
  }

  // optional bool enabled = 12;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this_._internal_enabled(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.CreateIngressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CreateIngressRequest::ByteSizeLong(const MessageLite& base) {
  const CreateIngressRequest& this_ = static_cast<const CreateIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CreateIngressRequest::ByteSizeLong() const {
  const CreateIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.CreateIngressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000c00u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string name = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string room_name = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string participant_identity = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // string participant_name = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_participant_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_name());
      }
    }
    // string url = 9;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // string participant_metadata = 10;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_participant_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_metadata());
      }
    }
    // .livekit.IngressAudioOptions audio = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .livekit.IngressVideoOptions video = 7;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.video_);
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // .livekit.IngressInput input_type = 1;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_input_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_input_type());
      }
    }
    // bool bypass_transcoding = 8 [deprecated = true];
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_bypass_transcoding() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CreateIngressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateIngressRequest*>(&to_msg);
  auto& from = static_cast<const CreateIngressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.CreateIngressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_participant_name().empty()) {
        _this->_internal_set_participant_name(from._internal_participant_name());
      } else {
        if (_this->_impl_.participant_name_.IsDefault()) {
          _this->_internal_set_participant_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_participant_metadata().empty()) {
        _this->_internal_set_participant_metadata(from._internal_participant_metadata());
      } else {
        if (_this->_impl_.participant_metadata_.IsDefault()) {
          _this->_internal_set_participant_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.video_ != nullptr);
      if (_this->_impl_.video_ == nullptr) {
        _this->_impl_.video_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_);
      } else {
        _this->_impl_.video_->MergeFrom(*from._impl_.video_);
      }
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_input_type() != 0) {
        _this->_impl_.input_type_ = from._impl_.input_type_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_bypass_transcoding() != 0) {
        _this->_impl_.bypass_transcoding_ = from._impl_.bypass_transcoding_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.enable_transcoding_ = from._impl_.enable_transcoding_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIngressRequest::CopyFrom(const CreateIngressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.CreateIngressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateIngressRequest::InternalSwap(CreateIngressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_name_, &other->_impl_.participant_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_metadata_, &other->_impl_.participant_metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.enabled_)
      + sizeof(CreateIngressRequest::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(CreateIngressRequest, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata CreateIngressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressAudioOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressAudioOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::IngressAudioOptions, _impl_._oneof_case_);
};

void IngressAudioOptions::set_allocated_options(::livekit::IngressAudioEncodingOptions* PROTOBUF_NULLABLE options) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_encoding_options();
  if (options) {
    ::google::protobuf::Arena* submessage_arena = options->GetArena();
    if (message_arena != submessage_arena) {
      options = ::google::protobuf::internal::GetOwnedMessage(message_arena, options, submessage_arena);
    }
    set_has_options();
    _impl_.encoding_options_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.IngressAudioOptions.options)
}
IngressAudioOptions::IngressAudioOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressAudioOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressAudioOptions)
}
PROTOBUF_NDEBUG_INLINE IngressAudioOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::IngressAudioOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        encoding_options_{},
        _oneof_case_{from._oneof_case_[0]} {}

IngressAudioOptions::IngressAudioOptions(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IngressAudioOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressAudioOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IngressAudioOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.source_ = from._impl_.source_;
  switch (encoding_options_case()) {
    case ENCODING_OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.encoding_options_.preset_ = from._impl_.encoding_options_.preset_;
        break;
      case kOptions:
        _impl_.encoding_options_.options_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.encoding_options_.options_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.IngressAudioOptions)
}
PROTOBUF_NDEBUG_INLINE IngressAudioOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena),
        encoding_options_{},
        _oneof_case_{} {}

inline void IngressAudioOptions::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.source_ = {};
}
IngressAudioOptions::~IngressAudioOptions() {
  // @@protoc_insertion_point(destructor:livekit.IngressAudioOptions)
  SharedDtor(*this);
}
inline void IngressAudioOptions::SharedDtor(MessageLite& self) {
  IngressAudioOptions& this_ = static_cast<IngressAudioOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  if (this_.has_encoding_options()) {
    this_.clear_encoding_options();
  }
  this_._impl_.~Impl_();
}

void IngressAudioOptions::clear_encoding_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.IngressAudioOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (encoding_options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kOptions: {
      if (GetArena() == nullptr) {
        delete _impl_.encoding_options_.options_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.encoding_options_.options_);
      }
      break;
    }
    case ENCODING_OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENCODING_OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL IngressAudioOptions::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressAudioOptions(arena);
}
constexpr auto IngressAudioOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IngressAudioOptions),
                                            alignof(IngressAudioOptions));
}
constexpr auto IngressAudioOptions::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressAudioOptions_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressAudioOptions::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressAudioOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressAudioOptions::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressAudioOptions>(), &IngressAudioOptions::ByteSizeLong,
              &IngressAudioOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_._cached_size_),
          false,
      },
      &IngressAudioOptions::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressAudioOptions_class_data_ =
            IngressAudioOptions::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressAudioOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressAudioOptions_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressAudioOptions_class_data_.tc_table);
  return IngressAudioOptions_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 1, 40, 2>
IngressAudioOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IngressAudioOptions_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressAudioOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.TrackSource source = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressAudioOptions, _impl_.source_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.source_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackSource source = 2;
    {PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.source_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.IngressAudioEncodingPreset preset = 3;
    {PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.encoding_options_.preset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.IngressAudioEncodingOptions options = 4;
    {PROTOBUF_FIELD_OFFSET(IngressAudioOptions, _impl_.encoding_options_.options_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressAudioEncodingOptions>()},
  }},
  {{
    "\33\4\0\0\0\0\0\0"
    "livekit.IngressAudioOptions"
    "name"
  }},
};
PROTOBUF_NOINLINE void IngressAudioOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressAudioOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.source_ = 0;
  clear_encoding_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressAudioOptions::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressAudioOptions& this_ = static_cast<const IngressAudioOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressAudioOptions::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressAudioOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressAudioOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressAudioOptions.name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.TrackSource source = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_source() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_source(), target);
    }
  }

  switch (this_.encoding_options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_preset(), target);
      break;
    }
    case kOptions: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.encoding_options_.options_, this_._impl_.encoding_options_.options_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressAudioOptions)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressAudioOptions::ByteSizeLong(const MessageLite& base) {
  const IngressAudioOptions& this_ = static_cast<const IngressAudioOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressAudioOptions::ByteSizeLong() const {
  const IngressAudioOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressAudioOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // .livekit.TrackSource source = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_source() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_source());
      }
    }
  }
  switch (this_.encoding_options_case()) {
    // .livekit.IngressAudioEncodingPreset preset = 3;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.IngressAudioEncodingOptions options = 4;
    case kOptions: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.encoding_options_.options_);
      break;
    }
    case ENCODING_OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressAudioOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressAudioOptions*>(&to_msg);
  auto& from = static_cast<const IngressAudioOptions&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressAudioOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_source() != 0) {
        _this->_impl_.source_ = from._impl_.source_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_encoding_options();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.encoding_options_.preset_ = from._impl_.encoding_options_.preset_;
        break;
      }
      case kOptions: {
        if (oneof_needs_init) {
          _this->_impl_.encoding_options_.options_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.encoding_options_.options_);
        } else {
          _this->_impl_.encoding_options_.options_->MergeFrom(*from._impl_.encoding_options_.options_);
        }
        break;
      }
      case ENCODING_OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressAudioOptions::CopyFrom(const IngressAudioOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressAudioOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressAudioOptions::InternalSwap(IngressAudioOptions* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_.encoding_options_, other->_impl_.encoding_options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata IngressAudioOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressVideoOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressVideoOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::livekit::IngressVideoOptions, _impl_._oneof_case_);
};

void IngressVideoOptions::set_allocated_options(::livekit::IngressVideoEncodingOptions* PROTOBUF_NULLABLE options) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_encoding_options();
  if (options) {
    ::google::protobuf::Arena* submessage_arena = options->GetArena();
    if (message_arena != submessage_arena) {
      options = ::google::protobuf::internal::GetOwnedMessage(message_arena, options, submessage_arena);
    }
    set_has_options();
    _impl_.encoding_options_.options_ = options;
  }
  // @@protoc_insertion_point(field_set_allocated:livekit.IngressVideoOptions.options)
}
IngressVideoOptions::IngressVideoOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressVideoOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressVideoOptions)
}
PROTOBUF_NDEBUG_INLINE IngressVideoOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::IngressVideoOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        encoding_options_{},
        _oneof_case_{from._oneof_case_[0]} {}

IngressVideoOptions::IngressVideoOptions(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IngressVideoOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressVideoOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IngressVideoOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.source_ = from._impl_.source_;
  switch (encoding_options_case()) {
    case ENCODING_OPTIONS_NOT_SET:
      break;
      case kPreset:
        _impl_.encoding_options_.preset_ = from._impl_.encoding_options_.preset_;
        break;
      case kOptions:
        _impl_.encoding_options_.options_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.encoding_options_.options_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:livekit.IngressVideoOptions)
}
PROTOBUF_NDEBUG_INLINE IngressVideoOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena),
        encoding_options_{},
        _oneof_case_{} {}

inline void IngressVideoOptions::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.source_ = {};
}
IngressVideoOptions::~IngressVideoOptions() {
  // @@protoc_insertion_point(destructor:livekit.IngressVideoOptions)
  SharedDtor(*this);
}
inline void IngressVideoOptions::SharedDtor(MessageLite& self) {
  IngressVideoOptions& this_ = static_cast<IngressVideoOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  if (this_.has_encoding_options()) {
    this_.clear_encoding_options();
  }
  this_._impl_.~Impl_();
}

void IngressVideoOptions::clear_encoding_options() {
// @@protoc_insertion_point(one_of_clear_start:livekit.IngressVideoOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (encoding_options_case()) {
    case kPreset: {
      // No need to clear
      break;
    }
    case kOptions: {
      if (GetArena() == nullptr) {
        delete _impl_.encoding_options_.options_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.encoding_options_.options_);
      }
      break;
    }
    case ENCODING_OPTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENCODING_OPTIONS_NOT_SET;
}


inline void* PROTOBUF_NONNULL IngressVideoOptions::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressVideoOptions(arena);
}
constexpr auto IngressVideoOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IngressVideoOptions),
                                            alignof(IngressVideoOptions));
}
constexpr auto IngressVideoOptions::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressVideoOptions_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressVideoOptions::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressVideoOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressVideoOptions::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressVideoOptions>(), &IngressVideoOptions::ByteSizeLong,
              &IngressVideoOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_._cached_size_),
          false,
      },
      &IngressVideoOptions::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressVideoOptions_class_data_ =
            IngressVideoOptions::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressVideoOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressVideoOptions_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressVideoOptions_class_data_.tc_table);
  return IngressVideoOptions_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 1, 40, 2>
IngressVideoOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_._has_bits_),
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IngressVideoOptions_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressVideoOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .livekit.TrackSource source = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressVideoOptions, _impl_.source_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.source_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.TrackSource source = 2;
    {PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.source_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.IngressVideoEncodingPreset preset = 3;
    {PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.encoding_options_.preset_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // .livekit.IngressVideoEncodingOptions options = 4;
    {PROTOBUF_FIELD_OFFSET(IngressVideoOptions, _impl_.encoding_options_.options_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressVideoEncodingOptions>()},
  }},
  {{
    "\33\4\0\0\0\0\0\0"
    "livekit.IngressVideoOptions"
    "name"
  }},
};
PROTOBUF_NOINLINE void IngressVideoOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressVideoOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.source_ = 0;
  clear_encoding_options();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressVideoOptions::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressVideoOptions& this_ = static_cast<const IngressVideoOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressVideoOptions::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressVideoOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressVideoOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressVideoOptions.name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .livekit.TrackSource source = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_source() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_source(), target);
    }
  }

  switch (this_.encoding_options_case()) {
    case kPreset: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          3, this_._internal_preset(), target);
      break;
    }
    case kOptions: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.encoding_options_.options_, this_._impl_.encoding_options_.options_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressVideoOptions)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressVideoOptions::ByteSizeLong(const MessageLite& base) {
  const IngressVideoOptions& this_ = static_cast<const IngressVideoOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressVideoOptions::ByteSizeLong() const {
  const IngressVideoOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressVideoOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // .livekit.TrackSource source = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_source() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_source());
      }
    }
  }
  switch (this_.encoding_options_case()) {
    // .livekit.IngressVideoEncodingPreset preset = 3;
    case kPreset: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_preset());
      break;
    }
    // .livekit.IngressVideoEncodingOptions options = 4;
    case kOptions: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.encoding_options_.options_);
      break;
    }
    case ENCODING_OPTIONS_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressVideoOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressVideoOptions*>(&to_msg);
  auto& from = static_cast<const IngressVideoOptions&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressVideoOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_source() != 0) {
        _this->_impl_.source_ = from._impl_.source_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_encoding_options();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPreset: {
        _this->_impl_.encoding_options_.preset_ = from._impl_.encoding_options_.preset_;
        break;
      }
      case kOptions: {
        if (oneof_needs_init) {
          _this->_impl_.encoding_options_.options_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.encoding_options_.options_);
        } else {
          _this->_impl_.encoding_options_.options_->MergeFrom(*from._impl_.encoding_options_.options_);
        }
        break;
      }
      case ENCODING_OPTIONS_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressVideoOptions::CopyFrom(const IngressVideoOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressVideoOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressVideoOptions::InternalSwap(IngressVideoOptions* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.source_, other->_impl_.source_);
  swap(_impl_.encoding_options_, other->_impl_.encoding_options_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata IngressVideoOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressAudioEncodingOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressAudioEncodingOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_._has_bits_);
};

IngressAudioEncodingOptions::IngressAudioEncodingOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressAudioEncodingOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressAudioEncodingOptions)
}
IngressAudioEncodingOptions::IngressAudioEncodingOptions(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const IngressAudioEncodingOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressAudioEncodingOptions_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE IngressAudioEncodingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void IngressAudioEncodingOptions::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_codec_),
           0,
           offsetof(Impl_, channels_) -
               offsetof(Impl_, audio_codec_) +
               sizeof(Impl_::channels_));
}
IngressAudioEncodingOptions::~IngressAudioEncodingOptions() {
  // @@protoc_insertion_point(destructor:livekit.IngressAudioEncodingOptions)
  SharedDtor(*this);
}
inline void IngressAudioEncodingOptions::SharedDtor(MessageLite& self) {
  IngressAudioEncodingOptions& this_ = static_cast<IngressAudioEncodingOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL IngressAudioEncodingOptions::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressAudioEncodingOptions(arena);
}
constexpr auto IngressAudioEncodingOptions::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(IngressAudioEncodingOptions),
                                            alignof(IngressAudioEncodingOptions));
}
constexpr auto IngressAudioEncodingOptions::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressAudioEncodingOptions_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressAudioEncodingOptions::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressAudioEncodingOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressAudioEncodingOptions::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressAudioEncodingOptions>(), &IngressAudioEncodingOptions::ByteSizeLong,
              &IngressAudioEncodingOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_._cached_size_),
          false,
      },
      &IngressAudioEncodingOptions::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressAudioEncodingOptions_class_data_ =
            IngressAudioEncodingOptions::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressAudioEncodingOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressAudioEncodingOptions_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressAudioEncodingOptions_class_data_.tc_table);
  return IngressAudioEncodingOptions_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
IngressAudioEncodingOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    IngressAudioEncodingOptions_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressAudioEncodingOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 channels = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressAudioEncodingOptions, _impl_.channels_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.channels_)}},
    // .livekit.AudioCodec audio_codec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressAudioEncodingOptions, _impl_.audio_codec_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.audio_codec_)}},
    // uint32 bitrate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressAudioEncodingOptions, _impl_.bitrate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.bitrate_)}},
    // bool disable_dtx = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IngressAudioEncodingOptions, _impl_.disable_dtx_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.disable_dtx_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.AudioCodec audio_codec = 1;
    {PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.audio_codec_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // uint32 bitrate = 2;
    {PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.bitrate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool disable_dtx = 3;
    {PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.disable_dtx_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 channels = 4;
    {PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.channels_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void IngressAudioEncodingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressAudioEncodingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.audio_codec_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.channels_) -
        reinterpret_cast<char*>(&_impl_.audio_codec_)) + sizeof(_impl_.channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressAudioEncodingOptions::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressAudioEncodingOptions& this_ = static_cast<const IngressAudioEncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressAudioEncodingOptions::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressAudioEncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressAudioEncodingOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.AudioCodec audio_codec = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_audio_codec() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_audio_codec(), target);
    }
  }

  // uint32 bitrate = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_bitrate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_bitrate(), target);
    }
  }

  // bool disable_dtx = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_disable_dtx() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this_._internal_disable_dtx(), target);
    }
  }

  // uint32 channels = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_channels() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_channels(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressAudioEncodingOptions)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressAudioEncodingOptions::ByteSizeLong(const MessageLite& base) {
  const IngressAudioEncodingOptions& this_ = static_cast<const IngressAudioEncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressAudioEncodingOptions::ByteSizeLong() const {
  const IngressAudioEncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressAudioEncodingOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .livekit.AudioCodec audio_codec = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_audio_codec() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_audio_codec());
      }
    }
    // uint32 bitrate = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_bitrate());
      }
    }
    // bool disable_dtx = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_disable_dtx() != 0) {
        total_size += 2;
      }
    }
    // uint32 channels = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_channels() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_channels());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressAudioEncodingOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressAudioEncodingOptions*>(&to_msg);
  auto& from = static_cast<const IngressAudioEncodingOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressAudioEncodingOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_audio_codec() != 0) {
        _this->_impl_.audio_codec_ = from._impl_.audio_codec_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_bitrate() != 0) {
        _this->_impl_.bitrate_ = from._impl_.bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_disable_dtx() != 0) {
        _this->_impl_.disable_dtx_ = from._impl_.disable_dtx_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_channels() != 0) {
        _this->_impl_.channels_ = from._impl_.channels_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressAudioEncodingOptions::CopyFrom(const IngressAudioEncodingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressAudioEncodingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressAudioEncodingOptions::InternalSwap(IngressAudioEncodingOptions* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.channels_)
      + sizeof(IngressAudioEncodingOptions::_impl_.channels_)
      - PROTOBUF_FIELD_OFFSET(IngressAudioEncodingOptions, _impl_.audio_codec_)>(
          reinterpret_cast<char*>(&_impl_.audio_codec_),
          reinterpret_cast<char*>(&other->_impl_.audio_codec_));
}

::google::protobuf::Metadata IngressAudioEncodingOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressVideoEncodingOptions::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressVideoEncodingOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_._has_bits_);
};

void IngressVideoEncodingOptions::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
IngressVideoEncodingOptions::IngressVideoEncodingOptions(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressVideoEncodingOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressVideoEncodingOptions)
}
PROTOBUF_NDEBUG_INLINE IngressVideoEncodingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::IngressVideoEncodingOptions& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        layers_{visibility, arena, from.layers_} {}

IngressVideoEncodingOptions::IngressVideoEncodingOptions(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IngressVideoEncodingOptions& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressVideoEncodingOptions_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IngressVideoEncodingOptions* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, frame_rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, frame_rate_),
           offsetof(Impl_, video_codec_) -
               offsetof(Impl_, frame_rate_) +
               sizeof(Impl_::video_codec_));

  // @@protoc_insertion_point(copy_constructor:livekit.IngressVideoEncodingOptions)
}
PROTOBUF_NDEBUG_INLINE IngressVideoEncodingOptions::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        layers_{visibility, arena} {}

inline void IngressVideoEncodingOptions::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, frame_rate_),
           0,
           offsetof(Impl_, video_codec_) -
               offsetof(Impl_, frame_rate_) +
               sizeof(Impl_::video_codec_));
}
IngressVideoEncodingOptions::~IngressVideoEncodingOptions() {
  // @@protoc_insertion_point(destructor:livekit.IngressVideoEncodingOptions)
  SharedDtor(*this);
}
inline void IngressVideoEncodingOptions::SharedDtor(MessageLite& self) {
  IngressVideoEncodingOptions& this_ = static_cast<IngressVideoEncodingOptions&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL IngressVideoEncodingOptions::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressVideoEncodingOptions(arena);
}
constexpr auto IngressVideoEncodingOptions::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.layers_) +
          decltype(IngressVideoEncodingOptions::_impl_.layers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IngressVideoEncodingOptions), alignof(IngressVideoEncodingOptions), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IngressVideoEncodingOptions::PlacementNew_,
                                 sizeof(IngressVideoEncodingOptions),
                                 alignof(IngressVideoEncodingOptions));
  }
}
constexpr auto IngressVideoEncodingOptions::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressVideoEncodingOptions_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressVideoEncodingOptions::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressVideoEncodingOptions>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressVideoEncodingOptions::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressVideoEncodingOptions>(), &IngressVideoEncodingOptions::ByteSizeLong,
              &IngressVideoEncodingOptions::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_._cached_size_),
          false,
      },
      &IngressVideoEncodingOptions::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressVideoEncodingOptions_class_data_ =
            IngressVideoEncodingOptions::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressVideoEncodingOptions::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressVideoEncodingOptions_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressVideoEncodingOptions_class_data_.tc_table);
  return IngressVideoEncodingOptions_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
IngressVideoEncodingOptions::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IngressVideoEncodingOptions_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressVideoEncodingOptions>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.VideoCodec video_codec = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressVideoEncodingOptions, _impl_.video_codec_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.video_codec_)}},
    // double frame_rate = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.frame_rate_)}},
    // repeated .livekit.VideoLayer layers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.layers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.VideoCodec video_codec = 1;
    {PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.video_codec_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // double frame_rate = 2;
    {PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.frame_rate_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated .livekit.VideoLayer layers = 3;
    {PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.layers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::VideoLayer>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void IngressVideoEncodingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressVideoEncodingOptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.layers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.frame_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.video_codec_) -
        reinterpret_cast<char*>(&_impl_.frame_rate_)) + sizeof(_impl_.video_codec_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressVideoEncodingOptions::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressVideoEncodingOptions& this_ = static_cast<const IngressVideoEncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressVideoEncodingOptions::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressVideoEncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressVideoEncodingOptions)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.VideoCodec video_codec = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_video_codec() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_video_codec(), target);
    }
  }

  // double frame_rate = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_frame_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_frame_rate(), target);
    }
  }

  // repeated .livekit.VideoLayer layers = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_layers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_layers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressVideoEncodingOptions)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressVideoEncodingOptions::ByteSizeLong(const MessageLite& base) {
  const IngressVideoEncodingOptions& this_ = static_cast<const IngressVideoEncodingOptions&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressVideoEncodingOptions::ByteSizeLong() const {
  const IngressVideoEncodingOptions& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressVideoEncodingOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.VideoLayer layers = 3;
    {
      total_size += 1UL * this_._internal_layers_size();
      for (const auto& msg : this_._internal_layers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // double frame_rate = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_frame_rate()) != 0) {
        total_size += 9;
      }
    }
    // .livekit.VideoCodec video_codec = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_video_codec() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_video_codec());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressVideoEncodingOptions::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressVideoEncodingOptions*>(&to_msg);
  auto& from = static_cast<const IngressVideoEncodingOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressVideoEncodingOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_layers()->MergeFrom(
      from._internal_layers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_frame_rate()) != 0) {
        _this->_impl_.frame_rate_ = from._impl_.frame_rate_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_video_codec() != 0) {
        _this->_impl_.video_codec_ = from._impl_.video_codec_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressVideoEncodingOptions::CopyFrom(const IngressVideoEncodingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressVideoEncodingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressVideoEncodingOptions::InternalSwap(IngressVideoEncodingOptions* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.layers_.InternalSwap(&other->_impl_.layers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.video_codec_)
      + sizeof(IngressVideoEncodingOptions::_impl_.video_codec_)
      - PROTOBUF_FIELD_OFFSET(IngressVideoEncodingOptions, _impl_.frame_rate_)>(
          reinterpret_cast<char*>(&_impl_.frame_rate_),
          reinterpret_cast<char*>(&other->_impl_.frame_rate_));
}

::google::protobuf::Metadata IngressVideoEncodingOptions::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_._has_bits_);
};

IngressInfo::IngressInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressInfo)
}
PROTOBUF_NDEBUG_INLINE IngressInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::IngressInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ingress_id_(arena, from.ingress_id_),
        name_(arena, from.name_),
        stream_key_(arena, from.stream_key_),
        url_(arena, from.url_),
        room_name_(arena, from.room_name_),
        participant_identity_(arena, from.participant_identity_),
        participant_name_(arena, from.participant_name_),
        participant_metadata_(arena, from.participant_metadata_) {}

IngressInfo::IngressInfo(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IngressInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressInfo_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IngressInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.video_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_)
                : nullptr;
  _impl_.state_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, input_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, input_type_),
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, input_type_) +
               sizeof(Impl_::enabled_));

  // @@protoc_insertion_point(copy_constructor:livekit.IngressInfo)
}
PROTOBUF_NDEBUG_INLINE IngressInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ingress_id_(arena),
        name_(arena),
        stream_key_(arena),
        url_(arena),
        room_name_(arena),
        participant_identity_(arena),
        participant_name_(arena),
        participant_metadata_(arena) {}

inline void IngressInfo::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::enabled_));
}
IngressInfo::~IngressInfo() {
  // @@protoc_insertion_point(destructor:livekit.IngressInfo)
  SharedDtor(*this);
}
inline void IngressInfo::SharedDtor(MessageLite& self) {
  IngressInfo& this_ = static_cast<IngressInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ingress_id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.stream_key_.Destroy();
  this_._impl_.url_.Destroy();
  this_._impl_.room_name_.Destroy();
  this_._impl_.participant_identity_.Destroy();
  this_._impl_.participant_name_.Destroy();
  this_._impl_.participant_metadata_.Destroy();
  delete this_._impl_.audio_;
  delete this_._impl_.video_;
  delete this_._impl_.state_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL IngressInfo::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressInfo(arena);
}
constexpr auto IngressInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IngressInfo),
                                            alignof(IngressInfo));
}
constexpr auto IngressInfo::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressInfo_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressInfo::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressInfo::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressInfo>(), &IngressInfo::ByteSizeLong,
              &IngressInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_._cached_size_),
          false,
      },
      &IngressInfo::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressInfo_class_data_ =
            IngressInfo::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressInfo_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressInfo_class_data_.tc_table);
  return IngressInfo_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 3, 136, 2>
IngressInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IngressInfo_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bool enabled = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.enabled_)}},
    // string ingress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.ingress_id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.name_)}},
    // string stream_key = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.stream_key_)}},
    // string url = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.url_)}},
    // .livekit.IngressInput input_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressInfo, _impl_.input_type_), 11>(),
     {40, 11, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.input_type_)}},
    // .livekit.IngressAudioOptions audio = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 8, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.audio_)}},
    // .livekit.IngressVideoOptions video = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 9, 1, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.video_)}},
    // string room_name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 4, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.room_name_)}},
    // string participant_identity = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 5, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_identity_)}},
    // string participant_name = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 6, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_name_)}},
    // bool reusable = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IngressInfo, _impl_.reusable_), 14>(),
     {88, 14, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.reusable_)}},
    // .livekit.IngressState state = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 10, 2, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.state_)}},
    // bool bypass_transcoding = 13 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IngressInfo, _impl_.bypass_transcoding_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.bypass_transcoding_)}},
    // string participant_metadata = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 7, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_metadata_)}},
    // optional bool enable_transcoding = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IngressInfo, _impl_.enable_transcoding_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.enable_transcoding_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ingress_id = 1;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.ingress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stream_key = 3;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.stream_key_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string url = 4;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.url_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.IngressInput input_type = 5;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.input_type_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .livekit.IngressAudioOptions audio = 6;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.audio_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.IngressVideoOptions video = 7;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.video_), _Internal::kHasBitsOffset + 9, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string room_name = 8;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.room_name_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_identity = 9;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_identity_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_name = 10;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_name_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool reusable = 11;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.reusable_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .livekit.IngressState state = 12;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.state_), _Internal::kHasBitsOffset + 10, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool bypass_transcoding = 13 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.bypass_transcoding_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string participant_metadata = 14;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.participant_metadata_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_transcoding = 15;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.enable_transcoding_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enabled = 16;
    {PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.enabled_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressAudioOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::IngressVideoOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::IngressState>()},
  }},
  {{
    "\23\12\4\12\3\0\0\0\11\24\20\0\0\0\24\0\0\0\0\0\0\0\0\0"
    "livekit.IngressInfo"
    "ingress_id"
    "name"
    "stream_key"
    "url"
    "room_name"
    "participant_identity"
    "participant_name"
    "participant_metadata"
  }},
};
PROTOBUF_NOINLINE void IngressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.ingress_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.stream_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.participant_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.participant_metadata_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000f800u) != 0) {
    ::memset(&_impl_.input_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.input_type_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressInfo::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressInfo& this_ = static_cast<const IngressInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressInfo::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ingress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_ingress_id().empty()) {
      const std::string& _s = this_._internal_ingress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.ingress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string stream_key = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_stream_key().empty()) {
      const std::string& _s = this_._internal_stream_key();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.stream_key");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string url = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_url().empty()) {
      const std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.url");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // .livekit.IngressInput input_type = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_input_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          5, this_._internal_input_type(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.IngressAudioOptions audio = 6;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .livekit.IngressVideoOptions video = 7;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.video_, this_._impl_.video_->GetCachedSize(), target,
        stream);
  }

  // string room_name = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.room_name");
      target = stream->WriteStringMaybeAliased(8, _s, target);
    }
  }

  // string participant_identity = 9;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.participant_identity");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // string participant_name = 10;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (!this_._internal_participant_name().empty()) {
      const std::string& _s = this_._internal_participant_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.participant_name");
      target = stream->WriteStringMaybeAliased(10, _s, target);
    }
  }

  // bool reusable = 11;
  if ((cached_has_bits & 0x00004000u) != 0) {
    if (this_._internal_reusable() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          11, this_._internal_reusable(), target);
    }
  }

  // .livekit.IngressState state = 12;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.state_, this_._impl_.state_->GetCachedSize(), target,
        stream);
  }

  // bool bypass_transcoding = 13 [deprecated = true];
  if ((cached_has_bits & 0x00001000u) != 0) {
    if (this_._internal_bypass_transcoding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          13, this_._internal_bypass_transcoding(), target);
    }
  }

  // string participant_metadata = 14;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (!this_._internal_participant_metadata().empty()) {
      const std::string& _s = this_._internal_participant_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressInfo.participant_metadata");
      target = stream->WriteStringMaybeAliased(14, _s, target);
    }
  }

  // optional bool enable_transcoding = 15;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_enable_transcoding(), target);
  }

  // optional bool enabled = 16;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_enabled(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressInfo)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressInfo::ByteSizeLong(const MessageLite& base) {
  const IngressInfo& this_ = static_cast<const IngressInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressInfo::ByteSizeLong() const {
  const IngressInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00008000u & cached_has_bits) * 3;
  total_size += static_cast<bool>(0x00002000u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string ingress_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_ingress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ingress_id());
      }
    }
    // string name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string stream_key = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_stream_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_stream_key());
      }
    }
    // string url = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
    // string room_name = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string participant_identity = 9;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // string participant_name = 10;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_participant_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_name());
      }
    }
    // string participant_metadata = 14;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!this_._internal_participant_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_metadata());
      }
    }
  }
  if ((cached_has_bits & 0x00005f00u) != 0) {
    // .livekit.IngressAudioOptions audio = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .livekit.IngressVideoOptions video = 7;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.video_);
    }
    // .livekit.IngressState state = 12;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_);
    }
    // .livekit.IngressInput input_type = 5;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_input_type() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_input_type());
      }
    }
    // bool bypass_transcoding = 13 [deprecated = true];
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_bypass_transcoding() != 0) {
        total_size += 2;
      }
    }
    // bool reusable = 11;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_reusable() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressInfo*>(&to_msg);
  auto& from = static_cast<const IngressInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_ingress_id().empty()) {
        _this->_internal_set_ingress_id(from._internal_ingress_id());
      } else {
        if (_this->_impl_.ingress_id_.IsDefault()) {
          _this->_internal_set_ingress_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_stream_key().empty()) {
        _this->_internal_set_stream_key(from._internal_stream_key());
      } else {
        if (_this->_impl_.stream_key_.IsDefault()) {
          _this->_internal_set_stream_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_participant_name().empty()) {
        _this->_internal_set_participant_name(from._internal_participant_name());
      } else {
        if (_this->_impl_.participant_name_.IsDefault()) {
          _this->_internal_set_participant_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!from._internal_participant_metadata().empty()) {
        _this->_internal_set_participant_metadata(from._internal_participant_metadata());
      } else {
        if (_this->_impl_.participant_metadata_.IsDefault()) {
          _this->_internal_set_participant_metadata("");
        }
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.video_ != nullptr);
      if (_this->_impl_.video_ == nullptr) {
        _this->_impl_.video_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_);
      } else {
        _this->_impl_.video_->MergeFrom(*from._impl_.video_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.state_ != nullptr);
      if (_this->_impl_.state_ == nullptr) {
        _this->_impl_.state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_);
      } else {
        _this->_impl_.state_->MergeFrom(*from._impl_.state_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_input_type() != 0) {
        _this->_impl_.input_type_ = from._impl_.input_type_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_bypass_transcoding() != 0) {
        _this->_impl_.bypass_transcoding_ = from._impl_.bypass_transcoding_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.enable_transcoding_ = from._impl_.enable_transcoding_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_reusable() != 0) {
        _this->_impl_.reusable_ = from._impl_.reusable_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressInfo::CopyFrom(const IngressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressInfo::InternalSwap(IngressInfo* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ingress_id_, &other->_impl_.ingress_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stream_key_, &other->_impl_.stream_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_name_, &other->_impl_.participant_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_metadata_, &other->_impl_.participant_metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.enabled_)
      + sizeof(IngressInfo::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(IngressInfo, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata IngressInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IngressState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IngressState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IngressState, _impl_._has_bits_);
};

void IngressState::clear_tracks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracks_.Clear();
}
IngressState::IngressState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.IngressState)
}
PROTOBUF_NDEBUG_INLINE IngressState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::IngressState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tracks_{visibility, arena, from.tracks_},
        error_(arena, from.error_),
        room_id_(arena, from.room_id_),
        resource_id_(arena, from.resource_id_) {}

IngressState::IngressState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const IngressState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, IngressState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IngressState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.video_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_)
                : nullptr;
  _impl_.audio_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, started_at_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, started_at_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, started_at_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:livekit.IngressState)
}
PROTOBUF_NDEBUG_INLINE IngressState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        tracks_{visibility, arena},
        error_(arena),
        room_id_(arena),
        resource_id_(arena) {}

inline void IngressState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, video_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, video_) +
               sizeof(Impl_::status_));
}
IngressState::~IngressState() {
  // @@protoc_insertion_point(destructor:livekit.IngressState)
  SharedDtor(*this);
}
inline void IngressState::SharedDtor(MessageLite& self) {
  IngressState& this_ = static_cast<IngressState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_.Destroy();
  this_._impl_.room_id_.Destroy();
  this_._impl_.resource_id_.Destroy();
  delete this_._impl_.video_;
  delete this_._impl_.audio_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL IngressState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) IngressState(arena);
}
constexpr auto IngressState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IngressState, _impl_.tracks_) +
          decltype(IngressState::_impl_.tracks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(IngressState), alignof(IngressState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IngressState::PlacementNew_,
                                 sizeof(IngressState),
                                 alignof(IngressState));
  }
}
constexpr auto IngressState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_IngressState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &IngressState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<IngressState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &IngressState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<IngressState>(), &IngressState::ByteSizeLong,
              &IngressState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(IngressState, _impl_._cached_size_),
          false,
      },
      &IngressState::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        IngressState_class_data_ =
            IngressState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL IngressState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&IngressState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(IngressState_class_data_.tc_table);
  return IngressState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 60, 2>
IngressState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IngressState, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    IngressState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::IngressState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .livekit.IngressState.Status status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IngressState, _impl_.status_), 8>(),
     {8, 8, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.status_)}},
    // string error = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.error_)}},
    // .livekit.InputVideoState video = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 3, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.video_)}},
    // .livekit.InputAudioState audio = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 4, 1, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.audio_)}},
    // string room_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.room_id_)}},
    // repeated .livekit.TrackInfo tracks = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.tracks_)}},
    // int64 started_at = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IngressState, _impl_.started_at_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.started_at_)}},
    // int64 ended_at = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IngressState, _impl_.ended_at_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.ended_at_)}},
    // string resource_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.resource_id_)}},
    // int64 updated_at = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(IngressState, _impl_.updated_at_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(IngressState, _impl_.updated_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .livekit.IngressState.Status status = 1;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.status_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string error = 2;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.error_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.InputVideoState video = 3;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.video_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.InputAudioState audio = 4;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.audio_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string room_id = 5;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.room_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .livekit.TrackInfo tracks = 6;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.tracks_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 started_at = 7;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.started_at_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 ended_at = 8;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.ended_at_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // string resource_id = 9;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.resource_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 updated_at = 10;
    {PROTOBUF_FIELD_OFFSET(IngressState, _impl_.updated_at_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::InputVideoState>()},
      {::_pbi::TcParser::GetTable<::livekit::InputAudioState>()},
      {::_pbi::TcParser::GetTable<::livekit::TrackInfo>()},
  }},
  {{
    "\24\0\5\0\0\7\0\0\0\13\0\0\0\0\0\0"
    "livekit.IngressState"
    "error"
    "room_id"
    "resource_id"
  }},
};
PROTOBUF_NOINLINE void IngressState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.IngressState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.room_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.resource_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.started_at_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.updated_at_) -
        reinterpret_cast<char*>(&_impl_.started_at_)) + sizeof(_impl_.updated_at_));
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL IngressState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const IngressState& this_ = static_cast<const IngressState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL IngressState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const IngressState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.IngressState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .livekit.IngressState.Status status = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_status(), target);
    }
  }

  // string error = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_error().empty()) {
      const std::string& _s = this_._internal_error();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressState.error");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.InputVideoState video = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.video_, this_._impl_.video_->GetCachedSize(), target,
        stream);
  }

  // .livekit.InputAudioState audio = 4;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // string room_id = 5;
  if ((cached_has_bits & 0x00000002u) != 0) {
    if (!this_._internal_room_id().empty()) {
      const std::string& _s = this_._internal_room_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressState.room_id");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // repeated .livekit.TrackInfo tracks = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_tracks_size());
       i < n; i++) {
    const auto& repfield = this_._internal_tracks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int64 started_at = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (this_._internal_started_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<7>(
              stream, this_._internal_started_at(), target);
    }
  }

  // int64 ended_at = 8;
  if ((cached_has_bits & 0x00000040u) != 0) {
    if (this_._internal_ended_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<8>(
              stream, this_._internal_ended_at(), target);
    }
  }

  // string resource_id = 9;
  if ((cached_has_bits & 0x00000004u) != 0) {
    if (!this_._internal_resource_id().empty()) {
      const std::string& _s = this_._internal_resource_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.IngressState.resource_id");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // int64 updated_at = 10;
  if ((cached_has_bits & 0x00000080u) != 0) {
    if (this_._internal_updated_at() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<10>(
              stream, this_._internal_updated_at(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.IngressState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t IngressState::ByteSizeLong(const MessageLite& base) {
  const IngressState& this_ = static_cast<const IngressState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t IngressState::ByteSizeLong() const {
  const IngressState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.IngressState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.TrackInfo tracks = 6;
    {
      total_size += 1UL * this_._internal_tracks_size();
      for (const auto& msg : this_._internal_tracks()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string error = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_error().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_error());
      }
    }
    // string room_id = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_room_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_id());
      }
    }
    // string resource_id = 9;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_resource_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_resource_id());
      }
    }
    // .livekit.InputVideoState video = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.video_);
    }
    // .livekit.InputAudioState audio = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // int64 started_at = 7;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_started_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_started_at());
      }
    }
    // int64 ended_at = 8;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_ended_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_ended_at());
      }
    }
    // int64 updated_at = 10;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_updated_at() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_updated_at());
      }
    }
  }
   {
    // .livekit.IngressState.Status status = 1;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void IngressState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IngressState*>(&to_msg);
  auto& from = static_cast<const IngressState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.IngressState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tracks()->MergeFrom(
      from._internal_tracks());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_error().empty()) {
        _this->_internal_set_error(from._internal_error());
      } else {
        if (_this->_impl_.error_.IsDefault()) {
          _this->_internal_set_error("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_room_id().empty()) {
        _this->_internal_set_room_id(from._internal_room_id());
      } else {
        if (_this->_impl_.room_id_.IsDefault()) {
          _this->_internal_set_room_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_resource_id().empty()) {
        _this->_internal_set_resource_id(from._internal_resource_id());
      } else {
        if (_this->_impl_.resource_id_.IsDefault()) {
          _this->_internal_set_resource_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.video_ != nullptr);
      if (_this->_impl_.video_ == nullptr) {
        _this->_impl_.video_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_);
      } else {
        _this->_impl_.video_->MergeFrom(*from._impl_.video_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_started_at() != 0) {
        _this->_impl_.started_at_ = from._impl_.started_at_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_ended_at() != 0) {
        _this->_impl_.ended_at_ = from._impl_.ended_at_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_updated_at() != 0) {
        _this->_impl_.updated_at_ = from._impl_.updated_at_;
      }
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    if (from._internal_status() != 0) {
      _this->_impl_.status_ = from._impl_.status_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IngressState::CopyFrom(const IngressState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.IngressState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IngressState::InternalSwap(IngressState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tracks_.InternalSwap(&other->_impl_.tracks_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, &other->_impl_.error_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_id_, &other->_impl_.room_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resource_id_, &other->_impl_.resource_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IngressState, _impl_.status_)
      + sizeof(IngressState::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(IngressState, _impl_.video_)>(
          reinterpret_cast<char*>(&_impl_.video_),
          reinterpret_cast<char*>(&other->_impl_.video_));
}

::google::protobuf::Metadata IngressState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InputVideoState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InputVideoState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_._has_bits_);
};

InputVideoState::InputVideoState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InputVideoState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.InputVideoState)
}
PROTOBUF_NDEBUG_INLINE InputVideoState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::InputVideoState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mime_type_(arena, from.mime_type_) {}

InputVideoState::InputVideoState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const InputVideoState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InputVideoState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InputVideoState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_bitrate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, average_bitrate_),
           offsetof(Impl_, height_) -
               offsetof(Impl_, average_bitrate_) +
               sizeof(Impl_::height_));

  // @@protoc_insertion_point(copy_constructor:livekit.InputVideoState)
}
PROTOBUF_NDEBUG_INLINE InputVideoState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mime_type_(arena) {}

inline void InputVideoState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_bitrate_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, average_bitrate_) +
               sizeof(Impl_::height_));
}
InputVideoState::~InputVideoState() {
  // @@protoc_insertion_point(destructor:livekit.InputVideoState)
  SharedDtor(*this);
}
inline void InputVideoState::SharedDtor(MessageLite& self) {
  InputVideoState& this_ = static_cast<InputVideoState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mime_type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL InputVideoState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) InputVideoState(arena);
}
constexpr auto InputVideoState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InputVideoState),
                                            alignof(InputVideoState));
}
constexpr auto InputVideoState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_InputVideoState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &InputVideoState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<InputVideoState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &InputVideoState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<InputVideoState>(), &InputVideoState::ByteSizeLong,
              &InputVideoState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_._cached_size_),
          false,
      },
      &InputVideoState::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        InputVideoState_class_data_ =
            InputVideoState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL InputVideoState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&InputVideoState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(InputVideoState_class_data_.tc_table);
  return InputVideoState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 41, 2>
InputVideoState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    InputVideoState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::InputVideoState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string mime_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.mime_type_)}},
    // uint32 average_bitrate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputVideoState, _impl_.average_bitrate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.average_bitrate_)}},
    // uint32 width = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputVideoState, _impl_.width_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.width_)}},
    // uint32 height = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputVideoState, _impl_.height_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.height_)}},
    // double framerate = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 3, 0, PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.framerate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string mime_type = 1;
    {PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.mime_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 average_bitrate = 2;
    {PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.average_bitrate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 width = 3;
    {PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.width_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 height = 4;
    {PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.height_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // double framerate = 5;
    {PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.framerate_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\27\11\0\0\0\0\0\0"
    "livekit.InputVideoState"
    "mime_type"
  }},
};
PROTOBUF_NOINLINE void InputVideoState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.InputVideoState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.mime_type_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.average_bitrate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.average_bitrate_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL InputVideoState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const InputVideoState& this_ = static_cast<const InputVideoState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL InputVideoState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const InputVideoState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.InputVideoState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mime_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_mime_type().empty()) {
      const std::string& _s = this_._internal_mime_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.InputVideoState.mime_type");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // uint32 average_bitrate = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_average_bitrate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_average_bitrate(), target);
    }
  }

  // uint32 width = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_width() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_width(), target);
    }
  }

  // uint32 height = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_height() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_height(), target);
    }
  }

  // double framerate = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_framerate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_framerate(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.InputVideoState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t InputVideoState::ByteSizeLong(const MessageLite& base) {
  const InputVideoState& this_ = static_cast<const InputVideoState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t InputVideoState::ByteSizeLong() const {
  const InputVideoState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.InputVideoState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string mime_type = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_mime_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime_type());
      }
    }
    // uint32 average_bitrate = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_average_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_average_bitrate());
      }
    }
    // uint32 width = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_width() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_width());
      }
    }
    // double framerate = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_framerate()) != 0) {
        total_size += 9;
      }
    }
    // uint32 height = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_height() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_height());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void InputVideoState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InputVideoState*>(&to_msg);
  auto& from = static_cast<const InputVideoState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.InputVideoState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_mime_type().empty()) {
        _this->_internal_set_mime_type(from._internal_mime_type());
      } else {
        if (_this->_impl_.mime_type_.IsDefault()) {
          _this->_internal_set_mime_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_average_bitrate() != 0) {
        _this->_impl_.average_bitrate_ = from._impl_.average_bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_width() != 0) {
        _this->_impl_.width_ = from._impl_.width_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_framerate()) != 0) {
        _this->_impl_.framerate_ = from._impl_.framerate_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_height() != 0) {
        _this->_impl_.height_ = from._impl_.height_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InputVideoState::CopyFrom(const InputVideoState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.InputVideoState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InputVideoState::InternalSwap(InputVideoState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.height_)
      + sizeof(InputVideoState::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(InputVideoState, _impl_.average_bitrate_)>(
          reinterpret_cast<char*>(&_impl_.average_bitrate_),
          reinterpret_cast<char*>(&other->_impl_.average_bitrate_));
}

::google::protobuf::Metadata InputVideoState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InputAudioState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InputAudioState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_._has_bits_);
};

InputAudioState::InputAudioState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InputAudioState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.InputAudioState)
}
PROTOBUF_NDEBUG_INLINE InputAudioState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::InputAudioState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mime_type_(arena, from.mime_type_) {}

InputAudioState::InputAudioState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const InputAudioState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, InputAudioState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InputAudioState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_bitrate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, average_bitrate_),
           offsetof(Impl_, sample_rate_) -
               offsetof(Impl_, average_bitrate_) +
               sizeof(Impl_::sample_rate_));

  // @@protoc_insertion_point(copy_constructor:livekit.InputAudioState)
}
PROTOBUF_NDEBUG_INLINE InputAudioState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        mime_type_(arena) {}

inline void InputAudioState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_bitrate_),
           0,
           offsetof(Impl_, sample_rate_) -
               offsetof(Impl_, average_bitrate_) +
               sizeof(Impl_::sample_rate_));
}
InputAudioState::~InputAudioState() {
  // @@protoc_insertion_point(destructor:livekit.InputAudioState)
  SharedDtor(*this);
}
inline void InputAudioState::SharedDtor(MessageLite& self) {
  InputAudioState& this_ = static_cast<InputAudioState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.mime_type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL InputAudioState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) InputAudioState(arena);
}
constexpr auto InputAudioState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InputAudioState),
                                            alignof(InputAudioState));
}
constexpr auto InputAudioState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_InputAudioState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &InputAudioState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<InputAudioState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &InputAudioState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<InputAudioState>(), &InputAudioState::ByteSizeLong,
              &InputAudioState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_._cached_size_),
          false,
      },
      &InputAudioState::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        InputAudioState_class_data_ =
            InputAudioState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL InputAudioState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&InputAudioState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(InputAudioState_class_data_.tc_table);
  return InputAudioState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 41, 2>
InputAudioState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    InputAudioState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::InputAudioState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 sample_rate = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputAudioState, _impl_.sample_rate_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.sample_rate_)}},
    // string mime_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.mime_type_)}},
    // uint32 average_bitrate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputAudioState, _impl_.average_bitrate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.average_bitrate_)}},
    // uint32 channels = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InputAudioState, _impl_.channels_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.channels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mime_type = 1;
    {PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.mime_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 average_bitrate = 2;
    {PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.average_bitrate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 channels = 3;
    {PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.channels_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 sample_rate = 4;
    {PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.sample_rate_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\27\11\0\0\0\0\0\0"
    "livekit.InputAudioState"
    "mime_type"
  }},
};
PROTOBUF_NOINLINE void InputAudioState::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.InputAudioState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.mime_type_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.average_bitrate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sample_rate_) -
        reinterpret_cast<char*>(&_impl_.average_bitrate_)) + sizeof(_impl_.sample_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL InputAudioState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const InputAudioState& this_ = static_cast<const InputAudioState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL InputAudioState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const InputAudioState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.InputAudioState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mime_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_mime_type().empty()) {
      const std::string& _s = this_._internal_mime_type();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.InputAudioState.mime_type");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // uint32 average_bitrate = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_average_bitrate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_average_bitrate(), target);
    }
  }

  // uint32 channels = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_channels() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_channels(), target);
    }
  }

  // uint32 sample_rate = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_sample_rate() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_sample_rate(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.InputAudioState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t InputAudioState::ByteSizeLong(const MessageLite& base) {
  const InputAudioState& this_ = static_cast<const InputAudioState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t InputAudioState::ByteSizeLong() const {
  const InputAudioState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.InputAudioState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string mime_type = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_mime_type().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_mime_type());
      }
    }
    // uint32 average_bitrate = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_average_bitrate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_average_bitrate());
      }
    }
    // uint32 channels = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_channels() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_channels());
      }
    }
    // uint32 sample_rate = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_sample_rate() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_sample_rate());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void InputAudioState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InputAudioState*>(&to_msg);
  auto& from = static_cast<const InputAudioState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.InputAudioState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_mime_type().empty()) {
        _this->_internal_set_mime_type(from._internal_mime_type());
      } else {
        if (_this->_impl_.mime_type_.IsDefault()) {
          _this->_internal_set_mime_type("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_average_bitrate() != 0) {
        _this->_impl_.average_bitrate_ = from._impl_.average_bitrate_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_channels() != 0) {
        _this->_impl_.channels_ = from._impl_.channels_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_sample_rate() != 0) {
        _this->_impl_.sample_rate_ = from._impl_.sample_rate_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InputAudioState::CopyFrom(const InputAudioState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.InputAudioState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InputAudioState::InternalSwap(InputAudioState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mime_type_, &other->_impl_.mime_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.sample_rate_)
      + sizeof(InputAudioState::_impl_.sample_rate_)
      - PROTOBUF_FIELD_OFFSET(InputAudioState, _impl_.average_bitrate_)>(
          reinterpret_cast<char*>(&_impl_.average_bitrate_),
          reinterpret_cast<char*>(&other->_impl_.average_bitrate_));
}

::google::protobuf::Metadata InputAudioState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateIngressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateIngressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_._has_bits_);
};

UpdateIngressRequest::UpdateIngressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.UpdateIngressRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::UpdateIngressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ingress_id_(arena, from.ingress_id_),
        name_(arena, from.name_),
        room_name_(arena, from.room_name_),
        participant_identity_(arena, from.participant_identity_),
        participant_name_(arena, from.participant_name_),
        participant_metadata_(arena, from.participant_metadata_) {}

UpdateIngressRequest::UpdateIngressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const UpdateIngressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, UpdateIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateIngressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_)
                : nullptr;
  _impl_.video_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bypass_transcoding_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, bypass_transcoding_),
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, bypass_transcoding_) +
               sizeof(Impl_::enabled_));

  // @@protoc_insertion_point(copy_constructor:livekit.UpdateIngressRequest)
}
PROTOBUF_NDEBUG_INLINE UpdateIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ingress_id_(arena),
        name_(arena),
        room_name_(arena),
        participant_identity_(arena),
        participant_name_(arena),
        participant_metadata_(arena) {}

inline void UpdateIngressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_),
           0,
           offsetof(Impl_, enabled_) -
               offsetof(Impl_, audio_) +
               sizeof(Impl_::enabled_));
}
UpdateIngressRequest::~UpdateIngressRequest() {
  // @@protoc_insertion_point(destructor:livekit.UpdateIngressRequest)
  SharedDtor(*this);
}
inline void UpdateIngressRequest::SharedDtor(MessageLite& self) {
  UpdateIngressRequest& this_ = static_cast<UpdateIngressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ingress_id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.room_name_.Destroy();
  this_._impl_.participant_identity_.Destroy();
  this_._impl_.participant_name_.Destroy();
  this_._impl_.participant_metadata_.Destroy();
  delete this_._impl_.audio_;
  delete this_._impl_.video_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL UpdateIngressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) UpdateIngressRequest(arena);
}
constexpr auto UpdateIngressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UpdateIngressRequest),
                                            alignof(UpdateIngressRequest));
}
constexpr auto UpdateIngressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_UpdateIngressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &UpdateIngressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<UpdateIngressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &UpdateIngressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<UpdateIngressRequest>(), &UpdateIngressRequest::ByteSizeLong,
              &UpdateIngressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_._cached_size_),
          false,
      },
      &UpdateIngressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        UpdateIngressRequest_class_data_ =
            UpdateIngressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL UpdateIngressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&UpdateIngressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(UpdateIngressRequest_class_data_.tc_table);
  return UpdateIngressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 2, 124, 2>
UpdateIngressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    UpdateIngressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::UpdateIngressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string ingress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.ingress_id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.name_)}},
    // string room_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.room_name_)}},
    // string participant_identity = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_identity_)}},
    // string participant_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_name_)}},
    // .livekit.IngressAudioOptions audio = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 6, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.audio_)}},
    // .livekit.IngressVideoOptions video = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 7, 1, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.video_)}},
    // optional bool bypass_transcoding = 8 [deprecated = true];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateIngressRequest, _impl_.bypass_transcoding_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.bypass_transcoding_)}},
    // string participant_metadata = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 5, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_metadata_)}},
    // optional bool enable_transcoding = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateIngressRequest, _impl_.enable_transcoding_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.enable_transcoding_)}},
    // optional bool enabled = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UpdateIngressRequest, _impl_.enabled_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.enabled_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string ingress_id = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.ingress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string room_name = 3;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_identity = 4;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_identity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string participant_name = 5;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_name_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .livekit.IngressAudioOptions audio = 6;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.audio_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .livekit.IngressVideoOptions video = 7;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.video_), _Internal::kHasBitsOffset + 7, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool bypass_transcoding = 8 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.bypass_transcoding_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string participant_metadata = 9;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.participant_metadata_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bool enable_transcoding = 10;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.enable_transcoding_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool enabled = 11;
    {PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.enabled_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressAudioOptions>()},
      {::_pbi::TcParser::GetTable<::livekit::IngressVideoOptions>()},
  }},
  {{
    "\34\12\4\11\24\20\0\0\0\24\0\0\0\0\0\0"
    "livekit.UpdateIngressRequest"
    "ingress_id"
    "name"
    "room_name"
    "participant_identity"
    "participant_name"
    "participant_metadata"
  }},
};
PROTOBUF_NOINLINE void UpdateIngressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.UpdateIngressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.ingress_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.participant_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.participant_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.participant_metadata_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.video_ != nullptr);
      _impl_.video_->Clear();
    }
  }
  ::memset(&_impl_.bypass_transcoding_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.enabled_) -
      reinterpret_cast<char*>(&_impl_.bypass_transcoding_)) + sizeof(_impl_.enabled_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL UpdateIngressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const UpdateIngressRequest& this_ = static_cast<const UpdateIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL UpdateIngressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const UpdateIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.UpdateIngressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ingress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_ingress_id().empty()) {
      const std::string& _s = this_._internal_ingress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.ingress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_name().empty()) {
      const std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string room_name = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.room_name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string participant_identity = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_participant_identity().empty()) {
      const std::string& _s = this_._internal_participant_identity();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.participant_identity");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // string participant_name = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_participant_name().empty()) {
      const std::string& _s = this_._internal_participant_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.participant_name");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .livekit.IngressAudioOptions audio = 6;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.audio_, this_._impl_.audio_->GetCachedSize(), target,
        stream);
  }

  // .livekit.IngressVideoOptions video = 7;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.video_, this_._impl_.video_->GetCachedSize(), target,
        stream);
  }

  // optional bool bypass_transcoding = 8 [deprecated = true];
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this_._internal_bypass_transcoding(), target);
  }

  // string participant_metadata = 9;
  if ((cached_has_bits & 0x00000020u) != 0) {
    if (!this_._internal_participant_metadata().empty()) {
      const std::string& _s = this_._internal_participant_metadata();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.UpdateIngressRequest.participant_metadata");
      target = stream->WriteStringMaybeAliased(9, _s, target);
    }
  }

  // optional bool enable_transcoding = 10;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_enable_transcoding(), target);
  }

  // optional bool enabled = 11;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this_._internal_enabled(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.UpdateIngressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t UpdateIngressRequest::ByteSizeLong(const MessageLite& base) {
  const UpdateIngressRequest& this_ = static_cast<const UpdateIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t UpdateIngressRequest::ByteSizeLong() const {
  const UpdateIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.UpdateIngressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000700u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string ingress_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_ingress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ingress_id());
      }
    }
    // string name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string room_name = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string participant_identity = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_participant_identity().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_identity());
      }
    }
    // string participant_name = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_participant_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_name());
      }
    }
    // string participant_metadata = 9;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_participant_metadata().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_participant_metadata());
      }
    }
    // .livekit.IngressAudioOptions audio = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.audio_);
    }
    // .livekit.IngressVideoOptions video = 7;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.video_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void UpdateIngressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateIngressRequest*>(&to_msg);
  auto& from = static_cast<const UpdateIngressRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.UpdateIngressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_ingress_id().empty()) {
        _this->_internal_set_ingress_id(from._internal_ingress_id());
      } else {
        if (_this->_impl_.ingress_id_.IsDefault()) {
          _this->_internal_set_ingress_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_participant_identity().empty()) {
        _this->_internal_set_participant_identity(from._internal_participant_identity());
      } else {
        if (_this->_impl_.participant_identity_.IsDefault()) {
          _this->_internal_set_participant_identity("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_participant_name().empty()) {
        _this->_internal_set_participant_name(from._internal_participant_name());
      } else {
        if (_this->_impl_.participant_name_.IsDefault()) {
          _this->_internal_set_participant_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_participant_metadata().empty()) {
        _this->_internal_set_participant_metadata(from._internal_participant_metadata());
      } else {
        if (_this->_impl_.participant_metadata_.IsDefault()) {
          _this->_internal_set_participant_metadata("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.video_ != nullptr);
      if (_this->_impl_.video_ == nullptr) {
        _this->_impl_.video_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.video_);
      } else {
        _this->_impl_.video_->MergeFrom(*from._impl_.video_);
      }
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.bypass_transcoding_ = from._impl_.bypass_transcoding_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.enable_transcoding_ = from._impl_.enable_transcoding_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateIngressRequest::CopyFrom(const UpdateIngressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.UpdateIngressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateIngressRequest::InternalSwap(UpdateIngressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ingress_id_, &other->_impl_.ingress_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_identity_, &other->_impl_.participant_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_name_, &other->_impl_.participant_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.participant_metadata_, &other->_impl_.participant_metadata_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.enabled_)
      + sizeof(UpdateIngressRequest::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(UpdateIngressRequest, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::google::protobuf::Metadata UpdateIngressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListIngressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ListIngressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_._has_bits_);
};

ListIngressRequest::ListIngressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ListIngressRequest)
}
PROTOBUF_NDEBUG_INLINE ListIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ListIngressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        room_name_(arena, from.room_name_),
        ingress_id_(arena, from.ingress_id_) {}

ListIngressRequest::ListIngressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ListIngressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListIngressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ListIngressRequest)
}
PROTOBUF_NDEBUG_INLINE ListIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        room_name_(arena),
        ingress_id_(arena) {}

inline void ListIngressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ListIngressRequest::~ListIngressRequest() {
  // @@protoc_insertion_point(destructor:livekit.ListIngressRequest)
  SharedDtor(*this);
}
inline void ListIngressRequest::SharedDtor(MessageLite& self) {
  ListIngressRequest& this_ = static_cast<ListIngressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.ingress_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ListIngressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ListIngressRequest(arena);
}
constexpr auto ListIngressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ListIngressRequest),
                                            alignof(ListIngressRequest));
}
constexpr auto ListIngressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ListIngressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ListIngressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ListIngressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ListIngressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ListIngressRequest>(), &ListIngressRequest::ByteSizeLong,
              &ListIngressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_._cached_size_),
          false,
      },
      &ListIngressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ListIngressRequest_class_data_ =
            ListIngressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ListIngressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ListIngressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ListIngressRequest_class_data_.tc_table);
  return ListIngressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 54, 2>
ListIngressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ListIngressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ListIngressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string ingress_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_.ingress_id_)}},
    // string room_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_.room_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string room_name = 1;
    {PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_.room_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ingress_id = 2;
    {PROTOBUF_FIELD_OFFSET(ListIngressRequest, _impl_.ingress_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\11\12\0\0\0\0\0"
    "livekit.ListIngressRequest"
    "room_name"
    "ingress_id"
  }},
};
PROTOBUF_NOINLINE void ListIngressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListIngressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.room_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.ingress_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ListIngressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ListIngressRequest& this_ = static_cast<const ListIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ListIngressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ListIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListIngressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string room_name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_room_name().empty()) {
      const std::string& _s = this_._internal_room_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ListIngressRequest.room_name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string ingress_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_ingress_id().empty()) {
      const std::string& _s = this_._internal_ingress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.ListIngressRequest.ingress_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListIngressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ListIngressRequest::ByteSizeLong(const MessageLite& base) {
  const ListIngressRequest& this_ = static_cast<const ListIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ListIngressRequest::ByteSizeLong() const {
  const ListIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ListIngressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string room_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_room_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_room_name());
      }
    }
    // string ingress_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_ingress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ingress_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ListIngressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListIngressRequest*>(&to_msg);
  auto& from = static_cast<const ListIngressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListIngressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_room_name().empty()) {
        _this->_internal_set_room_name(from._internal_room_name());
      } else {
        if (_this->_impl_.room_name_.IsDefault()) {
          _this->_internal_set_room_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_ingress_id().empty()) {
        _this->_internal_set_ingress_id(from._internal_ingress_id());
      } else {
        if (_this->_impl_.ingress_id_.IsDefault()) {
          _this->_internal_set_ingress_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListIngressRequest::CopyFrom(const ListIngressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListIngressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListIngressRequest::InternalSwap(ListIngressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ingress_id_, &other->_impl_.ingress_id_, arena);
}

::google::protobuf::Metadata ListIngressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListIngressResponse::_Internal {
 public:
};

ListIngressResponse::ListIngressResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListIngressResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.ListIngressResponse)
}
PROTOBUF_NDEBUG_INLINE ListIngressResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::ListIngressResponse& from_msg)
      : items_{visibility, arena, from.items_},
        _cached_size_{0} {}

ListIngressResponse::ListIngressResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ListIngressResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ListIngressResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListIngressResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.ListIngressResponse)
}
PROTOBUF_NDEBUG_INLINE ListIngressResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : items_{visibility, arena},
        _cached_size_{0} {}

inline void ListIngressResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ListIngressResponse::~ListIngressResponse() {
  // @@protoc_insertion_point(destructor:livekit.ListIngressResponse)
  SharedDtor(*this);
}
inline void ListIngressResponse::SharedDtor(MessageLite& self) {
  ListIngressResponse& this_ = static_cast<ListIngressResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ListIngressResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ListIngressResponse(arena);
}
constexpr auto ListIngressResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ListIngressResponse, _impl_.items_) +
          decltype(ListIngressResponse::_impl_.items_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ListIngressResponse), alignof(ListIngressResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ListIngressResponse::PlacementNew_,
                                 sizeof(ListIngressResponse),
                                 alignof(ListIngressResponse));
  }
}
constexpr auto ListIngressResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ListIngressResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ListIngressResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ListIngressResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ListIngressResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ListIngressResponse>(), &ListIngressResponse::ByteSizeLong,
              &ListIngressResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ListIngressResponse, _impl_._cached_size_),
          false,
      },
      &ListIngressResponse::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        ListIngressResponse_class_data_ =
            ListIngressResponse::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL ListIngressResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ListIngressResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ListIngressResponse_class_data_.tc_table);
  return ListIngressResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
ListIngressResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    ListIngressResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::ListIngressResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .livekit.IngressInfo items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ListIngressResponse, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .livekit.IngressInfo items = 1;
    {PROTOBUF_FIELD_OFFSET(ListIngressResponse, _impl_.items_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::livekit::IngressInfo>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void ListIngressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.ListIngressResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ListIngressResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ListIngressResponse& this_ = static_cast<const ListIngressResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ListIngressResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ListIngressResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.ListIngressResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .livekit.IngressInfo items = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_items_size());
       i < n; i++) {
    const auto& repfield = this_._internal_items().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.ListIngressResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ListIngressResponse::ByteSizeLong(const MessageLite& base) {
  const ListIngressResponse& this_ = static_cast<const ListIngressResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ListIngressResponse::ByteSizeLong() const {
  const ListIngressResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.ListIngressResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .livekit.IngressInfo items = 1;
    {
      total_size += 1UL * this_._internal_items_size();
      for (const auto& msg : this_._internal_items()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ListIngressResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListIngressResponse*>(&to_msg);
  auto& from = static_cast<const ListIngressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.ListIngressResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListIngressResponse::CopyFrom(const ListIngressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.ListIngressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListIngressResponse::InternalSwap(ListIngressResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::google::protobuf::Metadata ListIngressResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteIngressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<DeleteIngressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(DeleteIngressRequest, _impl_._has_bits_);
};

DeleteIngressRequest::DeleteIngressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeleteIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:livekit.DeleteIngressRequest)
}
PROTOBUF_NDEBUG_INLINE DeleteIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::livekit::DeleteIngressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ingress_id_(arena, from.ingress_id_) {}

DeleteIngressRequest::DeleteIngressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const DeleteIngressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DeleteIngressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteIngressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:livekit.DeleteIngressRequest)
}
PROTOBUF_NDEBUG_INLINE DeleteIngressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ingress_id_(arena) {}

inline void DeleteIngressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DeleteIngressRequest::~DeleteIngressRequest() {
  // @@protoc_insertion_point(destructor:livekit.DeleteIngressRequest)
  SharedDtor(*this);
}
inline void DeleteIngressRequest::SharedDtor(MessageLite& self) {
  DeleteIngressRequest& this_ = static_cast<DeleteIngressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ingress_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DeleteIngressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DeleteIngressRequest(arena);
}
constexpr auto DeleteIngressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeleteIngressRequest),
                                            alignof(DeleteIngressRequest));
}
constexpr auto DeleteIngressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DeleteIngressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &DeleteIngressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DeleteIngressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DeleteIngressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DeleteIngressRequest>(), &DeleteIngressRequest::ByteSizeLong,
              &DeleteIngressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DeleteIngressRequest, _impl_._cached_size_),
          false,
      },
      &DeleteIngressRequest::kDescriptorMethods,
      &descriptor_table_livekit_5fingress_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        DeleteIngressRequest_class_data_ =
            DeleteIngressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL DeleteIngressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DeleteIngressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DeleteIngressRequest_class_data_.tc_table);
  return DeleteIngressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 47, 2>
DeleteIngressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeleteIngressRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    DeleteIngressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::livekit::DeleteIngressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string ingress_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(DeleteIngressRequest, _impl_.ingress_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ingress_id = 1;
    {PROTOBUF_FIELD_OFFSET(DeleteIngressRequest, _impl_.ingress_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\12\0\0\0\0\0\0"
    "livekit.DeleteIngressRequest"
    "ingress_id"
  }},
};
PROTOBUF_NOINLINE void DeleteIngressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:livekit.DeleteIngressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.ingress_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DeleteIngressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DeleteIngressRequest& this_ = static_cast<const DeleteIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DeleteIngressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DeleteIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:livekit.DeleteIngressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ingress_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_ingress_id().empty()) {
      const std::string& _s = this_._internal_ingress_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "livekit.DeleteIngressRequest.ingress_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:livekit.DeleteIngressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DeleteIngressRequest::ByteSizeLong(const MessageLite& base) {
  const DeleteIngressRequest& this_ = static_cast<const DeleteIngressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t DeleteIngressRequest::ByteSizeLong() const {
  const DeleteIngressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:livekit.DeleteIngressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // string ingress_id = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_ingress_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_ingress_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void DeleteIngressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteIngressRequest*>(&to_msg);
  auto& from = static_cast<const DeleteIngressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:livekit.DeleteIngressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (!from._internal_ingress_id().empty()) {
      _this->_internal_set_ingress_id(from._internal_ingress_id());
    } else {
      if (_this->_impl_.ingress_id_.IsDefault()) {
        _this->_internal_set_ingress_id("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteIngressRequest::CopyFrom(const DeleteIngressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:livekit.DeleteIngressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeleteIngressRequest::InternalSwap(DeleteIngressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ingress_id_, &other->_impl_.ingress_id_, arena);
}

::google::protobuf::Metadata DeleteIngressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace livekit
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_livekit_5fingress_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
